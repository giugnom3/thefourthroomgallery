{"version":3,"sources":["../node_modules/three/build/three.core.js","../node_modules/react/index.js","../node_modules/three/build/three.module.js","../node_modules/object-assign/index.js","../node_modules/react-dom/index.js","../node_modules/nipplejs/dist/nipplejs.js","../node_modules/three/examples/jsm/loaders/FontLoader.js","../node_modules/three/examples/jsm/geometries/TextGeometry.js","../node_modules/three/examples/jsm/controls/OrbitControls.js","../node_modules/react/cjs/react.production.min.js","../node_modules/react-dom/cjs/react-dom.production.min.js","../node_modules/scheduler/index.js","../node_modules/scheduler/cjs/scheduler.production.min.js"],"names":["__webpack_require__","d","__webpack_exports__","ACESFilmicToneMapping","AddEquation","AddOperation","AdditiveBlending","AgXToneMapping","AlphaFormat","AlwaysCompare","AlwaysDepth","AmbientLight","ArrayCamera","BackSide","BoxGeometry","BufferAttribute","BufferGeometry","ByteType","CineonToneMapping","ClampToEdgeWrapping","Color","ColorManagement","ConstantAlphaFactor","ConstantColorFactor","Controls","CubeReflectionMapping","CubeRefractionMapping","CubeTexture","CubeUVReflectionMapping","CullFaceBack","CullFaceFront","CullFaceNone","CustomBlending","CustomToneMapping","Data3DTexture","DataArrayTexture","DepthFormat","DepthStencilFormat","DepthTexture","DirectionalLight","DoubleSide","DstAlphaFactor","DstColorFactor","EqualCompare","EqualDepth","EquirectangularReflectionMapping","EquirectangularRefractionMapping","Euler","EventDispatcher","ExtrudeGeometry","FileLoader","FloatType","FrontSide","Frustum","GLSL3","GreaterCompare","GreaterDepth","GreaterEqualCompare","GreaterEqualDepth","Group","HalfFloatType","IntType","Layers","LessCompare","LessDepth","LessEqualCompare","LessEqualDepth","LinearFilter","LinearMipmapLinearFilter","LinearMipmapNearestFilter","LinearSRGBColorSpace","LinearToneMapping","LinearTransfer","Loader","MOUSE","MathUtils","Matrix3","Matrix4","MaxEquation","Mesh","MeshBasicMaterial","MeshDepthMaterial","MeshDistanceMaterial","MeshStandardMaterial","MinEquation","MirroredRepeatWrapping","MixOperation","MultiplyBlending","MultiplyOperation","NearestFilter","NearestMipmapLinearFilter","NearestMipmapNearestFilter","NeutralToneMapping","NeverCompare","NeverDepth","NoBlending","NoColorSpace","NoToneMapping","NormalBlending","NotEqualCompare","NotEqualDepth","ObjectSpaceNormalMap","OneFactor","OneMinusConstantAlphaFactor","OneMinusConstantColorFactor","OneMinusDstAlphaFactor","OneMinusDstColorFactor","OneMinusSrcAlphaFactor","OneMinusSrcColorFactor","OrthographicCamera","PCFShadowMap","PCFSoftShadowMap","PerspectiveCamera","Plane","PlaneGeometry","Quaternion","RAD2DEG","RED_GREEN_RGTC2_Format","RED_RGTC1_Format","REVISION","RGBADepthPacking","RGBAFormat","RGBAIntegerFormat","RGBA_ASTC_10x10_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_BPTC_Format","RGBA_ETC2_EAC_Format","RGBA_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGBFormat","RGB_BPTC_SIGNED_Format","RGB_BPTC_UNSIGNED_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGB_PVRTC_2BPPV1_Format","RGB_PVRTC_4BPPV1_Format","RGB_S3TC_DXT1_Format","RGFormat","RGIntegerFormat","Ray","Raycaster","RedFormat","RedIntegerFormat","ReinhardToneMapping","RepeatWrapping","ReverseSubtractEquation","SIGNED_RED_GREEN_RGTC2_Format","SIGNED_RED_RGTC1_Format","SRGBColorSpace","SRGBTransfer","Scene","ShaderMaterial","ShapePath","ShortType","Spherical","SpotLight","SpotLightHelper","SrcAlphaFactor","SrcAlphaSaturateFactor","SrcColorFactor","SubtractEquation","SubtractiveBlending","TOUCH","TangentSpaceNormalMap","Texture","TextureLoader","Uint16BufferAttribute","Uint32BufferAttribute","UniformsUtils","UnsignedByteType","UnsignedInt248Type","UnsignedInt5999Type","UnsignedIntType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShortType","VSMShadowMap","Vector2","Vector3","Vector4","WebGLCoordinateSystem","WebGLCubeRenderTarget","WebGLRenderTarget","WebXRController","ZeroFactor","arrayNeedsUint32","cloneUniforms","createCanvasElement","createElementNS","getByteLength","getUnlitUniformColorSpace","mergeUniforms","probeAsync","toNormalizedProjectionMatrix","toReversedProjectionMatrix","warnOnce","LEFT","MIDDLE","RIGHT","ROTATE","DOLLY","PAN","DOLLY_PAN","DOLLY_ROTATE","UVMapping","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","ZeroCurvatureEnding","ZeroSlopeEnding","WrapAroundEnding","BasicDepthPacking","KeepStencilOp","AlwaysStencilFunc","StaticDrawUsage","WebGPUCoordinateSystem","[object Object]","type","listener","undefined","this","_listeners","listeners","indexOf","push","listenerArray","index","splice","event","target","array","slice","i","l","length","call","_lut","_seed","DEG2RAD","Math","PI","generateUUID","d0","random","d1","d2","d3","toLowerCase","clamp","value","min","max","euclideanModulo","n","m","lerp","x","y","t","denormalize","constructor","Float32Array","Uint32Array","Uint16Array","Uint8Array","Int32Array","Int16Array","Int8Array","Error","normalize","round","mapLinear","a1","a2","b1","b2","inverseLerp","damp","lambda","dt","exp","pingpong","arguments","abs","smoothstep","smootherstep","randInt","low","high","floor","randFloat","randFloatSpread","range","seededRandom","s","imul","degToRad","degrees","radToDeg","radians","isPowerOfTwo","ceilPowerOfTwo","pow","ceil","log","LN2","floorPowerOfTwo","setQuaternionFromProperEuler","q","a","b","c","order","cos","sin","c2","s2","c13","s13","c1_3","s1_3","c3_1","s3_1","set","console","warn","prototype","isVector2","width","height","scalar","v","multiplyScalar","e","elements","minVal","maxVal","divideScalar","trunc","sqrt","atan2","denominator","lengthSq","theta","dot","acos","distanceToSquared","dx","dy","alpha","v1","v2","offset","attribute","getX","getY","center","angle","Symbol","iterator","n11","n12","n13","n21","n22","n23","n31","n32","n33","isMatrix3","te","me","xAxis","yAxis","zAxis","setFromMatrix3Column","multiplyMatrices","ae","be","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","f","g","h","t11","t12","t13","det","detInv","tmp","matrix4","setFromMatrix4","invert","transpose","r","tx","ty","sx","sy","rotation","cx","cy","premultiply","_m3","makeScale","makeRotation","makeTranslation","matrix","fromArray","Uint8ClampedArray","Float64Array","name","document","canvas","style","display","_cache","message","gl","sync","interval","Promise","resolve","reject","setTimeout","probe","clientWaitSync","SYNC_FLUSH_COMMANDS_BIT","WAIT_FAILED","TIMEOUT_EXPIRED","projectionMatrix","LINEAR_REC709_TO_XYZ","XYZ_TO_LINEAR_REC709","createColorManagement","enabled","workingColorSpace","spaces","convert","color","sourceColorSpace","targetColorSpace","transfer","SRGBToLinear","primaries","applyMatrix3","toXYZ","fromXYZ","LinearToSRGB","fromWorkingColorSpace","toWorkingColorSpace","getPrimaries","colorSpace","getTransfer","getLuminanceCoefficients","luminanceCoefficients","define","colorSpaces","Object","assign","_getMatrix","targetMatrix","copy","multiply","_getDrawingBufferColorSpace","outputColorSpaceConfig","drawingBufferColorSpace","_getUnpackColorSpace","workingColorSpaceConfig","unpackColorSpace","REC709_PRIMARIES","REC709_LUMINANCE_COEFFICIENTS","D65","whitePoint","_canvas","ImageUtils","image","test","src","HTMLCanvasElement","context","getContext","ImageData","putImageData","drawImage","toDataURL","HTMLImageElement","ImageBitmap","imageData","getImageData","data","_sourceId","Source","isSource","defineProperty","uuid","dataReady","version","needsUpdate","meta","isRootObject","images","output","url","Array","isArray","isDataTexture","serializeImage","getDataURL","from","_textureId","DEFAULT_IMAGE","mapping","DEFAULT_MAPPING","wrapS","wrapT","magFilter","minFilter","format","anisotropy","DEFAULT_ANISOTROPY","super","isTexture","source","mipmaps","channel","internalFormat","repeat","matrixAutoUpdate","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","userData","onUpdate","renderTarget","isRenderTargetTexture","isTextureArray","pmremVersion","setUvTransform","JSON","parse","stringify","textures","metadata","generator","toJSON","wrap","keys","dispatchEvent","uv","needsPMREMUpdate","z","w","isVector4","m11","m12","m13","m21","m22","m23","m31","m32","m33","xx","yy","zz","xy","xz","yz","getZ","getW","RenderTarget","options","isRenderTarget","depth","scissor","scissorTest","viewport","depthBuffer","stencilBuffer","resolveDepthBuffer","resolveStencilBuffer","depthTexture","samples","count","multiview","texture","clone","_depthTexture","current","il","dispose","isWebGLRenderTarget","isDataArrayTexture","wrapR","layerUpdates","Set","layerIndex","add","clear","isData3DTexture","isQuaternion","_x","_y","_z","_w","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","Number","EPSILON","len","tDir","_onChangeCallback","quaternion","euler","update","_order","c1","c3","s1","s3","axis","halfAngle","trace","vFrom","vTo","step","angleTo","slerp","conjugate","multiplyQuaternions","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","qb","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","qa","theta1","theta2","r1","r2","toArray","callback","isVector3","applyQuaternion","_quaternion$4","setFromEuler","setFromAxisAngle","vx","vy","vz","qx","qy","qz","qw","tz","camera","applyMatrix4","matrixWorldInverse","projectionMatrixInverse","matrixWorld","crossVectors","ax","ay","az","bx","by","bz","planeNormal","_vector$c","projectOnVector","sub","normal","dz","setFromSphericalCoords","radius","phi","sinPhiRadius","setFromCylindricalCoords","setFromMatrixColumn","sz","u","Box3","Infinity","isBox3","makeEmpty","expandByPoint","_vector$b","fromBufferAttribute","points","size","halfSize","object","precise","expandByObject","box","isEmpty","addVectors","subVectors","point","vector","addScalar","updateWorldMatrix","geometry","positionAttribute","getAttribute","isInstancedMesh","isMesh","getVertexPosition","boundingBox","computeBoundingBox","_box$4","union","children","sphere","clampPoint","plane","constant","triangle","getCenter","_center","_extents","_v0$2","_v1$7","_v2$4","_f0","_f1","_f2","axes","satForAxes","_triangleNormal","distanceTo","getSize","_points","setFromPoints","equals","_testAxis","v0","extents","j","p0","p1","p2","_box$3","_v1$6","_v2$3","Sphere","isSphere","optionalCenter","maxRadiusSq","radiusSum","intersectsSphere","distanceToPoint","deltaLengthSq","expandByScalar","getMaxScaleOnAxis","delta","addScaledVector","setLength","_vector$a","_segCenter","_segDir","_diff","_edge1","_edge2","_normal$1","origin","direction","ray","at","directionDistance","distanceSqToPoint","optionalPointOnRay","optionalPointOnSegment","segExtent","a01","b0","s0","sqrDist","extDet","invDet","tca","radius2","thc","t0","t1","distanceToPlane","distToPoint","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","isNaN","intersectBox","backfaceCulling","sign","DdN","DdQxE2","DdE1xQ","cross","QdN","transformDirection","n14","n24","n34","n41","n42","n43","n44","isMatrix4","scaleX","_v1$5","scaleY","scaleZ","af","bf","ce","cf","de","df","ac","ad","bc","bd","compose","_zero","_one","eye","up","a14","a24","a34","a41","a42","a43","a44","b14","b24","b34","b41","b42","b43","b44","t14","scaleXSq","scaleYSq","scaleZSq","yx","zx","zy","position","scale","x2","y2","z2","wx","wy","wz","determinant","_m1$2","invSX","invSY","invSZ","setFromRotationMatrix","left","right","top","bottom","near","far","coordinateSystem","p","zInv","_matrix$2","_quaternion$3","DEFAULT_ORDER","isEuler","asin","makeRotationFromQuaternion","newOrder","setFromQuaternion","mask","layer","layers","_object3DId","_v1$4","_q1","_m1$1","_target","_position$3","_scale$2","_quaternion$2","_xAxis","_yAxis","_zAxis","_addedEvent","_removedEvent","_childaddedEvent","child","_childremovedEvent","Object3D","isObject3D","parent","DEFAULT_UP","_onChange","defineProperties","configurable","enumerable","modelViewMatrix","normalMatrix","DEFAULT_MATRIX_AUTO_UPDATE","matrixWorldAutoUpdate","DEFAULT_MATRIX_WORLD_AUTO_UPDATE","matrixWorldNeedsUpdate","visible","castShadow","receiveShadow","frustumCulled","renderOrder","animations","customDepthMaterial","customDistanceMaterial","updateMatrix","decompose","rotateOnAxis","distance","translateOnAxis","setFromMatrixPosition","isCamera","isLight","lookAt","extractRotation","error","removeFromParent","remove","id","getObjectByProperty","result","getObjectsByProperty","traverse","traverseVisible","traverseAncestors","force","updateMatrixWorld","updateParents","updateChildren","geometries","materials","shapes","skeletons","nodes","serialize","library","element","instanceMatrix","instanceColor","isBatchedMesh","perObjectFrustumCulled","sortObjects","drawRanges","_drawRanges","reservedRanges","_reservedRanges","geometryInfo","_geometryInfo","map","info","boundingSphere","instanceInfo","_instanceInfo","availableInstanceIds","_availableInstanceIds","availableGeometryIds","_availableGeometryIds","nextIndexStart","_nextIndexStart","nextVertexStart","_nextVertexStart","geometryCount","_geometryCount","maxInstanceCount","_maxInstanceCount","maxVertexCount","_maxVertexCount","maxIndexCount","_maxIndexCount","geometryInitialized","_geometryInitialized","matricesTexture","_matricesTexture","indirectTexture","_indirectTexture","_colorsTexture","colorsTexture","isScene","background","isColor","environment","isLine","isPoints","parameters","shape","isSkinnedMesh","bindMode","bindMatrix","skeleton","material","uuids","animation","extractFromCache","cache","values","key","recursive","_v0$1","_v1$3","_v2$2","_v3$2","_vab","_vac","_vbc","_vap","_vbp","_vcp","_v40","_v41","_v42","Triangle","targetLengthSq","dot00","dot01","dot02","dot11","dot12","denom","invDenom","getBarycoord","p3","v3","setScalar","attr","i1","i2","i3","barycoord","i0","getNormal","setFromCoplanarPoints","getInterpolation","containsPoint","isFrontFacing","intersectsTriangle","d4","vc","d5","d6","vb","va","_colorKeywords","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","_hslA","_hslB","hue2rgb","setHex","setStyle","setRGB","hex","handleAlpha","string","parseFloat","exec","components","parseInt","setHSL","charAt","setColorName","copySRGBToLinear","copyLinearToSRGB","_color","getHex","toString","hue","saturation","lightness","toFixed","getHSL","color1","color2","NAMES","_materialId","Material","isMaterial","blending","side","vertexColors","opacity","transparent","alphaHash","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","blendColor","blendAlpha","depthFunc","depthTest","depthWrite","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","stencilWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","precision","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaToCoverage","premultipliedAlpha","forceSinglePass","allowOverride","toneMapped","_alphaTest","alphaTest","onBeforeCompile","newValue","currentValue","roughness","metalness","sheen","sheenColor","sheenRoughness","emissive","emissiveIntensity","specular","specularIntensity","specularColor","shininess","clearcoat","clearcoatRoughness","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","clearcoatNormalScale","dispersion","iridescence","iridescenceIOR","iridescenceThicknessRange","iridescenceMap","iridescenceThicknessMap","anisotropyRotation","anisotropyMap","matcap","alphaMap","lightMap","lightMapIntensity","aoMap","aoMapIntensity","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","specularMap","specularIntensityMap","specularColorMap","envMap","combine","envMapRotation","envMapIntensity","reflectivity","refractionRatio","gradientMap","transmission","transmissionMap","thickness","thicknessMap","attenuationDistance","attenuationColor","sizeAttenuation","linewidth","dashSize","gapSize","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","flatShading","fog","srcPlanes","dstPlanes","isMeshBasicMaterial","setValues","_vector$9","_vector2$1","_id$2","itemSize","normalized","TypeError","isBufferAttribute","usage","updateRanges","gpuType","start","index1","index2","setXY","setXYZ","applyNormalMatrix","component","onUploadCallback","Float32BufferAttribute","_id$1","_m1","_obj","_offset","_box$2","_boxMorphTargets","_vector$8","isBufferGeometry","indirect","attributes","morphAttributes","morphTargetsRelative","groups","drawRange","materialIndex","getNormalMatrix","tangent","computeBoundingSphere","makeRotationX","makeRotationY","makeRotationZ","negate","translate","setAttribute","morphAttributesPosition","isGLBufferAttribute","setFromBufferAttribute","morphAttribute","jl","normalAttribute","uvAttribute","hasAttribute","tangentAttribute","tan1","tan2","vA","vB","vC","uvA","uvB","uvC","sdir","tdir","handleTriangle","isFinite","group","tmp2","n2","handleVertex","setXYZW","pA","pB","pC","nA","nB","nC","cb","ab","normalizeNormals","normals","convertBufferAttribute","indices","array2","isInterleavedBufferAttribute","stride","geometry2","newAttribute","morphArray","addGroup","hasMorphAttributes","attributeArray","setIndex","_inverseMatrix$3","_ray$3","_sphere$6","_sphereHitAt","_vA$1","_vB$1","_vC$1","_tempA","_morphA","_intersectionPoint","_intersectionPointWorld","morphTargetDictionary","morphTargetInfluences","updateMorphTargets","ml","String","morphPosition","morphInfluences","influence","raycaster","intersects","recast","intersectSphere","intersectsBox","_computeIntersections","rayLocalSpace","intersection","uv1","groupMaterial","checkGeometryIntersection","faceIndex","face","intersect","intersectTriangle","checkIntersection$1","getInterpolatedAttribute","widthSegments","heightSegments","depthSegments","scope","vertices","uvs","numberOfVertices","groupStart","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","iy","ix","property","uniforms","merged","renderer","currentRenderTarget","getRenderTarget","outputColorSpace","isXRRenderTarget","merge","default_vertex","default_fragment","isShaderMaterial","defines","uniformsGroups","vertexShader","fragmentShader","lights","clipping","extensions","clipCullDistance","multiDraw","defaultAttributeValues","index0AttributeName","uniformsNeedUpdate","glslVersion","cloneUniformsGroups","Camera","getWorldDirection","_v3$1","_minTarget","_maxTarget","fov","aspect","isPerspectiveCamera","zoom","focus","view","filmGauge","filmOffset","updateProjectionMatrix","focalLength","vExtentSlope","getFilmHeight","atan","minTarget","maxTarget","getViewBounds","fullWidth","fullHeight","offsetX","offsetY","skew","getFilmWidth","makePerspective","CubeCamera","activeMipmapLevel","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","cameras","concat","scene","updateCoordinateSystem","currentActiveCubeFace","getActiveCubeFace","currentActiveMipmapLevel","getActiveMipmapLevel","currentXrEnabled","xr","setRenderTarget","render","isCubeTexture","isWebGLCubeRenderTarget","shader","tEquirect","mesh","currentMinFilter","stencil","isGroup","_moveEvent","_targetRay","_grip","_hand","joints","inputState","pinching","hasLinearVelocity","linearVelocity","hasAngularVelocity","angularVelocity","inputSource","hand","inputjoint","_getHandJoint","frame","referenceSpace","inputPose","gripPose","handPose","targetRay","grip","session","visibilityState","jointPose","getJointPose","joint","transform","jointRadius","indexTip","thumbTip","distanceToPinch","threshold","handedness","gripSpace","getPose","targetRaySpace","jointName","backgroundBlurriness","backgroundIntensity","backgroundRotation","environmentIntensity","environmentRotation","overrideMaterial","__THREE_DEVTOOLS__","CustomEvent","detail","_vector1","_vector2","_normalMatrix","isPlane","setFromNormalAndCoplanarPoint","inverseNormalLength","line","startSign","endSign","end","intersectsPlane","optionalNormalMatrix","referencePoint","coplanarPoint","_sphere$3","_vector$6","p4","p5","planes","frustum","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","setComponents","sprite","negRadius","LineBasicMaterial","isLineBasicMaterial","linecap","linejoin","_vStart","_vEnd","_inverseMatrix$1","_ray$1","_sphere$1","_intersectPointOnRay","_intersectPointOnSegment","Line","lineDistances","params","localThreshold","localThresholdSq","isLineSegments","checkIntersection","isLineLoop","thresholdSq","distanceSqToSegment","_start","_end","LineSegments","isDepthTexture","compareFunction","Curve","arcLengthDivisions","cacheArcLengths","optionalTarget","getUtoTmapping","getPoint","divisions","getPointAt","lengths","getLengths","last","sum","arcLengths","targetArcLength","comparison","lengthBefore","t2","pt1","pt2","getTangent","segments","closed","tangents","binormals","vec","mat","getTangentAt","MAX_VALUE","makeRotationAxis","json","EllipseCurve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","isEllipseCurve","twoPi","deltaAngle","samePoints","fromJSON","CubicPoly","c0","init","initCatmullRom","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","calc","px","py","pz","CatmullRom","QuadraticBezier","k","QuadraticBezierP0","QuadraticBezierP1","QuadraticBezierP2","CubicBezier","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","CubicBezierCurve","isCubicBezierCurve","LineCurve","isLineCurve","QuadraticBezierCurve","isQuadraticBezierCurve","QuadraticBezierCurve3","isQuadraticBezierCurve3","SplineCurve","isSplineCurve","intPoint","weight","Curves","freeze","__proto__","ArcCurve","aRadius","isArcCurve","CatmullRomCurve3","curveType","isCatmullRomCurve3","CubicBezierCurve3","isCubicBezierCurve3","LineCurve3","isLineCurve3","CurvePath","curves","autoClose","curve","startPoint","endPoint","lineType","getLength","curveLengths","getCurveLengths","diff","segmentLength","lens","cacheLengths","sums","resolution","pts","getPoints","Path","currentPoint","moveTo","lineTo","aCPx","aCPy","aCP1x","aCP1y","aCP2x","aCP2y","npts","absarc","absellipse","firstPoint","lastPoint","Shape","holes","holesPts","getPointsHoles","hole","earcut","holeIndices","dim","hasHoles","outerLen","outerNode","linkedList","triangles","next","prev","minX","minY","invSize","queue","list","steiner","getLeftmost","sort","compareXYSlope","eliminateHole","eliminateHoles","maxX","maxY","earcutLinked","clockwise","signedArea","insertNode","removeNode","filterPoints","again","area","ear","pass","zOrder","prevZ","nextZ","numMerges","inSize","tail","pSize","qSize","sortLinked","indexCurve","stop","isEarHashed","isEar","cureLocalIntersections","splitEarcut","pointInTriangleExceptFirst","minZ","maxZ","locallyInside","isValidDiagonal","splitPolygon","bridge","hx","hy","mx","my","tanMin","pointInTriangle","sectorContainsSector","findHoleBridge","bridgeReverse","leftmost","intersectsPolygon","inside","middleInside","q1","q2","o1","o2","o3","o4","onSegment","num","createNode","an","bp","Earcut","ShapeUtils","contour","faces","removeDupEndPts","addContour","holeIndex","forEach","triangulate","pop","verticesArray","uvArray","addShape","placeholder","curveSegments","steps","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","extrudePath","uvgen","UVGenerator","WorldUVGenerator","extrudePts","splineTube","binormal","position2","extrudeByPath","getSpacedPoints","computeFrenetFrames","shapePoints","extractPoints","isClockWise","reverse","hl","ahole","mergeOverlappingPoints","prevPos","currentIndex","currentPos","distSq","scalingFactorSqrt","numHoles","scalePt2","pt","vlen","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","sf","v_trans_lensq","direction_eq","contourMovements","holesMovements","oneHoleMovements","verticesMovements","triangulateShape","contractedContourVertices","expandedHoleVertices","bs","vert","oneHoleVertices","flen","sidewalls","layeroffset","sl","slen1","slen2","f4","f3","addVertex","nextIndex","generateTopUV","addUV","generateSideWallUV","vector2","buildLidFaces","buildSideFaces","computeVertexNormals","toJSON$1","geometryShapes","indexA","indexB","indexC","a_x","a_y","b_x","b_y","c_x","c_y","indexD","a_z","b_z","c_z","d_x","d_y","d_z","width_half","height_half","segment_width","segment_height","isMeshStandardMaterial","STANDARD","isMeshDepthMaterial","depthPacking","isMeshDistanceMaterial","convertArray","BYTES_PER_ELEMENT","isTypedArray","ArrayBuffer","isView","DataView","Interpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","_cachedIndex","valueSize","settings","DefaultSettings_","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","copySampleValue_","t1global","mid","intervalChanged_","interpolate_","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","getSettings_","halfDt","o0","oP","oN","wP","wN","ppp","sP","sN","LinearInterpolant","offset1","offset0","weight1","weight0","DiscreteInterpolant","KeyframeTrack","times","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","track","trackType","ValueTypeName","getValueSize","factoryMethod","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","createInterpolant","timeOffset","timeScale","startTime","endTime","nKeys","to","valid","prevTime","currTime","smoothInterpolation","lastIndex","writeIndex","keep","time","offsetP","offsetN","readOffset","writeOffset","TypedKeyframeTrack","BooleanKeyframeTrack","ColorKeyframeTrack","NumberKeyframeTrack","QuaternionLinearInterpolant","slerpFlat","QuaternionKeyframeTrack","StringKeyframeTrack","VectorKeyframeTrack","Cache","files","file","get","LoadingManager","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","urlModifier","handlers","onStart","itemStart","itemEnd","itemError","resolveURL","setURLModifier","addHandler","regex","loader","removeHandler","getHandler","global","DefaultLoadingManager","manager","crossOrigin","withCredentials","path","resourcePath","requestHeader","load","DEFAULT_MATERIAL_NAME","loading","HttpError","response","mimeType","responseType","cached","req","Request","headers","Headers","credentials","fetch","then","status","ReadableStream","body","getReader","callbacks","reader","contentLength","total","lengthComputable","loaded","stream","controller","readData","read","_ref","done","close","byteLength","ProgressEvent","enqueue","Response","statusText","arrayBuffer","blob","text","DOMParser","parseFromString","label","decoder","TextDecoder","decode","catch","err","finally","ImageLoader","onImageLoad","removeEventListeners","onImageError","removeEventListener","addEventListener","setCrossOrigin","setPath","Light","intensity","groundColor","decay","penumbra","shadow","_projScreenMatrix$1","_lightPositionWorld$1","_lookTarget$1","LightShadow","bias","normalBias","blurSamples","mapSize","mapType","mapPass","autoUpdate","_frustum","_frameExtents","_viewportCount","_viewports","light","shadowCamera","shadowMatrix","setFromProjectionMatrix","viewportIndex","SpotLightShadow","isSpotLightShadow","updateMatrices","isSpotLight","power","isOrthographicCamera","scaleW","scaleH","makeOrthographic","DirectionalLightShadow","isDirectionalLightShadow","isDirectionalLight","isAmbientLight","isArrayCamera","isMultiViewCamera","_reservedRe","RegExp","_wordCharOrDot","replace","_trackRe","_supportedObjectNames","PropertyBinding","rootNode","parsedPath","parseTrackName","node","findNode","nodeName","getValue","_getValue_unbound","setValue","_setValue_unbound","root","isAnimationObjectGroup","Composite","trackName","matches","results","objectName","objectIndex","propertyName","propertyIndex","lastDot","lastIndexOf","substring","bone","getBoneByName","searchNodeSubtree","childNode","subTreeNode","buffer","targetObject","resolvedProperty","dest","targetArray","bind","sourceArray","_getValue_unavailable","_setValue_unavailable","bones","nodeProperty","versioning","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","bindingType","BindingType","Direct","ArrayElement","HasFromToArray","EntireArray","GetterByBindingType","SetterByBindingTypeAndVersioning","targetGroup","optionalParsedPath","_targetGroup","_bindings","subscribe_","firstValidIndex","nCachedObjects_","binding","bindings","unbind","_getValue_direct","_getValue_array","_getValue_arrayElement","_getValue_toArray","_setValue_direct","_setValue_direct_setNeedsUpdate","_setValue_direct_setMatrixWorldNeedsUpdate","_setValue_array","_setValue_array_setNeedsUpdate","_setValue_array_setMatrixWorldNeedsUpdate","_setValue_arrayElement","_setValue_arrayElement_setNeedsUpdate","_setValue_arrayElement_setMatrixWorldNeedsUpdate","_setValue_fromArray","_setValue_fromArray_setNeedsUpdate","_setValue_fromArray_setMatrixWorldNeedsUpdate","_matrix","LOD","Points","Sprite","coords","unproject","identity","ascSort","objects","propagate","raycast","other","setFromCartesianCoords","_vector$3","positions","cone","coneLength","coneWidth","subPaths","currentPath","quadraticCurveTo","bezierCurveTo","splineThru","isCCW","isPointInsidePolygon","inPolygon","polyLen","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","tmpPath","tmpShape","holesFirst","betterShapeHoles","newShapes","tmpPoints","tmpHoles","newShapeHoles","mainIdx","inSubpaths","toShapesNoHoles","ambiguous","toChange","sIdx","sLen","sho","hIdx","ho","hole_unassigned","s2Idx","domElement","state","mouseButtons","touches","ONE","TWO","disconnect","typeByteLength","getTextureTypeByteLength","revision","window","__THREE__","module","exports","WebGLRenderer","_three_core_js__WEBPACK_IMPORTED_MODULE_0__","WebGLAnimation","isAnimating","animationLoop","requestId","onAnimationFrame","requestAnimationFrame","cancelAnimationFrame","setAnimationLoop","setContext","WebGLAttributes","buffers","WeakMap","deleteBuffer","delete","bufferType","bytesPerElement","elementSize","createBuffer","bindBuffer","bufferData","FLOAT","isFloat16BufferAttribute","HALF_FLOAT","UNSIGNED_SHORT","SHORT","UNSIGNED_INT","INT","BYTE","UNSIGNED_BYTE","bufferSubData","mergeIndex","previousRange","clearUpdateRanges","updateBuffer","ShaderChunk","alphahash_fragment","alphahash_pars_fragment","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","alphatest_pars_fragment","aomap_fragment","aomap_pars_fragment","batching_pars_vertex","batching_vertex","begin_vertex","beginnormal_vertex","bsdfs","iridescence_fragment","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","common","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","colorspace_fragment","colorspace_pars_fragment","envmap_fragment","envmap_common_pars_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_physical_pars_fragment","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_pars_fragment","lights_lambert_fragment","lights_lambert_pars_fragment","lights_pars_begin","lights_toon_fragment","lights_toon_pars_fragment","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphinstance_vertex","morphcolor_vertex","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_fragment_begin","normal_fragment_maps","normal_pars_fragment","normal_pars_vertex","normal_vertex","normalmap_pars_fragment","clearcoat_normal_fragment_begin","clearcoat_normal_fragment_maps","clearcoat_pars_fragment","iridescence_pars_fragment","opaque_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","transmission_fragment","transmission_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","worldpos_vertex","background_vert","background_frag","backgroundCube_vert","backgroundCube_frag","cube_vert","cube_frag","depth_vert","depth_frag","distanceRGBA_vert","distanceRGBA_frag","equirect_vert","equirect_frag","linedashed_vert","linedashed_frag","meshbasic_vert","meshbasic_frag","meshlambert_vert","meshlambert_frag","meshmatcap_vert","meshmatcap_frag","meshnormal_vert","meshnormal_frag","meshphong_vert","meshphong_frag","meshphysical_vert","meshphysical_frag","meshtoon_vert","meshtoon_frag","points_vert","points_frag","shadow_vert","shadow_frag","sprite_vert","sprite_frag","UniformsLib","diffuse","mapTransform","alphaMapTransform","specularmap","specularMapTransform","envmap","flipEnvMap","ior","aomap","aoMapTransform","lightmap","lightMapTransform","bumpmap","bumpMapTransform","normalmap","normalMapTransform","displacementmap","displacementMapTransform","emissivemap","emissiveMapTransform","metalnessmap","metalnessMapTransform","roughnessmap","roughnessMapTransform","gradientmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","lightProbe","directionalLights","properties","directionalLightShadows","shadowIntensity","shadowBias","shadowNormalBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","coneCos","penumbraCos","spotLightShadows","spotLightMap","spotShadowMap","spotLightMatrix","pointLights","pointLightShadows","shadowCameraNear","shadowCameraFar","pointShadowMap","pointShadowMatrix","hemisphereLights","skyColor","rectAreaLights","ltc_1","ltc_2","uvTransform","ShaderLib","basic","lambert","phong","standard","toon","dashed","totalSize","t2D","backgroundCube","cube","tCube","tFlip","equirect","distanceRGBA","referencePosition","nearDistance","farDistance","physical","clearcoatMapTransform","clearcoatNormalMapTransform","clearcoatRoughnessMapTransform","iridescenceMapTransform","iridescenceThicknessMinimum","iridescenceThicknessMaximum","iridescenceThicknessMapTransform","sheenColorMap","sheenColorMapTransform","sheenRoughnessMap","sheenRoughnessMapTransform","transmissionMapTransform","transmissionSamplerSize","transmissionSamplerMap","thicknessMapTransform","specularColorMapTransform","specularIntensityMapTransform","anisotropyVector","anisotropyMapTransform","_rgb","_e1$1","WebGLBackground","cubemaps","cubeuvmaps","clearColor","planeMesh","boxMesh","clearAlpha","currentBackground","currentBackgroundVersion","currentTonemapping","getBackground","setClear","getRGB","getClearColor","setClearColor","getClearAlpha","setClearAlpha","forceClear","environmentBlendMode","getEnvironmentBlendMode","autoClear","setTest","setMask","autoClearColor","autoClearDepth","autoClearStencil","addToRenderList","renderList","deleteAttribute","onBeforeRender","copyPosition","makeRotationFromEuler","toneMapping","enableAll","unshift","WebGLBindingStates","maxVertexAttributes","getParameter","MAX_VERTEX_ATTRIBS","bindingStates","defaultState","createBindingState","currentState","forceUpdate","bindVertexArrayObject","vao","bindVertexArray","deleteVertexArrayObject","deleteVertexArray","newAttributes","enabledAttributes","attributeDivisors","program","initAttributes","enableAttribute","enableAttributeAndDivisor","meshPerAttribute","enableVertexAttribArray","vertexAttribDivisor","disableUnusedAttributes","disableVertexAttribArray","vertexAttribPointer","integer","vertexAttribIPointer","reset","resetDefaultState","setup","updateBuffers","programMap","stateMap","createVertexArray","getBindingState","cachedAttributes","geometryAttributes","attributesNum","programAttributes","getAttributes","programAttribute","location","cachedAttribute","geometryAttribute","saveCache","ELEMENT_ARRAY_BUFFER","materialDefaultAttributeValues","isInstancedInterleavedBuffer","locationSize","ARRAY_BUFFER","isInstancedBufferAttribute","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","setupVertexAttributes","geometryId","programId","releaseStatesOfGeometry","releaseStatesOfProgram","WebGLBufferRenderer","mode","renderInstances","primcount","drawArraysInstanced","setMode","drawArrays","renderMultiDraw","starts","counts","drawCount","multiDrawArraysWEBGL","elementCount","renderMultiDrawInstances","extension","multiDrawArraysInstancedWEBGL","WebGLCapabilities","utils","maxAnisotropy","getMaxPrecision","getShaderPrecisionFormat","VERTEX_SHADER","HIGH_FLOAT","FRAGMENT_SHADER","MEDIUM_FLOAT","maxPrecision","logarithmicDepthBuffer","reverseDepthBuffer","has","maxTextures","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","isWebGL2","getMaxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","textureFormatReadable","textureFormat","IMPLEMENTATION_COLOR_READ_FORMAT","textureTypeReadable","textureType","halfFloatSupportedByExt","IMPLEMENTATION_COLOR_READ_TYPE","maxTextureSize","MAX_TEXTURE_SIZE","maxCubemapSize","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","maxVertexUniforms","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","vertexTextures","maxSamples","MAX_SAMPLES","WebGLClipping","globalState","numGlobalPlanes","localClippingEnabled","renderingShadows","viewNormalMatrix","uniform","projectPlanes","skipTransform","nPlanes","dstArray","flatSize","viewMatrix","i4","numPlanes","numIntersection","enableLocalClipping","beginShadows","endShadows","setGlobalState","setState","useCache","materialProperties","resetGlobalState","nGlobal","lGlobal","clippingState","WebGLCubeMaps","mapTextureMapping","onTextureDispose","cubemap","fromEquirectangularTexture","LOD_MIN","EXTRA_LOD_SIGMA","_flatCamera","_clearColor","_oldTarget","_oldActiveCubeFace","_oldActiveMipmapLevel","_oldXrEnabled","PHI","INV_PHI","_axisDirections","_origin","PMREMGenerator","_renderer","_pingPongRenderTarget","_lodMax","_cubeSize","_lodPlanes","_sizeLods","_sigmas","_blurMaterial","_cubemapMaterial","_equirectMaterial","_compileMaterial","sigma","_setSize","cubeUVRenderTarget","_allocateTargets","_sceneToCubeUV","_blur","_applyPMREM","_cleanup","equirectangular","_fromTexture","_getCubemapMaterial","_getEquirectMaterial","_dispose","cubeSize","log2","outputTarget","_setViewport","_textureToCubeUV","_createRenderTarget","sizeLods","lodPlanes","sigmas","lodMax","lod","totalLods","sizeLod","texelSize","cubeFaces","positionSize","uvSize","faceIndexSize","coordinates","fill","_createPlanes","weights","poleAxis","CUBEUV_TEXEL_WIDTH","CUBEUV_TEXEL_HEIGHT","CUBEUV_MAX_MIP","latitudinal","dTheta","mipInt","_getCommonVertexShader","_getBlurShader","tmpMesh","compile","cubeCamera","upSign","forwardSign","originalAutoClear","backgroundMaterial","backgroundBox","useSolidColor","col","lodIn","lodOut","pingPongRenderTarget","_halfBlur","targetIn","targetOut","sigmaRadians","blurMaterial","blurMesh","blurUniforms","pixels","radiansPerPixel","sigmaPixels","outputSize","WebGLCubeUVMaps","cubeUVmaps","pmremGenerator","cubemapUV","isEquirectMap","isCubeMap","currentPMREMVersion","fromEquirectangular","fromCubemap","isCubeTextureComplete","WebGLExtensions","getExtension","WebGLGeometries","wireframeAttributes","onGeometryDispose","isInstancedBufferGeometry","memory","updateWireframeAttribute","geometryIndex","geometryPosition","previousAttribute","getWireframeAttribute","currentAttribute","WebGLIndexedBufferRenderer","drawElementsInstanced","drawElements","multiDrawElementsWEBGL","multiDrawElementsInstancedWEBGL","WebGLInfo","calls","lines","programs","autoReset","instanceCount","TRIANGLES","LINES","LINE_STRIP","LINE_LOOP","POINTS","WebGLMorphtargets","capabilities","morphTextures","morph","objectInfluences","morphTargetsCount","entry","hasMorphPosition","hasMorphNormals","hasMorphColors","morphTargets","morphNormals","morphColors","vertexDataCount","vertexDataStride","morphTarget","morphNormal","morphColor","disposeTexture","morphTexture","getUniforms","morphInfluencesSum","morphBaseInfluence","WebGLObjects","updateMap","onInstancedMeshDispose","instancedMesh","buffergeometry","hasEventListener","emptyTexture","emptyShadowTexture","emptyArrayTexture","empty3dTexture","emptyCubeTexture","arrayCacheF32","arrayCacheI32","mat4array","mat3array","mat2array","flatten","nBlocks","blockSize","firstElem","arraysEqual","copyArray","allocTexUnits","allocateTextureUnit","setValueV1f","uniform1f","addr","setValueV2f","uniform2f","uniform2fv","setValueV3f","uniform3f","uniform3fv","setValueV4f","uniform4f","uniform4fv","setValueM2","uniformMatrix2fv","setValueM3","uniformMatrix3fv","setValueM4","uniformMatrix4fv","setValueV1i","uniform1i","setValueV2i","uniform2i","uniform2iv","setValueV3i","uniform3i","uniform3iv","setValueV4i","uniform4i","uniform4iv","setValueV1ui","uniform1ui","setValueV2ui","uniform2ui","uniform2uiv","setValueV3ui","uniform3ui","uniform3uiv","setValueV4ui","uniform4ui","uniform4uiv","setValueT1","unit","emptyTexture2D","SAMPLER_2D_SHADOW","setTexture2D","setValueT3D1","setTexture3D","setValueT6","setTextureCube","setValueT2DArray1","setTexture2DArray","setValueV1fArray","uniform1fv","setValueV2fArray","setValueV3fArray","setValueV4fArray","setValueM2Array","setValueM3Array","setValueM4Array","setValueV1iArray","uniform1iv","setValueV2iArray","setValueV3iArray","setValueV4iArray","setValueV1uiArray","uniform1uiv","setValueV2uiArray","setValueV3uiArray","setValueV4uiArray","setValueT1Array","units","setValueT3DArray","setValueT6Array","setValueT2DArrayArray","SingleUniform","activeInfo","getSingularSetter","PureArrayUniform","getPureArraySetter","StructuredUniform","seq","RePathPart","addUniform","container","uniformObject","parseUniform","pathLength","match","matchEnd","idIsIndex","subscript","WebGLUniforms","getProgramParameter","ACTIVE_UNIFORMS","getActiveUniform","getUniformLocation","WebGLShader","createShader","shaderSource","compileShader","COMPLETION_STATUS_KHR","programIdCount","_m0","getShaderErrors","getShaderParameter","COMPILE_STATUS","errors","getShaderInfoLog","trim","errorMatches","errorLine","toUpperCase","split","lines2","join","handleSource","getShaderSource","getTexelEncodingFunction","functionName","encodingMatrix","getEncodingComponents","getToneMappingFunction","toneMappingName","_v0","filterEmptyLine","replaceLightNums","numSpotLightCoords","numSpotLightShadows","numSpotLightMaps","numSpotLightShadowsWithMaps","numDirLights","numSpotLights","numRectAreaLights","numPointLights","numHemiLights","numDirLightShadows","numPointLightShadows","replaceClippingPlaneNums","numClippingPlanes","numClipIntersection","includePattern","resolveIncludes","includeReplacer","shaderChunkMap","Map","include","newInclude","unrollLoopPattern","unrollLoops","loopReplacer","snippet","generatePrecision","precisionstring","WebGLProgram","cacheKey","shadowMapTypeDefine","shadowMapType","generateShadowMapTypeDefine","envMapTypeDefine","envMapMode","generateEnvMapTypeDefine","envMapModeDefine","generateEnvMapModeDefine","envMapBlendingDefine","generateEnvMapBlendingDefine","envMapCubeUVSize","imageHeight","envMapCubeUVHeight","maxMip","texelHeight","texelWidth","generateCubeUVSize","customVertexExtensions","extensionClipCullDistance","extensionMultiDraw","filter","generateVertexExtensions","customDefines","chunks","generateDefines","createProgram","prefixVertex","prefixFragment","versionString","isRawShaderMaterial","shaderType","shaderName","batching","batchingColor","instancing","instancingColor","instancingMorph","useFog","fogExp2","normalMapObjectSpace","normalMapTangentSpace","mapUv","alphaMapUv","lightMapUv","aoMapUv","emissiveMapUv","bumpMapUv","normalMapUv","displacementMapUv","metalnessMapUv","roughnessMapUv","anisotropyMapUv","clearcoatMapUv","clearcoatNormalMapUv","clearcoatRoughnessMapUv","iridescenceMapUv","iridescenceThicknessMapUv","sheenColorMapUv","sheenRoughnessMapUv","specularMapUv","specularColorMapUv","specularIntensityMapUv","transmissionMapUv","thicknessMapUv","vertexTangents","vertexAlphas","vertexUv1s","vertexUv2s","vertexUv3s","pointsUvs","skinning","morphTextureStride","doubleSided","flipSided","shadowMapEnabled","numLightProbes","decodeVideoTexture","decodeVideoTextureEmissive","opaque","useDepthPacking","vertexGlsl","fragmentGlsl","glVertexShader","glFragmentShader","onFirstUse","self","debug","checkShaderErrors","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","LINK_STATUS","onShaderError","vertexErrors","fragmentErrors","getError","VALIDATE_STATUS","diagnostics","prefix","deleteShader","cachedUniforms","ACTIVE_ATTRIBUTES","getActiveAttrib","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","getAttribLocation","fetchAttributeLocations","attachShader","bindAttribLocation","linkProgram","programReady","rendererExtensionParallelShaderCompile","isReady","destroy","deleteProgram","usedTimes","_id","WebGLShaderCache","shaderCache","materialCache","vertexShaderStage","_getShaderStage","fragmentShaderStage","materialShaders","_getShaderCacheForMaterial","shaderStage","code","stage","WebGLShaderStage","WebGLPrograms","_programLayers","_customShaders","_activeChannels","SUPPORTS_VERTEX_TEXTURES","shaderIDs","MeshNormalMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","SpriteMaterial","getChannel","getParameters","shadows","shaderID","customVertexShaderID","customFragmentShaderID","getVertexShaderID","getFragmentShaderID","getReversed","IS_INSTANCEDMESH","IS_BATCHEDMESH","HAS_MAP","HAS_MATCAP","HAS_ENVMAP","HAS_AOMAP","HAS_LIGHTMAP","HAS_BUMPMAP","HAS_NORMALMAP","HAS_DISPLACEMENTMAP","HAS_EMISSIVEMAP","HAS_METALNESSMAP","HAS_ROUGHNESSMAP","HAS_ANISOTROPY","HAS_CLEARCOAT","HAS_DISPERSION","HAS_IRIDESCENCE","HAS_SHEEN","HAS_TRANSMISSION","HAS_ANISOTROPYMAP","HAS_CLEARCOATMAP","HAS_CLEARCOAT_NORMALMAP","HAS_CLEARCOAT_ROUGHNESSMAP","HAS_IRIDESCENCEMAP","HAS_IRIDESCENCE_THICKNESSMAP","HAS_SHEEN_COLORMAP","HAS_SHEEN_ROUGHNESSMAP","HAS_SPECULARMAP","HAS_SPECULAR_COLORMAP","HAS_SPECULAR_INTENSITYMAP","HAS_TRANSMISSIONMAP","HAS_THICKNESSMAP","HAS_GRADIENTMAP","HAS_ALPHAMAP","HAS_ALPHATEST","HAS_ALPHAHASH","HAS_EXTENSIONS","supportsVertexTextures","isFogExp2","directional","spot","rectArea","hemi","shadowMap","isVideoTexture","customProgramCacheKey","getProgramCacheKey","morphAttributeCount","getProgramCacheKeyParameters","disableAll","enable","getProgramCacheKeyBooleans","acquireProgram","pl","preexistingProgram","releaseProgram","releaseShaderCache","WebGLProperties","painterSortStable","groupOrder","reversePainterSortStable","WebGLRenderList","renderItems","renderItemsIndex","transmissive","getNextRenderItem","renderItem","finish","customOpaqueSort","customTransparentSort","WebGLRenderLists","lists","renderCallDepth","listArray","UniformsCache","halfWidth","halfHeight","nextVersion","shadowCastingAndTexturingLightsFirst","lightA","lightB","WebGLLights","shadowCache","ShadowUniformsCache","hash","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","numDirectionalShadows","numPointShadows","numSpotShadows","numSpotMaps","ambient","directionalShadow","spotShadow","rectAreaLTC1","rectAreaLTC2","pointShadow","vector3","matrix42","numSpotShadowsWithMaps","isLightProbe","sh","coefficients","shadowUniforms","isRectAreaLight","isPointLight","isHemisphereLight","LTC_FLOAT_1","LTC_FLOAT_2","LTC_HALF_1","LTC_HALF_2","setupView","WebGLRenderState","lightsArray","shadowsArray","transmissionRenderTarget","setupLights","setupLightsView","pushLight","pushShadow","shadowLight","WebGLRenderStates","renderStates","renderStateArray","renderState","vertex","fragment","WebGLShadowMap","_shadowMapSize","_viewportSize","_viewport","_depthMaterial","_distanceMaterial","_materialCache","_maxTextureSize","shadowMaterialVertical","VSM_SAMPLES","shadow_pass","shadowMaterialHorizontal","HORIZONTAL_PASS","fullScreenTri","fullScreenMesh","_previousType","VSMPass","renderBufferDirect","getDepthMaterial","customMaterial","keyA","keyB","materialsForVariant","cachedMaterial","onMaterialDispose","renderObject","intersectsObject","kl","depthMaterial","onBeforeShadow","onAfterShadow","activeCubeFace","_state","setBlending","setScissorTest","toVSM","fromVSM","shadowFrameExtents","getFrameExtents","pars","viewportCount","getViewportCount","vp","getViewport","getFrustum","isPointLightShadow","reversedFuncs","WebGLState","colorBuffer","locked","currentColorMask","currentColorClear","colorMask","setLocked","lock","currentReversed","currentDepthMask","currentDepthFunc","currentDepthClear","setReversed","reversed","ext","clipControlEXT","LOWER_LEFT_EXT","ZERO_TO_ONE_EXT","NEGATIVE_ONE_TO_ONE_EXT","oldDepth","DEPTH_TEST","disable","depthMask","setFunc","NEVER","ALWAYS","LESS","LEQUAL","EQUAL","GEQUAL","GREATER","NOTEQUAL","clearDepth","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","STENCIL_TEST","stencilMask","setOp","stencilOp","clearStencil","uboBindings","uboProgramMap","enabledCapabilities","currentBoundFramebuffers","currentDrawbuffers","defaultDrawbuffers","currentProgram","currentBlendingEnabled","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentBlendColor","currentBlendAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","MAX_COMBINED_TEXTURE_IMAGE_UNITS","lineWidthAvailable","glVersion","VERSION","currentTextureSlot","currentBoundTextures","scissorParam","SCISSOR_BOX","viewportParam","VIEWPORT","currentScissor","currentViewport","createTexture","dimensions","bindTexture","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_3D","TEXTURE_2D_ARRAY","texImage3D","RGBA","texImage2D","emptyTextures","TEXTURE_2D","TEXTURE_CUBE_MAP","TEXTURE_CUBE_MAP_POSITIVE_X","setFlipSided","setCullFace","CULL_FACE","equationToGL","FUNC_ADD","FUNC_SUBTRACT","FUNC_REVERSE_SUBTRACT","MIN","MAX","factorToGL","ZERO","SRC_COLOR","SRC_ALPHA","SRC_ALPHA_SATURATE","DST_COLOR","DST_ALPHA","ONE_MINUS_SRC_COLOR","ONE_MINUS_SRC_ALPHA","ONE_MINUS_DST_COLOR","ONE_MINUS_DST_ALPHA","CONSTANT_COLOR","ONE_MINUS_CONSTANT_COLOR","CONSTANT_ALPHA","ONE_MINUS_CONSTANT_ALPHA","BLEND","blendEquationSeparate","blendFuncSeparate","blendFunc","frontFace","CW","CCW","cullFace","BACK","FRONT","FRONT_AND_BACK","setPolygonOffset","factor","POLYGON_OFFSET_FILL","bindFramebuffer","framebuffer","DRAW_FRAMEBUFFER","FRAMEBUFFER","drawBuffers","COLOR_ATTACHMENT0","useProgram","setMaterial","frontFaceCW","SAMPLE_ALPHA_TO_COVERAGE","setLineWidth","lineWidth","SCISSOR_TEST","activeTexture","webglSlot","TEXTURE0","webglType","webglTexture","boundTexture","unbindTexture","compressedTexImage2D","compressedTexImage3D","updateUBOMapping","uniformsGroup","blockIndex","getUniformBlockIndex","uniformBlockBinding","__bindingPointIndex","texStorage2D","texStorage3D","texSubImage2D","texSubImage3D","compressedTexSubImage2D","compressedTexSubImage3D","KEEP","READ_FRAMEBUFFER","WebGLTextures","_gl","multisampledRTTExt","supportsInvalidateFramebuffer","navigator","userAgent","_imageDimensions","_videoTextures","_sources","useOffscreenCanvas","OffscreenCanvas","createCanvas","resizeImage","needsNewCanvas","maxSize","getDimensions","VideoFrame","textureNeedsGenerateMipmaps","generateMipmap","getTargetType","isWebGL3DRenderTarget","isWebGLArrayRenderTarget","isCompressedArrayTexture","getInternalFormat","internalFormatName","glFormat","glType","forceLinearTransfer","RED","R32F","R16F","R8","RED_INTEGER","R8UI","R16UI","R32UI","R8I","R16I","R32I","RG","RG32F","RG16F","RG8","RG_INTEGER","RG8UI","RG16UI","RG32UI","RG8I","RG16I","RG32I","RGB_INTEGER","RGB8UI","RGB16UI","RGB32UI","RGB8I","RGB16I","RGB32I","RGBA_INTEGER","RGBA8UI","RGBA16UI","RGBA32UI","RGBA8I","RGBA16I","RGBA32I","RGB","UNSIGNED_INT_5_9_9_9_REV","RGB9_E5","RGBA32F","RGBA16F","SRGB8_ALPHA8","RGBA8","UNSIGNED_SHORT_4_4_4_4","RGBA4","UNSIGNED_SHORT_5_5_5_1","RGB5_A1","getInternalDepthFormat","useStencil","depthType","glInternalFormat","DEPTH24_STENCIL8","DEPTH32F_STENCIL8","DEPTH_COMPONENT24","DEPTH_COMPONENT32F","DEPTH_COMPONENT16","getMipLevels","isFramebufferTexture","isCompressedTexture","textureProperties","__webglInit","webglTextures","__cacheKey","deleteTexture","deallocateTexture","onRenderTargetDispose","renderTargetProperties","__webglFramebuffer","level","deleteFramebuffer","__webglDepthbuffer","deleteRenderbuffer","__webglMultisampledFramebuffer","__webglColorRenderbuffer","__webglDepthRenderbuffer","attachmentProperties","__webglTexture","deallocateRenderTarget","textureUnits","slot","updateVideoTexture","__version","complete","uploadTexture","wrappingToGL","REPEAT","CLAMP_TO_EDGE","MIRRORED_REPEAT","filterToGL","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","compareToGL","setTextureParameters","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_WRAP_R","TEXTURE_COMPARE_MODE","COMPARE_REF_TO_TEXTURE","TEXTURE_COMPARE_FUNC","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","initTexture","forceUpload","textureCacheKey","getTextureCacheKey","sourceProperties","workingPrimaries","texturePrimaries","unpackConversion","NONE","BROWSER_DEFAULT_WEBGL","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","UNPACK_COLORSPACE_CONVERSION_WEBGL","verifyColorSpace","mipmap","useTexStorage","allocateMemory","levels","layerByteLength","layerData","subarray","clearLayerUpdates","setupFrameBufferTexture","attachment","textureTarget","__renderTarget","__hasExternalTextures","useMultisampledRTT","framebufferTexture2DMultisampleEXT","getRenderTargetSamples","TEXTURE_CUBE_MAP_NEGATIVE_Z","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","isMultisample","bindRenderbuffer","RENDERBUFFER","glAttachmentType","DEPTH_STENCIL_ATTACHMENT","DEPTH_ATTACHMENT","renderbufferStorageMultisampleEXT","renderbufferStorageMultisample","renderbufferStorage","framebufferRenderbuffer","setupDepthTexture","webglDepthTexture","setupDepthRenderbuffer","isCube","__boundDepthTexture","__depthDisposeCallback","disposeEvent","__autoAllocateDepthBuffer","createRenderbuffer","invalidationArrayRead","invalidationArrayDraw","__useRenderToTexture","naturalWidth","naturalHeight","displayWidth","displayHeight","textureUnit","resetTextureUnits","isCompressed","cubeImage","mipmapImage","uploadCubeTexture","rebindTextures","colorTexture","setupRenderTarget","isMultipleRenderTargets","createFramebuffer","glTextureType","updateRenderTargetMipmap","targetType","updateMultisampleRenderTarget","COLOR_BUFFER_BIT","depthStyle","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","blitFramebuffer","invalidateFramebuffer","WebGLUtils","ALPHA","DEPTH_COMPONENT","DEPTH_STENCIL","COMPRESSED_SRGB_S3TC_DXT1_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_SRGB8_ETC2","COMPRESSED_RGB8_ETC2","COMPRESSED_SRGB8_ALPHA8_ETC2_EAC","COMPRESSED_RGBA8_ETC2_EAC","COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR","COMPRESSED_RGBA_ASTC_4x4_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR","COMPRESSED_RGBA_ASTC_5x4_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR","COMPRESSED_RGBA_ASTC_5x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR","COMPRESSED_RGBA_ASTC_6x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR","COMPRESSED_RGBA_ASTC_6x6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR","COMPRESSED_RGBA_ASTC_8x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR","COMPRESSED_RGBA_ASTC_8x6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR","COMPRESSED_RGBA_ASTC_8x8_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR","COMPRESSED_RGBA_ASTC_10x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR","COMPRESSED_RGBA_ASTC_10x6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR","COMPRESSED_RGBA_ASTC_10x8_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR","COMPRESSED_RGBA_ASTC_10x10_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR","COMPRESSED_RGBA_ASTC_12x10_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR","COMPRESSED_RGBA_ASTC_12x12_KHR","COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT","COMPRESSED_RGBA_BPTC_UNORM_EXT","COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT","COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT","COMPRESSED_RED_RGTC1_EXT","COMPRESSED_SIGNED_RED_RGTC1_EXT","COMPRESSED_RED_GREEN_RGTC2_EXT","COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT","UNSIGNED_INT_24_8","_occlusion_vertex","_occlusion_fragment","WebXRDepthSensing","depthNear","depthFar","depthData","cameraXR","depthColor","depthWidth","depthHeight","WebXRManager","framebufferScaleFactor","referenceSpaceType","foveation","customReferenceSpace","pose","glBinding","glProjLayer","glBaseLayer","xrFrame","depthSensing","getContextAttributes","initialRenderTarget","newRenderTarget","controllers","controllerInputSources","currentSize","currentPixelRatio","cameraL","cameraR","_currentDepthNear","_currentDepthFar","onSessionEvent","controllerIndex","onSessionEnd","onInputSourcesChange","isPresenting","setPixelRatio","setSize","removed","added","connect","cameraAutoUpdate","getController","getTargetRaySpace","getControllerGrip","getGripSpace","getHand","getHandSpace","setFramebufferScaleFactor","setReferenceSpaceType","getReferenceSpace","setReferenceSpace","space","getBaseLayer","getBinding","getFrame","getSession","setSession","async","xrCompatible","makeXRCompatible","getPixelRatio","XRWebGLBinding","depthFormat","glDepthFormat","projectionlayerInit","colorFormat","scaleFactor","createProjectionLayer","updateRenderState","textureWidth","textureHeight","antialias","ignoreDepthValues","layerInit","XRWebGLLayer","baseLayer","framebufferWidth","framebufferHeight","setFoveation","requestReferenceSpace","getDepthTexture","cameraLPos","cameraRPos","updateCamera","ipd","projL","projR","topFov","bottomFov","leftFov","rightFov","zOffset","xOffset","translateX","translateZ","near2","far2","left2","right2","top2","bottom2","setProjectionFromUnion","updateUserCamera","getCamera","getFoveation","fixedFoveation","hasDepthSensing","getDepthSensingMesh","getMesh","onAnimationFrameCallback","getViewerPose","views","setRenderTargetFramebuffer","cameraXRNeedsUpdate","glSubImage","getViewSubImage","setRenderTargetTextures","depthStencilTexture","enabledFeatures","includes","depthUsage","getDepthInformation","isValid","detectedPlanes","_e1","WebGLMaterials","refreshTransformUniform","refreshUniformsCommon","refreshFogUniforms","isFog","density","refreshMaterialUniforms","pixelRatio","isMeshLambertMaterial","isMeshToonMaterial","refreshUniformsToon","isMeshPhongMaterial","refreshUniformsPhong","refreshUniformsStandard","isMeshPhysicalMaterial","refreshUniformsPhysical","isMeshMatcapMaterial","refreshUniformsMatcap","refreshUniformsDistance","isMeshNormalMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","refreshUniformsPoints","isSpriteMaterial","refreshUniformsSprites","isShadowMaterial","WebGLUniformsGroups","updateList","allocatedBindingPoints","maxBindingPoints","MAX_UNIFORM_BUFFER_BINDINGS","hasUniformChanged","indexArray","indexString","cachedObject","getUniformSize","boundary","storage","onUniformsGroupsDispose","webglProgram","uniformArray","chunkOffset","chunkPadding","chunkStart","__data","__offset","__size","__cache","prepareUniformsGroup","bindingPointIndex","allocateBindingPointIndex","UNIFORM_BUFFER","bindBufferBase","arrayOffset","updateBufferData","preserveDrawingBuffer","powerPreference","failIfMajorPerformanceCaveat","_alpha","isWebGLRenderer","WebGLRenderingContext","uintClearColor","intClearColor","currentRenderList","currentRenderState","renderListStack","renderStateStack","toneMappingExposure","transmissionResolutionScale","_this","_isContextLost","_outputColorSpace","_currentActiveCubeFace","_currentActiveMipmapLevel","_currentRenderTarget","_currentMaterialId","_currentCamera","_currentViewport","_currentScissor","_currentScissorTest","_currentClearColor","_currentClearAlpha","_width","_height","_pixelRatio","_opaqueSort","_transparentSort","_scissor","_scissorTest","_clippingEnabled","_localClippingEnabled","_currentProjectionMatrix","_projScreenMatrix","_vector3","_vector4","_emptyScene","_renderBackground","getTargetPixelRatio","programCache","renderLists","morphtargets","bufferRenderer","indexedBufferRenderer","contextName","contextAttributes","onContextLost","onContextRestore","onContextCreationError","initGLContext","preventDefault","infoAutoReset","shadowMapAutoUpdate","shadowMapNeedsUpdate","statusMessage","releaseMaterialProgramReferences","deallocateMaterial","prepareMaterial","getProgram","forceContextLoss","loseContext","forceContextRestore","restoreContext","updateStyle","setViewport","getDrawingBufferSize","setDrawingBufferSize","getCurrentViewport","getScissor","setScissor","getScissorTest","boolean","setOpaqueSort","method","setTransparentSort","bits","isIntegerFormat","targetFormat","isUnsignedType","clearBufferuiv","COLOR","clearBufferiv","onXRSessionStart","onXRSessionEnd","needsProgramChange","needsLights","lightsStateVersion","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","uCamPos","cameraPosition","setOptional","boneTexture","computeBoneTexture","isMeshGouraudMaterial","upload","getUniformList","setProgram","rangeFactor","drawStart","drawEnd","isSprite","_multiDrawInstances","_multiDrawStarts","_multiDrawCounts","_multiDrawCount","targetScene","material2","compileAsync","checkMaterialsReady","projectObject","isLOD","intersectsSprite","renderScene","opaqueObjects","transmissiveObjects","transparentObjects","renderObjects","renderTransmissionPass","activeViewport","currentToneMapping","currentCameraViewport","renderTargetNeedsUpdate","currentSide","onAfterRender","programCacheKey","updateCommonMaterialProperties","materialNeedsLights","uniformsList","progUniforms","seqWithValue","depthSensingMesh","camera2","defaultFramebuffer","__useDefaultFramebuffer","_scratchFrameBuffer","useDefaultFramebuffer","isRenderTarget3D","framebufferTextureLayer","readRenderTargetPixels","activeCubeFaceIndex","readPixels","readRenderTargetPixelsAsync","glBuffer","PIXEL_PACK_BUFFER","STREAM_READ","currFramebuffer","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","getBufferSubData","deleteSync","copyFramebufferToTexture","levelScale","copyTexSubImage2D","_srcFramebuffer","_dstFramebuffer","copyTextureToTexture","srcTexture","dstTexture","dstX","dstY","dstZ","srcRegion","dstPosition","srcLevel","dstLevel","glTarget","currentUnpackRowLen","UNPACK_ROW_LENGTH","currentUnpackImageHeight","UNPACK_IMAGE_HEIGHT","currentUnpackSkipPixels","UNPACK_SKIP_PIXELS","currentUnpackSkipRows","UNPACK_SKIP_ROWS","currentUnpackSkipImages","UNPACK_SKIP_IMAGES","isSrc3D","isDst3D","srcTextureProperties","dstTextureProperties","srcRenderTargetProperties","dstRenderTargetProperties","copyTexSubImage3D","copyTextureToTexture3D","initRenderTarget","resetState","getOwnPropertySymbols","hasOwnProperty","propIsEnumerable","propertyIsEnumerable","test1","getOwnPropertyNames","test2","fromCharCode","test3","letter","shouldUseNative","symbols","val","toObject","checkDCE","__REACT_DEVTOOLS_GLOBAL_HOOK__","o","toStringTag","__esModule","create","default","clearTimeout","attachEvent","detachEvent","changedTouches","pageXOffset","documentElement","parentNode","scrollLeft","pageYOffset","scrollTop","PointerEvent","MSPointerEvent","O","move","_","on","_handlers_","off","trigger","config","defaults","bindEvt","_domHandlers_","apply","unbindEvt","T","identifier","frontPosition","collection","fadeTime","dataOnly","restJoystick","restOpacity","zone","lockX","lockY","buildEl","stylize","instance","el","ui","show","hide","addToDom","removeFromDom","setPosition","resetDirection","computeDirection","createElement","back","front","className","appendChild","zIndex","marginLeft","marginTop","applyStyles","contains","removeChild","removeTimeout","showTimeout","restTimeout","restCallback","radian","P","E","nipples","idles","actives","ids","pressureIntervals","multitouch","maxNumberOfNipples","catchDistance","dynamicPage","follow","getComputedStyle","parentElement","parentIsFlex","updateBox","prepareNipples","begin","processOnMove","processOnEnd","touchAction","msTouchAction","createNipple","getIdentifier","scroll","getBoundingClientRect","bindNipple","onDestroyed","pressureFn","clearInterval","setInterval","pressure","webkitForce","onstart","processOnStart","findIndex","bindDocument","pageX","pageY","getOrCreate","removeIdentifier","buttons","I","D","degree","raw","unbindDocument","collections","prepareCollections","every","createCollection","bindCollection","binded","pointerId","latest","onmove","onAny","onend","oncancel","_found_","factory","FontLoader","three__WEBPACK_IMPORTED_MODULE_0__","setRequestHeader","setWithCredentials","font","Font","isFont","paths","chars","line_height","yMax","yMin","underlineThickness","char","ret","createPath","createPaths","toShapes","glyph","glyphs","familyName","cpx","cpy","cpx1","cpy1","cpx2","cpy2","outline","_cachedOutline","ha","TextGeometry","generateShapes","OrbitControls","_changeEvent","_startEvent","_endEvent","_ray","_plane","_TILT_LIMIT","_v","_twoPI","_STATE","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","_EPS","cursor","minDistance","maxDistance","minZoom","maxZoom","minTargetRadius","maxTargetRadius","minPolarAngle","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","keyRotateSpeed","enablePan","panSpeed","screenSpacePanning","keyPanSpeed","zoomToCursor","autoRotate","autoRotateSpeed","UP","BOTTOM","target0","position0","zoom0","_domElementKeyEvents","_lastPosition","_lastQuaternion","_lastTargetPosition","_quat","setFromUnitVectors","_quatInverse","_spherical","_sphericalDelta","_scale","_panOffset","_rotateStart","_rotateEnd","_rotateDelta","_panStart","_panEnd","_panDelta","_dollyStart","_dollyEnd","_dollyDelta","_dollyDirection","_mouse","_performCursorZoom","_pointers","_pointerPositions","_controlActive","_onPointerMove","pointerType","_onTouchMove","_onMouseMove","_onPointerDown","setPointerCapture","_onPointerUp","_isTrackingPointer","_addPointer","_onTouchStart","_onMouseDown","_removePointer","releasePointerCapture","_onContextMenu","_onMouseWheel","_handleMouseWheel","_customWheelEvent","_onKeyDown","_handleKeyDown","_trackPointer","_handleTouchStartRotate","_handleTouchStartPan","_handleTouchStartDollyPan","_handleTouchStartDollyRotate","_handleTouchMoveRotate","_handleTouchMovePan","_handleTouchMoveDollyPan","_handleTouchMoveDollyRotate","mouseAction","button","_handleMouseDownDolly","ctrlKey","metaKey","shiftKey","_handleMouseDownPan","_handleMouseDownRotate","_handleMouseMoveRotate","_handleMouseMoveDolly","_handleMouseMovePan","_interceptControlDown","getRootNode","_interceptControlUp","passive","capture","stopListenToKeyEvents","deltaTime","setFromVector3","_rotateLeft","_getAutoRotationAngle","makeSafe","clampLength","zoomChanged","_clampDistance","prevRadius","setFromSpherical","newRadius","radiusDelta","mouseBefore","prevZoom","mouseAfter","intersectPlane","normalizedDelta","objectMatrix","deltaX","deltaY","targetDistance","_panLeft","clientHeight","_panUp","clientWidth","dollyScale","rect","dist","clientX","clientY","_updateZoomParameters","_rotateUp","_dollyOut","_getZoomScale","_dollyIn","_pan","_getSecondPointerPosition","_handleTouchStartDolly","centerX","centerY","_handleTouchMoveDolly","deltaMode","newEvent","for","A","B","C","encodeURIComponent","isMounted","enqueueForceUpdate","enqueueReplaceState","enqueueSetState","F","props","refs","updater","G","H","isReactComponent","isPureReactComponent","J","K","L","ref","__self","__source","M","defaultProps","$$typeof","_owner","Q","R","keyPrefix","func","S","V","U","=",":","escape","W","aa","X","N","Y","Z","ba","ReactCurrentDispatcher","ReactCurrentBatchConfig","suspense","ReactCurrentOwner","IsSomeRendererActing","Children","only","Component","Fragment","Profiler","PureComponent","StrictMode","Suspense","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","cloneElement","createContext","_calculateChangedBits","_currentValue","_currentValue2","_threadCount","Provider","Consumer","_context","createFactory","createRef","forwardRef","isValidElement","lazy","_ctor","_status","_result","memo","compare","useCallback","useContext","useDebugValue","useEffect","useImperativeHandle","useLayoutEffect","useMemo","useReducer","useRef","useState","da","ea","fa","ia","ja","la","ma","na","oa","currentTarget","ka","pa","ra","sa","extractEvents","eventTypes","ta","phasedRegistrationNames","ua","registrationName","wa","dependencies","xa","ya","za","Aa","Ba","Ca","stateNode","Da","Ea","Fa","Ga","Ha","Ia","Ja","Ka","La","Ma","Na","Oa","Pa","Qa","acceptsBooleans","attributeName","attributeNamespace","mustUseProperty","sanitizeURL","Ua","Va","xlinkHref","Wa","Xa","Sa","Ta","Ra","removeAttribute","setAttributeNS","Ya","Za","$a","bb","db","eb","fb","gb","hb","ib","jb","kb","lb","mb","nb","pb","displayName","tag","_debugOwner","_debugSource","fileName","lineNumber","return","rb","sb","xb","_valueTracker","getOwnPropertyDescriptor","stopTracking","tb","yb","checked","zb","defaultChecked","defaultValue","_wrapperState","initialChecked","Ab","initialValue","controlled","Bb","Cb","Db","Eb","ownerDocument","activeElement","Gb","Fb","Hb","selected","defaultSelected","disabled","Ib","dangerouslySetInnerHTML","Jb","Kb","Lb","textContent","Mb","Nb","Ob","Pb","Qb","namespaceURI","innerHTML","valueOf","firstChild","MSApp","execUnsafeLocalFunction","Rb","lastChild","nodeType","nodeValue","Sb","Tb","animationend","animationiteration","animationstart","transitionend","Ub","Vb","Wb","transition","Xb","Yb","Zb","$b","cc","dc","alternate","effectTag","ec","memoizedState","dehydrated","fc","hc","sibling","gc","ic","jc","kc","lc","_dispatchListeners","_dispatchInstances","isPropagationStopped","isPersistent","release","mc","nc","srcElement","correspondingUseElement","oc","pc","qc","topLevelType","nativeEvent","targetInst","ancestors","rc","eventSystemFlags","sc","containerInfo","tc","uc","wc","xc","yc","zc","Ac","Bc","Cc","Dc","Ec","Fc","Gc","Hc","Ic","Kc","blockedOn","Lc","Mc","Nc","Pc","unstable_runWithPriority","priority","hydrate","Qc","Rc","Sc","Tc","shift","Uc","unstable_scheduleCallback","unstable_NormalPriority","Vc","Wc","Yc","Zc","$c","bubbled","captured","eventPriority","cd","dd","unstable_UserBlockingPriority","ed","fd","Oc","jd","animationIterationCount","borderImageOutset","borderImageSlice","borderImageWidth","boxFlex","boxFlexGroup","boxOrdinalGroup","columnCount","columns","flex","flexGrow","flexPositive","flexShrink","flexNegative","flexOrder","gridArea","gridRow","gridRowEnd","gridRowSpan","gridRowStart","gridColumn","gridColumnEnd","gridColumnSpan","gridColumnStart","fontWeight","lineClamp","lineHeight","orphans","tabSize","widows","fillOpacity","floodOpacity","stopOpacity","strokeDasharray","strokeDashoffset","strokeMiterlimit","strokeOpacity","strokeWidth","kd","ld","md","setProperty","nd","menuitem","base","br","embed","hr","img","input","keygen","link","param","wbr","od","pd","is","qd","rd","sd","td","ud","vd","nextSibling","xd","HTMLIFrameElement","contentWindow","href","yd","contentEditable","zd","Ad","Bd","Cd","Dd","Ed","Fd","autoFocus","Gd","__html","Hd","Id","Jd","Kd","previousSibling","Ld","Md","Nd","Od","Pd","Qd","Rd","Sd","Td","dispatchConfig","Ud","_targetInst","Vd","Wd","Xd","Yd","Zd","$d","Interface","isDefaultPrevented","defaultPrevented","returnValue","ee","eventPool","fe","destructor","getPooled","stopPropagation","cancelBubble","persist","eventPhase","bubbles","cancelable","timeStamp","Date","now","isTrusted","extend","ge","he","ie","je","ke","documentMode","le","ne","oe","beforeInput","compositionEnd","compositionStart","compositionUpdate","pe","qe","keyCode","re","se","ve","locale","which","altKey","ue","we","date","datetime","datetime-local","email","month","number","password","search","tel","week","xe","ye","change","ze","Ae","Be","Ce","De","Ee","Fe","Ge","He","Ie","Je","Ke","Le","Me","_isInputEventSupported","Ne","Oe","Alt","Control","Meta","Shift","Pe","getModifierState","Qe","Re","Se","Te","Ue","Ve","screenX","screenY","relatedTarget","fromElement","toElement","movementX","movementY","We","tangentialPressure","tiltX","tiltY","twist","isPrimary","Xe","mouseEnter","mouseLeave","pointerEnter","pointerLeave","Ye","defaultView","parentWindow","$e","select","ef","ff","gf","hf","jf","selectionStart","selectionEnd","anchorNode","getSelection","anchorOffset","focusNode","focusOffset","kf","onSelect","lf","animationName","elapsedTime","pseudoElement","mf","clipboardData","nf","of","charCode","pf","Esc","Spacebar","Left","Up","Right","Down","Del","Win","Menu","Apps","Scroll","MozPrintableKey","qf","8","9","12","13","16","17","18","19","20","27","32","33","34","35","36","37","38","39","40","45","46","112","113","114","115","116","117","118","119","120","121","122","123","144","145","224","rf","dataTransfer","tf","targetTouches","uf","vf","wheelDeltaX","wheelDeltaY","wheelDelta","deltaZ","wf","SimpleEventPlugin","EnterLeaveEventPlugin","ChangeEventPlugin","SelectEventPlugin","BeforeInputEventPlugin","yf","zf","Af","Bf","Cf","contextTypes","__reactInternalMemoizedUnmaskedChildContext","__reactInternalMemoizedMaskedChildContext","childContextTypes","Df","Ef","Ff","getChildContext","Gf","__reactInternalMemoizedMergedChildContext","Hf","If","Jf","Kf","unstable_cancelCallback","Lf","unstable_requestPaint","Mf","unstable_now","Nf","unstable_getCurrentPriorityLevel","Of","unstable_ImmediatePriority","Pf","Qf","Rf","unstable_LowPriority","Sf","unstable_IdlePriority","Tf","Uf","unstable_shouldYield","Vf","Wf","Xf","Yf","Zf","$f","ag","bg","cg","dg","eg","fg","gg","hg","ig","jg","kg","lg","mg","ng","og","pg","childExpirationTime","qg","firstContext","expirationTime","rg","sg","observedBits","responders","tg","ug","updateQueue","baseState","baseQueue","shared","pending","effects","vg","wg","suspenseConfig","payload","xg","yg","zg","ca","Ag","Bg","Cg","Dg","Eg","Fg","Jg","_reactInternalFiber","Gg","Hg","Ig","Kg","shouldComponentUpdate","Lg","contextType","Mg","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","Ng","getDerivedStateFromProps","getSnapshotBeforeUpdate","UNSAFE_componentWillMount","componentWillMount","componentDidMount","Og","Pg","_stringRef","Qg","Rg","lastEffect","nextEffect","firstEffect","Sg","Tg","elementType","Ug","implementation","Vg","Wg","Xg","Yg","Zg","$g","ah","bh","ch","dh","tagName","eh","fh","gh","hh","memoizedProps","revealOrder","ih","responder","jh","kh","lh","mh","nh","oh","ph","qh","rh","th","uh","vh","wh","lastRenderedReducer","action","eagerReducer","eagerState","lastRenderedState","dispatch","xh","yh","zh","Ah","deps","Bh","Ch","Dh","Eh","Fh","Gh","Hh","Ih","Jh","Kh","Lh","Mh","Nh","readContext","useResponder","useDeferredValue","useTransition","Oh","Ph","Qh","Rh","Sh","Th","pendingProps","Uh","Vh","Wh","Xh","Yh","Zh","$h","ai","bi","ci","di","ei","fi","UNSAFE_componentWillUpdate","componentWillUpdate","componentDidUpdate","gi","getDerivedStateFromError","hi","pendingContext","ni","oi","pi","qi","ii","retryTime","ji","fallback","unstable_avoidThisFallback","ki","li","isBackwards","rendering","renderingStartTime","tailExpiration","tailMode","mi","ri","si","wasMultiple","multiple","onClick","onclick","createTextNode","ti","vi","wi","xi","yi","zi","Ai","stack","Bi","WeakSet","Ci","Fi","Ei","Gi","__reactInternalSnapshotBeforeUpdate","Hi","Ii","Ji","Ki","Li","componentWillUnmount","Di","Mi","Ni","Oi","Pi","Qi","insertBefore","_reactRootContainer","Ri","Si","Ti","Ui","xj","Wi","Xi","Yi","Zi","$i","componentDidCatch","aj","componentStack","Rj","bj","cj","dj","ej","fj","gj","hj","ij","jj","kj","lj","mj","nj","oj","pj","qj","rj","sj","tj","uj","vj","wj","timeoutMs","yj","zj","lastExpiredTime","Aj","firstPendingTime","lastPingedTime","nextKnownPendingLevel","callbackExpirationTime","callbackPriority","callbackNode","Bj","Cj","Dj","Ej","Fj","Gj","Hj","finishedWork","finishedExpirationTime","lastSuspendedTime","Ij","timeoutHandle","Jj","busyMinDurationMs","busyDelayMs","timeout","Kj","Mj","Nj","pingCache","Oj","ub","Pj","Xc","Qj","firstSuspendedTime","rangeCount","wb","activeElementDetached","focusedElem","selectionRange","Tj","wd","compareDocumentPosition","createRange","setStart","removeAllRanges","addRange","setEnd","Uj","Vj","Wj","hidden","ob","Xj","unstable_observedBits","Zj","pendingChildren","ak","bk","ck","dk","ek","fk","Jc","_internalRoot","gk","ik","hk","kk","jk","unmount","querySelectorAll","form","Lj","lk","Events","findFiberByHostInstance","isDisabled","supportsFiber","inject","onCommitFiberRoot","onCommitFiberUnmount","Yj","overrideHookState","overrideProps","setSuspenseHandler","scheduleUpdate","currentDispatcherRef","findHostInstanceByFiber","findHostInstancesForRefresh","scheduleRefresh","scheduleRoot","setRefreshHandler","getCurrentFiber","bundleType","rendererPackageName","createPortal","findDOMNode","flushSync","unmountComponentAtNode","unstable_batchedUpdates","unstable_createPortal","unstable_renderSubtreeIntoContainer","MessageChannel","unstable_forceFrameRate","performance","port2","port1","onmessage","postMessage","sortIndex","priorityLevel","unstable_Profiling","unstable_continueExecution","unstable_getFirstCallbackNode","unstable_next","unstable_pauseExecution","delay","unstable_wrapCallback"],"mappings":"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","file":"static/js/2.1d1eaa3f.chunk.js","sourcesContent":["/**\n * @license\n * Copyright 2010-2025 Three.js Authors\n * SPDX-License-Identifier: MIT\n */\nconst REVISION = '176';\n\n/**\n * Represents mouse buttons and interaction types in context of controls.\n *\n * @type {ConstantsMouse}\n * @constant\n */\nconst MOUSE = {\n  LEFT: 0,\n  MIDDLE: 1,\n  RIGHT: 2,\n  ROTATE: 0,\n  DOLLY: 1,\n  PAN: 2\n};\n\n/**\n * Represents touch interaction types in context of controls.\n *\n * @type {ConstantsTouch}\n * @constant\n */\nconst TOUCH = {\n  ROTATE: 0,\n  PAN: 1,\n  DOLLY_PAN: 2,\n  DOLLY_ROTATE: 3\n};\n\n/**\n * Disables face culling.\n *\n * @type {number}\n * @constant\n */\nconst CullFaceNone = 0;\n\n/**\n * Culls back faces.\n *\n * @type {number}\n * @constant\n */\nconst CullFaceBack = 1;\n\n/**\n * Culls front faces.\n *\n * @type {number}\n * @constant\n */\nconst CullFaceFront = 2;\n\n/**\n * Culls both front and back faces.\n *\n * @type {number}\n * @constant\n */\nconst CullFaceFrontBack = 3;\n\n/**\n * Gives unfiltered shadow maps - fastest, but lowest quality.\n *\n * @type {number}\n * @constant\n */\nconst BasicShadowMap = 0;\n\n/**\n * Filters shadow maps using the Percentage-Closer Filtering (PCF) algorithm.\n *\n * @type {number}\n * @constant\n */\nconst PCFShadowMap = 1;\n\n/**\n * Filters shadow maps using the Percentage-Closer Filtering (PCF) algorithm with\n * better soft shadows especially when using low-resolution shadow maps.\n *\n * @type {number}\n * @constant\n */\nconst PCFSoftShadowMap = 2;\n\n/**\n * Filters shadow maps using the Variance Shadow Map (VSM) algorithm.\n * When using VSMShadowMap all shadow receivers will also cast shadows.\n *\n * @type {number}\n * @constant\n */\nconst VSMShadowMap = 3;\n\n/**\n * Only front faces are rendered.\n *\n * @type {number}\n * @constant\n */\nconst FrontSide = 0;\n\n/**\n * Only back faces are rendered.\n *\n * @type {number}\n * @constant\n */\nconst BackSide = 1;\n\n/**\n * Both front and back faces are rendered.\n *\n * @type {number}\n * @constant\n */\nconst DoubleSide = 2;\n\n/**\n * No blending is performed which effectively disables\n * alpha transparency.\n *\n * @type {number}\n * @constant\n */\nconst NoBlending = 0;\n\n/**\n * The default blending.\n *\n * @type {number}\n * @constant\n */\nconst NormalBlending = 1;\n\n/**\n * Represents additive blending.\n *\n * @type {number}\n * @constant\n */\nconst AdditiveBlending = 2;\n\n/**\n * Represents subtractive blending.\n *\n * @type {number}\n * @constant\n */\nconst SubtractiveBlending = 3;\n\n/**\n * Represents multiply blending.\n *\n * @type {number}\n * @constant\n */\nconst MultiplyBlending = 4;\n\n/**\n * Represents custom blending.\n *\n * @type {number}\n * @constant\n */\nconst CustomBlending = 5;\n\n/**\n * A `source + destination` blending equation.\n *\n * @type {number}\n * @constant\n */\nconst AddEquation = 100;\n\n/**\n * A `source - destination` blending equation.\n *\n * @type {number}\n * @constant\n */\nconst SubtractEquation = 101;\n\n/**\n * A `destination - source` blending equation.\n *\n * @type {number}\n * @constant\n */\nconst ReverseSubtractEquation = 102;\n\n/**\n * A blend equation that uses the minimum of source and destination.\n *\n * @type {number}\n * @constant\n */\nconst MinEquation = 103;\n\n/**\n * A blend equation that uses the maximum of source and destination.\n *\n * @type {number}\n * @constant\n */\nconst MaxEquation = 104;\n\n/**\n * Multiplies all colors by `0`.\n *\n * @type {number}\n * @constant\n */\nconst ZeroFactor = 200;\n\n/**\n * Multiplies all colors by `1`.\n *\n * @type {number}\n * @constant\n */\nconst OneFactor = 201;\n\n/**\n * Multiplies all colors by the source colors.\n *\n * @type {number}\n * @constant\n */\nconst SrcColorFactor = 202;\n\n/**\n * Multiplies all colors by `1` minus each source color.\n *\n * @type {number}\n * @constant\n */\nconst OneMinusSrcColorFactor = 203;\n\n/**\n * Multiplies all colors by the source alpha value.\n *\n * @type {number}\n * @constant\n */\nconst SrcAlphaFactor = 204;\n\n/**\n * Multiplies all colors by 1 minus the source alpha value.\n *\n * @type {number}\n * @constant\n */\nconst OneMinusSrcAlphaFactor = 205;\n\n/**\n * Multiplies all colors by the destination alpha value.\n *\n * @type {number}\n * @constant\n */\nconst DstAlphaFactor = 206;\n\n/**\n * Multiplies all colors by `1` minus the destination alpha value.\n *\n * @type {number}\n * @constant\n */\nconst OneMinusDstAlphaFactor = 207;\n\n/**\n * Multiplies all colors by the destination color.\n *\n * @type {number}\n * @constant\n */\nconst DstColorFactor = 208;\n\n/**\n * Multiplies all colors by `1` minus each destination color.\n *\n * @type {number}\n * @constant\n */\nconst OneMinusDstColorFactor = 209;\n\n/**\n * Multiplies the RGB colors by the smaller of either the source alpha\n * value or the value of `1` minus the destination alpha value. The alpha\n * value is multiplied by `1`.\n *\n * @type {number}\n * @constant\n */\nconst SrcAlphaSaturateFactor = 210;\n\n/**\n * Multiplies all colors by a constant color.\n *\n * @type {number}\n * @constant\n */\nconst ConstantColorFactor = 211;\n\n/**\n * Multiplies all colors by `1` minus a constant color.\n *\n * @type {number}\n * @constant\n */\nconst OneMinusConstantColorFactor = 212;\n\n/**\n * Multiplies all colors by a constant alpha value.\n *\n * @type {number}\n * @constant\n */\nconst ConstantAlphaFactor = 213;\n\n/**\n * Multiplies all colors by 1 minus a constant alpha value.\n *\n * @type {number}\n * @constant\n */\nconst OneMinusConstantAlphaFactor = 214;\n\n/**\n * Never pass.\n *\n * @type {number}\n * @constant\n */\nconst NeverDepth = 0;\n\n/**\n * Always pass.\n *\n * @type {number}\n * @constant\n */\nconst AlwaysDepth = 1;\n\n/**\n * Pass if the incoming value is less than the depth buffer value.\n *\n * @type {number}\n * @constant\n */\nconst LessDepth = 2;\n\n/**\n * Pass if the incoming value is less than or equal to the depth buffer value.\n *\n * @type {number}\n * @constant\n */\nconst LessEqualDepth = 3;\n\n/**\n * Pass if the incoming value equals the depth buffer value.\n *\n * @type {number}\n * @constant\n */\nconst EqualDepth = 4;\n\n/**\n * Pass if the incoming value is greater than or equal to the depth buffer value.\n *\n * @type {number}\n * @constant\n */\nconst GreaterEqualDepth = 5;\n\n/**\n * Pass if the incoming value is greater than the depth buffer value.\n *\n * @type {number}\n * @constant\n */\nconst GreaterDepth = 6;\n\n/**\n * Pass if the incoming value is not equal to the depth buffer value.\n *\n * @type {number}\n * @constant\n */\nconst NotEqualDepth = 7;\n\n/**\n * Multiplies the environment map color with the surface color.\n *\n * @type {number}\n * @constant\n */\nconst MultiplyOperation = 0;\n\n/**\n * Uses reflectivity to blend between the two colors.\n *\n * @type {number}\n * @constant\n */\nconst MixOperation = 1;\n\n/**\n * Adds the two colors.\n *\n * @type {number}\n * @constant\n */\nconst AddOperation = 2;\n\n/**\n * No tone mapping is applied.\n *\n * @type {number}\n * @constant\n */\nconst NoToneMapping = 0;\n\n/**\n * Linear tone mapping.\n *\n * @type {number}\n * @constant\n */\nconst LinearToneMapping = 1;\n\n/**\n * Reinhard tone mapping.\n *\n * @type {number}\n * @constant\n */\nconst ReinhardToneMapping = 2;\n\n/**\n * Cineon tone mapping.\n *\n * @type {number}\n * @constant\n */\nconst CineonToneMapping = 3;\n\n/**\n * ACES Filmic tone mapping.\n *\n * @type {number}\n * @constant\n */\nconst ACESFilmicToneMapping = 4;\n\n/**\n * Custom tone mapping.\n *\n * Expects a custom implementation by modifying shader code of the material's fragment shader.\n *\n * @type {number}\n * @constant\n */\nconst CustomToneMapping = 5;\n\n/**\n * AgX tone mapping.\n *\n * @type {number}\n * @constant\n */\nconst AgXToneMapping = 6;\n\n/**\n * Neutral tone mapping.\n *\n * Implementation based on the Khronos 3D Commerce Group standard tone mapping.\n *\n * @type {number}\n * @constant\n */\nconst NeutralToneMapping = 7;\n\n/**\n * The skinned mesh shares the same world space as the skeleton.\n *\n * @type {string}\n * @constant\n */\nconst AttachedBindMode = 'attached';\n\n/**\n * The skinned mesh does not share the same world space as the skeleton.\n * This is useful when a skeleton is shared across multiple skinned meshes.\n *\n * @type {string}\n * @constant\n */\nconst DetachedBindMode = 'detached';\n\n/**\n * Maps textures using the geometry's UV coordinates.\n *\n * @type {number}\n * @constant\n */\nconst UVMapping = 300;\n\n/**\n * Reflection mapping for cube textures.\n *\n * @type {number}\n * @constant\n */\nconst CubeReflectionMapping = 301;\n\n/**\n * Refraction mapping for cube textures.\n *\n * @type {number}\n * @constant\n */\nconst CubeRefractionMapping = 302;\n\n/**\n * Reflection mapping for equirectangular textures.\n *\n * @type {number}\n * @constant\n */\nconst EquirectangularReflectionMapping = 303;\n\n/**\n * Refraction mapping for equirectangular textures.\n *\n * @type {number}\n * @constant\n */\nconst EquirectangularRefractionMapping = 304;\n\n/**\n * Reflection mapping for PMREM textures.\n *\n * @type {number}\n * @constant\n */\nconst CubeUVReflectionMapping = 306;\n\n/**\n * The texture will simply repeat to infinity.\n *\n * @type {number}\n * @constant\n */\nconst RepeatWrapping = 1000;\n\n/**\n * The last pixel of the texture stretches to the edge of the mesh.\n *\n * @type {number}\n * @constant\n */\nconst ClampToEdgeWrapping = 1001;\n\n/**\n * The texture will repeats to infinity, mirroring on each repeat.\n *\n * @type {number}\n * @constant\n */\nconst MirroredRepeatWrapping = 1002;\n\n/**\n * Returns the value of the texture element that is nearest (in Manhattan distance)\n * to the specified texture coordinates.\n *\n * @type {number}\n * @constant\n */\nconst NearestFilter = 1003;\n\n/**\n * Chooses the mipmap that most closely matches the size of the pixel being textured\n * and uses the `NearestFilter` criterion (the texel nearest to the center of the pixel)\n * to produce a texture value.\n *\n * @type {number}\n * @constant\n */\nconst NearestMipmapNearestFilter = 1004;\nconst NearestMipMapNearestFilter = 1004; // legacy\n\n/**\n * Chooses the two mipmaps that most closely match the size of the pixel being textured and\n * uses the `NearestFilter` criterion to produce a texture value from each mipmap.\n * The final texture value is a weighted average of those two values.\n *\n * @type {number}\n * @constant\n */\nconst NearestMipmapLinearFilter = 1005;\nconst NearestMipMapLinearFilter = 1005; // legacy\n\n/**\n * Returns the weighted average of the four texture elements that are closest to the specified\n * texture coordinates, and can include items wrapped or repeated from other parts of a texture,\n * depending on the values of `wrapS` and `wrapT`, and on the exact mapping.\n *\n * @type {number}\n * @constant\n */\nconst LinearFilter = 1006;\n\n/**\n * Chooses the mipmap that most closely matches the size of the pixel being textured and uses\n * the `LinearFilter` criterion (a weighted average of the four texels that are closest to the\n * center of the pixel) to produce a texture value.\n *\n * @type {number}\n * @constant\n */\nconst LinearMipmapNearestFilter = 1007;\nconst LinearMipMapNearestFilter = 1007; // legacy\n\n/**\n * Chooses the two mipmaps that most closely match the size of the pixel being textured and uses\n * the `LinearFilter` criterion to produce a texture value from each mipmap. The final texture value\n * is a weighted average of those two values.\n *\n * @type {number}\n * @constant\n */\nconst LinearMipmapLinearFilter = 1008;\nconst LinearMipMapLinearFilter = 1008; // legacy\n\n/**\n * An unsigned byte data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst UnsignedByteType = 1009;\n\n/**\n * A byte data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst ByteType = 1010;\n\n/**\n * A short data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst ShortType = 1011;\n\n/**\n * An unsigned short data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst UnsignedShortType = 1012;\n\n/**\n * An int data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst IntType = 1013;\n\n/**\n * An unsigned int data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst UnsignedIntType = 1014;\n\n/**\n * A float data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst FloatType = 1015;\n\n/**\n * A half float data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst HalfFloatType = 1016;\n\n/**\n * An unsigned short 4_4_4_4 (packed) data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst UnsignedShort4444Type = 1017;\n\n/**\n * An unsigned short 5_5_5_1 (packed) data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst UnsignedShort5551Type = 1018;\n\n/**\n * An unsigned int 24_8 data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst UnsignedInt248Type = 1020;\n\n/**\n * An unsigned int 5_9_9_9 (packed) data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst UnsignedInt5999Type = 35902;\n\n/**\n * Discards the red, green and blue components and reads just the alpha component.\n *\n * @type {number}\n * @constant\n */\nconst AlphaFormat = 1021;\n\n/**\n * Discards the alpha component and reads the red, green and blue component.\n *\n * @type {number}\n * @constant\n */\nconst RGBFormat = 1022;\n\n/**\n * Reads the red, green, blue and alpha components.\n *\n * @type {number}\n * @constant\n */\nconst RGBAFormat = 1023;\n\n/**\n * Reads each element as a single depth value, converts it to floating point, and clamps to the range `[0,1]`.\n *\n * @type {number}\n * @constant\n */\nconst DepthFormat = 1026;\n\n/**\n * Reads each element is a pair of depth and stencil values. The depth component of the pair is interpreted as\n * in `DepthFormat`. The stencil component is interpreted based on the depth + stencil internal format.\n *\n * @type {number}\n * @constant\n */\nconst DepthStencilFormat = 1027;\n\n/**\n * Discards the green, blue and alpha components and reads just the red component.\n *\n * @type {number}\n * @constant\n */\nconst RedFormat = 1028;\n\n/**\n * Discards the green, blue and alpha components and reads just the red component. The texels are read as integers instead of floating point.\n *\n * @type {number}\n * @constant\n */\nconst RedIntegerFormat = 1029;\n\n/**\n * Discards the alpha, and blue components and reads the red, and green components.\n *\n * @type {number}\n * @constant\n */\nconst RGFormat = 1030;\n\n/**\n * Discards the alpha, and blue components and reads the red, and green components. The texels are read as integers instead of floating point.\n *\n * @type {number}\n * @constant\n */\nconst RGIntegerFormat = 1031;\n\n/**\n * Discards the alpha component and reads the red, green and blue component. The texels are read as integers instead of floating point.\n *\n * @type {number}\n * @constant\n */\nconst RGBIntegerFormat = 1032;\n\n/**\n * Reads the red, green, blue and alpha components. The texels are read as integers instead of floating point.\n *\n * @type {number}\n * @constant\n */\nconst RGBAIntegerFormat = 1033;\n\n/**\n * A DXT1-compressed image in an RGB image format.\n *\n * @type {number}\n * @constant\n */\nconst RGB_S3TC_DXT1_Format = 33776;\n\n/**\n * A DXT1-compressed image in an RGB image format with a simple on/off alpha value.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_S3TC_DXT1_Format = 33777;\n\n/**\n * A DXT3-compressed image in an RGBA image format. Compared to a 32-bit RGBA texture, it offers 4:1 compression.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_S3TC_DXT3_Format = 33778;\n\n/**\n * A DXT5-compressed image in an RGBA image format. It also provides a 4:1 compression, but differs to the DXT3\n * compression in how the alpha compression is done.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_S3TC_DXT5_Format = 33779;\n\n/**\n * PVRTC RGB compression in 4-bit mode. One block for each 4×4 pixels.\n *\n * @type {number}\n * @constant\n */\nconst RGB_PVRTC_4BPPV1_Format = 35840;\n\n/**\n * PVRTC RGB compression in 2-bit mode. One block for each 8×4 pixels.\n *\n * @type {number}\n * @constant\n */\nconst RGB_PVRTC_2BPPV1_Format = 35841;\n\n/**\n * PVRTC RGBA compression in 4-bit mode. One block for each 4×4 pixels.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_PVRTC_4BPPV1_Format = 35842;\n\n/**\n * PVRTC RGBA compression in 2-bit mode. One block for each 8×4 pixels.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_PVRTC_2BPPV1_Format = 35843;\n\n/**\n * ETC1 RGB format.\n *\n * @type {number}\n * @constant\n */\nconst RGB_ETC1_Format = 36196;\n\n/**\n * ETC2 RGB format.\n *\n * @type {number}\n * @constant\n */\nconst RGB_ETC2_Format = 37492;\n\n/**\n * ETC2 RGBA format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ETC2_EAC_Format = 37496;\n\n/**\n * ASTC RGBA 4x4 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_4x4_Format = 37808;\n\n/**\n * ASTC RGBA 5x4 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_5x4_Format = 37809;\n\n/**\n * ASTC RGBA 5x5 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_5x5_Format = 37810;\n\n/**\n * ASTC RGBA 6x5 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_6x5_Format = 37811;\n\n/**\n * ASTC RGBA 6x6 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_6x6_Format = 37812;\n\n/**\n * ASTC RGBA 8x5 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_8x5_Format = 37813;\n\n/**\n * ASTC RGBA 8x6 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_8x6_Format = 37814;\n\n/**\n * ASTC RGBA 8x8 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_8x8_Format = 37815;\n\n/**\n * ASTC RGBA 10x5 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_10x5_Format = 37816;\n\n/**\n * ASTC RGBA 10x6 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_10x6_Format = 37817;\n\n/**\n * ASTC RGBA 10x8 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_10x8_Format = 37818;\n\n/**\n * ASTC RGBA 10x10 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_10x10_Format = 37819;\n\n/**\n * ASTC RGBA 12x10 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_12x10_Format = 37820;\n\n/**\n * ASTC RGBA 12x12 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_12x12_Format = 37821;\n\n/**\n * BPTC RGBA format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_BPTC_Format = 36492;\n\n/**\n * BPTC Signed RGB format.\n *\n * @type {number}\n * @constant\n */\nconst RGB_BPTC_SIGNED_Format = 36494;\n\n/**\n * BPTC Unsigned RGB format.\n *\n * @type {number}\n * @constant\n */\nconst RGB_BPTC_UNSIGNED_Format = 36495;\n\n/**\n * RGTC1 Red format.\n *\n * @type {number}\n * @constant\n */\nconst RED_RGTC1_Format = 36283;\n\n/**\n * RGTC1 Signed Red format.\n *\n * @type {number}\n * @constant\n */\nconst SIGNED_RED_RGTC1_Format = 36284;\n\n/**\n * RGTC2 Red Green format.\n *\n * @type {number}\n * @constant\n */\nconst RED_GREEN_RGTC2_Format = 36285;\n\n/**\n * RGTC2 Signed Red Green format.\n *\n * @type {number}\n * @constant\n */\nconst SIGNED_RED_GREEN_RGTC2_Format = 36286;\n\n/**\n * Animations are played once.\n *\n * @type {number}\n * @constant\n */\nconst LoopOnce = 2200;\n\n/**\n * Animations are played with a chosen number of repetitions, each time jumping from\n * the end of the clip directly to its beginning.\n *\n * @type {number}\n * @constant\n */\nconst LoopRepeat = 2201;\n\n/**\n * Animations are played with a chosen number of repetitions, alternately playing forward\n * and backward.\n *\n * @type {number}\n * @constant\n */\nconst LoopPingPong = 2202;\n\n/**\n * Discrete interpolation mode for keyframe tracks.\n *\n * @type {number}\n * @constant\n */\nconst InterpolateDiscrete = 2300;\n\n/**\n * Linear interpolation mode for keyframe tracks.\n *\n * @type {number}\n * @constant\n */\nconst InterpolateLinear = 2301;\n\n/**\n * Smooth interpolation mode for keyframe tracks.\n *\n * @type {number}\n * @constant\n */\nconst InterpolateSmooth = 2302;\n\n/**\n * Zero curvature ending for animations.\n *\n * @type {number}\n * @constant\n */\nconst ZeroCurvatureEnding = 2400;\n\n/**\n * Zero slope ending for animations.\n *\n * @type {number}\n * @constant\n */\nconst ZeroSlopeEnding = 2401;\n\n/**\n * Wrap around ending for animations.\n *\n * @type {number}\n * @constant\n */\nconst WrapAroundEnding = 2402;\n\n/**\n * Default animation blend mode.\n *\n * @type {number}\n * @constant\n */\nconst NormalAnimationBlendMode = 2500;\n\n/**\n * Additive animation blend mode. Can be used to layer motions on top of\n * each other to build complex performances from smaller re-usable assets.\n *\n * @type {number}\n * @constant\n */\nconst AdditiveAnimationBlendMode = 2501;\n\n/**\n * For every three vertices draw a single triangle.\n *\n * @type {number}\n * @constant\n */\nconst TrianglesDrawMode = 0;\n\n/**\n * For each vertex draw a triangle from the last three vertices.\n *\n * @type {number}\n * @constant\n */\nconst TriangleStripDrawMode = 1;\n\n/**\n * For each vertex draw a triangle from the first vertex and the last two vertices.\n *\n * @type {number}\n * @constant\n */\nconst TriangleFanDrawMode = 2;\n\n/**\n * Basic depth packing.\n *\n * @type {number}\n * @constant\n */\nconst BasicDepthPacking = 3200;\n\n/**\n * A depth value is packed into 32 bit RGBA.\n *\n * @type {number}\n * @constant\n */\nconst RGBADepthPacking = 3201;\n\n/**\n * A depth value is packed into 24 bit RGB.\n *\n * @type {number}\n * @constant\n */\nconst RGBDepthPacking = 3202;\n\n/**\n * A depth value is packed into 16 bit RG.\n *\n * @type {number}\n * @constant\n */\nconst RGDepthPacking = 3203;\n\n/**\n * Normal information is relative to the underlying surface.\n *\n * @type {number}\n * @constant\n */\nconst TangentSpaceNormalMap = 0;\n\n/**\n * Normal information is relative to the object orientation.\n *\n * @type {number}\n * @constant\n */\nconst ObjectSpaceNormalMap = 1;\n\n// Color space string identifiers, matching CSS Color Module Level 4 and WebGPU names where available.\n\n/**\n * No color space.\n *\n * @type {string}\n * @constant\n */\nconst NoColorSpace = '';\n\n/**\n * sRGB color space.\n *\n * @type {string}\n * @constant\n */\nconst SRGBColorSpace = 'srgb';\n\n/**\n * sRGB-linear color space.\n *\n * @type {string}\n * @constant\n */\nconst LinearSRGBColorSpace = 'srgb-linear';\n\n/**\n * Linear transfer function.\n *\n * @type {string}\n * @constant\n */\nconst LinearTransfer = 'linear';\n\n/**\n * sRGB transfer function.\n *\n * @type {string}\n * @constant\n */\nconst SRGBTransfer = 'srgb';\n\n/**\n * Sets the stencil buffer value to `0`.\n *\n * @type {number}\n * @constant\n */\nconst ZeroStencilOp = 0;\n\n/**\n * Keeps the current value.\n *\n * @type {number}\n * @constant\n */\nconst KeepStencilOp = 7680;\n\n/**\n * Sets the stencil buffer value to the specified reference value.\n *\n * @type {number}\n * @constant\n */\nconst ReplaceStencilOp = 7681;\n\n/**\n * Increments the current stencil buffer value. Clamps to the maximum representable unsigned value.\n *\n * @type {number}\n * @constant\n */\nconst IncrementStencilOp = 7682;\n\n/**\n * Decrements the current stencil buffer value. Clamps to `0`.\n *\n * @type {number}\n * @constant\n */\nconst DecrementStencilOp = 7683;\n\n/**\n * Increments the current stencil buffer value. Wraps stencil buffer value to zero when incrementing\n * the maximum representable unsigned value.\n *\n * @type {number}\n * @constant\n */\nconst IncrementWrapStencilOp = 34055;\n\n/**\n * Decrements the current stencil buffer value. Wraps stencil buffer value to the maximum representable\n * unsigned value when decrementing a stencil buffer value of `0`.\n *\n * @type {number}\n * @constant\n */\nconst DecrementWrapStencilOp = 34056;\n\n/**\n * Inverts the current stencil buffer value bitwise.\n *\n * @type {number}\n * @constant\n */\nconst InvertStencilOp = 5386;\n\n/**\n * Will never return true.\n *\n * @type {number}\n * @constant\n */\nconst NeverStencilFunc = 512;\n\n/**\n * Will return true if the stencil reference value is less than the current stencil value.\n *\n * @type {number}\n * @constant\n */\nconst LessStencilFunc = 513;\n\n/**\n * Will return true if the stencil reference value is equal to the current stencil value.\n *\n * @type {number}\n * @constant\n */\nconst EqualStencilFunc = 514;\n\n/**\n * Will return true if the stencil reference value is less than or equal to the current stencil value.\n *\n * @type {number}\n * @constant\n */\nconst LessEqualStencilFunc = 515;\n\n/**\n * Will return true if the stencil reference value is greater than the current stencil value.\n *\n * @type {number}\n * @constant\n */\nconst GreaterStencilFunc = 516;\n\n/**\n * Will return true if the stencil reference value is not equal to the current stencil value.\n *\n * @type {number}\n * @constant\n */\nconst NotEqualStencilFunc = 517;\n\n/**\n * Will return true if the stencil reference value is greater than or equal to the current stencil value.\n *\n * @type {number}\n * @constant\n */\nconst GreaterEqualStencilFunc = 518;\n\n/**\n * Will always return true.\n *\n * @type {number}\n * @constant\n */\nconst AlwaysStencilFunc = 519;\n\n/**\n * Never pass.\n *\n * @type {number}\n * @constant\n */\nconst NeverCompare = 512;\n\n/**\n * Pass if the incoming value is less than the texture value.\n *\n * @type {number}\n * @constant\n */\nconst LessCompare = 513;\n\n/**\n * Pass if the incoming value equals the texture value.\n *\n * @type {number}\n * @constant\n */\nconst EqualCompare = 514;\n\n/**\n * Pass if the incoming value is less than or equal to the texture value.\n *\n * @type {number}\n * @constant\n */\nconst LessEqualCompare = 515;\n\n/**\n * Pass if the incoming value is greater than the texture value.\n *\n * @type {number}\n * @constant\n */\nconst GreaterCompare = 516;\n\n/**\n * Pass if the incoming value is not equal to the texture value.\n *\n * @type {number}\n * @constant\n */\nconst NotEqualCompare = 517;\n\n/**\n * Pass if the incoming value is greater than or equal to the texture value.\n *\n * @type {number}\n * @constant\n */\nconst GreaterEqualCompare = 518;\n\n/**\n * Always pass.\n *\n * @type {number}\n * @constant\n */\nconst AlwaysCompare = 519;\n\n/**\n * The contents are intended to be specified once by the application, and used many\n * times as the source for drawing and image specification commands.\n *\n * @type {number}\n * @constant\n */\nconst StaticDrawUsage = 35044;\n\n/**\n * The contents are intended to be respecified repeatedly by the application, and\n * used many times as the source for drawing and image specification commands.\n *\n * @type {number}\n * @constant\n */\nconst DynamicDrawUsage = 35048;\n\n/**\n * The contents are intended to be specified once by the application, and used at most\n * a few times as the source for drawing and image specification commands.\n *\n * @type {number}\n * @constant\n */\nconst StreamDrawUsage = 35040;\n\n/**\n * The contents are intended to be specified once by reading data from the 3D API, and queried\n * many times by the application.\n *\n * @type {number}\n * @constant\n */\nconst StaticReadUsage = 35045;\n\n/**\n * The contents are intended to be respecified repeatedly by reading data from the 3D API, and queried\n * many times by the application.\n *\n * @type {number}\n * @constant\n */\nconst DynamicReadUsage = 35049;\n\n/**\n * The contents are intended to be specified once by reading data from the 3D API, and queried at most\n * a few times by the application\n *\n * @type {number}\n * @constant\n */\nconst StreamReadUsage = 35041;\n\n/**\n * The contents are intended to be specified once by reading data from the 3D API, and used many times as\n * the source for WebGL drawing and image specification commands.\n *\n * @type {number}\n * @constant\n */\nconst StaticCopyUsage = 35046;\n\n/**\n * The contents are intended to be respecified repeatedly by reading data from the 3D API, and used many times\n * as the source for WebGL drawing and image specification commands.\n *\n * @type {number}\n * @constant\n */\nconst DynamicCopyUsage = 35050;\n\n/**\n * The contents are intended to be specified once by reading data from the 3D API, and used at most a few times\n * as the source for WebGL drawing and image specification commands.\n *\n * @type {number}\n * @constant\n */\nconst StreamCopyUsage = 35042;\n\n/**\n * GLSL 1 shader code.\n *\n * @type {string}\n * @constant\n */\nconst GLSL1 = '100';\n\n/**\n * GLSL 3 shader code.\n *\n * @type {string}\n * @constant\n */\nconst GLSL3 = '300 es';\n\n/**\n * WebGL coordinate system.\n *\n * @type {number}\n * @constant\n */\nconst WebGLCoordinateSystem = 2000;\n\n/**\n * WebGPU coordinate system.\n *\n * @type {number}\n * @constant\n */\nconst WebGPUCoordinateSystem = 2001;\n\n/**\n * Represents the different timestamp query types.\n *\n * @type {ConstantsTimestampQuery}\n * @constant\n */\nconst TimestampQuery = {\n  COMPUTE: 'compute',\n  RENDER: 'render'\n};\n\n/**\n * Represents mouse buttons and interaction types in context of controls.\n *\n * @type {ConstantsInterpolationSamplingType}\n * @constant\n */\nconst InterpolationSamplingType = {\n  PERSPECTIVE: 'perspective',\n  LINEAR: 'linear',\n  FLAT: 'flat'\n};\n\n/**\n * Represents the different interpolation sampling modes.\n *\n * @type {ConstantsInterpolationSamplingMode}\n * @constant\n */\nconst InterpolationSamplingMode = {\n  NORMAL: 'normal',\n  CENTROID: 'centroid',\n  SAMPLE: 'sample',\n  FLAT_FIRST: 'flat first',\n  FLAT_EITHER: 'flat either'\n};\n\n/**\n * This type represents mouse buttons and interaction types in context of controls.\n *\n * @typedef {Object} ConstantsMouse\n * @property {number} MIDDLE - The left mouse button.\n * @property {number} LEFT - The middle mouse button.\n * @property {number} RIGHT - The right mouse button.\n * @property {number} ROTATE - A rotate interaction.\n * @property {number} DOLLY - A dolly interaction.\n * @property {number} PAN - A pan interaction.\n **/\n\n/**\n * This type represents touch interaction types in context of controls.\n *\n * @typedef {Object} ConstantsTouch\n * @property {number} ROTATE - A rotate interaction.\n * @property {number} PAN - A pan interaction.\n * @property {number} DOLLY_PAN - The dolly-pan interaction.\n * @property {number} DOLLY_ROTATE - A dolly-rotate interaction.\n **/\n\n/**\n * This type represents the different timestamp query types.\n *\n * @typedef {Object} ConstantsTimestampQuery\n * @property {string} COMPUTE - A `compute` timestamp query.\n * @property {string} RENDER - A `render` timestamp query.\n **/\n\n/**\n * Represents the different interpolation sampling types.\n *\n * @typedef {Object} ConstantsInterpolationSamplingType\n * @property {string} PERSPECTIVE - Perspective-correct interpolation.\n * @property {string} LINEAR - Linear interpolation.\n * @property {string} FLAT - Flat interpolation.\n */\n\n/**\n * Represents the different interpolation sampling modes.\n *\n * @typedef {Object} ConstantsInterpolationSamplingMode\n * @property {string} NORMAL - Normal sampling mode.\n * @property {string} CENTROID - Centroid sampling mode.\n * @property {string} SAMPLE - Sample-specific sampling mode.\n * @property {string} FLAT_FIRST - Flat interpolation using the first vertex.\n * @property {string} FLAT_EITHER - Flat interpolation using either vertex.\n */\n\n/**\n * This modules allows to dispatch event objects on custom JavaScript objects.\n *\n * Main repository: [eventdispatcher.js]{@link https://github.com/mrdoob/eventdispatcher.js/}\n *\n * Code Example:\n * ```js\n * class Car extends EventDispatcher {\n * \tstart() {\n *\t\tthis.dispatchEvent( { type: 'start', message: 'vroom vroom!' } );\n *\t}\n *};\n *\n * // Using events with the custom object\n * const car = new Car();\n * car.addEventListener( 'start', function ( event ) {\n * \talert( event.message );\n * } );\n *\n * car.start();\n * ```\n */\nclass EventDispatcher {\n  /**\n   * Adds the given event listener to the given event type.\n   *\n   * @param {string} type - The type of event to listen to.\n   * @param {Function} listener - The function that gets called when the event is fired.\n   */\n  addEventListener(type, listener) {\n    if (this._listeners === undefined) this._listeners = {};\n    const listeners = this._listeners;\n    if (listeners[type] === undefined) {\n      listeners[type] = [];\n    }\n    if (listeners[type].indexOf(listener) === -1) {\n      listeners[type].push(listener);\n    }\n  }\n\n  /**\n   * Returns `true` if the given event listener has been added to the given event type.\n   *\n   * @param {string} type - The type of event.\n   * @param {Function} listener - The listener to check.\n   * @return {boolean} Whether the given event listener has been added to the given event type.\n   */\n  hasEventListener(type, listener) {\n    const listeners = this._listeners;\n    if (listeners === undefined) return false;\n    return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;\n  }\n\n  /**\n   * Removes the given event listener from the given event type.\n   *\n   * @param {string} type - The type of event.\n   * @param {Function} listener - The listener to remove.\n   */\n  removeEventListener(type, listener) {\n    const listeners = this._listeners;\n    if (listeners === undefined) return;\n    const listenerArray = listeners[type];\n    if (listenerArray !== undefined) {\n      const index = listenerArray.indexOf(listener);\n      if (index !== -1) {\n        listenerArray.splice(index, 1);\n      }\n    }\n  }\n\n  /**\n   * Dispatches an event object.\n   *\n   * @param {Object} event - The event that gets fired.\n   */\n  dispatchEvent(event) {\n    const listeners = this._listeners;\n    if (listeners === undefined) return;\n    const listenerArray = listeners[event.type];\n    if (listenerArray !== undefined) {\n      event.target = this;\n\n      // Make a copy, in case listeners are removed while iterating.\n      const array = listenerArray.slice(0);\n      for (let i = 0, l = array.length; i < l; i++) {\n        array[i].call(this, event);\n      }\n      event.target = null;\n    }\n  }\n}\nconst _lut = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0a', '0b', '0c', '0d', '0e', '0f', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1a', '1b', '1c', '1d', '1e', '1f', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2a', '2b', '2c', '2d', '2e', '2f', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3a', '3b', '3c', '3d', '3e', '3f', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4a', '4b', '4c', '4d', '4e', '4f', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5a', '5b', '5c', '5d', '5e', '5f', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '6a', '6b', '6c', '6d', '6e', '6f', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '7a', '7b', '7c', '7d', '7e', '7f', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '8a', '8b', '8c', '8d', '8e', '8f', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '9a', '9b', '9c', '9d', '9e', '9f', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'aa', 'ab', 'ac', 'ad', 'ae', 'af', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9', 'ba', 'bb', 'bc', 'bd', 'be', 'bf', 'c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'ca', 'cb', 'cc', 'cd', 'ce', 'cf', 'd0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'da', 'db', 'dc', 'dd', 'de', 'df', 'e0', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8', 'e9', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef', 'f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff'];\nlet _seed = 1234567;\nconst DEG2RAD = Math.PI / 180;\nconst RAD2DEG = 180 / Math.PI;\n\n/**\n * Generate a [UUID]{@link https://en.wikipedia.org/wiki/Universally_unique_identifier}\n * (universally unique identifier).\n *\n * @return {string} The UUID.\n */\nfunction generateUUID() {\n  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\n  const d0 = Math.random() * 0xffffffff | 0;\n  const d1 = Math.random() * 0xffffffff | 0;\n  const d2 = Math.random() * 0xffffffff | 0;\n  const d3 = Math.random() * 0xffffffff | 0;\n  const uuid = _lut[d0 & 0xff] + _lut[d0 >> 8 & 0xff] + _lut[d0 >> 16 & 0xff] + _lut[d0 >> 24 & 0xff] + '-' + _lut[d1 & 0xff] + _lut[d1 >> 8 & 0xff] + '-' + _lut[d1 >> 16 & 0x0f | 0x40] + _lut[d1 >> 24 & 0xff] + '-' + _lut[d2 & 0x3f | 0x80] + _lut[d2 >> 8 & 0xff] + '-' + _lut[d2 >> 16 & 0xff] + _lut[d2 >> 24 & 0xff] + _lut[d3 & 0xff] + _lut[d3 >> 8 & 0xff] + _lut[d3 >> 16 & 0xff] + _lut[d3 >> 24 & 0xff];\n\n  // .toLowerCase() here flattens concatenated strings to save heap memory space.\n  return uuid.toLowerCase();\n}\n\n/**\n * Clamps the given value between min and max.\n *\n * @param {number} value - The value to clamp.\n * @param {number} min - The min value.\n * @param {number} max - The max value.\n * @return {number} The clamped value.\n */\nfunction clamp(value, min, max) {\n  return Math.max(min, Math.min(max, value));\n}\n\n/**\n * Computes the Euclidean modulo of the given parameters that\n * is `( ( n % m ) + m ) % m`.\n *\n * @param {number} n - The first parameter.\n * @param {number} m - The second parameter.\n * @return {number} The Euclidean modulo.\n */\nfunction euclideanModulo(n, m) {\n  // https://en.wikipedia.org/wiki/Modulo_operation\n\n  return (n % m + m) % m;\n}\n\n/**\n * Performs a linear mapping from range `<a1, a2>` to range `<b1, b2>`\n * for the given value.\n *\n * @param {number} x - The value to be mapped.\n * @param {number} a1 - Minimum value for range A.\n * @param {number} a2 - Maximum value for range A.\n * @param {number} b1 - Minimum value for range B.\n * @param {number} b2 - Maximum value for range B.\n * @return {number} The mapped value.\n */\nfunction mapLinear(x, a1, a2, b1, b2) {\n  return b1 + (x - a1) * (b2 - b1) / (a2 - a1);\n}\n\n/**\n * Returns the percentage in the closed interval `[0, 1]` of the given value\n * between the start and end point.\n *\n * @param {number} x - The start point\n * @param {number} y - The end point.\n * @param {number} value - A value between start and end.\n * @return {number} The interpolation factor.\n */\nfunction inverseLerp(x, y, value) {\n  // https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/\n\n  if (x !== y) {\n    return (value - x) / (y - x);\n  } else {\n    return 0;\n  }\n}\n\n/**\n * Returns a value linearly interpolated from two known points based on the given interval -\n * `t = 0` will return `x` and `t = 1` will return `y`.\n *\n * @param {number} x - The start point\n * @param {number} y - The end point.\n * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.\n * @return {number} The interpolated value.\n */\nfunction lerp(x, y, t) {\n  return (1 - t) * x + t * y;\n}\n\n/**\n * Smoothly interpolate a number from `x` to `y` in  a spring-like manner using a delta\n * time to maintain frame rate independent movement. For details, see\n * [Frame rate independent damping using lerp]{@link http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/}.\n *\n * @param {number} x - The current point.\n * @param {number} y - The target point.\n * @param {number} lambda - A higher lambda value will make the movement more sudden,\n * and a lower value will make the movement more gradual.\n * @param {number} dt - Delta time in seconds.\n * @return {number} The interpolated value.\n */\nfunction damp(x, y, lambda, dt) {\n  return lerp(x, y, 1 - Math.exp(-lambda * dt));\n}\n\n/**\n * Returns a value that alternates between `0` and the given `length` parameter.\n *\n * @param {number} x - The value to pingpong.\n * @param {number} [length=1] - The positive value the function will pingpong to.\n * @return {number} The alternated value.\n */\nfunction pingpong(x) {\n  let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  // https://www.desmos.com/calculator/vcsjnyz7x4\n\n  return length - Math.abs(euclideanModulo(x, length * 2) - length);\n}\n\n/**\n * Returns a value in the range `[0,1]` that represents the percentage that `x` has\n * moved between `min` and `max`, but smoothed or slowed down the closer `x` is to\n * the `min` and `max`.\n *\n * See [Smoothstep]{@link http://en.wikipedia.org/wiki/Smoothstep} for more details.\n *\n * @param {number} x - The value to evaluate based on its position between min and max.\n * @param {number} min - The min value. Any x value below min will be `0`.\n * @param {number} max - The max value. Any x value above max will be `1`.\n * @return {number} The alternated value.\n */\nfunction smoothstep(x, min, max) {\n  if (x <= min) return 0;\n  if (x >= max) return 1;\n  x = (x - min) / (max - min);\n  return x * x * (3 - 2 * x);\n}\n\n/**\n * A [variation on smoothstep]{@link https://en.wikipedia.org/wiki/Smoothstep#Variations}\n * that has zero 1st and 2nd order derivatives at x=0 and x=1.\n *\n * @param {number} x - The value to evaluate based on its position between min and max.\n * @param {number} min - The min value. Any x value below min will be `0`.\n * @param {number} max - The max value. Any x value above max will be `1`.\n * @return {number} The alternated value.\n */\nfunction smootherstep(x, min, max) {\n  if (x <= min) return 0;\n  if (x >= max) return 1;\n  x = (x - min) / (max - min);\n  return x * x * x * (x * (x * 6 - 15) + 10);\n}\n\n/**\n * Returns a random integer from `<low, high>` interval.\n *\n * @param {number} low - The lower value boundary.\n * @param {number} high - The upper value boundary\n * @return {number} A random integer.\n */\nfunction randInt(low, high) {\n  return low + Math.floor(Math.random() * (high - low + 1));\n}\n\n/**\n * Returns a random float from `<low, high>` interval.\n *\n * @param {number} low - The lower value boundary.\n * @param {number} high - The upper value boundary\n * @return {number} A random float.\n */\nfunction randFloat(low, high) {\n  return low + Math.random() * (high - low);\n}\n\n/**\n * Returns a random integer from `<-range/2, range/2>` interval.\n *\n * @param {number} range - Defines the value range.\n * @return {number} A random float.\n */\nfunction randFloatSpread(range) {\n  return range * (0.5 - Math.random());\n}\n\n/**\n * Returns a deterministic pseudo-random float in the interval `[0, 1]`.\n *\n * @param {number} [s] - The integer seed.\n * @return {number} A random float.\n */\nfunction seededRandom(s) {\n  if (s !== undefined) _seed = s;\n\n  // Mulberry32 generator\n\n  let t = _seed += 0x6D2B79F5;\n  t = Math.imul(t ^ t >>> 15, t | 1);\n  t ^= t + Math.imul(t ^ t >>> 7, t | 61);\n  return ((t ^ t >>> 14) >>> 0) / 4294967296;\n}\n\n/**\n * Converts degrees to radians.\n *\n * @param {number} degrees - A value in degrees.\n * @return {number} The converted value in radians.\n */\nfunction degToRad(degrees) {\n  return degrees * DEG2RAD;\n}\n\n/**\n * Converts radians to degrees.\n *\n * @param {number} radians - A value in radians.\n * @return {number} The converted value in degrees.\n */\nfunction radToDeg(radians) {\n  return radians * RAD2DEG;\n}\n\n/**\n * Returns `true` if the given number is a power of two.\n *\n * @param {number} value - The value to check.\n * @return {boolean} Whether the given number is a power of two or not.\n */\nfunction isPowerOfTwo(value) {\n  return (value & value - 1) === 0 && value !== 0;\n}\n\n/**\n * Returns the smallest power of two that is greater than or equal to the given number.\n *\n * @param {number} value - The value to find a POT for.\n * @return {number} The smallest power of two that is greater than or equal to the given number.\n */\nfunction ceilPowerOfTwo(value) {\n  return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));\n}\n\n/**\n * Returns the largest power of two that is less than or equal to the given number.\n *\n * @param {number} value - The value to find a POT for.\n * @return {number} The largest power of two that is less than or equal to the given number.\n */\nfunction floorPowerOfTwo(value) {\n  return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));\n}\n\n/**\n * Sets the given quaternion from the [Intrinsic Proper Euler Angles]{@link https://en.wikipedia.org/wiki/Euler_angles}\n * defined by the given angles and order.\n *\n * Rotations are applied to the axes in the order specified by order:\n * rotation by angle `a` is applied first, then by angle `b`, then by angle `c`.\n *\n * @param {Quaternion} q - The quaternion to set.\n * @param {number} a - The rotation applied to the first axis, in radians.\n * @param {number} b - The rotation applied to the second axis, in radians.\n * @param {number} c - The rotation applied to the third axis, in radians.\n * @param {('XYX'|'XZX'|'YXY'|'YZY'|'ZXZ'|'ZYZ')} order - A string specifying the axes order.\n */\nfunction setQuaternionFromProperEuler(q, a, b, c, order) {\n  const cos = Math.cos;\n  const sin = Math.sin;\n  const c2 = cos(b / 2);\n  const s2 = sin(b / 2);\n  const c13 = cos((a + c) / 2);\n  const s13 = sin((a + c) / 2);\n  const c1_3 = cos((a - c) / 2);\n  const s1_3 = sin((a - c) / 2);\n  const c3_1 = cos((c - a) / 2);\n  const s3_1 = sin((c - a) / 2);\n  switch (order) {\n    case 'XYX':\n      q.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);\n      break;\n    case 'YZY':\n      q.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);\n      break;\n    case 'ZXZ':\n      q.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);\n      break;\n    case 'XZX':\n      q.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);\n      break;\n    case 'YXY':\n      q.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);\n      break;\n    case 'ZYZ':\n      q.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);\n      break;\n    default:\n      console.warn('THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order);\n  }\n}\n\n/**\n * Denormalizes the given value according to the given typed array.\n *\n * @param {number} value - The value to denormalize.\n * @param {TypedArray} array - The typed array that defines the data type of the value.\n * @return {number} The denormalize (float) value in the range `[0,1]`.\n */\nfunction denormalize(value, array) {\n  switch (array.constructor) {\n    case Float32Array:\n      return value;\n    case Uint32Array:\n      return value / 4294967295.0;\n    case Uint16Array:\n      return value / 65535.0;\n    case Uint8Array:\n      return value / 255.0;\n    case Int32Array:\n      return Math.max(value / 2147483647.0, -1);\n    case Int16Array:\n      return Math.max(value / 32767.0, -1);\n    case Int8Array:\n      return Math.max(value / 127.0, -1);\n    default:\n      throw new Error('Invalid component type.');\n  }\n}\n\n/**\n * Normalizes the given value according to the given typed array.\n *\n * @param {number} value - The float value in the range `[0,1]` to normalize.\n * @param {TypedArray} array - The typed array that defines the data type of the value.\n * @return {number} The normalize value.\n */\nfunction normalize(value, array) {\n  switch (array.constructor) {\n    case Float32Array:\n      return value;\n    case Uint32Array:\n      return Math.round(value * 4294967295.0);\n    case Uint16Array:\n      return Math.round(value * 65535.0);\n    case Uint8Array:\n      return Math.round(value * 255.0);\n    case Int32Array:\n      return Math.round(value * 2147483647.0);\n    case Int16Array:\n      return Math.round(value * 32767.0);\n    case Int8Array:\n      return Math.round(value * 127.0);\n    default:\n      throw new Error('Invalid component type.');\n  }\n}\n\n/**\n * @class\n * @classdesc A collection of math utility functions.\n * @hideconstructor\n */\nconst MathUtils = {\n  DEG2RAD: DEG2RAD,\n  RAD2DEG: RAD2DEG,\n  /**\n   * Generate a [UUID]{@link https://en.wikipedia.org/wiki/Universally_unique_identifier}\n   * (universally unique identifier).\n   *\n   * @static\n   * @method\n   * @return {string} The UUID.\n   */\n  generateUUID: generateUUID,\n  /**\n   * Clamps the given value between min and max.\n   *\n   * @static\n   * @method\n   * @param {number} value - The value to clamp.\n   * @param {number} min - The min value.\n   * @param {number} max - The max value.\n   * @return {number} The clamped value.\n   */\n  clamp: clamp,\n  /**\n   * Computes the Euclidean modulo of the given parameters that\n   * is `( ( n % m ) + m ) % m`.\n   *\n   * @static\n   * @method\n   * @param {number} n - The first parameter.\n   * @param {number} m - The second parameter.\n   * @return {number} The Euclidean modulo.\n   */\n  euclideanModulo: euclideanModulo,\n  /**\n   * Performs a linear mapping from range `<a1, a2>` to range `<b1, b2>`\n   * for the given value.\n   *\n   * @static\n   * @method\n   * @param {number} x - The value to be mapped.\n   * @param {number} a1 - Minimum value for range A.\n   * @param {number} a2 - Maximum value for range A.\n   * @param {number} b1 - Minimum value for range B.\n   * @param {number} b2 - Maximum value for range B.\n   * @return {number} The mapped value.\n   */\n  mapLinear: mapLinear,\n  /**\n   * Returns the percentage in the closed interval `[0, 1]` of the given value\n   * between the start and end point.\n   *\n   * @static\n   * @method\n   * @param {number} x - The start point\n   * @param {number} y - The end point.\n   * @param {number} value - A value between start and end.\n   * @return {number} The interpolation factor.\n   */\n  inverseLerp: inverseLerp,\n  /**\n   * Returns a value linearly interpolated from two known points based on the given interval -\n   * `t = 0` will return `x` and `t = 1` will return `y`.\n   *\n   * @static\n   * @method\n   * @param {number} x - The start point\n   * @param {number} y - The end point.\n   * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.\n   * @return {number} The interpolated value.\n   */\n  lerp: lerp,\n  /**\n   * Smoothly interpolate a number from `x` to `y` in  a spring-like manner using a delta\n   * time to maintain frame rate independent movement. For details, see\n   * [Frame rate independent damping using lerp]{@link http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/}.\n   *\n   * @static\n   * @method\n   * @param {number} x - The current point.\n   * @param {number} y - The target point.\n   * @param {number} lambda - A higher lambda value will make the movement more sudden,\n   * and a lower value will make the movement more gradual.\n   * @param {number} dt - Delta time in seconds.\n   * @return {number} The interpolated value.\n   */\n  damp: damp,\n  /**\n   * Returns a value that alternates between `0` and the given `length` parameter.\n   *\n   * @static\n   * @method\n   * @param {number} x - The value to pingpong.\n   * @param {number} [length=1] - The positive value the function will pingpong to.\n   * @return {number} The alternated value.\n   */\n  pingpong: pingpong,\n  /**\n   * Returns a value in the range `[0,1]` that represents the percentage that `x` has\n   * moved between `min` and `max`, but smoothed or slowed down the closer `x` is to\n   * the `min` and `max`.\n   *\n   * See [Smoothstep]{@link http://en.wikipedia.org/wiki/Smoothstep} for more details.\n   *\n   * @static\n   * @method\n   * @param {number} x - The value to evaluate based on its position between min and max.\n   * @param {number} min - The min value. Any x value below min will be `0`.\n   * @param {number} max - The max value. Any x value above max will be `1`.\n   * @return {number} The alternated value.\n   */\n  smoothstep: smoothstep,\n  /**\n   * A [variation on smoothstep]{@link https://en.wikipedia.org/wiki/Smoothstep#Variations}\n   * that has zero 1st and 2nd order derivatives at x=0 and x=1.\n   *\n   * @static\n   * @method\n   * @param {number} x - The value to evaluate based on its position between min and max.\n   * @param {number} min - The min value. Any x value below min will be `0`.\n   * @param {number} max - The max value. Any x value above max will be `1`.\n   * @return {number} The alternated value.\n   */\n  smootherstep: smootherstep,\n  /**\n   * Returns a random integer from `<low, high>` interval.\n   *\n   * @static\n   * @method\n   * @param {number} low - The lower value boundary.\n   * @param {number} high - The upper value boundary\n   * @return {number} A random integer.\n   */\n  randInt: randInt,\n  /**\n   * Returns a random float from `<low, high>` interval.\n   *\n   * @static\n   * @method\n   * @param {number} low - The lower value boundary.\n   * @param {number} high - The upper value boundary\n   * @return {number} A random float.\n   */\n  randFloat: randFloat,\n  /**\n   * Returns a random integer from `<-range/2, range/2>` interval.\n   *\n   * @static\n   * @method\n   * @param {number} range - Defines the value range.\n   * @return {number} A random float.\n   */\n  randFloatSpread: randFloatSpread,\n  /**\n   * Returns a deterministic pseudo-random float in the interval `[0, 1]`.\n   *\n   * @static\n   * @method\n   * @param {number} [s] - The integer seed.\n   * @return {number} A random float.\n   */\n  seededRandom: seededRandom,\n  /**\n   * Converts degrees to radians.\n   *\n   * @static\n   * @method\n   * @param {number} degrees - A value in degrees.\n   * @return {number} The converted value in radians.\n   */\n  degToRad: degToRad,\n  /**\n   * Converts radians to degrees.\n   *\n   * @static\n   * @method\n   * @param {number} radians - A value in radians.\n   * @return {number} The converted value in degrees.\n   */\n  radToDeg: radToDeg,\n  /**\n   * Returns `true` if the given number is a power of two.\n   *\n   * @static\n   * @method\n   * @param {number} value - The value to check.\n   * @return {boolean} Whether the given number is a power of two or not.\n   */\n  isPowerOfTwo: isPowerOfTwo,\n  /**\n   * Returns the smallest power of two that is greater than or equal to the given number.\n   *\n   * @static\n   * @method\n   * @param {number} value - The value to find a POT for.\n   * @return {number} The smallest power of two that is greater than or equal to the given number.\n   */\n  ceilPowerOfTwo: ceilPowerOfTwo,\n  /**\n   * Returns the largest power of two that is less than or equal to the given number.\n   *\n   * @static\n   * @method\n   * @param {number} value - The value to find a POT for.\n   * @return {number} The largest power of two that is less than or equal to the given number.\n   */\n  floorPowerOfTwo: floorPowerOfTwo,\n  /**\n   * Sets the given quaternion from the [Intrinsic Proper Euler Angles]{@link https://en.wikipedia.org/wiki/Euler_angles}\n   * defined by the given angles and order.\n   *\n   * Rotations are applied to the axes in the order specified by order:\n   * rotation by angle `a` is applied first, then by angle `b`, then by angle `c`.\n   *\n   * @static\n   * @method\n   * @param {Quaternion} q - The quaternion to set.\n   * @param {number} a - The rotation applied to the first axis, in radians.\n   * @param {number} b - The rotation applied to the second axis, in radians.\n   * @param {number} c - The rotation applied to the third axis, in radians.\n   * @param {('XYX'|'XZX'|'YXY'|'YZY'|'ZXZ'|'ZYZ')} order - A string specifying the axes order.\n   */\n  setQuaternionFromProperEuler: setQuaternionFromProperEuler,\n  /**\n   * Normalizes the given value according to the given typed array.\n   *\n   * @static\n   * @method\n   * @param {number} value - The float value in the range `[0,1]` to normalize.\n   * @param {TypedArray} array - The typed array that defines the data type of the value.\n   * @return {number} The normalize value.\n   */\n  normalize: normalize,\n  /**\n   * Denormalizes the given value according to the given typed array.\n   *\n   * @static\n   * @method\n   * @param {number} value - The value to denormalize.\n   * @param {TypedArray} array - The typed array that defines the data type of the value.\n   * @return {number} The denormalize (float) value in the range `[0,1]`.\n   */\n  denormalize: denormalize\n};\n\n/**\n * Class representing a 2D vector. A 2D vector is an ordered pair of numbers\n * (labeled x and y), which can be used to represent a number of things, such as:\n *\n * - A point in 2D space (i.e. a position on a plane).\n * - A direction and length across a plane. In three.js the length will\n * always be the Euclidean distance(straight-line distance) from `(0, 0)` to `(x, y)`\n * and the direction is also measured from `(0, 0)` towards `(x, y)`.\n * - Any arbitrary ordered pair of numbers.\n *\n * There are other things a 2D vector can be used to represent, such as\n * momentum vectors, complex numbers and so on, however these are the most\n * common uses in three.js.\n *\n * Iterating through a vector instance will yield its components `(x, y)` in\n * the corresponding order.\n * ```js\n * const a = new THREE.Vector2( 0, 1 );\n *\n * //no arguments; will be initialised to (0, 0)\n * const b = new THREE.Vector2( );\n *\n * const d = a.distanceTo( b );\n * ```\n */\nclass Vector2 {\n  /**\n   * Constructs a new 2D vector.\n   *\n   * @param {number} [x=0] - The x value of this vector.\n   * @param {number} [y=0] - The y value of this vector.\n   */\n  constructor() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    Vector2.prototype.isVector2 = true;\n\n    /**\n     * The x value of this vector.\n     *\n     * @type {number}\n     */\n    this.x = x;\n\n    /**\n     * The y value of this vector.\n     *\n     * @type {number}\n     */\n    this.y = y;\n  }\n\n  /**\n   * Alias for {@link Vector2#x}.\n   *\n   * @type {number}\n   */\n  get width() {\n    return this.x;\n  }\n  set width(value) {\n    this.x = value;\n  }\n\n  /**\n   * Alias for {@link Vector2#y}.\n   *\n   * @type {number}\n   */\n  get height() {\n    return this.y;\n  }\n  set height(value) {\n    this.y = value;\n  }\n\n  /**\n   * Sets the vector components.\n   *\n   * @param {number} x - The value of the x component.\n   * @param {number} y - The value of the y component.\n   * @return {Vector2} A reference to this vector.\n   */\n  set(x, y) {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  /**\n   * Sets the vector components to the same value.\n   *\n   * @param {number} scalar - The value to set for all vector components.\n   * @return {Vector2} A reference to this vector.\n   */\n  setScalar(scalar) {\n    this.x = scalar;\n    this.y = scalar;\n    return this;\n  }\n\n  /**\n   * Sets the vector's x component to the given value\n   *\n   * @param {number} x - The value to set.\n   * @return {Vector2} A reference to this vector.\n   */\n  setX(x) {\n    this.x = x;\n    return this;\n  }\n\n  /**\n   * Sets the vector's y component to the given value\n   *\n   * @param {number} y - The value to set.\n   * @return {Vector2} A reference to this vector.\n   */\n  setY(y) {\n    this.y = y;\n    return this;\n  }\n\n  /**\n   * Allows to set a vector component with an index.\n   *\n   * @param {number} index - The component index. `0` equals to x, `1` equals to y.\n   * @param {number} value - The value to set.\n   * @return {Vector2} A reference to this vector.\n   */\n  setComponent(index, value) {\n    switch (index) {\n      case 0:\n        this.x = value;\n        break;\n      case 1:\n        this.y = value;\n        break;\n      default:\n        throw new Error('index is out of range: ' + index);\n    }\n    return this;\n  }\n\n  /**\n   * Returns the value of the vector component which matches the given index.\n   *\n   * @param {number} index - The component index. `0` equals to x, `1` equals to y.\n   * @return {number} A vector component value.\n   */\n  getComponent(index) {\n    switch (index) {\n      case 0:\n        return this.x;\n      case 1:\n        return this.y;\n      default:\n        throw new Error('index is out of range: ' + index);\n    }\n  }\n\n  /**\n   * Returns a new vector with copied values from this instance.\n   *\n   * @return {Vector2} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor(this.x, this.y);\n  }\n\n  /**\n   * Copies the values of the given vector to this instance.\n   *\n   * @param {Vector2} v - The vector to copy.\n   * @return {Vector2} A reference to this vector.\n   */\n  copy(v) {\n    this.x = v.x;\n    this.y = v.y;\n    return this;\n  }\n\n  /**\n   * Adds the given vector to this instance.\n   *\n   * @param {Vector2} v - The vector to add.\n   * @return {Vector2} A reference to this vector.\n   */\n  add(v) {\n    this.x += v.x;\n    this.y += v.y;\n    return this;\n  }\n\n  /**\n   * Adds the given scalar value to all components of this instance.\n   *\n   * @param {number} s - The scalar to add.\n   * @return {Vector2} A reference to this vector.\n   */\n  addScalar(s) {\n    this.x += s;\n    this.y += s;\n    return this;\n  }\n\n  /**\n   * Adds the given vectors and stores the result in this instance.\n   *\n   * @param {Vector2} a - The first vector.\n   * @param {Vector2} b - The second vector.\n   * @return {Vector2} A reference to this vector.\n   */\n  addVectors(a, b) {\n    this.x = a.x + b.x;\n    this.y = a.y + b.y;\n    return this;\n  }\n\n  /**\n   * Adds the given vector scaled by the given factor to this instance.\n   *\n   * @param {Vector2} v - The vector.\n   * @param {number} s - The factor that scales `v`.\n   * @return {Vector2} A reference to this vector.\n   */\n  addScaledVector(v, s) {\n    this.x += v.x * s;\n    this.y += v.y * s;\n    return this;\n  }\n\n  /**\n   * Subtracts the given vector from this instance.\n   *\n   * @param {Vector2} v - The vector to subtract.\n   * @return {Vector2} A reference to this vector.\n   */\n  sub(v) {\n    this.x -= v.x;\n    this.y -= v.y;\n    return this;\n  }\n\n  /**\n   * Subtracts the given scalar value from all components of this instance.\n   *\n   * @param {number} s - The scalar to subtract.\n   * @return {Vector2} A reference to this vector.\n   */\n  subScalar(s) {\n    this.x -= s;\n    this.y -= s;\n    return this;\n  }\n\n  /**\n   * Subtracts the given vectors and stores the result in this instance.\n   *\n   * @param {Vector2} a - The first vector.\n   * @param {Vector2} b - The second vector.\n   * @return {Vector2} A reference to this vector.\n   */\n  subVectors(a, b) {\n    this.x = a.x - b.x;\n    this.y = a.y - b.y;\n    return this;\n  }\n\n  /**\n   * Multiplies the given vector with this instance.\n   *\n   * @param {Vector2} v - The vector to multiply.\n   * @return {Vector2} A reference to this vector.\n   */\n  multiply(v) {\n    this.x *= v.x;\n    this.y *= v.y;\n    return this;\n  }\n\n  /**\n   * Multiplies the given scalar value with all components of this instance.\n   *\n   * @param {number} scalar - The scalar to multiply.\n   * @return {Vector2} A reference to this vector.\n   */\n  multiplyScalar(scalar) {\n    this.x *= scalar;\n    this.y *= scalar;\n    return this;\n  }\n\n  /**\n   * Divides this instance by the given vector.\n   *\n   * @param {Vector2} v - The vector to divide.\n   * @return {Vector2} A reference to this vector.\n   */\n  divide(v) {\n    this.x /= v.x;\n    this.y /= v.y;\n    return this;\n  }\n\n  /**\n   * Divides this vector by the given scalar.\n   *\n   * @param {number} scalar - The scalar to divide.\n   * @return {Vector2} A reference to this vector.\n   */\n  divideScalar(scalar) {\n    return this.multiplyScalar(1 / scalar);\n  }\n\n  /**\n   * Multiplies this vector (with an implicit 1 as the 3rd component) by\n   * the given 3x3 matrix.\n   *\n   * @param {Matrix3} m - The matrix to apply.\n   * @return {Vector2} A reference to this vector.\n   */\n  applyMatrix3(m) {\n    const x = this.x,\n      y = this.y;\n    const e = m.elements;\n    this.x = e[0] * x + e[3] * y + e[6];\n    this.y = e[1] * x + e[4] * y + e[7];\n    return this;\n  }\n\n  /**\n   * If this vector's x or y value is greater than the given vector's x or y\n   * value, replace that value with the corresponding min value.\n   *\n   * @param {Vector2} v - The vector.\n   * @return {Vector2} A reference to this vector.\n   */\n  min(v) {\n    this.x = Math.min(this.x, v.x);\n    this.y = Math.min(this.y, v.y);\n    return this;\n  }\n\n  /**\n   * If this vector's x or y value is less than the given vector's x or y\n   * value, replace that value with the corresponding max value.\n   *\n   * @param {Vector2} v - The vector.\n   * @return {Vector2} A reference to this vector.\n   */\n  max(v) {\n    this.x = Math.max(this.x, v.x);\n    this.y = Math.max(this.y, v.y);\n    return this;\n  }\n\n  /**\n   * If this vector's x or y value is greater than the max vector's x or y\n   * value, it is replaced by the corresponding value.\n   * If this vector's x or y value is less than the min vector's x or y value,\n   * it is replaced by the corresponding value.\n   *\n   * @param {Vector2} min - The minimum x and y values.\n   * @param {Vector2} max - The maximum x and y values in the desired range.\n   * @return {Vector2} A reference to this vector.\n   */\n  clamp(min, max) {\n    // assumes min < max, componentwise\n\n    this.x = clamp(this.x, min.x, max.x);\n    this.y = clamp(this.y, min.y, max.y);\n    return this;\n  }\n\n  /**\n   * If this vector's x or y values are greater than the max value, they are\n   * replaced by the max value.\n   * If this vector's x or y values are less than the min value, they are\n   * replaced by the min value.\n   *\n   * @param {number} minVal - The minimum value the components will be clamped to.\n   * @param {number} maxVal - The maximum value the components will be clamped to.\n   * @return {Vector2} A reference to this vector.\n   */\n  clampScalar(minVal, maxVal) {\n    this.x = clamp(this.x, minVal, maxVal);\n    this.y = clamp(this.y, minVal, maxVal);\n    return this;\n  }\n\n  /**\n   * If this vector's length is greater than the max value, it is replaced by\n   * the max value.\n   * If this vector's length is less than the min value, it is replaced by the\n   * min value.\n   *\n   * @param {number} min - The minimum value the vector length will be clamped to.\n   * @param {number} max - The maximum value the vector length will be clamped to.\n   * @return {Vector2} A reference to this vector.\n   */\n  clampLength(min, max) {\n    const length = this.length();\n    return this.divideScalar(length || 1).multiplyScalar(clamp(length, min, max));\n  }\n\n  /**\n   * The components of this vector are rounded down to the nearest integer value.\n   *\n   * @return {Vector2} A reference to this vector.\n   */\n  floor() {\n    this.x = Math.floor(this.x);\n    this.y = Math.floor(this.y);\n    return this;\n  }\n\n  /**\n   * The components of this vector are rounded up to the nearest integer value.\n   *\n   * @return {Vector2} A reference to this vector.\n   */\n  ceil() {\n    this.x = Math.ceil(this.x);\n    this.y = Math.ceil(this.y);\n    return this;\n  }\n\n  /**\n   * The components of this vector are rounded to the nearest integer value\n   *\n   * @return {Vector2} A reference to this vector.\n   */\n  round() {\n    this.x = Math.round(this.x);\n    this.y = Math.round(this.y);\n    return this;\n  }\n\n  /**\n   * The components of this vector are rounded towards zero (up if negative,\n   * down if positive) to an integer value.\n   *\n   * @return {Vector2} A reference to this vector.\n   */\n  roundToZero() {\n    this.x = Math.trunc(this.x);\n    this.y = Math.trunc(this.y);\n    return this;\n  }\n\n  /**\n   * Inverts this vector - i.e. sets x = -x and y = -y.\n   *\n   * @return {Vector2} A reference to this vector.\n   */\n  negate() {\n    this.x = -this.x;\n    this.y = -this.y;\n    return this;\n  }\n\n  /**\n   * Calculates the dot product of the given vector with this instance.\n   *\n   * @param {Vector2} v - The vector to compute the dot product with.\n   * @return {number} The result of the dot product.\n   */\n  dot(v) {\n    return this.x * v.x + this.y * v.y;\n  }\n\n  /**\n   * Calculates the cross product of the given vector with this instance.\n   *\n   * @param {Vector2} v - The vector to compute the cross product with.\n   * @return {number} The result of the cross product.\n   */\n  cross(v) {\n    return this.x * v.y - this.y * v.x;\n  }\n\n  /**\n   * Computes the square of the Euclidean length (straight-line length) from\n   * (0, 0) to (x, y). If you are comparing the lengths of vectors, you should\n   * compare the length squared instead as it is slightly more efficient to calculate.\n   *\n   * @return {number} The square length of this vector.\n   */\n  lengthSq() {\n    return this.x * this.x + this.y * this.y;\n  }\n\n  /**\n   * Computes the  Euclidean length (straight-line length) from (0, 0) to (x, y).\n   *\n   * @return {number} The length of this vector.\n   */\n  length() {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  /**\n   * Computes the Manhattan length of this vector.\n   *\n   * @return {number} The length of this vector.\n   */\n  manhattanLength() {\n    return Math.abs(this.x) + Math.abs(this.y);\n  }\n\n  /**\n   * Converts this vector to a unit vector - that is, sets it equal to a vector\n   * with the same direction as this one, but with a vector length of `1`.\n   *\n   * @return {Vector2} A reference to this vector.\n   */\n  normalize() {\n    return this.divideScalar(this.length() || 1);\n  }\n\n  /**\n   * Computes the angle in radians of this vector with respect to the positive x-axis.\n   *\n   * @return {number} The angle in radians.\n   */\n  angle() {\n    const angle = Math.atan2(-this.y, -this.x) + Math.PI;\n    return angle;\n  }\n\n  /**\n   * Returns the angle between the given vector and this instance in radians.\n   *\n   * @param {Vector2} v - The vector to compute the angle with.\n   * @return {number} The angle in radians.\n   */\n  angleTo(v) {\n    const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());\n    if (denominator === 0) return Math.PI / 2;\n    const theta = this.dot(v) / denominator;\n\n    // clamp, to handle numerical problems\n\n    return Math.acos(clamp(theta, -1, 1));\n  }\n\n  /**\n   * Computes the distance from the given vector to this instance.\n   *\n   * @param {Vector2} v - The vector to compute the distance to.\n   * @return {number} The distance.\n   */\n  distanceTo(v) {\n    return Math.sqrt(this.distanceToSquared(v));\n  }\n\n  /**\n   * Computes the squared distance from the given vector to this instance.\n   * If you are just comparing the distance with another distance, you should compare\n   * the distance squared instead as it is slightly more efficient to calculate.\n   *\n   * @param {Vector2} v - The vector to compute the squared distance to.\n   * @return {number} The squared distance.\n   */\n  distanceToSquared(v) {\n    const dx = this.x - v.x,\n      dy = this.y - v.y;\n    return dx * dx + dy * dy;\n  }\n\n  /**\n   * Computes the Manhattan distance from the given vector to this instance.\n   *\n   * @param {Vector2} v - The vector to compute the Manhattan distance to.\n   * @return {number} The Manhattan distance.\n   */\n  manhattanDistanceTo(v) {\n    return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);\n  }\n\n  /**\n   * Sets this vector to a vector with the same direction as this one, but\n   * with the specified length.\n   *\n   * @param {number} length - The new length of this vector.\n   * @return {Vector2} A reference to this vector.\n   */\n  setLength(length) {\n    return this.normalize().multiplyScalar(length);\n  }\n\n  /**\n   * Linearly interpolates between the given vector and this instance, where\n   * alpha is the percent distance along the line - alpha = 0 will be this\n   * vector, and alpha = 1 will be the given one.\n   *\n   * @param {Vector2} v - The vector to interpolate towards.\n   * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n   * @return {Vector2} A reference to this vector.\n   */\n  lerp(v, alpha) {\n    this.x += (v.x - this.x) * alpha;\n    this.y += (v.y - this.y) * alpha;\n    return this;\n  }\n\n  /**\n   * Linearly interpolates between the given vectors, where alpha is the percent\n   * distance along the line - alpha = 0 will be first vector, and alpha = 1 will\n   * be the second one. The result is stored in this instance.\n   *\n   * @param {Vector2} v1 - The first vector.\n   * @param {Vector2} v2 - The second vector.\n   * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n   * @return {Vector2} A reference to this vector.\n   */\n  lerpVectors(v1, v2, alpha) {\n    this.x = v1.x + (v2.x - v1.x) * alpha;\n    this.y = v1.y + (v2.y - v1.y) * alpha;\n    return this;\n  }\n\n  /**\n   * Returns `true` if this vector is equal with the given one.\n   *\n   * @param {Vector2} v - The vector to test for equality.\n   * @return {boolean} Whether this vector is equal with the given one.\n   */\n  equals(v) {\n    return v.x === this.x && v.y === this.y;\n  }\n\n  /**\n   * Sets this vector's x value to be `array[ offset ]` and y\n   * value to be `array[ offset + 1 ]`.\n   *\n   * @param {Array<number>} array - An array holding the vector component values.\n   * @param {number} [offset=0] - The offset into the array.\n   * @return {Vector2} A reference to this vector.\n   */\n  fromArray(array) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.x = array[offset];\n    this.y = array[offset + 1];\n    return this;\n  }\n\n  /**\n   * Writes the components of this vector to the given array. If no array is provided,\n   * the method returns a new instance.\n   *\n   * @param {Array<number>} [array=[]] - The target array holding the vector components.\n   * @param {number} [offset=0] - Index of the first element in the array.\n   * @return {Array<number>} The vector components.\n   */\n  toArray() {\n    let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    array[offset] = this.x;\n    array[offset + 1] = this.y;\n    return array;\n  }\n\n  /**\n   * Sets the components of this vector from the given buffer attribute.\n   *\n   * @param {BufferAttribute} attribute - The buffer attribute holding vector data.\n   * @param {number} index - The index into the attribute.\n   * @return {Vector2} A reference to this vector.\n   */\n  fromBufferAttribute(attribute, index) {\n    this.x = attribute.getX(index);\n    this.y = attribute.getY(index);\n    return this;\n  }\n\n  /**\n   * Rotates this vector around the given center by the given angle.\n   *\n   * @param {Vector2} center - The point around which to rotate.\n   * @param {number} angle - The angle to rotate, in radians.\n   * @return {Vector2} A reference to this vector.\n   */\n  rotateAround(center, angle) {\n    const c = Math.cos(angle),\n      s = Math.sin(angle);\n    const x = this.x - center.x;\n    const y = this.y - center.y;\n    this.x = x * c - y * s + center.x;\n    this.y = x * s + y * c + center.y;\n    return this;\n  }\n\n  /**\n   * Sets each component of this vector to a pseudo-random value between `0` and\n   * `1`, excluding `1`.\n   *\n   * @return {Vector2} A reference to this vector.\n   */\n  random() {\n    this.x = Math.random();\n    this.y = Math.random();\n    return this;\n  }\n  *[Symbol.iterator]() {\n    yield this.x;\n    yield this.y;\n  }\n}\n\n/**\n * Represents a 3x3 matrix.\n *\n * A Note on Row-Major and Column-Major Ordering:\n *\n * The constructor and {@link Matrix3#set} method take arguments in\n * [row-major]{@link https://en.wikipedia.org/wiki/Row-_and_column-major_order#Column-major_order}\n * order, while internally they are stored in the {@link Matrix3#elements} array in column-major order.\n * This means that calling:\n * ```js\n * const m = new THREE.Matrix();\n * m.set( 11, 12, 13,\n *        21, 22, 23,\n *        31, 32, 33 );\n * ```\n * will result in the elements array containing:\n * ```js\n * m.elements = [ 11, 21, 31,\n *                12, 22, 32,\n *                13, 23, 33 ];\n * ```\n * and internally all calculations are performed using column-major ordering.\n * However, as the actual ordering makes no difference mathematically and\n * most people are used to thinking about matrices in row-major order, the\n * three.js documentation shows matrices in row-major order. Just bear in\n * mind that if you are reading the source code, you'll have to take the\n * transpose of any matrices outlined here to make sense of the calculations.\n */\nclass Matrix3 {\n  /**\n   * Constructs a new 3x3 matrix. The arguments are supposed to be\n   * in row-major order. If no arguments are provided, the constructor\n   * initializes the matrix as an identity matrix.\n   *\n   * @param {number} [n11] - 1-1 matrix element.\n   * @param {number} [n12] - 1-2 matrix element.\n   * @param {number} [n13] - 1-3 matrix element.\n   * @param {number} [n21] - 2-1 matrix element.\n   * @param {number} [n22] - 2-2 matrix element.\n   * @param {number} [n23] - 2-3 matrix element.\n   * @param {number} [n31] - 3-1 matrix element.\n   * @param {number} [n32] - 3-2 matrix element.\n   * @param {number} [n33] - 3-3 matrix element.\n   */\n  constructor(n11, n12, n13, n21, n22, n23, n31, n32, n33) {\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    Matrix3.prototype.isMatrix3 = true;\n\n    /**\n     * A column-major list of matrix values.\n     *\n     * @type {Array<number>}\n     */\n    this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    if (n11 !== undefined) {\n      this.set(n11, n12, n13, n21, n22, n23, n31, n32, n33);\n    }\n  }\n\n  /**\n   * Sets the elements of the matrix.The arguments are supposed to be\n   * in row-major order.\n   *\n   * @param {number} [n11] - 1-1 matrix element.\n   * @param {number} [n12] - 1-2 matrix element.\n   * @param {number} [n13] - 1-3 matrix element.\n   * @param {number} [n21] - 2-1 matrix element.\n   * @param {number} [n22] - 2-2 matrix element.\n   * @param {number} [n23] - 2-3 matrix element.\n   * @param {number} [n31] - 3-1 matrix element.\n   * @param {number} [n32] - 3-2 matrix element.\n   * @param {number} [n33] - 3-3 matrix element.\n   * @return {Matrix3} A reference to this matrix.\n   */\n  set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {\n    const te = this.elements;\n    te[0] = n11;\n    te[1] = n21;\n    te[2] = n31;\n    te[3] = n12;\n    te[4] = n22;\n    te[5] = n32;\n    te[6] = n13;\n    te[7] = n23;\n    te[8] = n33;\n    return this;\n  }\n\n  /**\n   * Sets this matrix to the 3x3 identity matrix.\n   *\n   * @return {Matrix3} A reference to this matrix.\n   */\n  identity() {\n    this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);\n    return this;\n  }\n\n  /**\n   * Copies the values of the given matrix to this instance.\n   *\n   * @param {Matrix3} m - The matrix to copy.\n   * @return {Matrix3} A reference to this matrix.\n   */\n  copy(m) {\n    const te = this.elements;\n    const me = m.elements;\n    te[0] = me[0];\n    te[1] = me[1];\n    te[2] = me[2];\n    te[3] = me[3];\n    te[4] = me[4];\n    te[5] = me[5];\n    te[6] = me[6];\n    te[7] = me[7];\n    te[8] = me[8];\n    return this;\n  }\n\n  /**\n   * Extracts the basis of this matrix into the three axis vectors provided.\n   *\n   * @param {Vector3} xAxis - The basis's x axis.\n   * @param {Vector3} yAxis - The basis's y axis.\n   * @param {Vector3} zAxis - The basis's z axis.\n   * @return {Matrix3} A reference to this matrix.\n   */\n  extractBasis(xAxis, yAxis, zAxis) {\n    xAxis.setFromMatrix3Column(this, 0);\n    yAxis.setFromMatrix3Column(this, 1);\n    zAxis.setFromMatrix3Column(this, 2);\n    return this;\n  }\n\n  /**\n   * Set this matrix to the upper 3x3 matrix of the given 4x4 matrix.\n   *\n   * @param {Matrix4} m - The 4x4 matrix.\n   * @return {Matrix3} A reference to this matrix.\n   */\n  setFromMatrix4(m) {\n    const me = m.elements;\n    this.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);\n    return this;\n  }\n\n  /**\n   * Post-multiplies this matrix by the given 3x3 matrix.\n   *\n   * @param {Matrix3} m - The matrix to multiply with.\n   * @return {Matrix3} A reference to this matrix.\n   */\n  multiply(m) {\n    return this.multiplyMatrices(this, m);\n  }\n\n  /**\n   * Pre-multiplies this matrix by the given 3x3 matrix.\n   *\n   * @param {Matrix3} m - The matrix to multiply with.\n   * @return {Matrix3} A reference to this matrix.\n   */\n  premultiply(m) {\n    return this.multiplyMatrices(m, this);\n  }\n\n  /**\n   * Multiples the given 3x3 matrices and stores the result\n   * in this matrix.\n   *\n   * @param {Matrix3} a - The first matrix.\n   * @param {Matrix3} b - The second matrix.\n   * @return {Matrix3} A reference to this matrix.\n   */\n  multiplyMatrices(a, b) {\n    const ae = a.elements;\n    const be = b.elements;\n    const te = this.elements;\n    const a11 = ae[0],\n      a12 = ae[3],\n      a13 = ae[6];\n    const a21 = ae[1],\n      a22 = ae[4],\n      a23 = ae[7];\n    const a31 = ae[2],\n      a32 = ae[5],\n      a33 = ae[8];\n    const b11 = be[0],\n      b12 = be[3],\n      b13 = be[6];\n    const b21 = be[1],\n      b22 = be[4],\n      b23 = be[7];\n    const b31 = be[2],\n      b32 = be[5],\n      b33 = be[8];\n    te[0] = a11 * b11 + a12 * b21 + a13 * b31;\n    te[3] = a11 * b12 + a12 * b22 + a13 * b32;\n    te[6] = a11 * b13 + a12 * b23 + a13 * b33;\n    te[1] = a21 * b11 + a22 * b21 + a23 * b31;\n    te[4] = a21 * b12 + a22 * b22 + a23 * b32;\n    te[7] = a21 * b13 + a22 * b23 + a23 * b33;\n    te[2] = a31 * b11 + a32 * b21 + a33 * b31;\n    te[5] = a31 * b12 + a32 * b22 + a33 * b32;\n    te[8] = a31 * b13 + a32 * b23 + a33 * b33;\n    return this;\n  }\n\n  /**\n   * Multiplies every component of the matrix by the given scalar.\n   *\n   * @param {number} s - The scalar.\n   * @return {Matrix3} A reference to this matrix.\n   */\n  multiplyScalar(s) {\n    const te = this.elements;\n    te[0] *= s;\n    te[3] *= s;\n    te[6] *= s;\n    te[1] *= s;\n    te[4] *= s;\n    te[7] *= s;\n    te[2] *= s;\n    te[5] *= s;\n    te[8] *= s;\n    return this;\n  }\n\n  /**\n   * Computes and returns the determinant of this matrix.\n   *\n   * @return {number} The determinant.\n   */\n  determinant() {\n    const te = this.elements;\n    const a = te[0],\n      b = te[1],\n      c = te[2],\n      d = te[3],\n      e = te[4],\n      f = te[5],\n      g = te[6],\n      h = te[7],\n      i = te[8];\n    return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n  }\n\n  /**\n   * Inverts this matrix, using the [analytic method]{@link https://en.wikipedia.org/wiki/Invertible_matrix#Analytic_solution}.\n   * You can not invert with a determinant of zero. If you attempt this, the method produces\n   * a zero matrix instead.\n   *\n   * @return {Matrix3} A reference to this matrix.\n   */\n  invert() {\n    const te = this.elements,\n      n11 = te[0],\n      n21 = te[1],\n      n31 = te[2],\n      n12 = te[3],\n      n22 = te[4],\n      n32 = te[5],\n      n13 = te[6],\n      n23 = te[7],\n      n33 = te[8],\n      t11 = n33 * n22 - n32 * n23,\n      t12 = n32 * n13 - n33 * n12,\n      t13 = n23 * n12 - n22 * n13,\n      det = n11 * t11 + n21 * t12 + n31 * t13;\n    if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);\n    const detInv = 1 / det;\n    te[0] = t11 * detInv;\n    te[1] = (n31 * n23 - n33 * n21) * detInv;\n    te[2] = (n32 * n21 - n31 * n22) * detInv;\n    te[3] = t12 * detInv;\n    te[4] = (n33 * n11 - n31 * n13) * detInv;\n    te[5] = (n31 * n12 - n32 * n11) * detInv;\n    te[6] = t13 * detInv;\n    te[7] = (n21 * n13 - n23 * n11) * detInv;\n    te[8] = (n22 * n11 - n21 * n12) * detInv;\n    return this;\n  }\n\n  /**\n   * Transposes this matrix in place.\n   *\n   * @return {Matrix3} A reference to this matrix.\n   */\n  transpose() {\n    let tmp;\n    const m = this.elements;\n    tmp = m[1];\n    m[1] = m[3];\n    m[3] = tmp;\n    tmp = m[2];\n    m[2] = m[6];\n    m[6] = tmp;\n    tmp = m[5];\n    m[5] = m[7];\n    m[7] = tmp;\n    return this;\n  }\n\n  /**\n   * Computes the normal matrix which is the inverse transpose of the upper\n   * left 3x3 portion of the given 4x4 matrix.\n   *\n   * @param {Matrix4} matrix4 - The 4x4 matrix.\n   * @return {Matrix3} A reference to this matrix.\n   */\n  getNormalMatrix(matrix4) {\n    return this.setFromMatrix4(matrix4).invert().transpose();\n  }\n\n  /**\n   * Transposes this matrix into the supplied array, and returns itself unchanged.\n   *\n   * @param {Array<number>} r - An array to store the transposed matrix elements.\n   * @return {Matrix3} A reference to this matrix.\n   */\n  transposeIntoArray(r) {\n    const m = this.elements;\n    r[0] = m[0];\n    r[1] = m[3];\n    r[2] = m[6];\n    r[3] = m[1];\n    r[4] = m[4];\n    r[5] = m[7];\n    r[6] = m[2];\n    r[7] = m[5];\n    r[8] = m[8];\n    return this;\n  }\n\n  /**\n   * Sets the UV transform matrix from offset, repeat, rotation, and center.\n   *\n   * @param {number} tx - Offset x.\n   * @param {number} ty - Offset y.\n   * @param {number} sx - Repeat x.\n   * @param {number} sy - Repeat y.\n   * @param {number} rotation - Rotation, in radians. Positive values rotate counterclockwise.\n   * @param {number} cx - Center x of rotation.\n   * @param {number} cy - Center y of rotation\n   * @return {Matrix3} A reference to this matrix.\n   */\n  setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {\n    const c = Math.cos(rotation);\n    const s = Math.sin(rotation);\n    this.set(sx * c, sx * s, -sx * (c * cx + s * cy) + cx + tx, -sy * s, sy * c, -sy * (-s * cx + c * cy) + cy + ty, 0, 0, 1);\n    return this;\n  }\n\n  /**\n   * Scales this matrix with the given scalar values.\n   *\n   * @param {number} sx - The amount to scale in the X axis.\n   * @param {number} sy - The amount to scale in the Y axis.\n   * @return {Matrix3} A reference to this matrix.\n   */\n  scale(sx, sy) {\n    this.premultiply(_m3.makeScale(sx, sy));\n    return this;\n  }\n\n  /**\n   * Rotates this matrix by the given angle.\n   *\n   * @param {number} theta - The rotation in radians.\n   * @return {Matrix3} A reference to this matrix.\n   */\n  rotate(theta) {\n    this.premultiply(_m3.makeRotation(-theta));\n    return this;\n  }\n\n  /**\n   * Translates this matrix by the given scalar values.\n   *\n   * @param {number} tx - The amount to translate in the X axis.\n   * @param {number} ty - The amount to translate in the Y axis.\n   * @return {Matrix3} A reference to this matrix.\n   */\n  translate(tx, ty) {\n    this.premultiply(_m3.makeTranslation(tx, ty));\n    return this;\n  }\n\n  // for 2D Transforms\n\n  /**\n   * Sets this matrix as a 2D translation transform.\n   *\n   * @param {number|Vector2} x - The amount to translate in the X axis or alternatively a translation vector.\n   * @param {number} y - The amount to translate in the Y axis.\n   * @return {Matrix3} A reference to this matrix.\n   */\n  makeTranslation(x, y) {\n    if (x.isVector2) {\n      this.set(1, 0, x.x, 0, 1, x.y, 0, 0, 1);\n    } else {\n      this.set(1, 0, x, 0, 1, y, 0, 0, 1);\n    }\n    return this;\n  }\n\n  /**\n   * Sets this matrix as a 2D rotational transformation.\n   *\n   * @param {number} theta - The rotation in radians.\n   * @return {Matrix3} A reference to this matrix.\n   */\n  makeRotation(theta) {\n    // counterclockwise\n\n    const c = Math.cos(theta);\n    const s = Math.sin(theta);\n    this.set(c, -s, 0, s, c, 0, 0, 0, 1);\n    return this;\n  }\n\n  /**\n   * Sets this matrix as a 2D scale transform.\n   *\n   * @param {number} x - The amount to scale in the X axis.\n   * @param {number} y - The amount to scale in the Y axis.\n   * @return {Matrix3} A reference to this matrix.\n   */\n  makeScale(x, y) {\n    this.set(x, 0, 0, 0, y, 0, 0, 0, 1);\n    return this;\n  }\n\n  /**\n   * Returns `true` if this matrix is equal with the given one.\n   *\n   * @param {Matrix3} matrix - The matrix to test for equality.\n   * @return {boolean} Whether this matrix is equal with the given one.\n   */\n  equals(matrix) {\n    const te = this.elements;\n    const me = matrix.elements;\n    for (let i = 0; i < 9; i++) {\n      if (te[i] !== me[i]) return false;\n    }\n    return true;\n  }\n\n  /**\n   * Sets the elements of the matrix from the given array.\n   *\n   * @param {Array<number>} array - The matrix elements in column-major order.\n   * @param {number} [offset=0] - Index of the first element in the array.\n   * @return {Matrix3} A reference to this matrix.\n   */\n  fromArray(array) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    for (let i = 0; i < 9; i++) {\n      this.elements[i] = array[i + offset];\n    }\n    return this;\n  }\n\n  /**\n   * Writes the elements of this matrix to the given array. If no array is provided,\n   * the method returns a new instance.\n   *\n   * @param {Array<number>} [array=[]] - The target array holding the matrix elements in column-major order.\n   * @param {number} [offset=0] - Index of the first element in the array.\n   * @return {Array<number>} The matrix elements in column-major order.\n   */\n  toArray() {\n    let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const te = this.elements;\n    array[offset] = te[0];\n    array[offset + 1] = te[1];\n    array[offset + 2] = te[2];\n    array[offset + 3] = te[3];\n    array[offset + 4] = te[4];\n    array[offset + 5] = te[5];\n    array[offset + 6] = te[6];\n    array[offset + 7] = te[7];\n    array[offset + 8] = te[8];\n    return array;\n  }\n\n  /**\n   * Returns a matrix with copied values from this instance.\n   *\n   * @return {Matrix3} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor().fromArray(this.elements);\n  }\n}\nconst _m3 = /*@__PURE__*/new Matrix3();\nfunction arrayNeedsUint32(array) {\n  // assumes larger values usually on last\n\n  for (let i = array.length - 1; i >= 0; --i) {\n    if (array[i] >= 65535) return true; // account for PRIMITIVE_RESTART_FIXED_INDEX, #24565\n  }\n  return false;\n}\nconst TYPED_ARRAYS = {\n  Int8Array: Int8Array,\n  Uint8Array: Uint8Array,\n  Uint8ClampedArray: Uint8ClampedArray,\n  Int16Array: Int16Array,\n  Uint16Array: Uint16Array,\n  Int32Array: Int32Array,\n  Uint32Array: Uint32Array,\n  Float32Array: Float32Array,\n  Float64Array: Float64Array\n};\nfunction getTypedArray(type, buffer) {\n  return new TYPED_ARRAYS[type](buffer);\n}\nfunction createElementNS(name) {\n  return document.createElementNS('http://www.w3.org/1999/xhtml', name);\n}\nfunction createCanvasElement() {\n  const canvas = createElementNS('canvas');\n  canvas.style.display = 'block';\n  return canvas;\n}\nconst _cache = {};\nfunction warnOnce(message) {\n  if (message in _cache) return;\n  _cache[message] = true;\n  console.warn(message);\n}\nfunction probeAsync(gl, sync, interval) {\n  return new Promise(function (resolve, reject) {\n    function probe() {\n      switch (gl.clientWaitSync(sync, gl.SYNC_FLUSH_COMMANDS_BIT, 0)) {\n        case gl.WAIT_FAILED:\n          reject();\n          break;\n        case gl.TIMEOUT_EXPIRED:\n          setTimeout(probe, interval);\n          break;\n        default:\n          resolve();\n      }\n    }\n    setTimeout(probe, interval);\n  });\n}\nfunction toNormalizedProjectionMatrix(projectionMatrix) {\n  const m = projectionMatrix.elements;\n\n  // Convert [-1, 1] to [0, 1] projection matrix\n  m[2] = 0.5 * m[2] + 0.5 * m[3];\n  m[6] = 0.5 * m[6] + 0.5 * m[7];\n  m[10] = 0.5 * m[10] + 0.5 * m[11];\n  m[14] = 0.5 * m[14] + 0.5 * m[15];\n}\nfunction toReversedProjectionMatrix(projectionMatrix) {\n  const m = projectionMatrix.elements;\n  const isPerspectiveMatrix = m[11] === -1;\n\n  // Reverse [0, 1] projection matrix\n  if (isPerspectiveMatrix) {\n    m[10] = -m[10] - 1;\n    m[14] = -m[14];\n  } else {\n    m[10] = -m[10];\n    m[14] = -m[14] + 1;\n  }\n}\nconst LINEAR_REC709_TO_XYZ = /*@__PURE__*/new Matrix3().set(0.4123908, 0.3575843, 0.1804808, 0.2126390, 0.7151687, 0.0721923, 0.0193308, 0.1191948, 0.9505322);\nconst XYZ_TO_LINEAR_REC709 = /*@__PURE__*/new Matrix3().set(3.2409699, -1.5373832, -0.4986108, -0.9692436, 1.8759675, 0.0415551, 0.0556301, -0.203977, 1.0569715);\nfunction createColorManagement() {\n  const ColorManagement = {\n    enabled: true,\n    workingColorSpace: LinearSRGBColorSpace,\n    /**\n     * Implementations of supported color spaces.\n     *\n     * Required:\n     *\t- primaries: chromaticity coordinates [ rx ry gx gy bx by ]\n     *\t- whitePoint: reference white [ x y ]\n     *\t- transfer: transfer function (pre-defined)\n     *\t- toXYZ: Matrix3 RGB to XYZ transform\n     *\t- fromXYZ: Matrix3 XYZ to RGB transform\n     *\t- luminanceCoefficients: RGB luminance coefficients\n     *\n     * Optional:\n     *  - outputColorSpaceConfig: { drawingBufferColorSpace: ColorSpace }\n     *  - workingColorSpaceConfig: { unpackColorSpace: ColorSpace }\n     *\n     * Reference:\n     * - https://www.russellcottrell.com/photo/matrixCalculator.htm\n     */\n    spaces: {},\n    convert: function (color, sourceColorSpace, targetColorSpace) {\n      if (this.enabled === false || sourceColorSpace === targetColorSpace || !sourceColorSpace || !targetColorSpace) {\n        return color;\n      }\n      if (this.spaces[sourceColorSpace].transfer === SRGBTransfer) {\n        color.r = SRGBToLinear(color.r);\n        color.g = SRGBToLinear(color.g);\n        color.b = SRGBToLinear(color.b);\n      }\n      if (this.spaces[sourceColorSpace].primaries !== this.spaces[targetColorSpace].primaries) {\n        color.applyMatrix3(this.spaces[sourceColorSpace].toXYZ);\n        color.applyMatrix3(this.spaces[targetColorSpace].fromXYZ);\n      }\n      if (this.spaces[targetColorSpace].transfer === SRGBTransfer) {\n        color.r = LinearToSRGB(color.r);\n        color.g = LinearToSRGB(color.g);\n        color.b = LinearToSRGB(color.b);\n      }\n      return color;\n    },\n    fromWorkingColorSpace: function (color, targetColorSpace) {\n      return this.convert(color, this.workingColorSpace, targetColorSpace);\n    },\n    toWorkingColorSpace: function (color, sourceColorSpace) {\n      return this.convert(color, sourceColorSpace, this.workingColorSpace);\n    },\n    getPrimaries: function (colorSpace) {\n      return this.spaces[colorSpace].primaries;\n    },\n    getTransfer: function (colorSpace) {\n      if (colorSpace === NoColorSpace) return LinearTransfer;\n      return this.spaces[colorSpace].transfer;\n    },\n    getLuminanceCoefficients: function (target) {\n      let colorSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.workingColorSpace;\n      return target.fromArray(this.spaces[colorSpace].luminanceCoefficients);\n    },\n    define: function (colorSpaces) {\n      Object.assign(this.spaces, colorSpaces);\n    },\n    // Internal APIs\n\n    _getMatrix: function (targetMatrix, sourceColorSpace, targetColorSpace) {\n      return targetMatrix.copy(this.spaces[sourceColorSpace].toXYZ).multiply(this.spaces[targetColorSpace].fromXYZ);\n    },\n    _getDrawingBufferColorSpace: function (colorSpace) {\n      return this.spaces[colorSpace].outputColorSpaceConfig.drawingBufferColorSpace;\n    },\n    _getUnpackColorSpace: function () {\n      let colorSpace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.workingColorSpace;\n      return this.spaces[colorSpace].workingColorSpaceConfig.unpackColorSpace;\n    }\n  };\n\n  /******************************************************************************\n   * sRGB definitions\n   */\n\n  const REC709_PRIMARIES = [0.640, 0.330, 0.300, 0.600, 0.150, 0.060];\n  const REC709_LUMINANCE_COEFFICIENTS = [0.2126, 0.7152, 0.0722];\n  const D65 = [0.3127, 0.3290];\n  ColorManagement.define({\n    [LinearSRGBColorSpace]: {\n      primaries: REC709_PRIMARIES,\n      whitePoint: D65,\n      transfer: LinearTransfer,\n      toXYZ: LINEAR_REC709_TO_XYZ,\n      fromXYZ: XYZ_TO_LINEAR_REC709,\n      luminanceCoefficients: REC709_LUMINANCE_COEFFICIENTS,\n      workingColorSpaceConfig: {\n        unpackColorSpace: SRGBColorSpace\n      },\n      outputColorSpaceConfig: {\n        drawingBufferColorSpace: SRGBColorSpace\n      }\n    },\n    [SRGBColorSpace]: {\n      primaries: REC709_PRIMARIES,\n      whitePoint: D65,\n      transfer: SRGBTransfer,\n      toXYZ: LINEAR_REC709_TO_XYZ,\n      fromXYZ: XYZ_TO_LINEAR_REC709,\n      luminanceCoefficients: REC709_LUMINANCE_COEFFICIENTS,\n      outputColorSpaceConfig: {\n        drawingBufferColorSpace: SRGBColorSpace\n      }\n    }\n  });\n  return ColorManagement;\n}\nconst ColorManagement = /*@__PURE__*/createColorManagement();\nfunction SRGBToLinear(c) {\n  return c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);\n}\nfunction LinearToSRGB(c) {\n  return c < 0.0031308 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;\n}\nlet _canvas;\n\n/**\n * A class containing utility functions for images.\n *\n * @hideconstructor\n */\nclass ImageUtils {\n  /**\n   * Returns a data URI containing a representation of the given image.\n   *\n   * @param {(HTMLImageElement|HTMLCanvasElement)} image - The image object.\n   * @param {string} [type='image/png'] - Indicates the image format.\n   * @return {string} The data URI.\n   */\n  static getDataURL(image) {\n    let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'image/png';\n    if (/^data:/i.test(image.src)) {\n      return image.src;\n    }\n    if (typeof HTMLCanvasElement === 'undefined') {\n      return image.src;\n    }\n    let canvas;\n    if (image instanceof HTMLCanvasElement) {\n      canvas = image;\n    } else {\n      if (_canvas === undefined) _canvas = createElementNS('canvas');\n      _canvas.width = image.width;\n      _canvas.height = image.height;\n      const context = _canvas.getContext('2d');\n      if (image instanceof ImageData) {\n        context.putImageData(image, 0, 0);\n      } else {\n        context.drawImage(image, 0, 0, image.width, image.height);\n      }\n      canvas = _canvas;\n    }\n    return canvas.toDataURL(type);\n  }\n\n  /**\n   * Converts the given sRGB image data to linear color space.\n   *\n   * @param {(HTMLImageElement|HTMLCanvasElement|ImageBitmap|Object)} image - The image object.\n   * @return {HTMLCanvasElement|Object} The converted image.\n   */\n  static sRGBToLinear(image) {\n    if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n      const canvas = createElementNS('canvas');\n      canvas.width = image.width;\n      canvas.height = image.height;\n      const context = canvas.getContext('2d');\n      context.drawImage(image, 0, 0, image.width, image.height);\n      const imageData = context.getImageData(0, 0, image.width, image.height);\n      const data = imageData.data;\n      for (let i = 0; i < data.length; i++) {\n        data[i] = SRGBToLinear(data[i] / 255) * 255;\n      }\n      context.putImageData(imageData, 0, 0);\n      return canvas;\n    } else if (image.data) {\n      const data = image.data.slice(0);\n      for (let i = 0; i < data.length; i++) {\n        if (data instanceof Uint8Array || data instanceof Uint8ClampedArray) {\n          data[i] = Math.floor(SRGBToLinear(data[i] / 255) * 255);\n        } else {\n          // assuming float\n\n          data[i] = SRGBToLinear(data[i]);\n        }\n      }\n      return {\n        data: data,\n        width: image.width,\n        height: image.height\n      };\n    } else {\n      console.warn('THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.');\n      return image;\n    }\n  }\n}\nlet _sourceId = 0;\n\n/**\n * Represents the data source of a texture.\n *\n * The main purpose of this class is to decouple the data definition from the texture\n * definition so the same data can be used with multiple texture instances.\n */\nclass Source {\n  /**\n   * Constructs a new video texture.\n   *\n   * @param {any} [data=null] - The data definition of a texture.\n   */\n  constructor() {\n    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isSource = true;\n\n    /**\n     * The ID of the source.\n     *\n     * @name Source#id\n     * @type {number}\n     * @readonly\n     */\n    Object.defineProperty(this, 'id', {\n      value: _sourceId++\n    });\n\n    /**\n     * The UUID of the source.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.uuid = generateUUID();\n\n    /**\n     * The data definition of a texture.\n     *\n     * @type {any}\n     */\n    this.data = data;\n\n    /**\n     * This property is only relevant when {@link Source#needsUpdate} is set to `true` and\n     * provides more control on how texture data should be processed. When `dataReady` is set\n     * to `false`, the engine performs the memory allocation (if necessary) but does not transfer\n     * the data into the GPU memory.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.dataReady = true;\n\n    /**\n     * This starts at `0` and counts how many times {@link Source#needsUpdate} is set to `true`.\n     *\n     * @type {number}\n     * @readonly\n     * @default 0\n     */\n    this.version = 0;\n  }\n\n  /**\n   * When the property is set to `true`, the engine allocates the memory\n   * for the texture (if necessary) and triggers the actual texture upload\n   * to the GPU next time the source is used.\n   *\n   * @type {boolean}\n   * @default false\n   * @param {boolean} value\n   */\n  set needsUpdate(value) {\n    if (value === true) this.version++;\n  }\n\n  /**\n   * Serializes the source into JSON.\n   *\n   * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\n   * @return {Object} A JSON object representing the serialized source.\n   * @see {@link ObjectLoader#parse}\n   */\n  toJSON(meta) {\n    const isRootObject = meta === undefined || typeof meta === 'string';\n    if (!isRootObject && meta.images[this.uuid] !== undefined) {\n      return meta.images[this.uuid];\n    }\n    const output = {\n      uuid: this.uuid,\n      url: ''\n    };\n    const data = this.data;\n    if (data !== null) {\n      let url;\n      if (Array.isArray(data)) {\n        // cube texture\n\n        url = [];\n        for (let i = 0, l = data.length; i < l; i++) {\n          if (data[i].isDataTexture) {\n            url.push(serializeImage(data[i].image));\n          } else {\n            url.push(serializeImage(data[i]));\n          }\n        }\n      } else {\n        // texture\n\n        url = serializeImage(data);\n      }\n      output.url = url;\n    }\n    if (!isRootObject) {\n      meta.images[this.uuid] = output;\n    }\n    return output;\n  }\n}\nfunction serializeImage(image) {\n  if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n    // default images\n\n    return ImageUtils.getDataURL(image);\n  } else {\n    if (image.data) {\n      // images of DataTexture\n\n      return {\n        data: Array.from(image.data),\n        width: image.width,\n        height: image.height,\n        type: image.data.constructor.name\n      };\n    } else {\n      console.warn('THREE.Texture: Unable to serialize Texture.');\n      return {};\n    }\n  }\n}\nlet _textureId = 0;\n\n/**\n * Base class for all textures.\n *\n * Note: After the initial use of a texture, its dimensions, format, and type\n * cannot be changed. Instead, call {@link Texture#dispose} on the texture and instantiate a new one.\n *\n * @augments EventDispatcher\n */\nclass Texture extends EventDispatcher {\n  /**\n   * Constructs a new texture.\n   *\n   * @param {?Object} [image=Texture.DEFAULT_IMAGE] - The image holding the texture data.\n   * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.\n   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n   * @param {number} [magFilter=LinearFilter] - The mag filter value.\n   * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.\n   * @param {number} [format=RGBAFormat] - The texture format.\n   * @param {number} [type=UnsignedByteType] - The texture type.\n   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n   * @param {string} [colorSpace=NoColorSpace] - The color space.\n   */\n  constructor() {\n    let image = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Texture.DEFAULT_IMAGE;\n    let mapping = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Texture.DEFAULT_MAPPING;\n    let wrapS = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ClampToEdgeWrapping;\n    let wrapT = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ClampToEdgeWrapping;\n    let magFilter = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : LinearFilter;\n    let minFilter = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : LinearMipmapLinearFilter;\n    let format = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : RGBAFormat;\n    let type = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : UnsignedByteType;\n    let anisotropy = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : Texture.DEFAULT_ANISOTROPY;\n    let colorSpace = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : NoColorSpace;\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isTexture = true;\n\n    /**\n     * The ID of the texture.\n     *\n     * @name Texture#id\n     * @type {number}\n     * @readonly\n     */\n    Object.defineProperty(this, 'id', {\n      value: _textureId++\n    });\n\n    /**\n     * The UUID of the material.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.uuid = generateUUID();\n\n    /**\n     * The name of the material.\n     *\n     * @type {string}\n     */\n    this.name = '';\n\n    /**\n     * The data definition of a texture. A reference to the data source can be\n     * shared across textures. This is often useful in context of spritesheets\n     * where multiple textures render the same data but with different texture\n     * transformations.\n     *\n     * @type {Source}\n     */\n    this.source = new Source(image);\n\n    /**\n     * An array holding user-defined mipmaps.\n     *\n     * @type {Array<Object>}\n     */\n    this.mipmaps = [];\n\n    /**\n     * How the texture is applied to the object. The value `UVMapping`\n     * is the default, where texture or uv coordinates are used to apply the map.\n     *\n     * @type {(UVMapping|CubeReflectionMapping|CubeRefractionMapping|EquirectangularReflectionMapping|EquirectangularRefractionMapping|CubeUVReflectionMapping)}\n     * @default UVMapping\n    */\n    this.mapping = mapping;\n\n    /**\n     * Lets you select the uv attribute to map the texture to. `0` for `uv`,\n     * `1` for `uv1`, `2` for `uv2` and `3` for `uv3`.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.channel = 0;\n\n    /**\n     * This defines how the texture is wrapped horizontally and corresponds to\n     * *U* in UV mapping.\n     *\n     * @type {(RepeatWrapping|ClampToEdgeWrapping|MirroredRepeatWrapping)}\n     * @default ClampToEdgeWrapping\n     */\n    this.wrapS = wrapS;\n\n    /**\n     * This defines how the texture is wrapped horizontally and corresponds to\n     * *V* in UV mapping.\n     *\n     * @type {(RepeatWrapping|ClampToEdgeWrapping|MirroredRepeatWrapping)}\n     * @default ClampToEdgeWrapping\n     */\n    this.wrapT = wrapT;\n\n    /**\n     * How the texture is sampled when a texel covers more than one pixel.\n     *\n     * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n     * @default LinearFilter\n     */\n    this.magFilter = magFilter;\n\n    /**\n     * How the texture is sampled when a texel covers less than one pixel.\n     *\n     * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n     * @default LinearMipmapLinearFilter\n     */\n    this.minFilter = minFilter;\n\n    /**\n     * The number of samples taken along the axis through the pixel that has the\n     * highest density of texels. By default, this value is `1`. A higher value\n     * gives a less blurry result than a basic mipmap, at the cost of more\n     * texture samples being used.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.anisotropy = anisotropy;\n\n    /**\n     * The format of the texture.\n     *\n     * @type {number}\n     * @default RGBAFormat\n     */\n    this.format = format;\n\n    /**\n     * The default internal format is derived from {@link Texture#format} and {@link Texture#type} and\n     * defines how the texture data is going to be stored on the GPU.\n     *\n     * This property allows to overwrite the default format.\n     *\n     * @type {?string}\n     * @default null\n     */\n    this.internalFormat = null;\n\n    /**\n     * The data type of the texture.\n     *\n     * @type {number}\n     * @default UnsignedByteType\n     */\n    this.type = type;\n\n    /**\n     * How much a single repetition of the texture is offset from the beginning,\n     * in each direction U and V. Typical range is `0.0` to `1.0`.\n     *\n     * @type {Vector2}\n     * @default (0,0)\n     */\n    this.offset = new Vector2(0, 0);\n\n    /**\n     * How many times the texture is repeated across the surface, in each\n     * direction U and V. If repeat is set greater than `1` in either direction,\n     * the corresponding wrap parameter should also be set to `RepeatWrapping`\n     * or `MirroredRepeatWrapping` to achieve the desired tiling effect.\n     *\n     * @type {Vector2}\n     * @default (1,1)\n     */\n    this.repeat = new Vector2(1, 1);\n\n    /**\n     * The point around which rotation occurs. A value of `(0.5, 0.5)` corresponds\n     * to the center of the texture. Default is `(0, 0)`, the lower left.\n     *\n     * @type {Vector2}\n     * @default (0,0)\n     */\n    this.center = new Vector2(0, 0);\n\n    /**\n     * How much the texture is rotated around the center point, in radians.\n     * Positive values are counter-clockwise.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.rotation = 0;\n\n    /**\n     * Whether to update the texture's uv-transformation {@link Texture#matrix}\n     * from the properties {@link Texture#offset}, {@link Texture#repeat},\n     * {@link Texture#rotation}, and {@link Texture#center}.\n     *\n     * Set this to `false` if you are specifying the uv-transform matrix directly.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.matrixAutoUpdate = true;\n\n    /**\n     * The uv-transformation matrix of the texture.\n     *\n     * @type {Matrix3}\n     */\n    this.matrix = new Matrix3();\n\n    /**\n     * Whether to generate mipmaps (if possible) for a texture.\n     *\n     * Set this to `false` if you are creating mipmaps manually.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.generateMipmaps = true;\n\n    /**\n     * If set to `true`, the alpha channel, if present, is multiplied into the\n     * color channels when the texture is uploaded to the GPU.\n     *\n     * Note that this property has no effect when using `ImageBitmap`. You need to\n     * configure premultiply alpha on bitmap creation instead.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.premultiplyAlpha = false;\n\n    /**\n     * If set to `true`, the texture is flipped along the vertical axis when\n     * uploaded to the GPU.\n     *\n     * Note that this property has no effect when using `ImageBitmap`. You need to\n     * configure the flip on bitmap creation instead.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.flipY = true;\n\n    /**\n     * Specifies the alignment requirements for the start of each pixel row in memory.\n     * The allowable values are `1` (byte-alignment), `2` (rows aligned to even-numbered bytes),\n     * `4` (word-alignment), and `8` (rows start on double-word boundaries).\n     *\n     * @type {number}\n     * @default 4\n     */\n    this.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n    /**\n     * Textures containing color data should be annotated with `SRGBColorSpace` or `LinearSRGBColorSpace`.\n     *\n     * @type {string}\n     * @default NoColorSpace\n     */\n    this.colorSpace = colorSpace;\n\n    /**\n     * An object that can be used to store custom data about the texture. It\n     * should not hold references to functions as these will not be cloned.\n     *\n     * @type {Object}\n     */\n    this.userData = {};\n\n    /**\n     * This starts at `0` and counts how many times {@link Texture#needsUpdate} is set to `true`.\n     *\n     * @type {number}\n     * @readonly\n     * @default 0\n     */\n    this.version = 0;\n\n    /**\n     * A callback function, called when the texture is updated (e.g., when\n     * {@link Texture#needsUpdate} has been set to true and then the texture is used).\n     *\n     * @type {?Function}\n     * @default null\n     */\n    this.onUpdate = null;\n\n    /**\n     * An optional back reference to the textures render target.\n     *\n     * @type {?(RenderTarget|WebGLRenderTarget)}\n     * @default null\n     */\n    this.renderTarget = null;\n\n    /**\n     * Indicates whether a texture belongs to a render target or not.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default false\n     */\n    this.isRenderTargetTexture = false;\n\n    /**\n     * Indicates if a texture should be handled like a texture array.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default false\n     */\n    this.isTextureArray = false;\n\n    /**\n     * Indicates whether this texture should be processed by `PMREMGenerator` or not\n     * (only relevant for render target textures).\n     *\n     * @type {number}\n     * @readonly\n     * @default 0\n     */\n    this.pmremVersion = 0;\n  }\n\n  /**\n   * The image object holding the texture data.\n   *\n   * @type {?Object}\n   */\n  get image() {\n    return this.source.data;\n  }\n  set image(value) {\n    if (value === void 0) {\n      value = null;\n    }\n    this.source.data = value;\n  }\n\n  /**\n   * Updates the texture transformation matrix from the from the properties {@link Texture#offset},\n   * {@link Texture#repeat}, {@link Texture#rotation}, and {@link Texture#center}.\n   */\n  updateMatrix() {\n    this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);\n  }\n\n  /**\n   * Returns a new texture with copied values from this instance.\n   *\n   * @return {Texture} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  /**\n   * Copies the values of the given texture to this instance.\n   *\n   * @param {Texture} source - The texture to copy.\n   * @return {Texture} A reference to this instance.\n   */\n  copy(source) {\n    this.name = source.name;\n    this.source = source.source;\n    this.mipmaps = source.mipmaps.slice(0);\n    this.mapping = source.mapping;\n    this.channel = source.channel;\n    this.wrapS = source.wrapS;\n    this.wrapT = source.wrapT;\n    this.magFilter = source.magFilter;\n    this.minFilter = source.minFilter;\n    this.anisotropy = source.anisotropy;\n    this.format = source.format;\n    this.internalFormat = source.internalFormat;\n    this.type = source.type;\n    this.offset.copy(source.offset);\n    this.repeat.copy(source.repeat);\n    this.center.copy(source.center);\n    this.rotation = source.rotation;\n    this.matrixAutoUpdate = source.matrixAutoUpdate;\n    this.matrix.copy(source.matrix);\n    this.generateMipmaps = source.generateMipmaps;\n    this.premultiplyAlpha = source.premultiplyAlpha;\n    this.flipY = source.flipY;\n    this.unpackAlignment = source.unpackAlignment;\n    this.colorSpace = source.colorSpace;\n    this.renderTarget = source.renderTarget;\n    this.isRenderTargetTexture = source.isRenderTargetTexture;\n    this.isTextureArray = source.isTextureArray;\n    this.userData = JSON.parse(JSON.stringify(source.userData));\n    this.needsUpdate = true;\n    return this;\n  }\n\n  /**\n   * Serializes the texture into JSON.\n   *\n   * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\n   * @return {Object} A JSON object representing the serialized texture.\n   * @see {@link ObjectLoader#parse}\n   */\n  toJSON(meta) {\n    const isRootObject = meta === undefined || typeof meta === 'string';\n    if (!isRootObject && meta.textures[this.uuid] !== undefined) {\n      return meta.textures[this.uuid];\n    }\n    const output = {\n      metadata: {\n        version: 4.6,\n        type: 'Texture',\n        generator: 'Texture.toJSON'\n      },\n      uuid: this.uuid,\n      name: this.name,\n      image: this.source.toJSON(meta).uuid,\n      mapping: this.mapping,\n      channel: this.channel,\n      repeat: [this.repeat.x, this.repeat.y],\n      offset: [this.offset.x, this.offset.y],\n      center: [this.center.x, this.center.y],\n      rotation: this.rotation,\n      wrap: [this.wrapS, this.wrapT],\n      format: this.format,\n      internalFormat: this.internalFormat,\n      type: this.type,\n      colorSpace: this.colorSpace,\n      minFilter: this.minFilter,\n      magFilter: this.magFilter,\n      anisotropy: this.anisotropy,\n      flipY: this.flipY,\n      generateMipmaps: this.generateMipmaps,\n      premultiplyAlpha: this.premultiplyAlpha,\n      unpackAlignment: this.unpackAlignment\n    };\n    if (Object.keys(this.userData).length > 0) output.userData = this.userData;\n    if (!isRootObject) {\n      meta.textures[this.uuid] = output;\n    }\n    return output;\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   *\n   * @fires Texture#dispose\n   */\n  dispose() {\n    /**\n     * Fires when the texture has been disposed of.\n     *\n     * @event Texture#dispose\n     * @type {Object}\n     */\n    this.dispatchEvent({\n      type: 'dispose'\n    });\n  }\n\n  /**\n   * Transforms the given uv vector with the textures uv transformation matrix.\n   *\n   * @param {Vector2} uv - The uv vector.\n   * @return {Vector2} The transformed uv vector.\n   */\n  transformUv(uv) {\n    if (this.mapping !== UVMapping) return uv;\n    uv.applyMatrix3(this.matrix);\n    if (uv.x < 0 || uv.x > 1) {\n      switch (this.wrapS) {\n        case RepeatWrapping:\n          uv.x = uv.x - Math.floor(uv.x);\n          break;\n        case ClampToEdgeWrapping:\n          uv.x = uv.x < 0 ? 0 : 1;\n          break;\n        case MirroredRepeatWrapping:\n          if (Math.abs(Math.floor(uv.x) % 2) === 1) {\n            uv.x = Math.ceil(uv.x) - uv.x;\n          } else {\n            uv.x = uv.x - Math.floor(uv.x);\n          }\n          break;\n      }\n    }\n    if (uv.y < 0 || uv.y > 1) {\n      switch (this.wrapT) {\n        case RepeatWrapping:\n          uv.y = uv.y - Math.floor(uv.y);\n          break;\n        case ClampToEdgeWrapping:\n          uv.y = uv.y < 0 ? 0 : 1;\n          break;\n        case MirroredRepeatWrapping:\n          if (Math.abs(Math.floor(uv.y) % 2) === 1) {\n            uv.y = Math.ceil(uv.y) - uv.y;\n          } else {\n            uv.y = uv.y - Math.floor(uv.y);\n          }\n          break;\n      }\n    }\n    if (this.flipY) {\n      uv.y = 1 - uv.y;\n    }\n    return uv;\n  }\n\n  /**\n   * Setting this property to `true` indicates the engine the texture\n   * must be updated in the next render. This triggers a texture upload\n   * to the GPU and ensures correct texture parameter configuration.\n   *\n   * @type {boolean}\n   * @default false\n   * @param {boolean} value\n   */\n  set needsUpdate(value) {\n    if (value === true) {\n      this.version++;\n      this.source.needsUpdate = true;\n    }\n  }\n\n  /**\n   * Setting this property to `true` indicates the engine the PMREM\n   * must be regenerated.\n   *\n   * @type {boolean}\n   * @default false\n   * @param {boolean} value\n   */\n  set needsPMREMUpdate(value) {\n    if (value === true) {\n      this.pmremVersion++;\n    }\n  }\n}\n\n/**\n * The default image for all textures.\n *\n * @static\n * @type {?Image}\n * @default null\n */\nTexture.DEFAULT_IMAGE = null;\n\n/**\n * The default mapping for all textures.\n *\n * @static\n * @type {number}\n * @default UVMapping\n */\nTexture.DEFAULT_MAPPING = UVMapping;\n\n/**\n * The default anisotropy value for all textures.\n *\n * @static\n * @type {number}\n * @default 1\n */\nTexture.DEFAULT_ANISOTROPY = 1;\n\n/**\n * Class representing a 4D vector. A 4D vector is an ordered quadruplet of numbers\n * (labeled x, y, z and w), which can be used to represent a number of things, such as:\n *\n * - A point in 4D space.\n * - A direction and length in 4D space. In three.js the length will\n * always be the Euclidean distance(straight-line distance) from `(0, 0, 0, 0)` to `(x, y, z, w)`\n * and the direction is also measured from `(0, 0, 0, 0)` towards `(x, y, z, w)`.\n * - Any arbitrary ordered quadruplet of numbers.\n *\n * There are other things a 4D vector can be used to represent, however these\n * are the most common uses in *three.js*.\n *\n * Iterating through a vector instance will yield its components `(x, y, z, w)` in\n * the corresponding order.\n * ```js\n * const a = new THREE.Vector4( 0, 1, 0, 0 );\n *\n * //no arguments; will be initialised to (0, 0, 0, 1)\n * const b = new THREE.Vector4( );\n *\n * const d = a.dot( b );\n * ```\n */\nclass Vector4 {\n  /**\n   * Constructs a new 4D vector.\n   *\n   * @param {number} [x=0] - The x value of this vector.\n   * @param {number} [y=0] - The y value of this vector.\n   * @param {number} [z=0] - The z value of this vector.\n   * @param {number} [w=1] - The w value of this vector.\n   */\n  constructor() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    Vector4.prototype.isVector4 = true;\n\n    /**\n     * The x value of this vector.\n     *\n     * @type {number}\n     */\n    this.x = x;\n\n    /**\n     * The y value of this vector.\n     *\n     * @type {number}\n     */\n    this.y = y;\n\n    /**\n     * The z value of this vector.\n     *\n     * @type {number}\n     */\n    this.z = z;\n\n    /**\n     * The w value of this vector.\n     *\n     * @type {number}\n     */\n    this.w = w;\n  }\n\n  /**\n   * Alias for {@link Vector4#z}.\n   *\n   * @type {number}\n   */\n  get width() {\n    return this.z;\n  }\n  set width(value) {\n    this.z = value;\n  }\n\n  /**\n   * Alias for {@link Vector4#w}.\n   *\n   * @type {number}\n   */\n  get height() {\n    return this.w;\n  }\n  set height(value) {\n    this.w = value;\n  }\n\n  /**\n   * Sets the vector components.\n   *\n   * @param {number} x - The value of the x component.\n   * @param {number} y - The value of the y component.\n   * @param {number} z - The value of the z component.\n   * @param {number} w - The value of the w component.\n   * @return {Vector4} A reference to this vector.\n   */\n  set(x, y, z, w) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n    return this;\n  }\n\n  /**\n   * Sets the vector components to the same value.\n   *\n   * @param {number} scalar - The value to set for all vector components.\n   * @return {Vector4} A reference to this vector.\n   */\n  setScalar(scalar) {\n    this.x = scalar;\n    this.y = scalar;\n    this.z = scalar;\n    this.w = scalar;\n    return this;\n  }\n\n  /**\n   * Sets the vector's x component to the given value\n   *\n   * @param {number} x - The value to set.\n   * @return {Vector4} A reference to this vector.\n   */\n  setX(x) {\n    this.x = x;\n    return this;\n  }\n\n  /**\n   * Sets the vector's y component to the given value\n   *\n   * @param {number} y - The value to set.\n   * @return {Vector4} A reference to this vector.\n   */\n  setY(y) {\n    this.y = y;\n    return this;\n  }\n\n  /**\n   * Sets the vector's z component to the given value\n   *\n   * @param {number} z - The value to set.\n   * @return {Vector4} A reference to this vector.\n   */\n  setZ(z) {\n    this.z = z;\n    return this;\n  }\n\n  /**\n   * Sets the vector's w component to the given value\n   *\n   * @param {number} w - The value to set.\n   * @return {Vector4} A reference to this vector.\n   */\n  setW(w) {\n    this.w = w;\n    return this;\n  }\n\n  /**\n   * Allows to set a vector component with an index.\n   *\n   * @param {number} index - The component index. `0` equals to x, `1` equals to y,\n   * `2` equals to z, `3` equals to w.\n   * @param {number} value - The value to set.\n   * @return {Vector4} A reference to this vector.\n   */\n  setComponent(index, value) {\n    switch (index) {\n      case 0:\n        this.x = value;\n        break;\n      case 1:\n        this.y = value;\n        break;\n      case 2:\n        this.z = value;\n        break;\n      case 3:\n        this.w = value;\n        break;\n      default:\n        throw new Error('index is out of range: ' + index);\n    }\n    return this;\n  }\n\n  /**\n   * Returns the value of the vector component which matches the given index.\n   *\n   * @param {number} index - The component index. `0` equals to x, `1` equals to y,\n   * `2` equals to z, `3` equals to w.\n   * @return {number} A vector component value.\n   */\n  getComponent(index) {\n    switch (index) {\n      case 0:\n        return this.x;\n      case 1:\n        return this.y;\n      case 2:\n        return this.z;\n      case 3:\n        return this.w;\n      default:\n        throw new Error('index is out of range: ' + index);\n    }\n  }\n\n  /**\n   * Returns a new vector with copied values from this instance.\n   *\n   * @return {Vector4} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor(this.x, this.y, this.z, this.w);\n  }\n\n  /**\n   * Copies the values of the given vector to this instance.\n   *\n   * @param {Vector3|Vector4} v - The vector to copy.\n   * @return {Vector4} A reference to this vector.\n   */\n  copy(v) {\n    this.x = v.x;\n    this.y = v.y;\n    this.z = v.z;\n    this.w = v.w !== undefined ? v.w : 1;\n    return this;\n  }\n\n  /**\n   * Adds the given vector to this instance.\n   *\n   * @param {Vector4} v - The vector to add.\n   * @return {Vector4} A reference to this vector.\n   */\n  add(v) {\n    this.x += v.x;\n    this.y += v.y;\n    this.z += v.z;\n    this.w += v.w;\n    return this;\n  }\n\n  /**\n   * Adds the given scalar value to all components of this instance.\n   *\n   * @param {number} s - The scalar to add.\n   * @return {Vector4} A reference to this vector.\n   */\n  addScalar(s) {\n    this.x += s;\n    this.y += s;\n    this.z += s;\n    this.w += s;\n    return this;\n  }\n\n  /**\n   * Adds the given vectors and stores the result in this instance.\n   *\n   * @param {Vector4} a - The first vector.\n   * @param {Vector4} b - The second vector.\n   * @return {Vector4} A reference to this vector.\n   */\n  addVectors(a, b) {\n    this.x = a.x + b.x;\n    this.y = a.y + b.y;\n    this.z = a.z + b.z;\n    this.w = a.w + b.w;\n    return this;\n  }\n\n  /**\n   * Adds the given vector scaled by the given factor to this instance.\n   *\n   * @param {Vector4} v - The vector.\n   * @param {number} s - The factor that scales `v`.\n   * @return {Vector4} A reference to this vector.\n   */\n  addScaledVector(v, s) {\n    this.x += v.x * s;\n    this.y += v.y * s;\n    this.z += v.z * s;\n    this.w += v.w * s;\n    return this;\n  }\n\n  /**\n   * Subtracts the given vector from this instance.\n   *\n   * @param {Vector4} v - The vector to subtract.\n   * @return {Vector4} A reference to this vector.\n   */\n  sub(v) {\n    this.x -= v.x;\n    this.y -= v.y;\n    this.z -= v.z;\n    this.w -= v.w;\n    return this;\n  }\n\n  /**\n   * Subtracts the given scalar value from all components of this instance.\n   *\n   * @param {number} s - The scalar to subtract.\n   * @return {Vector4} A reference to this vector.\n   */\n  subScalar(s) {\n    this.x -= s;\n    this.y -= s;\n    this.z -= s;\n    this.w -= s;\n    return this;\n  }\n\n  /**\n   * Subtracts the given vectors and stores the result in this instance.\n   *\n   * @param {Vector4} a - The first vector.\n   * @param {Vector4} b - The second vector.\n   * @return {Vector4} A reference to this vector.\n   */\n  subVectors(a, b) {\n    this.x = a.x - b.x;\n    this.y = a.y - b.y;\n    this.z = a.z - b.z;\n    this.w = a.w - b.w;\n    return this;\n  }\n\n  /**\n   * Multiplies the given vector with this instance.\n   *\n   * @param {Vector4} v - The vector to multiply.\n   * @return {Vector4} A reference to this vector.\n   */\n  multiply(v) {\n    this.x *= v.x;\n    this.y *= v.y;\n    this.z *= v.z;\n    this.w *= v.w;\n    return this;\n  }\n\n  /**\n   * Multiplies the given scalar value with all components of this instance.\n   *\n   * @param {number} scalar - The scalar to multiply.\n   * @return {Vector4} A reference to this vector.\n   */\n  multiplyScalar(scalar) {\n    this.x *= scalar;\n    this.y *= scalar;\n    this.z *= scalar;\n    this.w *= scalar;\n    return this;\n  }\n\n  /**\n   * Multiplies this vector with the given 4x4 matrix.\n   *\n   * @param {Matrix4} m - The 4x4 matrix.\n   * @return {Vector4} A reference to this vector.\n   */\n  applyMatrix4(m) {\n    const x = this.x,\n      y = this.y,\n      z = this.z,\n      w = this.w;\n    const e = m.elements;\n    this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;\n    this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;\n    this.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;\n    this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;\n    return this;\n  }\n\n  /**\n   * Divides this instance by the given vector.\n   *\n   * @param {Vector4} v - The vector to divide.\n   * @return {Vector4} A reference to this vector.\n   */\n  divide(v) {\n    this.x /= v.x;\n    this.y /= v.y;\n    this.z /= v.z;\n    this.w /= v.w;\n    return this;\n  }\n\n  /**\n   * Divides this vector by the given scalar.\n   *\n   * @param {number} scalar - The scalar to divide.\n   * @return {Vector4} A reference to this vector.\n   */\n  divideScalar(scalar) {\n    return this.multiplyScalar(1 / scalar);\n  }\n\n  /**\n   * Sets the x, y and z components of this\n   * vector to the quaternion's axis and w to the angle.\n   *\n   * @param {Quaternion} q - The Quaternion to set.\n   * @return {Vector4} A reference to this vector.\n   */\n  setAxisAngleFromQuaternion(q) {\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n    // q is assumed to be normalized\n\n    this.w = 2 * Math.acos(q.w);\n    const s = Math.sqrt(1 - q.w * q.w);\n    if (s < 0.0001) {\n      this.x = 1;\n      this.y = 0;\n      this.z = 0;\n    } else {\n      this.x = q.x / s;\n      this.y = q.y / s;\n      this.z = q.z / s;\n    }\n    return this;\n  }\n\n  /**\n   * Sets the x, y and z components of this\n   * vector to the axis of rotation and w to the angle.\n   *\n   * @param {Matrix4} m - A 4x4 matrix of which the upper left 3x3 matrix is a pure rotation matrix.\n   * @return {Vector4} A reference to this vector.\n   */\n  setAxisAngleFromRotationMatrix(m) {\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n    let angle, x, y, z; // variables for result\n    const epsilon = 0.01,\n      // margin to allow for rounding errors\n      epsilon2 = 0.1,\n      // margin to distinguish between 0 and 180 degrees\n\n      te = m.elements,\n      m11 = te[0],\n      m12 = te[4],\n      m13 = te[8],\n      m21 = te[1],\n      m22 = te[5],\n      m23 = te[9],\n      m31 = te[2],\n      m32 = te[6],\n      m33 = te[10];\n    if (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {\n      // singularity found\n      // first check for identity matrix which must have +1 for all terms\n      // in leading diagonal and zero in other terms\n\n      if (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {\n        // this singularity is identity matrix so angle = 0\n\n        this.set(1, 0, 0, 0);\n        return this; // zero angle, arbitrary axis\n      }\n\n      // otherwise this singularity is angle = 180\n\n      angle = Math.PI;\n      const xx = (m11 + 1) / 2;\n      const yy = (m22 + 1) / 2;\n      const zz = (m33 + 1) / 2;\n      const xy = (m12 + m21) / 4;\n      const xz = (m13 + m31) / 4;\n      const yz = (m23 + m32) / 4;\n      if (xx > yy && xx > zz) {\n        // m11 is the largest diagonal term\n\n        if (xx < epsilon) {\n          x = 0;\n          y = 0.707106781;\n          z = 0.707106781;\n        } else {\n          x = Math.sqrt(xx);\n          y = xy / x;\n          z = xz / x;\n        }\n      } else if (yy > zz) {\n        // m22 is the largest diagonal term\n\n        if (yy < epsilon) {\n          x = 0.707106781;\n          y = 0;\n          z = 0.707106781;\n        } else {\n          y = Math.sqrt(yy);\n          x = xy / y;\n          z = yz / y;\n        }\n      } else {\n        // m33 is the largest diagonal term so base result on this\n\n        if (zz < epsilon) {\n          x = 0.707106781;\n          y = 0.707106781;\n          z = 0;\n        } else {\n          z = Math.sqrt(zz);\n          x = xz / z;\n          y = yz / z;\n        }\n      }\n      this.set(x, y, z, angle);\n      return this; // return 180 deg rotation\n    }\n\n    // as we have reached here there are no singularities so we can handle normally\n\n    let s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12)); // used to normalize\n\n    if (Math.abs(s) < 0.001) s = 1;\n\n    // prevent divide by zero, should not happen if matrix is orthogonal and should be\n    // caught by singularity test above, but I've left it in just in case\n\n    this.x = (m32 - m23) / s;\n    this.y = (m13 - m31) / s;\n    this.z = (m21 - m12) / s;\n    this.w = Math.acos((m11 + m22 + m33 - 1) / 2);\n    return this;\n  }\n\n  /**\n   * Sets the vector components to the position elements of the\n   * given transformation matrix.\n   *\n   * @param {Matrix4} m - The 4x4 matrix.\n   * @return {Vector4} A reference to this vector.\n   */\n  setFromMatrixPosition(m) {\n    const e = m.elements;\n    this.x = e[12];\n    this.y = e[13];\n    this.z = e[14];\n    this.w = e[15];\n    return this;\n  }\n\n  /**\n   * If this vector's x, y, z or w value is greater than the given vector's x, y, z or w\n   * value, replace that value with the corresponding min value.\n   *\n   * @param {Vector4} v - The vector.\n   * @return {Vector4} A reference to this vector.\n   */\n  min(v) {\n    this.x = Math.min(this.x, v.x);\n    this.y = Math.min(this.y, v.y);\n    this.z = Math.min(this.z, v.z);\n    this.w = Math.min(this.w, v.w);\n    return this;\n  }\n\n  /**\n   * If this vector's x, y, z or w value is less than the given vector's x, y, z or w\n   * value, replace that value with the corresponding max value.\n   *\n   * @param {Vector4} v - The vector.\n   * @return {Vector4} A reference to this vector.\n   */\n  max(v) {\n    this.x = Math.max(this.x, v.x);\n    this.y = Math.max(this.y, v.y);\n    this.z = Math.max(this.z, v.z);\n    this.w = Math.max(this.w, v.w);\n    return this;\n  }\n\n  /**\n   * If this vector's x, y, z or w value is greater than the max vector's x, y, z or w\n   * value, it is replaced by the corresponding value.\n   * If this vector's x, y, z or w value is less than the min vector's x, y, z or w value,\n   * it is replaced by the corresponding value.\n   *\n   * @param {Vector4} min - The minimum x, y and z values.\n   * @param {Vector4} max - The maximum x, y and z values in the desired range.\n   * @return {Vector4} A reference to this vector.\n   */\n  clamp(min, max) {\n    // assumes min < max, componentwise\n\n    this.x = clamp(this.x, min.x, max.x);\n    this.y = clamp(this.y, min.y, max.y);\n    this.z = clamp(this.z, min.z, max.z);\n    this.w = clamp(this.w, min.w, max.w);\n    return this;\n  }\n\n  /**\n   * If this vector's x, y, z or w values are greater than the max value, they are\n   * replaced by the max value.\n   * If this vector's x, y, z or w values are less than the min value, they are\n   * replaced by the min value.\n   *\n   * @param {number} minVal - The minimum value the components will be clamped to.\n   * @param {number} maxVal - The maximum value the components will be clamped to.\n   * @return {Vector4} A reference to this vector.\n   */\n  clampScalar(minVal, maxVal) {\n    this.x = clamp(this.x, minVal, maxVal);\n    this.y = clamp(this.y, minVal, maxVal);\n    this.z = clamp(this.z, minVal, maxVal);\n    this.w = clamp(this.w, minVal, maxVal);\n    return this;\n  }\n\n  /**\n   * If this vector's length is greater than the max value, it is replaced by\n   * the max value.\n   * If this vector's length is less than the min value, it is replaced by the\n   * min value.\n   *\n   * @param {number} min - The minimum value the vector length will be clamped to.\n   * @param {number} max - The maximum value the vector length will be clamped to.\n   * @return {Vector4} A reference to this vector.\n   */\n  clampLength(min, max) {\n    const length = this.length();\n    return this.divideScalar(length || 1).multiplyScalar(clamp(length, min, max));\n  }\n\n  /**\n   * The components of this vector are rounded down to the nearest integer value.\n   *\n   * @return {Vector4} A reference to this vector.\n   */\n  floor() {\n    this.x = Math.floor(this.x);\n    this.y = Math.floor(this.y);\n    this.z = Math.floor(this.z);\n    this.w = Math.floor(this.w);\n    return this;\n  }\n\n  /**\n   * The components of this vector are rounded up to the nearest integer value.\n   *\n   * @return {Vector4} A reference to this vector.\n   */\n  ceil() {\n    this.x = Math.ceil(this.x);\n    this.y = Math.ceil(this.y);\n    this.z = Math.ceil(this.z);\n    this.w = Math.ceil(this.w);\n    return this;\n  }\n\n  /**\n   * The components of this vector are rounded to the nearest integer value\n   *\n   * @return {Vector4} A reference to this vector.\n   */\n  round() {\n    this.x = Math.round(this.x);\n    this.y = Math.round(this.y);\n    this.z = Math.round(this.z);\n    this.w = Math.round(this.w);\n    return this;\n  }\n\n  /**\n   * The components of this vector are rounded towards zero (up if negative,\n   * down if positive) to an integer value.\n   *\n   * @return {Vector4} A reference to this vector.\n   */\n  roundToZero() {\n    this.x = Math.trunc(this.x);\n    this.y = Math.trunc(this.y);\n    this.z = Math.trunc(this.z);\n    this.w = Math.trunc(this.w);\n    return this;\n  }\n\n  /**\n   * Inverts this vector - i.e. sets x = -x, y = -y, z = -z, w = -w.\n   *\n   * @return {Vector4} A reference to this vector.\n   */\n  negate() {\n    this.x = -this.x;\n    this.y = -this.y;\n    this.z = -this.z;\n    this.w = -this.w;\n    return this;\n  }\n\n  /**\n   * Calculates the dot product of the given vector with this instance.\n   *\n   * @param {Vector4} v - The vector to compute the dot product with.\n   * @return {number} The result of the dot product.\n   */\n  dot(v) {\n    return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n  }\n\n  /**\n   * Computes the square of the Euclidean length (straight-line length) from\n   * (0, 0, 0, 0) to (x, y, z, w). If you are comparing the lengths of vectors, you should\n   * compare the length squared instead as it is slightly more efficient to calculate.\n   *\n   * @return {number} The square length of this vector.\n   */\n  lengthSq() {\n    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n  }\n\n  /**\n   * Computes the  Euclidean length (straight-line length) from (0, 0, 0, 0) to (x, y, z, w).\n   *\n   * @return {number} The length of this vector.\n   */\n  length() {\n    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n  }\n\n  /**\n   * Computes the Manhattan length of this vector.\n   *\n   * @return {number} The length of this vector.\n   */\n  manhattanLength() {\n    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);\n  }\n\n  /**\n   * Converts this vector to a unit vector - that is, sets it equal to a vector\n   * with the same direction as this one, but with a vector length of `1`.\n   *\n   * @return {Vector4} A reference to this vector.\n   */\n  normalize() {\n    return this.divideScalar(this.length() || 1);\n  }\n\n  /**\n   * Sets this vector to a vector with the same direction as this one, but\n   * with the specified length.\n   *\n   * @param {number} length - The new length of this vector.\n   * @return {Vector4} A reference to this vector.\n   */\n  setLength(length) {\n    return this.normalize().multiplyScalar(length);\n  }\n\n  /**\n   * Linearly interpolates between the given vector and this instance, where\n   * alpha is the percent distance along the line - alpha = 0 will be this\n   * vector, and alpha = 1 will be the given one.\n   *\n   * @param {Vector4} v - The vector to interpolate towards.\n   * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n   * @return {Vector4} A reference to this vector.\n   */\n  lerp(v, alpha) {\n    this.x += (v.x - this.x) * alpha;\n    this.y += (v.y - this.y) * alpha;\n    this.z += (v.z - this.z) * alpha;\n    this.w += (v.w - this.w) * alpha;\n    return this;\n  }\n\n  /**\n   * Linearly interpolates between the given vectors, where alpha is the percent\n   * distance along the line - alpha = 0 will be first vector, and alpha = 1 will\n   * be the second one. The result is stored in this instance.\n   *\n   * @param {Vector4} v1 - The first vector.\n   * @param {Vector4} v2 - The second vector.\n   * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n   * @return {Vector4} A reference to this vector.\n   */\n  lerpVectors(v1, v2, alpha) {\n    this.x = v1.x + (v2.x - v1.x) * alpha;\n    this.y = v1.y + (v2.y - v1.y) * alpha;\n    this.z = v1.z + (v2.z - v1.z) * alpha;\n    this.w = v1.w + (v2.w - v1.w) * alpha;\n    return this;\n  }\n\n  /**\n   * Returns `true` if this vector is equal with the given one.\n   *\n   * @param {Vector4} v - The vector to test for equality.\n   * @return {boolean} Whether this vector is equal with the given one.\n   */\n  equals(v) {\n    return v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;\n  }\n\n  /**\n   * Sets this vector's x value to be `array[ offset ]`, y value to be `array[ offset + 1 ]`,\n   * z value to be `array[ offset + 2 ]`, w value to be `array[ offset + 3 ]`.\n   *\n   * @param {Array<number>} array - An array holding the vector component values.\n   * @param {number} [offset=0] - The offset into the array.\n   * @return {Vector4} A reference to this vector.\n   */\n  fromArray(array) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.x = array[offset];\n    this.y = array[offset + 1];\n    this.z = array[offset + 2];\n    this.w = array[offset + 3];\n    return this;\n  }\n\n  /**\n   * Writes the components of this vector to the given array. If no array is provided,\n   * the method returns a new instance.\n   *\n   * @param {Array<number>} [array=[]] - The target array holding the vector components.\n   * @param {number} [offset=0] - Index of the first element in the array.\n   * @return {Array<number>} The vector components.\n   */\n  toArray() {\n    let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    array[offset] = this.x;\n    array[offset + 1] = this.y;\n    array[offset + 2] = this.z;\n    array[offset + 3] = this.w;\n    return array;\n  }\n\n  /**\n   * Sets the components of this vector from the given buffer attribute.\n   *\n   * @param {BufferAttribute} attribute - The buffer attribute holding vector data.\n   * @param {number} index - The index into the attribute.\n   * @return {Vector4} A reference to this vector.\n   */\n  fromBufferAttribute(attribute, index) {\n    this.x = attribute.getX(index);\n    this.y = attribute.getY(index);\n    this.z = attribute.getZ(index);\n    this.w = attribute.getW(index);\n    return this;\n  }\n\n  /**\n   * Sets each component of this vector to a pseudo-random value between `0` and\n   * `1`, excluding `1`.\n   *\n   * @return {Vector4} A reference to this vector.\n   */\n  random() {\n    this.x = Math.random();\n    this.y = Math.random();\n    this.z = Math.random();\n    this.w = Math.random();\n    return this;\n  }\n  *[Symbol.iterator]() {\n    yield this.x;\n    yield this.y;\n    yield this.z;\n    yield this.w;\n  }\n}\n\n/**\n * A render target is a buffer where the video card draws pixels for a scene\n * that is being rendered in the background. It is used in different effects,\n * such as applying postprocessing to a rendered image before displaying it\n * on the screen.\n *\n * @augments EventDispatcher\n */\nclass RenderTarget extends EventDispatcher {\n  /**\n   * Render target options.\n   *\n   * @typedef {Object} RenderTarget~Options\n   * @property {boolean} [generateMipmaps=false] - Whether to generate mipmaps or not.\n   * @property {number} [magFilter=LinearFilter] - The mag filter.\n   * @property {number} [minFilter=LinearFilter] - The min filter.\n   * @property {number} [format=RGBAFormat] - The texture format.\n   * @property {number} [type=UnsignedByteType] - The texture type.\n   * @property {?string} [internalFormat=null] - The texture's internal format.\n   * @property {number} [wrapS=ClampToEdgeWrapping] - The texture's uv wrapping mode.\n   * @property {number} [wrapT=ClampToEdgeWrapping] - The texture's uv wrapping mode.\n   * @property {number} [anisotropy=1] - The texture's anisotropy value.\n   * @property {string} [colorSpace=NoColorSpace] - The texture's color space.\n   * @property {boolean} [depthBuffer=true] - Whether to allocate a depth buffer or not.\n   * @property {boolean} [stencilBuffer=false] - Whether to allocate a stencil buffer or not.\n   * @property {boolean} [resolveDepthBuffer=true] - Whether to resolve the depth buffer or not.\n   * @property {boolean} [resolveStencilBuffer=true] - Whether  to resolve the stencil buffer or not.\n   * @property {?Texture} [depthTexture=null] - Reference to a depth texture.\n   * @property {number} [samples=0] - The MSAA samples count.\n   * @property {number} [count=1] - Defines the number of color attachments . Must be at least `1`.\n   * @property {boolean} [multiview=false] - Whether this target is used for multiview rendering.\n   */\n\n  /**\n   * Constructs a new render target.\n   *\n   * @param {number} [width=1] - The width of the render target.\n   * @param {number} [height=1] - The height of the render target.\n   * @param {RenderTarget~Options} [options] - The configuration object.\n   */\n  constructor() {\n    let width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isRenderTarget = true;\n\n    /**\n     * The width of the render target.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.width = width;\n\n    /**\n     * The height of the render target.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.height = height;\n\n    /**\n     * The depth of the render target.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.depth = options.depth ? options.depth : 1;\n\n    /**\n     * A rectangular area inside the render target's viewport. Fragments that are\n     * outside the area will be discarded.\n     *\n     * @type {Vector4}\n     * @default (0,0,width,height)\n     */\n    this.scissor = new Vector4(0, 0, width, height);\n\n    /**\n     * Indicates whether the scissor test should be enabled when rendering into\n     * this render target or not.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.scissorTest = false;\n\n    /**\n     * A rectangular area representing the render target's viewport.\n     *\n     * @type {Vector4}\n     * @default (0,0,width,height)\n     */\n    this.viewport = new Vector4(0, 0, width, height);\n    const image = {\n      width: width,\n      height: height,\n      depth: this.depth\n    };\n    options = Object.assign({\n      generateMipmaps: false,\n      internalFormat: null,\n      minFilter: LinearFilter,\n      depthBuffer: true,\n      stencilBuffer: false,\n      resolveDepthBuffer: true,\n      resolveStencilBuffer: true,\n      depthTexture: null,\n      samples: 0,\n      count: 1,\n      multiview: false\n    }, options);\n    const texture = new Texture(image, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace);\n    texture.flipY = false;\n    texture.generateMipmaps = options.generateMipmaps;\n    texture.internalFormat = options.internalFormat;\n\n    /**\n     * An array of textures. Each color attachment is represented as a separate texture.\n     * Has at least a single entry for the default color attachment.\n     *\n     * @type {Array<Texture>}\n     */\n    this.textures = [];\n    const count = options.count;\n    for (let i = 0; i < count; i++) {\n      this.textures[i] = texture.clone();\n      this.textures[i].isRenderTargetTexture = true;\n      this.textures[i].renderTarget = this;\n    }\n\n    /**\n     * Whether to allocate a depth buffer or not.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.depthBuffer = options.depthBuffer;\n\n    /**\n     * Whether to allocate a stencil buffer or not.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.stencilBuffer = options.stencilBuffer;\n\n    /**\n     * Whether to resolve the depth buffer or not.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.resolveDepthBuffer = options.resolveDepthBuffer;\n\n    /**\n     * Whether to resolve the stencil buffer or not.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.resolveStencilBuffer = options.resolveStencilBuffer;\n    this._depthTexture = null;\n    this.depthTexture = options.depthTexture;\n\n    /**\n     * The number of MSAA samples.\n     *\n     * A value of `0` disables MSAA.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.samples = options.samples;\n\n    /**\n     * Whether to this target is used in multiview rendering.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.multiview = options.multiview;\n  }\n\n  /**\n   * The texture representing the default color attachment.\n   *\n   * @type {Texture}\n   */\n  get texture() {\n    return this.textures[0];\n  }\n  set texture(value) {\n    this.textures[0] = value;\n  }\n  set depthTexture(current) {\n    if (this._depthTexture !== null) this._depthTexture.renderTarget = null;\n    if (current !== null) current.renderTarget = this;\n    this._depthTexture = current;\n  }\n\n  /**\n   * Instead of saving the depth in a renderbuffer, a texture\n   * can be used instead which is useful for further processing\n   * e.g. in context of post-processing.\n   *\n   * @type {?DepthTexture}\n   * @default null\n   */\n  get depthTexture() {\n    return this._depthTexture;\n  }\n\n  /**\n   * Sets the size of this render target.\n   *\n   * @param {number} width - The width.\n   * @param {number} height - The height.\n   * @param {number} [depth=1] - The depth.\n   */\n  setSize(width, height) {\n    let depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    if (this.width !== width || this.height !== height || this.depth !== depth) {\n      this.width = width;\n      this.height = height;\n      this.depth = depth;\n      for (let i = 0, il = this.textures.length; i < il; i++) {\n        this.textures[i].image.width = width;\n        this.textures[i].image.height = height;\n        this.textures[i].image.depth = depth;\n      }\n      this.dispose();\n    }\n    this.viewport.set(0, 0, width, height);\n    this.scissor.set(0, 0, width, height);\n  }\n\n  /**\n   * Returns a new render target with copied values from this instance.\n   *\n   * @return {RenderTarget} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  /**\n   * Copies the settings of the given render target. This is a structural copy so\n   * no resources are shared between render targets after the copy. That includes\n   * all MRT textures and the depth texture.\n   *\n   * @param {RenderTarget} source - The render target to copy.\n   * @return {RenderTarget} A reference to this instance.\n   */\n  copy(source) {\n    this.width = source.width;\n    this.height = source.height;\n    this.depth = source.depth;\n    this.scissor.copy(source.scissor);\n    this.scissorTest = source.scissorTest;\n    this.viewport.copy(source.viewport);\n    this.textures.length = 0;\n    for (let i = 0, il = source.textures.length; i < il; i++) {\n      this.textures[i] = source.textures[i].clone();\n      this.textures[i].isRenderTargetTexture = true;\n      this.textures[i].renderTarget = this;\n\n      // ensure image object is not shared, see #20328\n\n      const image = Object.assign({}, source.textures[i].image);\n      this.textures[i].source = new Source(image);\n    }\n    this.depthBuffer = source.depthBuffer;\n    this.stencilBuffer = source.stencilBuffer;\n    this.resolveDepthBuffer = source.resolveDepthBuffer;\n    this.resolveStencilBuffer = source.resolveStencilBuffer;\n    if (source.depthTexture !== null) this.depthTexture = source.depthTexture.clone();\n    this.samples = source.samples;\n    return this;\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   *\n   * @fires RenderTarget#dispose\n   */\n  dispose() {\n    this.dispatchEvent({\n      type: 'dispose'\n    });\n  }\n}\n\n/**\n * A render target used in context of {@link WebGLRenderer}.\n *\n * @augments RenderTarget\n */\nclass WebGLRenderTarget extends RenderTarget {\n  /**\n   * Constructs a new 3D render target.\n   *\n   * @param {number} [width=1] - The width of the render target.\n   * @param {number} [height=1] - The height of the render target.\n   * @param {RenderTarget~Options} [options] - The configuration object.\n   */\n  constructor() {\n    let width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super(width, height, options);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isWebGLRenderTarget = true;\n  }\n}\n\n/**\n * Creates an array of textures directly from raw buffer data.\n *\n * @augments Texture\n */\nclass DataArrayTexture extends Texture {\n  /**\n   * Constructs a new data array texture.\n   *\n   * @param {?TypedArray} [data=null] - The buffer data.\n   * @param {number} [width=1] - The width of the texture.\n   * @param {number} [height=1] - The height of the texture.\n   * @param {number} [depth=1] - The depth of the texture.\n   */\n  constructor() {\n    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let depth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    super(null);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isDataArrayTexture = true;\n\n    /**\n     * The image definition of a data texture.\n     *\n     * @type {{data:TypedArray,width:number,height:number,depth:number}}\n     */\n    this.image = {\n      data,\n      width,\n      height,\n      depth\n    };\n\n    /**\n     * How the texture is sampled when a texel covers more than one pixel.\n     *\n     * Overwritten and set to `NearestFilter` by default.\n     *\n     * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n     * @default NearestFilter\n     */\n    this.magFilter = NearestFilter;\n\n    /**\n     * How the texture is sampled when a texel covers less than one pixel.\n     *\n     * Overwritten and set to `NearestFilter` by default.\n     *\n     * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n     * @default NearestFilter\n     */\n    this.minFilter = NearestFilter;\n\n    /**\n     * This defines how the texture is wrapped in the depth and corresponds to\n     * *W* in UVW mapping.\n     *\n     * @type {(RepeatWrapping|ClampToEdgeWrapping|MirroredRepeatWrapping)}\n     * @default ClampToEdgeWrapping\n     */\n    this.wrapR = ClampToEdgeWrapping;\n\n    /**\n     * Whether to generate mipmaps (if possible) for a texture.\n     *\n     * Overwritten and set to `false` by default.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.generateMipmaps = false;\n\n    /**\n     * If set to `true`, the texture is flipped along the vertical axis when\n     * uploaded to the GPU.\n     *\n     * Overwritten and set to `false` by default.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.flipY = false;\n\n    /**\n     * Specifies the alignment requirements for the start of each pixel row in memory.\n     *\n     * Overwritten and set to `1` by default.\n     *\n     * @type {boolean}\n     * @default 1\n     */\n    this.unpackAlignment = 1;\n\n    /**\n     * A set of all layers which need to be updated in the texture.\n     *\n     * @type {Set<number>}\n     */\n    this.layerUpdates = new Set();\n  }\n\n  /**\n   * Describes that a specific layer of the texture needs to be updated.\n   * Normally when {@link Texture#needsUpdate} is set to `true`, the\n   * entire data texture array is sent to the GPU. Marking specific\n   * layers will only transmit subsets of all mipmaps associated with a\n   * specific depth in the array which is often much more performant.\n   *\n   * @param {number} layerIndex - The layer index that should be updated.\n   */\n  addLayerUpdate(layerIndex) {\n    this.layerUpdates.add(layerIndex);\n  }\n\n  /**\n   * Resets the layer updates registry.\n   */\n  clearLayerUpdates() {\n    this.layerUpdates.clear();\n  }\n}\n\n/**\n * An array render target used in context of {@link WebGLRenderer}.\n *\n * @augments WebGLRenderTarget\n */\nclass WebGLArrayRenderTarget extends WebGLRenderTarget {\n  /**\n   * Constructs a new array render target.\n   *\n   * @param {number} [width=1] - The width of the render target.\n   * @param {number} [height=1] - The height of the render target.\n   * @param {number} [depth=1] - The height of the render target.\n   * @param {RenderTarget~Options} [options] - The configuration object.\n   */\n  constructor() {\n    let width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    super(width, height, options);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isWebGLArrayRenderTarget = true;\n    this.depth = depth;\n\n    /**\n     * Overwritten with a different texture type.\n     *\n     * @type {DataArrayTexture}\n     */\n    this.texture = new DataArrayTexture(null, width, height, depth);\n    this.texture.isRenderTargetTexture = true;\n  }\n}\n\n/**\n * Creates a three-dimensional texture from raw data, with parameters to\n * divide it into width, height, and depth.\n *\n * @augments Texture\n */\nclass Data3DTexture extends Texture {\n  /**\n   * Constructs a new data array texture.\n   *\n   * @param {?TypedArray} [data=null] - The buffer data.\n   * @param {number} [width=1] - The width of the texture.\n   * @param {number} [height=1] - The height of the texture.\n   * @param {number} [depth=1] - The depth of the texture.\n   */\n  constructor() {\n    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let depth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    // We're going to add .setXXX() methods for setting properties later.\n    // Users can still set in Data3DTexture directly.\n    //\n    //\tconst texture = new THREE.Data3DTexture( data, width, height, depth );\n    // \ttexture.anisotropy = 16;\n    //\n    // See #14839\n\n    super(null);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isData3DTexture = true;\n\n    /**\n     * The image definition of a data texture.\n     *\n     * @type {{data:TypedArray,width:number,height:number,depth:number}}\n     */\n    this.image = {\n      data,\n      width,\n      height,\n      depth\n    };\n\n    /**\n     * How the texture is sampled when a texel covers more than one pixel.\n     *\n     * Overwritten and set to `NearestFilter` by default.\n     *\n     * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n     * @default NearestFilter\n     */\n    this.magFilter = NearestFilter;\n\n    /**\n     * How the texture is sampled when a texel covers less than one pixel.\n     *\n     * Overwritten and set to `NearestFilter` by default.\n     *\n     * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n     * @default NearestFilter\n     */\n    this.minFilter = NearestFilter;\n\n    /**\n     * This defines how the texture is wrapped in the depth and corresponds to\n     * *W* in UVW mapping.\n     *\n     * @type {(RepeatWrapping|ClampToEdgeWrapping|MirroredRepeatWrapping)}\n     * @default ClampToEdgeWrapping\n     */\n    this.wrapR = ClampToEdgeWrapping;\n\n    /**\n     * Whether to generate mipmaps (if possible) for a texture.\n     *\n     * Overwritten and set to `false` by default.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.generateMipmaps = false;\n\n    /**\n     * If set to `true`, the texture is flipped along the vertical axis when\n     * uploaded to the GPU.\n     *\n     * Overwritten and set to `false` by default.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.flipY = false;\n\n    /**\n     * Specifies the alignment requirements for the start of each pixel row in memory.\n     *\n     * Overwritten and set to `1` by default.\n     *\n     * @type {boolean}\n     * @default 1\n     */\n    this.unpackAlignment = 1;\n  }\n}\n\n/**\n * A 3D render target used in context of {@link WebGLRenderer}.\n *\n * @augments WebGLRenderTarget\n */\nclass WebGL3DRenderTarget extends WebGLRenderTarget {\n  /**\n   * Constructs a new 3D render target.\n   *\n   * @param {number} [width=1] - The width of the render target.\n   * @param {number} [height=1] - The height of the render target.\n   * @param {number} [depth=1] - The height of the render target.\n   * @param {RenderTarget~Options} [options] - The configuration object.\n   */\n  constructor() {\n    let width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    super(width, height, options);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isWebGL3DRenderTarget = true;\n    this.depth = depth;\n\n    /**\n     * Overwritten with a different texture type.\n     *\n     * @type {Data3DTexture}\n     */\n    this.texture = new Data3DTexture(null, width, height, depth);\n    this.texture.isRenderTargetTexture = true;\n  }\n}\n\n/**\n * Class for representing a Quaternion. Quaternions are used in three.js to represent rotations.\n *\n * Iterating through a vector instance will yield its components `(x, y, z, w)` in\n * the corresponding order.\n *\n * Note that three.js expects Quaternions to be normalized.\n * ```js\n * const quaternion = new THREE.Quaternion();\n * quaternion.setFromAxisAngle( new THREE.Vector3( 0, 1, 0 ), Math.PI / 2 );\n *\n * const vector = new THREE.Vector3( 1, 0, 0 );\n * vector.applyQuaternion( quaternion );\n * ```\n */\nclass Quaternion {\n  /**\n   * Constructs a new quaternion.\n   *\n   * @param {number} [x=0] - The x value of this quaternion.\n   * @param {number} [y=0] - The y value of this quaternion.\n   * @param {number} [z=0] - The z value of this quaternion.\n   * @param {number} [w=1] - The w value of this quaternion.\n   */\n  constructor() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isQuaternion = true;\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._w = w;\n  }\n\n  /**\n   * Interpolates between two quaternions via SLERP. This implementation assumes the\n   * quaternion data are managed  in flat arrays.\n   *\n   * @param {Array<number>} dst - The destination array.\n   * @param {number} dstOffset - An offset into the destination array.\n   * @param {Array<number>} src0 - The source array of the first quaternion.\n   * @param {number} srcOffset0 - An offset into the first source array.\n   * @param {Array<number>} src1 -  The source array of the second quaternion.\n   * @param {number} srcOffset1 - An offset into the second source array.\n   * @param {number} t - The interpolation factor in the range `[0,1]`.\n   * @see {@link Quaternion#slerp}\n   */\n  static slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {\n    // fuzz-free, array-based Quaternion SLERP operation\n\n    let x0 = src0[srcOffset0 + 0],\n      y0 = src0[srcOffset0 + 1],\n      z0 = src0[srcOffset0 + 2],\n      w0 = src0[srcOffset0 + 3];\n    const x1 = src1[srcOffset1 + 0],\n      y1 = src1[srcOffset1 + 1],\n      z1 = src1[srcOffset1 + 2],\n      w1 = src1[srcOffset1 + 3];\n    if (t === 0) {\n      dst[dstOffset + 0] = x0;\n      dst[dstOffset + 1] = y0;\n      dst[dstOffset + 2] = z0;\n      dst[dstOffset + 3] = w0;\n      return;\n    }\n    if (t === 1) {\n      dst[dstOffset + 0] = x1;\n      dst[dstOffset + 1] = y1;\n      dst[dstOffset + 2] = z1;\n      dst[dstOffset + 3] = w1;\n      return;\n    }\n    if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {\n      let s = 1 - t;\n      const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n        dir = cos >= 0 ? 1 : -1,\n        sqrSin = 1 - cos * cos;\n\n      // Skip the Slerp for tiny steps to avoid numeric problems:\n      if (sqrSin > Number.EPSILON) {\n        const sin = Math.sqrt(sqrSin),\n          len = Math.atan2(sin, cos * dir);\n        s = Math.sin(s * len) / sin;\n        t = Math.sin(t * len) / sin;\n      }\n      const tDir = t * dir;\n      x0 = x0 * s + x1 * tDir;\n      y0 = y0 * s + y1 * tDir;\n      z0 = z0 * s + z1 * tDir;\n      w0 = w0 * s + w1 * tDir;\n\n      // Normalize in case we just did a lerp:\n      if (s === 1 - t) {\n        const f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);\n        x0 *= f;\n        y0 *= f;\n        z0 *= f;\n        w0 *= f;\n      }\n    }\n    dst[dstOffset] = x0;\n    dst[dstOffset + 1] = y0;\n    dst[dstOffset + 2] = z0;\n    dst[dstOffset + 3] = w0;\n  }\n\n  /**\n   * Multiplies two quaternions. This implementation assumes the quaternion data are managed\n   * in flat arrays.\n   *\n   * @param {Array<number>} dst - The destination array.\n   * @param {number} dstOffset - An offset into the destination array.\n   * @param {Array<number>} src0 - The source array of the first quaternion.\n   * @param {number} srcOffset0 - An offset into the first source array.\n   * @param {Array<number>} src1 -  The source array of the second quaternion.\n   * @param {number} srcOffset1 - An offset into the second source array.\n   * @return {Array<number>} The destination array.\n   * @see {@link Quaternion#multiplyQuaternions}.\n   */\n  static multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {\n    const x0 = src0[srcOffset0];\n    const y0 = src0[srcOffset0 + 1];\n    const z0 = src0[srcOffset0 + 2];\n    const w0 = src0[srcOffset0 + 3];\n    const x1 = src1[srcOffset1];\n    const y1 = src1[srcOffset1 + 1];\n    const z1 = src1[srcOffset1 + 2];\n    const w1 = src1[srcOffset1 + 3];\n    dst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n    dst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n    dst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n    dst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n    return dst;\n  }\n\n  /**\n   * The x value of this quaternion.\n   *\n   * @type {number}\n   * @default 0\n   */\n  get x() {\n    return this._x;\n  }\n  set x(value) {\n    this._x = value;\n    this._onChangeCallback();\n  }\n\n  /**\n   * The y value of this quaternion.\n   *\n   * @type {number}\n   * @default 0\n   */\n  get y() {\n    return this._y;\n  }\n  set y(value) {\n    this._y = value;\n    this._onChangeCallback();\n  }\n\n  /**\n   * The z value of this quaternion.\n   *\n   * @type {number}\n   * @default 0\n   */\n  get z() {\n    return this._z;\n  }\n  set z(value) {\n    this._z = value;\n    this._onChangeCallback();\n  }\n\n  /**\n   * The w value of this quaternion.\n   *\n   * @type {number}\n   * @default 1\n   */\n  get w() {\n    return this._w;\n  }\n  set w(value) {\n    this._w = value;\n    this._onChangeCallback();\n  }\n\n  /**\n   * Sets the quaternion components.\n   *\n   * @param {number} x - The x value of this quaternion.\n   * @param {number} y - The y value of this quaternion.\n   * @param {number} z - The z value of this quaternion.\n   * @param {number} w - The w value of this quaternion.\n   * @return {Quaternion} A reference to this quaternion.\n   */\n  set(x, y, z, w) {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._w = w;\n    this._onChangeCallback();\n    return this;\n  }\n\n  /**\n   * Returns a new quaternion with copied values from this instance.\n   *\n   * @return {Quaternion} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor(this._x, this._y, this._z, this._w);\n  }\n\n  /**\n   * Copies the values of the given quaternion to this instance.\n   *\n   * @param {Quaternion} quaternion - The quaternion to copy.\n   * @return {Quaternion} A reference to this quaternion.\n   */\n  copy(quaternion) {\n    this._x = quaternion.x;\n    this._y = quaternion.y;\n    this._z = quaternion.z;\n    this._w = quaternion.w;\n    this._onChangeCallback();\n    return this;\n  }\n\n  /**\n   * Sets this quaternion from the rotation specified by the given\n   * Euler angles.\n   *\n   * @param {Euler} euler - The Euler angles.\n   * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.\n   * @return {Quaternion} A reference to this quaternion.\n   */\n  setFromEuler(euler) {\n    let update = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const x = euler._x,\n      y = euler._y,\n      z = euler._z,\n      order = euler._order;\n\n    // http://www.mathworks.com/matlabcentral/fileexchange/\n    // \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n    //\tcontent/SpinCalc.m\n\n    const cos = Math.cos;\n    const sin = Math.sin;\n    const c1 = cos(x / 2);\n    const c2 = cos(y / 2);\n    const c3 = cos(z / 2);\n    const s1 = sin(x / 2);\n    const s2 = sin(y / 2);\n    const s3 = sin(z / 2);\n    switch (order) {\n      case 'XYZ':\n        this._x = s1 * c2 * c3 + c1 * s2 * s3;\n        this._y = c1 * s2 * c3 - s1 * c2 * s3;\n        this._z = c1 * c2 * s3 + s1 * s2 * c3;\n        this._w = c1 * c2 * c3 - s1 * s2 * s3;\n        break;\n      case 'YXZ':\n        this._x = s1 * c2 * c3 + c1 * s2 * s3;\n        this._y = c1 * s2 * c3 - s1 * c2 * s3;\n        this._z = c1 * c2 * s3 - s1 * s2 * c3;\n        this._w = c1 * c2 * c3 + s1 * s2 * s3;\n        break;\n      case 'ZXY':\n        this._x = s1 * c2 * c3 - c1 * s2 * s3;\n        this._y = c1 * s2 * c3 + s1 * c2 * s3;\n        this._z = c1 * c2 * s3 + s1 * s2 * c3;\n        this._w = c1 * c2 * c3 - s1 * s2 * s3;\n        break;\n      case 'ZYX':\n        this._x = s1 * c2 * c3 - c1 * s2 * s3;\n        this._y = c1 * s2 * c3 + s1 * c2 * s3;\n        this._z = c1 * c2 * s3 - s1 * s2 * c3;\n        this._w = c1 * c2 * c3 + s1 * s2 * s3;\n        break;\n      case 'YZX':\n        this._x = s1 * c2 * c3 + c1 * s2 * s3;\n        this._y = c1 * s2 * c3 + s1 * c2 * s3;\n        this._z = c1 * c2 * s3 - s1 * s2 * c3;\n        this._w = c1 * c2 * c3 - s1 * s2 * s3;\n        break;\n      case 'XZY':\n        this._x = s1 * c2 * c3 - c1 * s2 * s3;\n        this._y = c1 * s2 * c3 - s1 * c2 * s3;\n        this._z = c1 * c2 * s3 + s1 * s2 * c3;\n        this._w = c1 * c2 * c3 + s1 * s2 * s3;\n        break;\n      default:\n        console.warn('THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order);\n    }\n    if (update === true) this._onChangeCallback();\n    return this;\n  }\n\n  /**\n   * Sets this quaternion from the given axis and angle.\n   *\n   * @param {Vector3} axis - The normalized axis.\n   * @param {number} angle - The angle in radians.\n   * @return {Quaternion} A reference to this quaternion.\n   */\n  setFromAxisAngle(axis, angle) {\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n    const halfAngle = angle / 2,\n      s = Math.sin(halfAngle);\n    this._x = axis.x * s;\n    this._y = axis.y * s;\n    this._z = axis.z * s;\n    this._w = Math.cos(halfAngle);\n    this._onChangeCallback();\n    return this;\n  }\n\n  /**\n   * Sets this quaternion from the given rotation matrix.\n   *\n   * @param {Matrix4} m - A 4x4 matrix of which the upper 3x3 of matrix is a pure rotation matrix (i.e. unscaled).\n   * @return {Quaternion} A reference to this quaternion.\n   */\n  setFromRotationMatrix(m) {\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n    const te = m.elements,\n      m11 = te[0],\n      m12 = te[4],\n      m13 = te[8],\n      m21 = te[1],\n      m22 = te[5],\n      m23 = te[9],\n      m31 = te[2],\n      m32 = te[6],\n      m33 = te[10],\n      trace = m11 + m22 + m33;\n    if (trace > 0) {\n      const s = 0.5 / Math.sqrt(trace + 1.0);\n      this._w = 0.25 / s;\n      this._x = (m32 - m23) * s;\n      this._y = (m13 - m31) * s;\n      this._z = (m21 - m12) * s;\n    } else if (m11 > m22 && m11 > m33) {\n      const s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n      this._w = (m32 - m23) / s;\n      this._x = 0.25 * s;\n      this._y = (m12 + m21) / s;\n      this._z = (m13 + m31) / s;\n    } else if (m22 > m33) {\n      const s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n      this._w = (m13 - m31) / s;\n      this._x = (m12 + m21) / s;\n      this._y = 0.25 * s;\n      this._z = (m23 + m32) / s;\n    } else {\n      const s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n      this._w = (m21 - m12) / s;\n      this._x = (m13 + m31) / s;\n      this._y = (m23 + m32) / s;\n      this._z = 0.25 * s;\n    }\n    this._onChangeCallback();\n    return this;\n  }\n\n  /**\n   * Sets this quaternion to the rotation required to rotate the direction vector\n   * `vFrom` to the direction vector `vTo`.\n   *\n   * @param {Vector3} vFrom - The first (normalized) direction vector.\n   * @param {Vector3} vTo - The second (normalized) direction vector.\n   * @return {Quaternion} A reference to this quaternion.\n   */\n  setFromUnitVectors(vFrom, vTo) {\n    // assumes direction vectors vFrom and vTo are normalized\n\n    let r = vFrom.dot(vTo) + 1;\n    if (r < Number.EPSILON) {\n      // vFrom and vTo point in opposite directions\n\n      r = 0;\n      if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {\n        this._x = -vFrom.y;\n        this._y = vFrom.x;\n        this._z = 0;\n        this._w = r;\n      } else {\n        this._x = 0;\n        this._y = -vFrom.z;\n        this._z = vFrom.y;\n        this._w = r;\n      }\n    } else {\n      // crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\n      this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n      this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n      this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n      this._w = r;\n    }\n    return this.normalize();\n  }\n\n  /**\n   * Returns the angle between this quaternion and the given one in radians.\n   *\n   * @param {Quaternion} q - The quaternion to compute the angle with.\n   * @return {number} The angle in radians.\n   */\n  angleTo(q) {\n    return 2 * Math.acos(Math.abs(clamp(this.dot(q), -1, 1)));\n  }\n\n  /**\n   * Rotates this quaternion by a given angular step to the given quaternion.\n   * The method ensures that the final quaternion will not overshoot `q`.\n   *\n   * @param {Quaternion} q - The target quaternion.\n   * @param {number} step - The angular step in radians.\n   * @return {Quaternion} A reference to this quaternion.\n   */\n  rotateTowards(q, step) {\n    const angle = this.angleTo(q);\n    if (angle === 0) return this;\n    const t = Math.min(1, step / angle);\n    this.slerp(q, t);\n    return this;\n  }\n\n  /**\n   * Sets this quaternion to the identity quaternion; that is, to the\n   * quaternion that represents \"no rotation\".\n   *\n   * @return {Quaternion} A reference to this quaternion.\n   */\n  identity() {\n    return this.set(0, 0, 0, 1);\n  }\n\n  /**\n   * Inverts this quaternion via {@link Quaternion#conjugate}. The\n   * quaternion is assumed to have unit length.\n   *\n   * @return {Quaternion} A reference to this quaternion.\n   */\n  invert() {\n    return this.conjugate();\n  }\n\n  /**\n   * Returns the rotational conjugate of this quaternion. The conjugate of a\n   * quaternion represents the same rotation in the opposite direction about\n   * the rotational axis.\n   *\n   * @return {Quaternion} A reference to this quaternion.\n   */\n  conjugate() {\n    this._x *= -1;\n    this._y *= -1;\n    this._z *= -1;\n    this._onChangeCallback();\n    return this;\n  }\n\n  /**\n   * Calculates the dot product of this quaternion and the given one.\n   *\n   * @param {Quaternion} v - The quaternion to compute the dot product with.\n   * @return {number} The result of the dot product.\n   */\n  dot(v) {\n    return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n  }\n\n  /**\n   * Computes the squared Euclidean length (straight-line length) of this quaternion,\n   * considered as a 4 dimensional vector. This can be useful if you are comparing the\n   * lengths of two quaternions, as this is a slightly more efficient calculation than\n   * {@link Quaternion#length}.\n   *\n   * @return {number} The squared Euclidean length.\n   */\n  lengthSq() {\n    return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n  }\n\n  /**\n   * Computes the Euclidean length (straight-line length) of this quaternion,\n   * considered as a 4 dimensional vector.\n   *\n   * @return {number} The Euclidean length.\n   */\n  length() {\n    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);\n  }\n\n  /**\n   * Normalizes this quaternion - that is, calculated the quaternion that performs\n   * the same rotation as this one, but has a length equal to `1`.\n   *\n   * @return {Quaternion} A reference to this quaternion.\n   */\n  normalize() {\n    let l = this.length();\n    if (l === 0) {\n      this._x = 0;\n      this._y = 0;\n      this._z = 0;\n      this._w = 1;\n    } else {\n      l = 1 / l;\n      this._x = this._x * l;\n      this._y = this._y * l;\n      this._z = this._z * l;\n      this._w = this._w * l;\n    }\n    this._onChangeCallback();\n    return this;\n  }\n\n  /**\n   * Multiplies this quaternion by the given one.\n   *\n   * @param {Quaternion} q - The quaternion.\n   * @return {Quaternion} A reference to this quaternion.\n   */\n  multiply(q) {\n    return this.multiplyQuaternions(this, q);\n  }\n\n  /**\n   * Pre-multiplies this quaternion by the given one.\n   *\n   * @param {Quaternion} q - The quaternion.\n   * @return {Quaternion} A reference to this quaternion.\n   */\n  premultiply(q) {\n    return this.multiplyQuaternions(q, this);\n  }\n\n  /**\n   * Multiplies the given quaternions and stores the result in this instance.\n   *\n   * @param {Quaternion} a - The first quaternion.\n   * @param {Quaternion} b - The second quaternion.\n   * @return {Quaternion} A reference to this quaternion.\n   */\n  multiplyQuaternions(a, b) {\n    // from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n    const qax = a._x,\n      qay = a._y,\n      qaz = a._z,\n      qaw = a._w;\n    const qbx = b._x,\n      qby = b._y,\n      qbz = b._z,\n      qbw = b._w;\n    this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n    this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n    this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n    this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n    this._onChangeCallback();\n    return this;\n  }\n\n  /**\n   * Performs a spherical linear interpolation between quaternions.\n   *\n   * @param {Quaternion} qb - The target quaternion.\n   * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.\n   * @return {Quaternion} A reference to this quaternion.\n   */\n  slerp(qb, t) {\n    if (t === 0) return this;\n    if (t === 1) return this.copy(qb);\n    const x = this._x,\n      y = this._y,\n      z = this._z,\n      w = this._w;\n\n    // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n    let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n    if (cosHalfTheta < 0) {\n      this._w = -qb._w;\n      this._x = -qb._x;\n      this._y = -qb._y;\n      this._z = -qb._z;\n      cosHalfTheta = -cosHalfTheta;\n    } else {\n      this.copy(qb);\n    }\n    if (cosHalfTheta >= 1.0) {\n      this._w = w;\n      this._x = x;\n      this._y = y;\n      this._z = z;\n      return this;\n    }\n    const sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n    if (sqrSinHalfTheta <= Number.EPSILON) {\n      const s = 1 - t;\n      this._w = s * w + t * this._w;\n      this._x = s * x + t * this._x;\n      this._y = s * y + t * this._y;\n      this._z = s * z + t * this._z;\n      this.normalize(); // normalize calls _onChangeCallback()\n\n      return this;\n    }\n    const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);\n    const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);\n    const ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,\n      ratioB = Math.sin(t * halfTheta) / sinHalfTheta;\n    this._w = w * ratioA + this._w * ratioB;\n    this._x = x * ratioA + this._x * ratioB;\n    this._y = y * ratioA + this._y * ratioB;\n    this._z = z * ratioA + this._z * ratioB;\n    this._onChangeCallback();\n    return this;\n  }\n\n  /**\n   * Performs a spherical linear interpolation between the given quaternions\n   * and stores the result in this quaternion.\n   *\n   * @param {Quaternion} qa - The source quaternion.\n   * @param {Quaternion} qb - The target quaternion.\n   * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.\n   * @return {Quaternion} A reference to this quaternion.\n   */\n  slerpQuaternions(qa, qb, t) {\n    return this.copy(qa).slerp(qb, t);\n  }\n\n  /**\n   * Sets this quaternion to a uniformly random, normalized quaternion.\n   *\n   * @return {Quaternion} A reference to this quaternion.\n   */\n  random() {\n    // Ken Shoemake\n    // Uniform random rotations\n    // D. Kirk, editor, Graphics Gems III, pages 124-132. Academic Press, New York, 1992.\n\n    const theta1 = 2 * Math.PI * Math.random();\n    const theta2 = 2 * Math.PI * Math.random();\n    const x0 = Math.random();\n    const r1 = Math.sqrt(1 - x0);\n    const r2 = Math.sqrt(x0);\n    return this.set(r1 * Math.sin(theta1), r1 * Math.cos(theta1), r2 * Math.sin(theta2), r2 * Math.cos(theta2));\n  }\n\n  /**\n   * Returns `true` if this quaternion is equal with the given one.\n   *\n   * @param {Quaternion} quaternion - The quaternion to test for equality.\n   * @return {boolean} Whether this quaternion is equal with the given one.\n   */\n  equals(quaternion) {\n    return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;\n  }\n\n  /**\n   * Sets this quaternion's components from the given array.\n   *\n   * @param {Array<number>} array - An array holding the quaternion component values.\n   * @param {number} [offset=0] - The offset into the array.\n   * @return {Quaternion} A reference to this quaternion.\n   */\n  fromArray(array) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this._x = array[offset];\n    this._y = array[offset + 1];\n    this._z = array[offset + 2];\n    this._w = array[offset + 3];\n    this._onChangeCallback();\n    return this;\n  }\n\n  /**\n   * Writes the components of this quaternion to the given array. If no array is provided,\n   * the method returns a new instance.\n   *\n   * @param {Array<number>} [array=[]] - The target array holding the quaternion components.\n   * @param {number} [offset=0] - Index of the first element in the array.\n   * @return {Array<number>} The quaternion components.\n   */\n  toArray() {\n    let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    array[offset] = this._x;\n    array[offset + 1] = this._y;\n    array[offset + 2] = this._z;\n    array[offset + 3] = this._w;\n    return array;\n  }\n\n  /**\n   * Sets the components of this quaternion from the given buffer attribute.\n   *\n   * @param {BufferAttribute} attribute - The buffer attribute holding quaternion data.\n   * @param {number} index - The index into the attribute.\n   * @return {Quaternion} A reference to this quaternion.\n   */\n  fromBufferAttribute(attribute, index) {\n    this._x = attribute.getX(index);\n    this._y = attribute.getY(index);\n    this._z = attribute.getZ(index);\n    this._w = attribute.getW(index);\n    this._onChangeCallback();\n    return this;\n  }\n\n  /**\n   * This methods defines the serialization result of this class. Returns the\n   * numerical elements of this quaternion in an array of format `[x, y, z, w]`.\n   *\n   * @return {Array<number>} The serialized quaternion.\n   */\n  toJSON() {\n    return this.toArray();\n  }\n  _onChange(callback) {\n    this._onChangeCallback = callback;\n    return this;\n  }\n  _onChangeCallback() {}\n  *[Symbol.iterator]() {\n    yield this._x;\n    yield this._y;\n    yield this._z;\n    yield this._w;\n  }\n}\n\n/**\n * Class representing a 3D vector. A 3D vector is an ordered triplet of numbers\n * (labeled x, y and z), which can be used to represent a number of things, such as:\n *\n * - A point in 3D space.\n * - A direction and length in 3D space. In three.js the length will\n * always be the Euclidean distance(straight-line distance) from `(0, 0, 0)` to `(x, y, z)`\n * and the direction is also measured from `(0, 0, 0)` towards `(x, y, z)`.\n * - Any arbitrary ordered triplet of numbers.\n *\n * There are other things a 3D vector can be used to represent, such as\n * momentum vectors and so on, however these are the most\n * common uses in three.js.\n *\n * Iterating through a vector instance will yield its components `(x, y, z)` in\n * the corresponding order.\n * ```js\n * const a = new THREE.Vector3( 0, 1, 0 );\n *\n * //no arguments; will be initialised to (0, 0, 0)\n * const b = new THREE.Vector3( );\n *\n * const d = a.distanceTo( b );\n * ```\n */\nclass Vector3 {\n  /**\n   * Constructs a new 3D vector.\n   *\n   * @param {number} [x=0] - The x value of this vector.\n   * @param {number} [y=0] - The y value of this vector.\n   * @param {number} [z=0] - The z value of this vector.\n   */\n  constructor() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    Vector3.prototype.isVector3 = true;\n\n    /**\n     * The x value of this vector.\n     *\n     * @type {number}\n     */\n    this.x = x;\n\n    /**\n     * The y value of this vector.\n     *\n     * @type {number}\n     */\n    this.y = y;\n\n    /**\n     * The z value of this vector.\n     *\n     * @type {number}\n     */\n    this.z = z;\n  }\n\n  /**\n   * Sets the vector components.\n   *\n   * @param {number} x - The value of the x component.\n   * @param {number} y - The value of the y component.\n   * @param {number} z - The value of the z component.\n   * @return {Vector3} A reference to this vector.\n   */\n  set(x, y, z) {\n    if (z === undefined) z = this.z; // sprite.scale.set(x,y)\n\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    return this;\n  }\n\n  /**\n   * Sets the vector components to the same value.\n   *\n   * @param {number} scalar - The value to set for all vector components.\n   * @return {Vector3} A reference to this vector.\n   */\n  setScalar(scalar) {\n    this.x = scalar;\n    this.y = scalar;\n    this.z = scalar;\n    return this;\n  }\n\n  /**\n   * Sets the vector's x component to the given value\n   *\n   * @param {number} x - The value to set.\n   * @return {Vector3} A reference to this vector.\n   */\n  setX(x) {\n    this.x = x;\n    return this;\n  }\n\n  /**\n   * Sets the vector's y component to the given value\n   *\n   * @param {number} y - The value to set.\n   * @return {Vector3} A reference to this vector.\n   */\n  setY(y) {\n    this.y = y;\n    return this;\n  }\n\n  /**\n   * Sets the vector's z component to the given value\n   *\n   * @param {number} z - The value to set.\n   * @return {Vector3} A reference to this vector.\n   */\n  setZ(z) {\n    this.z = z;\n    return this;\n  }\n\n  /**\n   * Allows to set a vector component with an index.\n   *\n   * @param {number} index - The component index. `0` equals to x, `1` equals to y, `2` equals to z.\n   * @param {number} value - The value to set.\n   * @return {Vector3} A reference to this vector.\n   */\n  setComponent(index, value) {\n    switch (index) {\n      case 0:\n        this.x = value;\n        break;\n      case 1:\n        this.y = value;\n        break;\n      case 2:\n        this.z = value;\n        break;\n      default:\n        throw new Error('index is out of range: ' + index);\n    }\n    return this;\n  }\n\n  /**\n   * Returns the value of the vector component which matches the given index.\n   *\n   * @param {number} index - The component index. `0` equals to x, `1` equals to y, `2` equals to z.\n   * @return {number} A vector component value.\n   */\n  getComponent(index) {\n    switch (index) {\n      case 0:\n        return this.x;\n      case 1:\n        return this.y;\n      case 2:\n        return this.z;\n      default:\n        throw new Error('index is out of range: ' + index);\n    }\n  }\n\n  /**\n   * Returns a new vector with copied values from this instance.\n   *\n   * @return {Vector3} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor(this.x, this.y, this.z);\n  }\n\n  /**\n   * Copies the values of the given vector to this instance.\n   *\n   * @param {Vector3} v - The vector to copy.\n   * @return {Vector3} A reference to this vector.\n   */\n  copy(v) {\n    this.x = v.x;\n    this.y = v.y;\n    this.z = v.z;\n    return this;\n  }\n\n  /**\n   * Adds the given vector to this instance.\n   *\n   * @param {Vector3} v - The vector to add.\n   * @return {Vector3} A reference to this vector.\n   */\n  add(v) {\n    this.x += v.x;\n    this.y += v.y;\n    this.z += v.z;\n    return this;\n  }\n\n  /**\n   * Adds the given scalar value to all components of this instance.\n   *\n   * @param {number} s - The scalar to add.\n   * @return {Vector3} A reference to this vector.\n   */\n  addScalar(s) {\n    this.x += s;\n    this.y += s;\n    this.z += s;\n    return this;\n  }\n\n  /**\n   * Adds the given vectors and stores the result in this instance.\n   *\n   * @param {Vector3} a - The first vector.\n   * @param {Vector3} b - The second vector.\n   * @return {Vector3} A reference to this vector.\n   */\n  addVectors(a, b) {\n    this.x = a.x + b.x;\n    this.y = a.y + b.y;\n    this.z = a.z + b.z;\n    return this;\n  }\n\n  /**\n   * Adds the given vector scaled by the given factor to this instance.\n   *\n   * @param {Vector3|Vector4} v - The vector.\n   * @param {number} s - The factor that scales `v`.\n   * @return {Vector3} A reference to this vector.\n   */\n  addScaledVector(v, s) {\n    this.x += v.x * s;\n    this.y += v.y * s;\n    this.z += v.z * s;\n    return this;\n  }\n\n  /**\n   * Subtracts the given vector from this instance.\n   *\n   * @param {Vector3} v - The vector to subtract.\n   * @return {Vector3} A reference to this vector.\n   */\n  sub(v) {\n    this.x -= v.x;\n    this.y -= v.y;\n    this.z -= v.z;\n    return this;\n  }\n\n  /**\n   * Subtracts the given scalar value from all components of this instance.\n   *\n   * @param {number} s - The scalar to subtract.\n   * @return {Vector3} A reference to this vector.\n   */\n  subScalar(s) {\n    this.x -= s;\n    this.y -= s;\n    this.z -= s;\n    return this;\n  }\n\n  /**\n   * Subtracts the given vectors and stores the result in this instance.\n   *\n   * @param {Vector3} a - The first vector.\n   * @param {Vector3} b - The second vector.\n   * @return {Vector3} A reference to this vector.\n   */\n  subVectors(a, b) {\n    this.x = a.x - b.x;\n    this.y = a.y - b.y;\n    this.z = a.z - b.z;\n    return this;\n  }\n\n  /**\n   * Multiplies the given vector with this instance.\n   *\n   * @param {Vector3} v - The vector to multiply.\n   * @return {Vector3} A reference to this vector.\n   */\n  multiply(v) {\n    this.x *= v.x;\n    this.y *= v.y;\n    this.z *= v.z;\n    return this;\n  }\n\n  /**\n   * Multiplies the given scalar value with all components of this instance.\n   *\n   * @param {number} scalar - The scalar to multiply.\n   * @return {Vector3} A reference to this vector.\n   */\n  multiplyScalar(scalar) {\n    this.x *= scalar;\n    this.y *= scalar;\n    this.z *= scalar;\n    return this;\n  }\n\n  /**\n   * Multiplies the given vectors and stores the result in this instance.\n   *\n   * @param {Vector3} a - The first vector.\n   * @param {Vector3} b - The second vector.\n   * @return {Vector3} A reference to this vector.\n   */\n  multiplyVectors(a, b) {\n    this.x = a.x * b.x;\n    this.y = a.y * b.y;\n    this.z = a.z * b.z;\n    return this;\n  }\n\n  /**\n   * Applies the given Euler rotation to this vector.\n   *\n   * @param {Euler} euler - The Euler angles.\n   * @return {Vector3} A reference to this vector.\n   */\n  applyEuler(euler) {\n    return this.applyQuaternion(_quaternion$4.setFromEuler(euler));\n  }\n\n  /**\n   * Applies a rotation specified by an axis and an angle to this vector.\n   *\n   * @param {Vector3} axis - A normalized vector representing the rotation axis.\n   * @param {number} angle - The angle in radians.\n   * @return {Vector3} A reference to this vector.\n   */\n  applyAxisAngle(axis, angle) {\n    return this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis, angle));\n  }\n\n  /**\n   * Multiplies this vector with the given 3x3 matrix.\n   *\n   * @param {Matrix3} m - The 3x3 matrix.\n   * @return {Vector3} A reference to this vector.\n   */\n  applyMatrix3(m) {\n    const x = this.x,\n      y = this.y,\n      z = this.z;\n    const e = m.elements;\n    this.x = e[0] * x + e[3] * y + e[6] * z;\n    this.y = e[1] * x + e[4] * y + e[7] * z;\n    this.z = e[2] * x + e[5] * y + e[8] * z;\n    return this;\n  }\n\n  /**\n   * Multiplies this vector by the given normal matrix and normalizes\n   * the result.\n   *\n   * @param {Matrix3} m - The normal matrix.\n   * @return {Vector3} A reference to this vector.\n   */\n  applyNormalMatrix(m) {\n    return this.applyMatrix3(m).normalize();\n  }\n\n  /**\n   * Multiplies this vector (with an implicit 1 in the 4th dimension) by m, and\n   * divides by perspective.\n   *\n   * @param {Matrix4} m - The matrix to apply.\n   * @return {Vector3} A reference to this vector.\n   */\n  applyMatrix4(m) {\n    const x = this.x,\n      y = this.y,\n      z = this.z;\n    const e = m.elements;\n    const w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);\n    this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;\n    this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;\n    this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;\n    return this;\n  }\n\n  /**\n   * Applies the given Quaternion to this vector.\n   *\n   * @param {Quaternion} q - The Quaternion.\n   * @return {Vector3} A reference to this vector.\n   */\n  applyQuaternion(q) {\n    // quaternion q is assumed to have unit length\n\n    const vx = this.x,\n      vy = this.y,\n      vz = this.z;\n    const qx = q.x,\n      qy = q.y,\n      qz = q.z,\n      qw = q.w;\n\n    // t = 2 * cross( q.xyz, v );\n    const tx = 2 * (qy * vz - qz * vy);\n    const ty = 2 * (qz * vx - qx * vz);\n    const tz = 2 * (qx * vy - qy * vx);\n\n    // v + q.w * t + cross( q.xyz, t );\n    this.x = vx + qw * tx + qy * tz - qz * ty;\n    this.y = vy + qw * ty + qz * tx - qx * tz;\n    this.z = vz + qw * tz + qx * ty - qy * tx;\n    return this;\n  }\n\n  /**\n   * Projects this vector from world space into the camera's normalized\n   * device coordinate (NDC) space.\n   *\n   * @param {Camera} camera - The camera.\n   * @return {Vector3} A reference to this vector.\n   */\n  project(camera) {\n    return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);\n  }\n\n  /**\n   * Unprojects this vector from the camera's normalized device coordinate (NDC)\n   * space into world space.\n   *\n   * @param {Camera} camera - The camera.\n   * @return {Vector3} A reference to this vector.\n   */\n  unproject(camera) {\n    return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);\n  }\n\n  /**\n   * Transforms the direction of this vector by a matrix (the upper left 3 x 3\n   * subset of the given 4x4 matrix and then normalizes the result.\n   *\n   * @param {Matrix4} m - The matrix.\n   * @return {Vector3} A reference to this vector.\n   */\n  transformDirection(m) {\n    // input: THREE.Matrix4 affine matrix\n    // vector interpreted as a direction\n\n    const x = this.x,\n      y = this.y,\n      z = this.z;\n    const e = m.elements;\n    this.x = e[0] * x + e[4] * y + e[8] * z;\n    this.y = e[1] * x + e[5] * y + e[9] * z;\n    this.z = e[2] * x + e[6] * y + e[10] * z;\n    return this.normalize();\n  }\n\n  /**\n   * Divides this instance by the given vector.\n   *\n   * @param {Vector3} v - The vector to divide.\n   * @return {Vector3} A reference to this vector.\n   */\n  divide(v) {\n    this.x /= v.x;\n    this.y /= v.y;\n    this.z /= v.z;\n    return this;\n  }\n\n  /**\n   * Divides this vector by the given scalar.\n   *\n   * @param {number} scalar - The scalar to divide.\n   * @return {Vector3} A reference to this vector.\n   */\n  divideScalar(scalar) {\n    return this.multiplyScalar(1 / scalar);\n  }\n\n  /**\n   * If this vector's x, y or z value is greater than the given vector's x, y or z\n   * value, replace that value with the corresponding min value.\n   *\n   * @param {Vector3} v - The vector.\n   * @return {Vector3} A reference to this vector.\n   */\n  min(v) {\n    this.x = Math.min(this.x, v.x);\n    this.y = Math.min(this.y, v.y);\n    this.z = Math.min(this.z, v.z);\n    return this;\n  }\n\n  /**\n   * If this vector's x, y or z value is less than the given vector's x, y or z\n   * value, replace that value with the corresponding max value.\n   *\n   * @param {Vector3} v - The vector.\n   * @return {Vector3} A reference to this vector.\n   */\n  max(v) {\n    this.x = Math.max(this.x, v.x);\n    this.y = Math.max(this.y, v.y);\n    this.z = Math.max(this.z, v.z);\n    return this;\n  }\n\n  /**\n   * If this vector's x, y or z value is greater than the max vector's x, y or z\n   * value, it is replaced by the corresponding value.\n   * If this vector's x, y or z value is less than the min vector's x, y or z value,\n   * it is replaced by the corresponding value.\n   *\n   * @param {Vector3} min - The minimum x, y and z values.\n   * @param {Vector3} max - The maximum x, y and z values in the desired range.\n   * @return {Vector3} A reference to this vector.\n   */\n  clamp(min, max) {\n    // assumes min < max, componentwise\n\n    this.x = clamp(this.x, min.x, max.x);\n    this.y = clamp(this.y, min.y, max.y);\n    this.z = clamp(this.z, min.z, max.z);\n    return this;\n  }\n\n  /**\n   * If this vector's x, y or z values are greater than the max value, they are\n   * replaced by the max value.\n   * If this vector's x, y or z values are less than the min value, they are\n   * replaced by the min value.\n   *\n   * @param {number} minVal - The minimum value the components will be clamped to.\n   * @param {number} maxVal - The maximum value the components will be clamped to.\n   * @return {Vector3} A reference to this vector.\n   */\n  clampScalar(minVal, maxVal) {\n    this.x = clamp(this.x, minVal, maxVal);\n    this.y = clamp(this.y, minVal, maxVal);\n    this.z = clamp(this.z, minVal, maxVal);\n    return this;\n  }\n\n  /**\n   * If this vector's length is greater than the max value, it is replaced by\n   * the max value.\n   * If this vector's length is less than the min value, it is replaced by the\n   * min value.\n   *\n   * @param {number} min - The minimum value the vector length will be clamped to.\n   * @param {number} max - The maximum value the vector length will be clamped to.\n   * @return {Vector3} A reference to this vector.\n   */\n  clampLength(min, max) {\n    const length = this.length();\n    return this.divideScalar(length || 1).multiplyScalar(clamp(length, min, max));\n  }\n\n  /**\n   * The components of this vector are rounded down to the nearest integer value.\n   *\n   * @return {Vector3} A reference to this vector.\n   */\n  floor() {\n    this.x = Math.floor(this.x);\n    this.y = Math.floor(this.y);\n    this.z = Math.floor(this.z);\n    return this;\n  }\n\n  /**\n   * The components of this vector are rounded up to the nearest integer value.\n   *\n   * @return {Vector3} A reference to this vector.\n   */\n  ceil() {\n    this.x = Math.ceil(this.x);\n    this.y = Math.ceil(this.y);\n    this.z = Math.ceil(this.z);\n    return this;\n  }\n\n  /**\n   * The components of this vector are rounded to the nearest integer value\n   *\n   * @return {Vector3} A reference to this vector.\n   */\n  round() {\n    this.x = Math.round(this.x);\n    this.y = Math.round(this.y);\n    this.z = Math.round(this.z);\n    return this;\n  }\n\n  /**\n   * The components of this vector are rounded towards zero (up if negative,\n   * down if positive) to an integer value.\n   *\n   * @return {Vector3} A reference to this vector.\n   */\n  roundToZero() {\n    this.x = Math.trunc(this.x);\n    this.y = Math.trunc(this.y);\n    this.z = Math.trunc(this.z);\n    return this;\n  }\n\n  /**\n   * Inverts this vector - i.e. sets x = -x, y = -y and z = -z.\n   *\n   * @return {Vector3} A reference to this vector.\n   */\n  negate() {\n    this.x = -this.x;\n    this.y = -this.y;\n    this.z = -this.z;\n    return this;\n  }\n\n  /**\n   * Calculates the dot product of the given vector with this instance.\n   *\n   * @param {Vector3} v - The vector to compute the dot product with.\n   * @return {number} The result of the dot product.\n   */\n  dot(v) {\n    return this.x * v.x + this.y * v.y + this.z * v.z;\n  }\n\n  // TODO lengthSquared?\n\n  /**\n   * Computes the square of the Euclidean length (straight-line length) from\n   * (0, 0, 0) to (x, y, z). If you are comparing the lengths of vectors, you should\n   * compare the length squared instead as it is slightly more efficient to calculate.\n   *\n   * @return {number} The square length of this vector.\n   */\n  lengthSq() {\n    return this.x * this.x + this.y * this.y + this.z * this.z;\n  }\n\n  /**\n   * Computes the  Euclidean length (straight-line length) from (0, 0, 0) to (x, y, z).\n   *\n   * @return {number} The length of this vector.\n   */\n  length() {\n    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n  }\n\n  /**\n   * Computes the Manhattan length of this vector.\n   *\n   * @return {number} The length of this vector.\n   */\n  manhattanLength() {\n    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);\n  }\n\n  /**\n   * Converts this vector to a unit vector - that is, sets it equal to a vector\n   * with the same direction as this one, but with a vector length of `1`.\n   *\n   * @return {Vector3} A reference to this vector.\n   */\n  normalize() {\n    return this.divideScalar(this.length() || 1);\n  }\n\n  /**\n   * Sets this vector to a vector with the same direction as this one, but\n   * with the specified length.\n   *\n   * @param {number} length - The new length of this vector.\n   * @return {Vector3} A reference to this vector.\n   */\n  setLength(length) {\n    return this.normalize().multiplyScalar(length);\n  }\n\n  /**\n   * Linearly interpolates between the given vector and this instance, where\n   * alpha is the percent distance along the line - alpha = 0 will be this\n   * vector, and alpha = 1 will be the given one.\n   *\n   * @param {Vector3} v - The vector to interpolate towards.\n   * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n   * @return {Vector3} A reference to this vector.\n   */\n  lerp(v, alpha) {\n    this.x += (v.x - this.x) * alpha;\n    this.y += (v.y - this.y) * alpha;\n    this.z += (v.z - this.z) * alpha;\n    return this;\n  }\n\n  /**\n   * Linearly interpolates between the given vectors, where alpha is the percent\n   * distance along the line - alpha = 0 will be first vector, and alpha = 1 will\n   * be the second one. The result is stored in this instance.\n   *\n   * @param {Vector3} v1 - The first vector.\n   * @param {Vector3} v2 - The second vector.\n   * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n   * @return {Vector3} A reference to this vector.\n   */\n  lerpVectors(v1, v2, alpha) {\n    this.x = v1.x + (v2.x - v1.x) * alpha;\n    this.y = v1.y + (v2.y - v1.y) * alpha;\n    this.z = v1.z + (v2.z - v1.z) * alpha;\n    return this;\n  }\n\n  /**\n   * Calculates the cross product of the given vector with this instance.\n   *\n   * @param {Vector3} v - The vector to compute the cross product with.\n   * @return {Vector3} The result of the cross product.\n   */\n  cross(v) {\n    return this.crossVectors(this, v);\n  }\n\n  /**\n   * Calculates the cross product of the given vectors and stores the result\n   * in this instance.\n   *\n   * @param {Vector3} a - The first vector.\n   * @param {Vector3} b - The second vector.\n   * @return {Vector3} A reference to this vector.\n   */\n  crossVectors(a, b) {\n    const ax = a.x,\n      ay = a.y,\n      az = a.z;\n    const bx = b.x,\n      by = b.y,\n      bz = b.z;\n    this.x = ay * bz - az * by;\n    this.y = az * bx - ax * bz;\n    this.z = ax * by - ay * bx;\n    return this;\n  }\n\n  /**\n   * Projects this vector onto the given one.\n   *\n   * @param {Vector3} v - The vector to project to.\n   * @return {Vector3} A reference to this vector.\n   */\n  projectOnVector(v) {\n    const denominator = v.lengthSq();\n    if (denominator === 0) return this.set(0, 0, 0);\n    const scalar = v.dot(this) / denominator;\n    return this.copy(v).multiplyScalar(scalar);\n  }\n\n  /**\n   * Projects this vector onto a plane by subtracting this\n   * vector projected onto the plane's normal from this vector.\n   *\n   * @param {Vector3} planeNormal - The plane normal.\n   * @return {Vector3} A reference to this vector.\n   */\n  projectOnPlane(planeNormal) {\n    _vector$c.copy(this).projectOnVector(planeNormal);\n    return this.sub(_vector$c);\n  }\n\n  /**\n   * Reflects this vector off a plane orthogonal to the given normal vector.\n   *\n   * @param {Vector3} normal - The (normalized) normal vector.\n   * @return {Vector3} A reference to this vector.\n   */\n  reflect(normal) {\n    return this.sub(_vector$c.copy(normal).multiplyScalar(2 * this.dot(normal)));\n  }\n  /**\n   * Returns the angle between the given vector and this instance in radians.\n   *\n   * @param {Vector3} v - The vector to compute the angle with.\n   * @return {number} The angle in radians.\n   */\n  angleTo(v) {\n    const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());\n    if (denominator === 0) return Math.PI / 2;\n    const theta = this.dot(v) / denominator;\n\n    // clamp, to handle numerical problems\n\n    return Math.acos(clamp(theta, -1, 1));\n  }\n\n  /**\n   * Computes the distance from the given vector to this instance.\n   *\n   * @param {Vector3} v - The vector to compute the distance to.\n   * @return {number} The distance.\n   */\n  distanceTo(v) {\n    return Math.sqrt(this.distanceToSquared(v));\n  }\n\n  /**\n   * Computes the squared distance from the given vector to this instance.\n   * If you are just comparing the distance with another distance, you should compare\n   * the distance squared instead as it is slightly more efficient to calculate.\n   *\n   * @param {Vector3} v - The vector to compute the squared distance to.\n   * @return {number} The squared distance.\n   */\n  distanceToSquared(v) {\n    const dx = this.x - v.x,\n      dy = this.y - v.y,\n      dz = this.z - v.z;\n    return dx * dx + dy * dy + dz * dz;\n  }\n\n  /**\n   * Computes the Manhattan distance from the given vector to this instance.\n   *\n   * @param {Vector3} v - The vector to compute the Manhattan distance to.\n   * @return {number} The Manhattan distance.\n   */\n  manhattanDistanceTo(v) {\n    return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);\n  }\n\n  /**\n   * Sets the vector components from the given spherical coordinates.\n   *\n   * @param {Spherical} s - The spherical coordinates.\n   * @return {Vector3} A reference to this vector.\n   */\n  setFromSpherical(s) {\n    return this.setFromSphericalCoords(s.radius, s.phi, s.theta);\n  }\n\n  /**\n   * Sets the vector components from the given spherical coordinates.\n   *\n   * @param {number} radius - The radius.\n   * @param {number} phi - The phi angle in radians.\n   * @param {number} theta - The theta angle in radians.\n   * @return {Vector3} A reference to this vector.\n   */\n  setFromSphericalCoords(radius, phi, theta) {\n    const sinPhiRadius = Math.sin(phi) * radius;\n    this.x = sinPhiRadius * Math.sin(theta);\n    this.y = Math.cos(phi) * radius;\n    this.z = sinPhiRadius * Math.cos(theta);\n    return this;\n  }\n\n  /**\n   * Sets the vector components from the given cylindrical coordinates.\n   *\n   * @param {Cylindrical} c - The cylindrical coordinates.\n   * @return {Vector3} A reference to this vector.\n   */\n  setFromCylindrical(c) {\n    return this.setFromCylindricalCoords(c.radius, c.theta, c.y);\n  }\n\n  /**\n   * Sets the vector components from the given cylindrical coordinates.\n   *\n   * @param {number} radius - The radius.\n   * @param {number} theta - The theta angle in radians.\n   * @param {number} y - The y value.\n   * @return {Vector3} A reference to this vector.\n   */\n  setFromCylindricalCoords(radius, theta, y) {\n    this.x = radius * Math.sin(theta);\n    this.y = y;\n    this.z = radius * Math.cos(theta);\n    return this;\n  }\n\n  /**\n   * Sets the vector components to the position elements of the\n   * given transformation matrix.\n   *\n   * @param {Matrix4} m - The 4x4 matrix.\n   * @return {Vector3} A reference to this vector.\n   */\n  setFromMatrixPosition(m) {\n    const e = m.elements;\n    this.x = e[12];\n    this.y = e[13];\n    this.z = e[14];\n    return this;\n  }\n\n  /**\n   * Sets the vector components to the scale elements of the\n   * given transformation matrix.\n   *\n   * @param {Matrix4} m - The 4x4 matrix.\n   * @return {Vector3} A reference to this vector.\n   */\n  setFromMatrixScale(m) {\n    const sx = this.setFromMatrixColumn(m, 0).length();\n    const sy = this.setFromMatrixColumn(m, 1).length();\n    const sz = this.setFromMatrixColumn(m, 2).length();\n    this.x = sx;\n    this.y = sy;\n    this.z = sz;\n    return this;\n  }\n\n  /**\n   * Sets the vector components from the specified matrix column.\n   *\n   * @param {Matrix4} m - The 4x4 matrix.\n   * @param {number} index - The column index.\n   * @return {Vector3} A reference to this vector.\n   */\n  setFromMatrixColumn(m, index) {\n    return this.fromArray(m.elements, index * 4);\n  }\n\n  /**\n   * Sets the vector components from the specified matrix column.\n   *\n   * @param {Matrix3} m - The 3x3 matrix.\n   * @param {number} index - The column index.\n   * @return {Vector3} A reference to this vector.\n   */\n  setFromMatrix3Column(m, index) {\n    return this.fromArray(m.elements, index * 3);\n  }\n\n  /**\n   * Sets the vector components from the given Euler angles.\n   *\n   * @param {Euler} e - The Euler angles to set.\n   * @return {Vector3} A reference to this vector.\n   */\n  setFromEuler(e) {\n    this.x = e._x;\n    this.y = e._y;\n    this.z = e._z;\n    return this;\n  }\n\n  /**\n   * Sets the vector components from the RGB components of the\n   * given color.\n   *\n   * @param {Color} c - The color to set.\n   * @return {Vector3} A reference to this vector.\n   */\n  setFromColor(c) {\n    this.x = c.r;\n    this.y = c.g;\n    this.z = c.b;\n    return this;\n  }\n\n  /**\n   * Returns `true` if this vector is equal with the given one.\n   *\n   * @param {Vector3} v - The vector to test for equality.\n   * @return {boolean} Whether this vector is equal with the given one.\n   */\n  equals(v) {\n    return v.x === this.x && v.y === this.y && v.z === this.z;\n  }\n\n  /**\n   * Sets this vector's x value to be `array[ offset ]`, y value to be `array[ offset + 1 ]`\n   * and z value to be `array[ offset + 2 ]`.\n   *\n   * @param {Array<number>} array - An array holding the vector component values.\n   * @param {number} [offset=0] - The offset into the array.\n   * @return {Vector3} A reference to this vector.\n   */\n  fromArray(array) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.x = array[offset];\n    this.y = array[offset + 1];\n    this.z = array[offset + 2];\n    return this;\n  }\n\n  /**\n   * Writes the components of this vector to the given array. If no array is provided,\n   * the method returns a new instance.\n   *\n   * @param {Array<number>} [array=[]] - The target array holding the vector components.\n   * @param {number} [offset=0] - Index of the first element in the array.\n   * @return {Array<number>} The vector components.\n   */\n  toArray() {\n    let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    array[offset] = this.x;\n    array[offset + 1] = this.y;\n    array[offset + 2] = this.z;\n    return array;\n  }\n\n  /**\n   * Sets the components of this vector from the given buffer attribute.\n   *\n   * @param {BufferAttribute} attribute - The buffer attribute holding vector data.\n   * @param {number} index - The index into the attribute.\n   * @return {Vector3} A reference to this vector.\n   */\n  fromBufferAttribute(attribute, index) {\n    this.x = attribute.getX(index);\n    this.y = attribute.getY(index);\n    this.z = attribute.getZ(index);\n    return this;\n  }\n\n  /**\n   * Sets each component of this vector to a pseudo-random value between `0` and\n   * `1`, excluding `1`.\n   *\n   * @return {Vector3} A reference to this vector.\n   */\n  random() {\n    this.x = Math.random();\n    this.y = Math.random();\n    this.z = Math.random();\n    return this;\n  }\n\n  /**\n   * Sets this vector to a uniformly random point on a unit sphere.\n   *\n   * @return {Vector3} A reference to this vector.\n   */\n  randomDirection() {\n    // https://mathworld.wolfram.com/SpherePointPicking.html\n\n    const theta = Math.random() * Math.PI * 2;\n    const u = Math.random() * 2 - 1;\n    const c = Math.sqrt(1 - u * u);\n    this.x = c * Math.cos(theta);\n    this.y = u;\n    this.z = c * Math.sin(theta);\n    return this;\n  }\n  *[Symbol.iterator]() {\n    yield this.x;\n    yield this.y;\n    yield this.z;\n  }\n}\nconst _vector$c = /*@__PURE__*/new Vector3();\nconst _quaternion$4 = /*@__PURE__*/new Quaternion();\n\n/**\n * Represents an axis-aligned bounding box (AABB) in 3D space.\n */\nclass Box3 {\n  /**\n   * Constructs a new bounding box.\n   *\n   * @param {Vector3} [min=(Infinity,Infinity,Infinity)] - A vector representing the lower boundary of the box.\n   * @param {Vector3} [max=(-Infinity,-Infinity,-Infinity)] - A vector representing the upper boundary of the box.\n   */\n  constructor() {\n    let min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3(+Infinity, +Infinity, +Infinity);\n    let max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3(-Infinity, -Infinity, -Infinity);\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isBox3 = true;\n\n    /**\n     * The lower boundary of the box.\n     *\n     * @type {Vector3}\n     */\n    this.min = min;\n\n    /**\n     * The upper boundary of the box.\n     *\n     * @type {Vector3}\n     */\n    this.max = max;\n  }\n\n  /**\n   * Sets the lower and upper boundaries of this box.\n   * Please note that this method only copies the values from the given objects.\n   *\n   * @param {Vector3} min - The lower boundary of the box.\n   * @param {Vector3} max - The upper boundary of the box.\n   * @return {Box3} A reference to this bounding box.\n   */\n  set(min, max) {\n    this.min.copy(min);\n    this.max.copy(max);\n    return this;\n  }\n\n  /**\n   * Sets the upper and lower bounds of this box so it encloses the position data\n   * in the given array.\n   *\n   * @param {Array<number>} array - An array holding 3D position data.\n   * @return {Box3} A reference to this bounding box.\n   */\n  setFromArray(array) {\n    this.makeEmpty();\n    for (let i = 0, il = array.length; i < il; i += 3) {\n      this.expandByPoint(_vector$b.fromArray(array, i));\n    }\n    return this;\n  }\n\n  /**\n   * Sets the upper and lower bounds of this box so it encloses the position data\n   * in the given buffer attribute.\n   *\n   * @param {BufferAttribute} attribute - A buffer attribute holding 3D position data.\n   * @return {Box3} A reference to this bounding box.\n   */\n  setFromBufferAttribute(attribute) {\n    this.makeEmpty();\n    for (let i = 0, il = attribute.count; i < il; i++) {\n      this.expandByPoint(_vector$b.fromBufferAttribute(attribute, i));\n    }\n    return this;\n  }\n\n  /**\n   * Sets the upper and lower bounds of this box so it encloses the position data\n   * in the given array.\n   *\n   * @param {Array<Vector3>} points - An array holding 3D position data as instances of {@link Vector3}.\n   * @return {Box3} A reference to this bounding box.\n   */\n  setFromPoints(points) {\n    this.makeEmpty();\n    for (let i = 0, il = points.length; i < il; i++) {\n      this.expandByPoint(points[i]);\n    }\n    return this;\n  }\n\n  /**\n   * Centers this box on the given center vector and sets this box's width, height and\n   * depth to the given size values.\n   *\n   * @param {Vector3} center - The center of the box.\n   * @param {Vector3} size - The x, y and z dimensions of the box.\n   * @return {Box3} A reference to this bounding box.\n   */\n  setFromCenterAndSize(center, size) {\n    const halfSize = _vector$b.copy(size).multiplyScalar(0.5);\n    this.min.copy(center).sub(halfSize);\n    this.max.copy(center).add(halfSize);\n    return this;\n  }\n\n  /**\n   * Computes the world-axis-aligned bounding box for the given 3D object\n   * (including its children), accounting for the object's, and children's,\n   * world transforms. The function may result in a larger box than strictly necessary.\n   *\n   * @param {Object3D} object - The 3D object to compute the bounding box for.\n   * @param {boolean} [precise=false] - If set to `true`, the method computes the smallest\n   * world-axis-aligned bounding box at the expense of more computation.\n   * @return {Box3} A reference to this bounding box.\n   */\n  setFromObject(object) {\n    let precise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    this.makeEmpty();\n    return this.expandByObject(object, precise);\n  }\n\n  /**\n   * Returns a new box with copied values from this instance.\n   *\n   * @return {Box3} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  /**\n   * Copies the values of the given box to this instance.\n   *\n   * @param {Box3} box - The box to copy.\n   * @return {Box3} A reference to this bounding box.\n   */\n  copy(box) {\n    this.min.copy(box.min);\n    this.max.copy(box.max);\n    return this;\n  }\n\n  /**\n   * Makes this box empty which means in encloses a zero space in 3D.\n   *\n   * @return {Box3} A reference to this bounding box.\n   */\n  makeEmpty() {\n    this.min.x = this.min.y = this.min.z = +Infinity;\n    this.max.x = this.max.y = this.max.z = -Infinity;\n    return this;\n  }\n\n  /**\n   * Returns true if this box includes zero points within its bounds.\n   * Note that a box with equal lower and upper bounds still includes one\n   * point, the one both bounds share.\n   *\n   * @return {boolean} Whether this box is empty or not.\n   */\n  isEmpty() {\n    // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;\n  }\n\n  /**\n   * Returns the center point of this box.\n   *\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {Vector3} The center point.\n   */\n  getCenter(target) {\n    return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n  }\n\n  /**\n   * Returns the dimensions of this box.\n   *\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {Vector3} The size.\n   */\n  getSize(target) {\n    return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);\n  }\n\n  /**\n   * Expands the boundaries of this box to include the given point.\n   *\n   * @param {Vector3} point - The point that should be included by the bounding box.\n   * @return {Box3} A reference to this bounding box.\n   */\n  expandByPoint(point) {\n    this.min.min(point);\n    this.max.max(point);\n    return this;\n  }\n\n  /**\n   * Expands this box equilaterally by the given vector. The width of this\n   * box will be expanded by the x component of the vector in both\n   * directions. The height of this box will be expanded by the y component of\n   * the vector in both directions. The depth of this box will be\n   * expanded by the z component of the vector in both directions.\n   *\n   * @param {Vector3} vector - The vector that should expand the bounding box.\n   * @return {Box3} A reference to this bounding box.\n   */\n  expandByVector(vector) {\n    this.min.sub(vector);\n    this.max.add(vector);\n    return this;\n  }\n\n  /**\n   * Expands each dimension of the box by the given scalar. If negative, the\n   * dimensions of the box will be contracted.\n   *\n   * @param {number} scalar - The scalar value that should expand the bounding box.\n   * @return {Box3} A reference to this bounding box.\n   */\n  expandByScalar(scalar) {\n    this.min.addScalar(-scalar);\n    this.max.addScalar(scalar);\n    return this;\n  }\n\n  /**\n   * Expands the boundaries of this box to include the given 3D object and\n   * its children, accounting for the object's, and children's, world\n   * transforms. The function may result in a larger box than strictly\n   * necessary (unless the precise parameter is set to true).\n   *\n   * @param {Object3D} object - The 3D object that should expand the bounding box.\n   * @param {boolean} precise - If set to `true`, the method expands the bounding box\n   * as little as necessary at the expense of more computation.\n   * @return {Box3} A reference to this bounding box.\n   */\n  expandByObject(object) {\n    let precise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    // Computes the world-axis-aligned bounding box of an object (including its children),\n    // accounting for both the object's, and children's, world transforms\n\n    object.updateWorldMatrix(false, false);\n    const geometry = object.geometry;\n    if (geometry !== undefined) {\n      const positionAttribute = geometry.getAttribute('position');\n\n      // precise AABB computation based on vertex data requires at least a position attribute.\n      // instancing isn't supported so far and uses the normal (conservative) code path.\n\n      if (precise === true && positionAttribute !== undefined && object.isInstancedMesh !== true) {\n        for (let i = 0, l = positionAttribute.count; i < l; i++) {\n          if (object.isMesh === true) {\n            object.getVertexPosition(i, _vector$b);\n          } else {\n            _vector$b.fromBufferAttribute(positionAttribute, i);\n          }\n          _vector$b.applyMatrix4(object.matrixWorld);\n          this.expandByPoint(_vector$b);\n        }\n      } else {\n        if (object.boundingBox !== undefined) {\n          // object-level bounding box\n\n          if (object.boundingBox === null) {\n            object.computeBoundingBox();\n          }\n          _box$4.copy(object.boundingBox);\n        } else {\n          // geometry-level bounding box\n\n          if (geometry.boundingBox === null) {\n            geometry.computeBoundingBox();\n          }\n          _box$4.copy(geometry.boundingBox);\n        }\n        _box$4.applyMatrix4(object.matrixWorld);\n        this.union(_box$4);\n      }\n    }\n    const children = object.children;\n    for (let i = 0, l = children.length; i < l; i++) {\n      this.expandByObject(children[i], precise);\n    }\n    return this;\n  }\n\n  /**\n   * Returns `true` if the given point lies within or on the boundaries of this box.\n   *\n   * @param {Vector3} point - The point to test.\n   * @return {boolean} Whether the bounding box contains the given point or not.\n   */\n  containsPoint(point) {\n    return point.x >= this.min.x && point.x <= this.max.x && point.y >= this.min.y && point.y <= this.max.y && point.z >= this.min.z && point.z <= this.max.z;\n  }\n\n  /**\n   * Returns `true` if this bounding box includes the entirety of the given bounding box.\n   * If this box and the given one are identical, this function also returns `true`.\n   *\n   * @param {Box3} box - The bounding box to test.\n   * @return {boolean} Whether the bounding box contains the given bounding box or not.\n   */\n  containsBox(box) {\n    return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;\n  }\n\n  /**\n   * Returns a point as a proportion of this box's width, height and depth.\n   *\n   * @param {Vector3} point - A point in 3D space.\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {Vector3} A point as a proportion of this box's width, height and depth.\n   */\n  getParameter(point, target) {\n    // This can potentially have a divide by zero if the box\n    // has a size dimension of 0.\n\n    return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));\n  }\n\n  /**\n   * Returns `true` if the given bounding box intersects with this bounding box.\n   *\n   * @param {Box3} box - The bounding box to test.\n   * @return {boolean} Whether the given bounding box intersects with this bounding box.\n   */\n  intersectsBox(box) {\n    // using 6 splitting planes to rule out intersections.\n    return box.max.x >= this.min.x && box.min.x <= this.max.x && box.max.y >= this.min.y && box.min.y <= this.max.y && box.max.z >= this.min.z && box.min.z <= this.max.z;\n  }\n\n  /**\n   * Returns `true` if the given bounding sphere intersects with this bounding box.\n   *\n   * @param {Sphere} sphere - The bounding sphere to test.\n   * @return {boolean} Whether the given bounding sphere intersects with this bounding box.\n   */\n  intersectsSphere(sphere) {\n    // Find the point on the AABB closest to the sphere center.\n    this.clampPoint(sphere.center, _vector$b);\n\n    // If that point is inside the sphere, the AABB and sphere intersect.\n    return _vector$b.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\n  }\n\n  /**\n   * Returns `true` if the given plane intersects with this bounding box.\n   *\n   * @param {Plane} plane - The plane to test.\n   * @return {boolean} Whether the given plane intersects with this bounding box.\n   */\n  intersectsPlane(plane) {\n    // We compute the minimum and maximum dot product values. If those values\n    // are on the same side (back or front) of the plane, then there is no intersection.\n\n    let min, max;\n    if (plane.normal.x > 0) {\n      min = plane.normal.x * this.min.x;\n      max = plane.normal.x * this.max.x;\n    } else {\n      min = plane.normal.x * this.max.x;\n      max = plane.normal.x * this.min.x;\n    }\n    if (plane.normal.y > 0) {\n      min += plane.normal.y * this.min.y;\n      max += plane.normal.y * this.max.y;\n    } else {\n      min += plane.normal.y * this.max.y;\n      max += plane.normal.y * this.min.y;\n    }\n    if (plane.normal.z > 0) {\n      min += plane.normal.z * this.min.z;\n      max += plane.normal.z * this.max.z;\n    } else {\n      min += plane.normal.z * this.max.z;\n      max += plane.normal.z * this.min.z;\n    }\n    return min <= -plane.constant && max >= -plane.constant;\n  }\n\n  /**\n   * Returns `true` if the given triangle intersects with this bounding box.\n   *\n   * @param {Triangle} triangle - The triangle to test.\n   * @return {boolean} Whether the given triangle intersects with this bounding box.\n   */\n  intersectsTriangle(triangle) {\n    if (this.isEmpty()) {\n      return false;\n    }\n\n    // compute box center and extents\n    this.getCenter(_center);\n    _extents.subVectors(this.max, _center);\n\n    // translate triangle to aabb origin\n    _v0$2.subVectors(triangle.a, _center);\n    _v1$7.subVectors(triangle.b, _center);\n    _v2$4.subVectors(triangle.c, _center);\n\n    // compute edge vectors for triangle\n    _f0.subVectors(_v1$7, _v0$2);\n    _f1.subVectors(_v2$4, _v1$7);\n    _f2.subVectors(_v0$2, _v2$4);\n\n    // test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n    // make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n    // axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n    let axes = [0, -_f0.z, _f0.y, 0, -_f1.z, _f1.y, 0, -_f2.z, _f2.y, _f0.z, 0, -_f0.x, _f1.z, 0, -_f1.x, _f2.z, 0, -_f2.x, -_f0.y, _f0.x, 0, -_f1.y, _f1.x, 0, -_f2.y, _f2.x, 0];\n    if (!satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents)) {\n      return false;\n    }\n\n    // test 3 face normals from the aabb\n    axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    if (!satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents)) {\n      return false;\n    }\n\n    // finally testing the face normal of the triangle\n    // use already existing triangle edge vectors here\n    _triangleNormal.crossVectors(_f0, _f1);\n    axes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];\n    return satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents);\n  }\n\n  /**\n   * Clamps the given point within the bounds of this box.\n   *\n   * @param {Vector3} point - The point to clamp.\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {Vector3} The clamped point.\n   */\n  clampPoint(point, target) {\n    return target.copy(point).clamp(this.min, this.max);\n  }\n\n  /**\n   * Returns the euclidean distance from any edge of this box to the specified point. If\n   * the given point lies inside of this box, the distance will be `0`.\n   *\n   * @param {Vector3} point - The point to compute the distance to.\n   * @return {number} The euclidean distance.\n   */\n  distanceToPoint(point) {\n    return this.clampPoint(point, _vector$b).distanceTo(point);\n  }\n\n  /**\n   * Returns a bounding sphere that encloses this bounding box.\n   *\n   * @param {Sphere} target - The target sphere that is used to store the method's result.\n   * @return {Sphere} The bounding sphere that encloses this bounding box.\n   */\n  getBoundingSphere(target) {\n    if (this.isEmpty()) {\n      target.makeEmpty();\n    } else {\n      this.getCenter(target.center);\n      target.radius = this.getSize(_vector$b).length() * 0.5;\n    }\n    return target;\n  }\n\n  /**\n   * Computes the intersection of this bounding box and the given one, setting the upper\n   * bound of this box to the lesser of the two boxes' upper bounds and the\n   * lower bound of this box to the greater of the two boxes' lower bounds. If\n   * there's no overlap, makes this box empty.\n   *\n   * @param {Box3} box - The bounding box to intersect with.\n   * @return {Box3} A reference to this bounding box.\n   */\n  intersect(box) {\n    this.min.max(box.min);\n    this.max.min(box.max);\n\n    // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n    if (this.isEmpty()) this.makeEmpty();\n    return this;\n  }\n\n  /**\n   * Computes the union of this box and another and the given one, setting the upper\n   * bound of this box to the greater of the two boxes' upper bounds and the\n   * lower bound of this box to the lesser of the two boxes' lower bounds.\n   *\n   * @param {Box3} box - The bounding box that will be unioned with this instance.\n   * @return {Box3} A reference to this bounding box.\n   */\n  union(box) {\n    this.min.min(box.min);\n    this.max.max(box.max);\n    return this;\n  }\n\n  /**\n   * Transforms this bounding box by the given 4x4 transformation matrix.\n   *\n   * @param {Matrix4} matrix - The transformation matrix.\n   * @return {Box3} A reference to this bounding box.\n   */\n  applyMatrix4(matrix) {\n    // transform of empty box is an empty box.\n    if (this.isEmpty()) return this;\n\n    // NOTE: I am using a binary pattern to specify all 2^3 combinations below\n    _points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000\n    _points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001\n    _points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010\n    _points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011\n    _points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100\n    _points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101\n    _points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110\n    _points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111\n\n    this.setFromPoints(_points);\n    return this;\n  }\n\n  /**\n   * Adds the given offset to both the upper and lower bounds of this bounding box,\n   * effectively moving it in 3D space.\n   *\n   * @param {Vector3} offset - The offset that should be used to translate the bounding box.\n   * @return {Box3} A reference to this bounding box.\n   */\n  translate(offset) {\n    this.min.add(offset);\n    this.max.add(offset);\n    return this;\n  }\n\n  /**\n   * Returns `true` if this bounding box is equal with the given one.\n   *\n   * @param {Box3} box - The box to test for equality.\n   * @return {boolean} Whether this bounding box is equal with the given one.\n   */\n  equals(box) {\n    return box.min.equals(this.min) && box.max.equals(this.max);\n  }\n}\nconst _points = [/*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3()];\nconst _vector$b = /*@__PURE__*/new Vector3();\nconst _box$4 = /*@__PURE__*/new Box3();\n\n// triangle centered vertices\n\nconst _v0$2 = /*@__PURE__*/new Vector3();\nconst _v1$7 = /*@__PURE__*/new Vector3();\nconst _v2$4 = /*@__PURE__*/new Vector3();\n\n// triangle edge vectors\n\nconst _f0 = /*@__PURE__*/new Vector3();\nconst _f1 = /*@__PURE__*/new Vector3();\nconst _f2 = /*@__PURE__*/new Vector3();\nconst _center = /*@__PURE__*/new Vector3();\nconst _extents = /*@__PURE__*/new Vector3();\nconst _triangleNormal = /*@__PURE__*/new Vector3();\nconst _testAxis = /*@__PURE__*/new Vector3();\nfunction satForAxes(axes, v0, v1, v2, extents) {\n  for (let i = 0, j = axes.length - 3; i <= j; i += 3) {\n    _testAxis.fromArray(axes, i);\n    // project the aabb onto the separating axis\n    const r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z);\n    // project all 3 vertices of the triangle onto the separating axis\n    const p0 = v0.dot(_testAxis);\n    const p1 = v1.dot(_testAxis);\n    const p2 = v2.dot(_testAxis);\n    // actual test, basically see if either of the most extreme of the triangle points intersects r\n    if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {\n      // points of the projected triangle are outside the projected half-length of the aabb\n      // the axis is separating and we can exit\n      return false;\n    }\n  }\n  return true;\n}\nconst _box$3 = /*@__PURE__*/new Box3();\nconst _v1$6 = /*@__PURE__*/new Vector3();\nconst _v2$3 = /*@__PURE__*/new Vector3();\n\n/**\n * An analytical 3D sphere defined by a center and radius. This class is mainly\n * used as a Bounding Sphere for 3D objects.\n */\nclass Sphere {\n  /**\n   * Constructs a new sphere.\n   *\n   * @param {Vector3} [center=(0,0,0)] - The center of the sphere\n   * @param {number} [radius=-1] - The radius of the sphere.\n   */\n  constructor() {\n    let center = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3();\n    let radius = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isSphere = true;\n\n    /**\n     * The center of the sphere\n     *\n     * @type {Vector3}\n     */\n    this.center = center;\n\n    /**\n     * The radius of the sphere.\n     *\n     * @type {number}\n     */\n    this.radius = radius;\n  }\n\n  /**\n   * Sets the sphere's components by copying the given values.\n   *\n   * @param {Vector3} center - The center.\n   * @param {number} radius - The radius.\n   * @return {Sphere} A reference to this sphere.\n   */\n  set(center, radius) {\n    this.center.copy(center);\n    this.radius = radius;\n    return this;\n  }\n\n  /**\n   * Computes the minimum bounding sphere for list of points.\n   * If the optional center point is given, it is used as the sphere's\n   * center. Otherwise, the center of the axis-aligned bounding box\n   * encompassing the points is calculated.\n   *\n   * @param {Array<Vector3>} points - A list of points in 3D space.\n   * @param {Vector3} [optionalCenter] - The center of the sphere.\n   * @return {Sphere} A reference to this sphere.\n   */\n  setFromPoints(points, optionalCenter) {\n    const center = this.center;\n    if (optionalCenter !== undefined) {\n      center.copy(optionalCenter);\n    } else {\n      _box$3.setFromPoints(points).getCenter(center);\n    }\n    let maxRadiusSq = 0;\n    for (let i = 0, il = points.length; i < il; i++) {\n      maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));\n    }\n    this.radius = Math.sqrt(maxRadiusSq);\n    return this;\n  }\n\n  /**\n   * Copies the values of the given sphere to this instance.\n   *\n   * @param {Sphere} sphere - The sphere to copy.\n   * @return {Sphere} A reference to this sphere.\n   */\n  copy(sphere) {\n    this.center.copy(sphere.center);\n    this.radius = sphere.radius;\n    return this;\n  }\n\n  /**\n   * Returns `true` if the sphere is empty (the radius set to a negative number).\n   *\n   * Spheres with a radius of `0` contain only their center point and are not\n   * considered to be empty.\n   *\n   * @return {boolean} Whether this sphere is empty or not.\n   */\n  isEmpty() {\n    return this.radius < 0;\n  }\n\n  /**\n   * Makes this sphere empty which means in encloses a zero space in 3D.\n   *\n   * @return {Sphere} A reference to this sphere.\n   */\n  makeEmpty() {\n    this.center.set(0, 0, 0);\n    this.radius = -1;\n    return this;\n  }\n\n  /**\n   * Returns `true` if this sphere contains the given point inclusive of\n   * the surface of the sphere.\n   *\n   * @param {Vector3} point - The point to check.\n   * @return {boolean} Whether this sphere contains the given point or not.\n   */\n  containsPoint(point) {\n    return point.distanceToSquared(this.center) <= this.radius * this.radius;\n  }\n\n  /**\n   * Returns the closest distance from the boundary of the sphere to the\n   * given point. If the sphere contains the point, the distance will\n   * be negative.\n   *\n   * @param {Vector3} point - The point to compute the distance to.\n   * @return {number} The distance to the point.\n   */\n  distanceToPoint(point) {\n    return point.distanceTo(this.center) - this.radius;\n  }\n\n  /**\n   * Returns `true` if this sphere intersects with the given one.\n   *\n   * @param {Sphere} sphere - The sphere to test.\n   * @return {boolean} Whether this sphere intersects with the given one or not.\n   */\n  intersectsSphere(sphere) {\n    const radiusSum = this.radius + sphere.radius;\n    return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;\n  }\n\n  /**\n   * Returns `true` if this sphere intersects with the given box.\n   *\n   * @param {Box3} box - The box to test.\n   * @return {boolean} Whether this sphere intersects with the given box or not.\n   */\n  intersectsBox(box) {\n    return box.intersectsSphere(this);\n  }\n\n  /**\n   * Returns `true` if this sphere intersects with the given plane.\n   *\n   * @param {Plane} plane - The plane to test.\n   * @return {boolean} Whether this sphere intersects with the given plane or not.\n   */\n  intersectsPlane(plane) {\n    return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;\n  }\n\n  /**\n   * Clamps a point within the sphere. If the point is outside the sphere, it\n   * will clamp it to the closest point on the edge of the sphere. Points\n   * already inside the sphere will not be affected.\n   *\n   * @param {Vector3} point - The plane to clamp.\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {Vector3} The clamped point.\n   */\n  clampPoint(point, target) {\n    const deltaLengthSq = this.center.distanceToSquared(point);\n    target.copy(point);\n    if (deltaLengthSq > this.radius * this.radius) {\n      target.sub(this.center).normalize();\n      target.multiplyScalar(this.radius).add(this.center);\n    }\n    return target;\n  }\n\n  /**\n   * Returns a bounding box that encloses this sphere.\n   *\n   * @param {Box3} target - The target box that is used to store the method's result.\n   * @return {Box3} The bounding box that encloses this sphere.\n   */\n  getBoundingBox(target) {\n    if (this.isEmpty()) {\n      // Empty sphere produces empty bounding box\n      target.makeEmpty();\n      return target;\n    }\n    target.set(this.center, this.center);\n    target.expandByScalar(this.radius);\n    return target;\n  }\n\n  /**\n   * Transforms this sphere with the given 4x4 transformation matrix.\n   *\n   * @param {Matrix4} matrix - The transformation matrix.\n   * @return {Sphere} A reference to this sphere.\n   */\n  applyMatrix4(matrix) {\n    this.center.applyMatrix4(matrix);\n    this.radius = this.radius * matrix.getMaxScaleOnAxis();\n    return this;\n  }\n\n  /**\n   * Translates the sphere's center by the given offset.\n   *\n   * @param {Vector3} offset - The offset.\n   * @return {Sphere} A reference to this sphere.\n   */\n  translate(offset) {\n    this.center.add(offset);\n    return this;\n  }\n\n  /**\n   * Expands the boundaries of this sphere to include the given point.\n   *\n   * @param {Vector3} point - The point to include.\n   * @return {Sphere} A reference to this sphere.\n   */\n  expandByPoint(point) {\n    if (this.isEmpty()) {\n      this.center.copy(point);\n      this.radius = 0;\n      return this;\n    }\n    _v1$6.subVectors(point, this.center);\n    const lengthSq = _v1$6.lengthSq();\n    if (lengthSq > this.radius * this.radius) {\n      // calculate the minimal sphere\n\n      const length = Math.sqrt(lengthSq);\n      const delta = (length - this.radius) * 0.5;\n      this.center.addScaledVector(_v1$6, delta / length);\n      this.radius += delta;\n    }\n    return this;\n  }\n\n  /**\n   * Expands this sphere to enclose both the original sphere and the given sphere.\n   *\n   * @param {Sphere} sphere - The sphere to include.\n   * @return {Sphere} A reference to this sphere.\n   */\n  union(sphere) {\n    if (sphere.isEmpty()) {\n      return this;\n    }\n    if (this.isEmpty()) {\n      this.copy(sphere);\n      return this;\n    }\n    if (this.center.equals(sphere.center) === true) {\n      this.radius = Math.max(this.radius, sphere.radius);\n    } else {\n      _v2$3.subVectors(sphere.center, this.center).setLength(sphere.radius);\n      this.expandByPoint(_v1$6.copy(sphere.center).add(_v2$3));\n      this.expandByPoint(_v1$6.copy(sphere.center).sub(_v2$3));\n    }\n    return this;\n  }\n\n  /**\n   * Returns `true` if this sphere is equal with the given one.\n   *\n   * @param {Sphere} sphere - The sphere to test for equality.\n   * @return {boolean} Whether this bounding sphere is equal with the given one.\n   */\n  equals(sphere) {\n    return sphere.center.equals(this.center) && sphere.radius === this.radius;\n  }\n\n  /**\n   * Returns a new sphere with copied values from this instance.\n   *\n   * @return {Sphere} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor().copy(this);\n  }\n}\nconst _vector$a = /*@__PURE__*/new Vector3();\nconst _segCenter = /*@__PURE__*/new Vector3();\nconst _segDir = /*@__PURE__*/new Vector3();\nconst _diff = /*@__PURE__*/new Vector3();\nconst _edge1 = /*@__PURE__*/new Vector3();\nconst _edge2 = /*@__PURE__*/new Vector3();\nconst _normal$1 = /*@__PURE__*/new Vector3();\n\n/**\n * A ray that emits from an origin in a certain direction. The class is used by\n * {@link Raycaster} to assist with raycasting. Raycasting is used for\n * mouse picking (working out what objects in the 3D space the mouse is over)\n * amongst other things.\n */\nclass Ray {\n  /**\n   * Constructs a new ray.\n   *\n   * @param {Vector3} [origin=(0,0,0)] - The origin of the ray.\n   * @param {Vector3} [direction=(0,0,-1)] - The (normalized) direction of the ray.\n   */\n  constructor() {\n    let origin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3();\n    let direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3(0, 0, -1);\n    /**\n     * The origin of the ray.\n     *\n     * @type {Vector3}\n     */\n    this.origin = origin;\n\n    /**\n     * The (normalized) direction of the ray.\n     *\n     * @type {Vector3}\n     */\n    this.direction = direction;\n  }\n\n  /**\n   * Sets the ray's components by copying the given values.\n   *\n   * @param {Vector3} origin - The origin.\n   * @param {Vector3} direction - The direction.\n   * @return {Ray} A reference to this ray.\n   */\n  set(origin, direction) {\n    this.origin.copy(origin);\n    this.direction.copy(direction);\n    return this;\n  }\n\n  /**\n   * Copies the values of the given ray to this instance.\n   *\n   * @param {Ray} ray - The ray to copy.\n   * @return {Ray} A reference to this ray.\n   */\n  copy(ray) {\n    this.origin.copy(ray.origin);\n    this.direction.copy(ray.direction);\n    return this;\n  }\n\n  /**\n   * Returns a vector that is located at a given distance along this ray.\n   *\n   * @param {number} t - The distance along the ray to retrieve a position for.\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {Vector3} A position on the ray.\n   */\n  at(t, target) {\n    return target.copy(this.origin).addScaledVector(this.direction, t);\n  }\n\n  /**\n   * Adjusts the direction of the ray to point at the given vector in world space.\n   *\n   * @param {Vector3} v - The target position.\n   * @return {Ray} A reference to this ray.\n   */\n  lookAt(v) {\n    this.direction.copy(v).sub(this.origin).normalize();\n    return this;\n  }\n\n  /**\n   * Shift the origin of this ray along its direction by the given distance.\n   *\n   * @param {number} t - The distance along the ray to interpolate.\n   * @return {Ray} A reference to this ray.\n   */\n  recast(t) {\n    this.origin.copy(this.at(t, _vector$a));\n    return this;\n  }\n\n  /**\n   * Returns the point along this ray that is closest to the given point.\n   *\n   * @param {Vector3} point - A point in 3D space to get the closet location on the ray for.\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {Vector3} The closest point on this ray.\n   */\n  closestPointToPoint(point, target) {\n    target.subVectors(point, this.origin);\n    const directionDistance = target.dot(this.direction);\n    if (directionDistance < 0) {\n      return target.copy(this.origin);\n    }\n    return target.copy(this.origin).addScaledVector(this.direction, directionDistance);\n  }\n\n  /**\n   * Returns the distance of the closest approach between this ray and the given point.\n   *\n   * @param {Vector3} point - A point in 3D space to compute the distance to.\n   * @return {number} The distance.\n   */\n  distanceToPoint(point) {\n    return Math.sqrt(this.distanceSqToPoint(point));\n  }\n\n  /**\n   * Returns the squared distance of the closest approach between this ray and the given point.\n   *\n   * @param {Vector3} point - A point in 3D space to compute the distance to.\n   * @return {number} The squared distance.\n   */\n  distanceSqToPoint(point) {\n    const directionDistance = _vector$a.subVectors(point, this.origin).dot(this.direction);\n\n    // point behind the ray\n\n    if (directionDistance < 0) {\n      return this.origin.distanceToSquared(point);\n    }\n    _vector$a.copy(this.origin).addScaledVector(this.direction, directionDistance);\n    return _vector$a.distanceToSquared(point);\n  }\n\n  /**\n   * Returns the squared distance between this ray and the given line segment.\n   *\n   * @param {Vector3} v0 - The start point of the line segment.\n   * @param {Vector3} v1 - The end point of the line segment.\n   * @param {Vector3} [optionalPointOnRay] - When provided, it receives the point on this ray that is closest to the segment.\n   * @param {Vector3} [optionalPointOnSegment] - When provided, it receives the point on the line segment that is closest to this ray.\n   * @return {number} The squared distance.\n   */\n  distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {\n    // from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h\n    // It returns the min distance between the ray and the segment\n    // defined by v0 and v1\n    // It can also set two optional targets :\n    // - The closest point on the ray\n    // - The closest point on the segment\n\n    _segCenter.copy(v0).add(v1).multiplyScalar(0.5);\n    _segDir.copy(v1).sub(v0).normalize();\n    _diff.copy(this.origin).sub(_segCenter);\n    const segExtent = v0.distanceTo(v1) * 0.5;\n    const a01 = -this.direction.dot(_segDir);\n    const b0 = _diff.dot(this.direction);\n    const b1 = -_diff.dot(_segDir);\n    const c = _diff.lengthSq();\n    const det = Math.abs(1 - a01 * a01);\n    let s0, s1, sqrDist, extDet;\n    if (det > 0) {\n      // The ray and segment are not parallel.\n\n      s0 = a01 * b1 - b0;\n      s1 = a01 * b0 - b1;\n      extDet = segExtent * det;\n      if (s0 >= 0) {\n        if (s1 >= -extDet) {\n          if (s1 <= extDet) {\n            // region 0\n            // Minimum at interior points of ray and segment.\n\n            const invDet = 1 / det;\n            s0 *= invDet;\n            s1 *= invDet;\n            sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;\n          } else {\n            // region 1\n\n            s1 = segExtent;\n            s0 = Math.max(0, -(a01 * s1 + b0));\n            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n          }\n        } else {\n          // region 5\n\n          s1 = -segExtent;\n          s0 = Math.max(0, -(a01 * s1 + b0));\n          sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n        }\n      } else {\n        if (s1 <= -extDet) {\n          // region 4\n\n          s0 = Math.max(0, -(-a01 * segExtent + b0));\n          s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n          sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n        } else if (s1 <= extDet) {\n          // region 3\n\n          s0 = 0;\n          s1 = Math.min(Math.max(-segExtent, -b1), segExtent);\n          sqrDist = s1 * (s1 + 2 * b1) + c;\n        } else {\n          // region 2\n\n          s0 = Math.max(0, -(a01 * segExtent + b0));\n          s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n          sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n        }\n      }\n    } else {\n      // Ray and segment are parallel.\n\n      s1 = a01 > 0 ? -segExtent : segExtent;\n      s0 = Math.max(0, -(a01 * s1 + b0));\n      sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n    }\n    if (optionalPointOnRay) {\n      optionalPointOnRay.copy(this.origin).addScaledVector(this.direction, s0);\n    }\n    if (optionalPointOnSegment) {\n      optionalPointOnSegment.copy(_segCenter).addScaledVector(_segDir, s1);\n    }\n    return sqrDist;\n  }\n\n  /**\n   * Intersects this ray with the given sphere, returning the intersection\n   * point or `null` if there is no intersection.\n   *\n   * @param {Sphere} sphere - The sphere to intersect.\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {?Vector3} The intersection point.\n   */\n  intersectSphere(sphere, target) {\n    _vector$a.subVectors(sphere.center, this.origin);\n    const tca = _vector$a.dot(this.direction);\n    const d2 = _vector$a.dot(_vector$a) - tca * tca;\n    const radius2 = sphere.radius * sphere.radius;\n    if (d2 > radius2) return null;\n    const thc = Math.sqrt(radius2 - d2);\n\n    // t0 = first intersect point - entrance on front of sphere\n    const t0 = tca - thc;\n\n    // t1 = second intersect point - exit point on back of sphere\n    const t1 = tca + thc;\n\n    // test to see if t1 is behind the ray - if so, return null\n    if (t1 < 0) return null;\n\n    // test to see if t0 is behind the ray:\n    // if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n    // in order to always return an intersect point that is in front of the ray.\n    if (t0 < 0) return this.at(t1, target);\n\n    // else t0 is in front of the ray, so return the first collision point scaled by t0\n    return this.at(t0, target);\n  }\n\n  /**\n   * Returns `true` if this ray intersects with the given sphere.\n   *\n   * @param {Sphere} sphere - The sphere to intersect.\n   * @return {boolean} Whether this ray intersects with the given sphere or not.\n   */\n  intersectsSphere(sphere) {\n    return this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;\n  }\n\n  /**\n   * Computes the distance from the ray's origin to the given plane. Returns `null` if the ray\n   * does not intersect with the plane.\n   *\n   * @param {Plane} plane - The plane to compute the distance to.\n   * @return {?number} Whether this ray intersects with the given sphere or not.\n   */\n  distanceToPlane(plane) {\n    const denominator = plane.normal.dot(this.direction);\n    if (denominator === 0) {\n      // line is coplanar, return origin\n      if (plane.distanceToPoint(this.origin) === 0) {\n        return 0;\n      }\n\n      // Null is preferable to undefined since undefined means.... it is undefined\n\n      return null;\n    }\n    const t = -(this.origin.dot(plane.normal) + plane.constant) / denominator;\n\n    // Return if the ray never intersects the plane\n\n    return t >= 0 ? t : null;\n  }\n\n  /**\n   * Intersects this ray with the given plane, returning the intersection\n   * point or `null` if there is no intersection.\n   *\n   * @param {Plane} plane - The plane to intersect.\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {?Vector3} The intersection point.\n   */\n  intersectPlane(plane, target) {\n    const t = this.distanceToPlane(plane);\n    if (t === null) {\n      return null;\n    }\n    return this.at(t, target);\n  }\n\n  /**\n   * Returns `true` if this ray intersects with the given plane.\n   *\n   * @param {Plane} plane - The plane to intersect.\n   * @return {boolean} Whether this ray intersects with the given plane or not.\n   */\n  intersectsPlane(plane) {\n    // check if the ray lies on the plane first\n\n    const distToPoint = plane.distanceToPoint(this.origin);\n    if (distToPoint === 0) {\n      return true;\n    }\n    const denominator = plane.normal.dot(this.direction);\n    if (denominator * distToPoint < 0) {\n      return true;\n    }\n\n    // ray origin is behind the plane (and is pointing behind it)\n\n    return false;\n  }\n\n  /**\n   * Intersects this ray with the given bounding box, returning the intersection\n   * point or `null` if there is no intersection.\n   *\n   * @param {Box3} box - The box to intersect.\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {?Vector3} The intersection point.\n   */\n  intersectBox(box, target) {\n    let tmin, tmax, tymin, tymax, tzmin, tzmax;\n    const invdirx = 1 / this.direction.x,\n      invdiry = 1 / this.direction.y,\n      invdirz = 1 / this.direction.z;\n    const origin = this.origin;\n    if (invdirx >= 0) {\n      tmin = (box.min.x - origin.x) * invdirx;\n      tmax = (box.max.x - origin.x) * invdirx;\n    } else {\n      tmin = (box.max.x - origin.x) * invdirx;\n      tmax = (box.min.x - origin.x) * invdirx;\n    }\n    if (invdiry >= 0) {\n      tymin = (box.min.y - origin.y) * invdiry;\n      tymax = (box.max.y - origin.y) * invdiry;\n    } else {\n      tymin = (box.max.y - origin.y) * invdiry;\n      tymax = (box.min.y - origin.y) * invdiry;\n    }\n    if (tmin > tymax || tymin > tmax) return null;\n    if (tymin > tmin || isNaN(tmin)) tmin = tymin;\n    if (tymax < tmax || isNaN(tmax)) tmax = tymax;\n    if (invdirz >= 0) {\n      tzmin = (box.min.z - origin.z) * invdirz;\n      tzmax = (box.max.z - origin.z) * invdirz;\n    } else {\n      tzmin = (box.max.z - origin.z) * invdirz;\n      tzmax = (box.min.z - origin.z) * invdirz;\n    }\n    if (tmin > tzmax || tzmin > tmax) return null;\n    if (tzmin > tmin || tmin !== tmin) tmin = tzmin;\n    if (tzmax < tmax || tmax !== tmax) tmax = tzmax;\n\n    //return point closest to the ray (positive side)\n\n    if (tmax < 0) return null;\n    return this.at(tmin >= 0 ? tmin : tmax, target);\n  }\n\n  /**\n   * Returns `true` if this ray intersects with the given box.\n   *\n   * @param {Box3} box - The box to intersect.\n   * @return {boolean} Whether this ray intersects with the given box or not.\n   */\n  intersectsBox(box) {\n    return this.intersectBox(box, _vector$a) !== null;\n  }\n\n  /**\n   * Intersects this ray with the given triangle, returning the intersection\n   * point or `null` if there is no intersection.\n   *\n   * @param {Vector3} a - The first vertex of the triangle.\n   * @param {Vector3} b - The second vertex of the triangle.\n   * @param {Vector3} c - The third vertex of the triangle.\n   * @param {boolean} backfaceCulling - Whether to use backface culling or not.\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {?Vector3} The intersection point.\n   */\n  intersectTriangle(a, b, c, backfaceCulling, target) {\n    // Compute the offset origin, edges, and normal.\n\n    // from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n    _edge1.subVectors(b, a);\n    _edge2.subVectors(c, a);\n    _normal$1.crossVectors(_edge1, _edge2);\n\n    // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n    // E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n    //   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n    //   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n    //   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n    let DdN = this.direction.dot(_normal$1);\n    let sign;\n    if (DdN > 0) {\n      if (backfaceCulling) return null;\n      sign = 1;\n    } else if (DdN < 0) {\n      sign = -1;\n      DdN = -DdN;\n    } else {\n      return null;\n    }\n    _diff.subVectors(this.origin, a);\n    const DdQxE2 = sign * this.direction.dot(_edge2.crossVectors(_diff, _edge2));\n\n    // b1 < 0, no intersection\n    if (DdQxE2 < 0) {\n      return null;\n    }\n    const DdE1xQ = sign * this.direction.dot(_edge1.cross(_diff));\n\n    // b2 < 0, no intersection\n    if (DdE1xQ < 0) {\n      return null;\n    }\n\n    // b1+b2 > 1, no intersection\n    if (DdQxE2 + DdE1xQ > DdN) {\n      return null;\n    }\n\n    // Line intersects triangle, check if ray does.\n    const QdN = -sign * _diff.dot(_normal$1);\n\n    // t < 0, no intersection\n    if (QdN < 0) {\n      return null;\n    }\n\n    // Ray intersects triangle.\n    return this.at(QdN / DdN, target);\n  }\n\n  /**\n   * Transforms this ray with the given 4x4 transformation matrix.\n   *\n   * @param {Matrix4} matrix4 - The transformation matrix.\n   * @return {Ray} A reference to this ray.\n   */\n  applyMatrix4(matrix4) {\n    this.origin.applyMatrix4(matrix4);\n    this.direction.transformDirection(matrix4);\n    return this;\n  }\n\n  /**\n   * Returns `true` if this ray is equal with the given one.\n   *\n   * @param {Ray} ray - The ray to test for equality.\n   * @return {boolean} Whether this ray is equal with the given one.\n   */\n  equals(ray) {\n    return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);\n  }\n\n  /**\n   * Returns a new ray with copied values from this instance.\n   *\n   * @return {Ray} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor().copy(this);\n  }\n}\n\n/**\n * Represents a 4x4 matrix.\n *\n * The most common use of a 4x4 matrix in 3D computer graphics is as a transformation matrix.\n * For an introduction to transformation matrices as used in WebGL, check out [this tutorial]{@link https://www.opengl-tutorial.org/beginners-tutorials/tutorial-3-matrices}\n *\n * This allows a 3D vector representing a point in 3D space to undergo\n * transformations such as translation, rotation, shear, scale, reflection,\n * orthogonal or perspective projection and so on, by being multiplied by the\n * matrix. This is known as `applying` the matrix to the vector.\n *\n * A Note on Row-Major and Column-Major Ordering:\n *\n * The constructor and {@link Matrix3#set} method take arguments in\n * [row-major]{@link https://en.wikipedia.org/wiki/Row-_and_column-major_order#Column-major_order}\n * order, while internally they are stored in the {@link Matrix3#elements} array in column-major order.\n * This means that calling:\n * ```js\n * const m = new THREE.Matrix4();\n * m.set( 11, 12, 13, 14,\n *        21, 22, 23, 24,\n *        31, 32, 33, 34,\n *        41, 42, 43, 44 );\n * ```\n * will result in the elements array containing:\n * ```js\n * m.elements = [ 11, 21, 31, 41,\n *                12, 22, 32, 42,\n *                13, 23, 33, 43,\n *                14, 24, 34, 44 ];\n * ```\n * and internally all calculations are performed using column-major ordering.\n * However, as the actual ordering makes no difference mathematically and\n * most people are used to thinking about matrices in row-major order, the\n * three.js documentation shows matrices in row-major order. Just bear in\n * mind that if you are reading the source code, you'll have to take the\n * transpose of any matrices outlined here to make sense of the calculations.\n */\nclass Matrix4 {\n  /**\n   * Constructs a new 4x4 matrix. The arguments are supposed to be\n   * in row-major order. If no arguments are provided, the constructor\n   * initializes the matrix as an identity matrix.\n   *\n   * @param {number} [n11] - 1-1 matrix element.\n   * @param {number} [n12] - 1-2 matrix element.\n   * @param {number} [n13] - 1-3 matrix element.\n   * @param {number} [n14] - 1-4 matrix element.\n   * @param {number} [n21] - 2-1 matrix element.\n   * @param {number} [n22] - 2-2 matrix element.\n   * @param {number} [n23] - 2-3 matrix element.\n   * @param {number} [n24] - 2-4 matrix element.\n   * @param {number} [n31] - 3-1 matrix element.\n   * @param {number} [n32] - 3-2 matrix element.\n   * @param {number} [n33] - 3-3 matrix element.\n   * @param {number} [n34] - 3-4 matrix element.\n   * @param {number} [n41] - 4-1 matrix element.\n   * @param {number} [n42] - 4-2 matrix element.\n   * @param {number} [n43] - 4-3 matrix element.\n   * @param {number} [n44] - 4-4 matrix element.\n   */\n  constructor(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    Matrix4.prototype.isMatrix4 = true;\n\n    /**\n     * A column-major list of matrix values.\n     *\n     * @type {Array<number>}\n     */\n    this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n    if (n11 !== undefined) {\n      this.set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44);\n    }\n  }\n\n  /**\n   * Sets the elements of the matrix.The arguments are supposed to be\n   * in row-major order.\n   *\n   * @param {number} [n11] - 1-1 matrix element.\n   * @param {number} [n12] - 1-2 matrix element.\n   * @param {number} [n13] - 1-3 matrix element.\n   * @param {number} [n14] - 1-4 matrix element.\n   * @param {number} [n21] - 2-1 matrix element.\n   * @param {number} [n22] - 2-2 matrix element.\n   * @param {number} [n23] - 2-3 matrix element.\n   * @param {number} [n24] - 2-4 matrix element.\n   * @param {number} [n31] - 3-1 matrix element.\n   * @param {number} [n32] - 3-2 matrix element.\n   * @param {number} [n33] - 3-3 matrix element.\n   * @param {number} [n34] - 3-4 matrix element.\n   * @param {number} [n41] - 4-1 matrix element.\n   * @param {number} [n42] - 4-2 matrix element.\n   * @param {number} [n43] - 4-3 matrix element.\n   * @param {number} [n44] - 4-4 matrix element.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {\n    const te = this.elements;\n    te[0] = n11;\n    te[4] = n12;\n    te[8] = n13;\n    te[12] = n14;\n    te[1] = n21;\n    te[5] = n22;\n    te[9] = n23;\n    te[13] = n24;\n    te[2] = n31;\n    te[6] = n32;\n    te[10] = n33;\n    te[14] = n34;\n    te[3] = n41;\n    te[7] = n42;\n    te[11] = n43;\n    te[15] = n44;\n    return this;\n  }\n\n  /**\n   * Sets this matrix to the 4x4 identity matrix.\n   *\n   * @return {Matrix4} A reference to this matrix.\n   */\n  identity() {\n    this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n    return this;\n  }\n\n  /**\n   * Returns a matrix with copied values from this instance.\n   *\n   * @return {Matrix4} A clone of this instance.\n   */\n  clone() {\n    return new Matrix4().fromArray(this.elements);\n  }\n\n  /**\n   * Copies the values of the given matrix to this instance.\n   *\n   * @param {Matrix4} m - The matrix to copy.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  copy(m) {\n    const te = this.elements;\n    const me = m.elements;\n    te[0] = me[0];\n    te[1] = me[1];\n    te[2] = me[2];\n    te[3] = me[3];\n    te[4] = me[4];\n    te[5] = me[5];\n    te[6] = me[6];\n    te[7] = me[7];\n    te[8] = me[8];\n    te[9] = me[9];\n    te[10] = me[10];\n    te[11] = me[11];\n    te[12] = me[12];\n    te[13] = me[13];\n    te[14] = me[14];\n    te[15] = me[15];\n    return this;\n  }\n\n  /**\n   * Copies the translation component of the given matrix\n   * into this matrix's translation component.\n   *\n   * @param {Matrix4} m - The matrix to copy the translation component.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  copyPosition(m) {\n    const te = this.elements,\n      me = m.elements;\n    te[12] = me[12];\n    te[13] = me[13];\n    te[14] = me[14];\n    return this;\n  }\n\n  /**\n   * Set the upper 3x3 elements of this matrix to the values of given 3x3 matrix.\n   *\n   * @param {Matrix3} m - The 3x3 matrix.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  setFromMatrix3(m) {\n    const me = m.elements;\n    this.set(me[0], me[3], me[6], 0, me[1], me[4], me[7], 0, me[2], me[5], me[8], 0, 0, 0, 0, 1);\n    return this;\n  }\n\n  /**\n   * Extracts the basis of this matrix into the three axis vectors provided.\n   *\n   * @param {Vector3} xAxis - The basis's x axis.\n   * @param {Vector3} yAxis - The basis's y axis.\n   * @param {Vector3} zAxis - The basis's z axis.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  extractBasis(xAxis, yAxis, zAxis) {\n    xAxis.setFromMatrixColumn(this, 0);\n    yAxis.setFromMatrixColumn(this, 1);\n    zAxis.setFromMatrixColumn(this, 2);\n    return this;\n  }\n\n  /**\n   * Sets the given basis vectors to this matrix.\n   *\n   * @param {Vector3} xAxis - The basis's x axis.\n   * @param {Vector3} yAxis - The basis's y axis.\n   * @param {Vector3} zAxis - The basis's z axis.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  makeBasis(xAxis, yAxis, zAxis) {\n    this.set(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1);\n    return this;\n  }\n\n  /**\n   * Extracts the rotation component of the given matrix\n   * into this matrix's rotation component.\n   *\n   * Note: This method does not support reflection matrices.\n   *\n   * @param {Matrix4} m - The matrix.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  extractRotation(m) {\n    const te = this.elements;\n    const me = m.elements;\n    const scaleX = 1 / _v1$5.setFromMatrixColumn(m, 0).length();\n    const scaleY = 1 / _v1$5.setFromMatrixColumn(m, 1).length();\n    const scaleZ = 1 / _v1$5.setFromMatrixColumn(m, 2).length();\n    te[0] = me[0] * scaleX;\n    te[1] = me[1] * scaleX;\n    te[2] = me[2] * scaleX;\n    te[3] = 0;\n    te[4] = me[4] * scaleY;\n    te[5] = me[5] * scaleY;\n    te[6] = me[6] * scaleY;\n    te[7] = 0;\n    te[8] = me[8] * scaleZ;\n    te[9] = me[9] * scaleZ;\n    te[10] = me[10] * scaleZ;\n    te[11] = 0;\n    te[12] = 0;\n    te[13] = 0;\n    te[14] = 0;\n    te[15] = 1;\n    return this;\n  }\n\n  /**\n   * Sets the rotation component (the upper left 3x3 matrix) of this matrix to\n   * the rotation specified by the given Euler angles. The rest of\n   * the matrix is set to the identity. Depending on the {@link Euler#order},\n   * there are six possible outcomes. See [this page]{@link https://en.wikipedia.org/wiki/Euler_angles#Rotation_matrix}\n   * for a complete list.\n   *\n   * @param {Euler} euler - The Euler angles.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  makeRotationFromEuler(euler) {\n    const te = this.elements;\n    const x = euler.x,\n      y = euler.y,\n      z = euler.z;\n    const a = Math.cos(x),\n      b = Math.sin(x);\n    const c = Math.cos(y),\n      d = Math.sin(y);\n    const e = Math.cos(z),\n      f = Math.sin(z);\n    if (euler.order === 'XYZ') {\n      const ae = a * e,\n        af = a * f,\n        be = b * e,\n        bf = b * f;\n      te[0] = c * e;\n      te[4] = -c * f;\n      te[8] = d;\n      te[1] = af + be * d;\n      te[5] = ae - bf * d;\n      te[9] = -b * c;\n      te[2] = bf - ae * d;\n      te[6] = be + af * d;\n      te[10] = a * c;\n    } else if (euler.order === 'YXZ') {\n      const ce = c * e,\n        cf = c * f,\n        de = d * e,\n        df = d * f;\n      te[0] = ce + df * b;\n      te[4] = de * b - cf;\n      te[8] = a * d;\n      te[1] = a * f;\n      te[5] = a * e;\n      te[9] = -b;\n      te[2] = cf * b - de;\n      te[6] = df + ce * b;\n      te[10] = a * c;\n    } else if (euler.order === 'ZXY') {\n      const ce = c * e,\n        cf = c * f,\n        de = d * e,\n        df = d * f;\n      te[0] = ce - df * b;\n      te[4] = -a * f;\n      te[8] = de + cf * b;\n      te[1] = cf + de * b;\n      te[5] = a * e;\n      te[9] = df - ce * b;\n      te[2] = -a * d;\n      te[6] = b;\n      te[10] = a * c;\n    } else if (euler.order === 'ZYX') {\n      const ae = a * e,\n        af = a * f,\n        be = b * e,\n        bf = b * f;\n      te[0] = c * e;\n      te[4] = be * d - af;\n      te[8] = ae * d + bf;\n      te[1] = c * f;\n      te[5] = bf * d + ae;\n      te[9] = af * d - be;\n      te[2] = -d;\n      te[6] = b * c;\n      te[10] = a * c;\n    } else if (euler.order === 'YZX') {\n      const ac = a * c,\n        ad = a * d,\n        bc = b * c,\n        bd = b * d;\n      te[0] = c * e;\n      te[4] = bd - ac * f;\n      te[8] = bc * f + ad;\n      te[1] = f;\n      te[5] = a * e;\n      te[9] = -b * e;\n      te[2] = -d * e;\n      te[6] = ad * f + bc;\n      te[10] = ac - bd * f;\n    } else if (euler.order === 'XZY') {\n      const ac = a * c,\n        ad = a * d,\n        bc = b * c,\n        bd = b * d;\n      te[0] = c * e;\n      te[4] = -f;\n      te[8] = d * e;\n      te[1] = ac * f + bd;\n      te[5] = a * e;\n      te[9] = ad * f - bc;\n      te[2] = bc * f - ad;\n      te[6] = b * e;\n      te[10] = bd * f + ac;\n    }\n\n    // bottom row\n    te[3] = 0;\n    te[7] = 0;\n    te[11] = 0;\n\n    // last column\n    te[12] = 0;\n    te[13] = 0;\n    te[14] = 0;\n    te[15] = 1;\n    return this;\n  }\n\n  /**\n   * Sets the rotation component of this matrix to the rotation specified by\n   * the given Quaternion as outlined [here]{@link https://en.wikipedia.org/wiki/Rotation_matrix#Quaternion}\n   * The rest of the matrix is set to the identity.\n   *\n   * @param {Quaternion} q - The Quaternion.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  makeRotationFromQuaternion(q) {\n    return this.compose(_zero, q, _one);\n  }\n\n  /**\n   * Sets the rotation component of the transformation matrix, looking from `eye` towards\n   * `target`, and oriented by the up-direction.\n   *\n   * @param {Vector3} eye - The eye vector.\n   * @param {Vector3} target - The target vector.\n   * @param {Vector3} up - The up vector.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  lookAt(eye, target, up) {\n    const te = this.elements;\n    _z.subVectors(eye, target);\n    if (_z.lengthSq() === 0) {\n      // eye and target are in the same position\n\n      _z.z = 1;\n    }\n    _z.normalize();\n    _x.crossVectors(up, _z);\n    if (_x.lengthSq() === 0) {\n      // up and z are parallel\n\n      if (Math.abs(up.z) === 1) {\n        _z.x += 0.0001;\n      } else {\n        _z.z += 0.0001;\n      }\n      _z.normalize();\n      _x.crossVectors(up, _z);\n    }\n    _x.normalize();\n    _y.crossVectors(_z, _x);\n    te[0] = _x.x;\n    te[4] = _y.x;\n    te[8] = _z.x;\n    te[1] = _x.y;\n    te[5] = _y.y;\n    te[9] = _z.y;\n    te[2] = _x.z;\n    te[6] = _y.z;\n    te[10] = _z.z;\n    return this;\n  }\n\n  /**\n   * Post-multiplies this matrix by the given 4x4 matrix.\n   *\n   * @param {Matrix4} m - The matrix to multiply with.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  multiply(m) {\n    return this.multiplyMatrices(this, m);\n  }\n\n  /**\n   * Pre-multiplies this matrix by the given 4x4 matrix.\n   *\n   * @param {Matrix4} m - The matrix to multiply with.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  premultiply(m) {\n    return this.multiplyMatrices(m, this);\n  }\n\n  /**\n   * Multiples the given 4x4 matrices and stores the result\n   * in this matrix.\n   *\n   * @param {Matrix4} a - The first matrix.\n   * @param {Matrix4} b - The second matrix.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  multiplyMatrices(a, b) {\n    const ae = a.elements;\n    const be = b.elements;\n    const te = this.elements;\n    const a11 = ae[0],\n      a12 = ae[4],\n      a13 = ae[8],\n      a14 = ae[12];\n    const a21 = ae[1],\n      a22 = ae[5],\n      a23 = ae[9],\n      a24 = ae[13];\n    const a31 = ae[2],\n      a32 = ae[6],\n      a33 = ae[10],\n      a34 = ae[14];\n    const a41 = ae[3],\n      a42 = ae[7],\n      a43 = ae[11],\n      a44 = ae[15];\n    const b11 = be[0],\n      b12 = be[4],\n      b13 = be[8],\n      b14 = be[12];\n    const b21 = be[1],\n      b22 = be[5],\n      b23 = be[9],\n      b24 = be[13];\n    const b31 = be[2],\n      b32 = be[6],\n      b33 = be[10],\n      b34 = be[14];\n    const b41 = be[3],\n      b42 = be[7],\n      b43 = be[11],\n      b44 = be[15];\n    te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n    te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n    te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n    te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n    te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n    te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n    te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n    te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n    te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n    te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n    te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n    te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n    te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n    te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n    te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n    te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n    return this;\n  }\n\n  /**\n   * Multiplies every component of the matrix by the given scalar.\n   *\n   * @param {number} s - The scalar.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  multiplyScalar(s) {\n    const te = this.elements;\n    te[0] *= s;\n    te[4] *= s;\n    te[8] *= s;\n    te[12] *= s;\n    te[1] *= s;\n    te[5] *= s;\n    te[9] *= s;\n    te[13] *= s;\n    te[2] *= s;\n    te[6] *= s;\n    te[10] *= s;\n    te[14] *= s;\n    te[3] *= s;\n    te[7] *= s;\n    te[11] *= s;\n    te[15] *= s;\n    return this;\n  }\n\n  /**\n   * Computes and returns the determinant of this matrix.\n   *\n   * Based on the method outlined [here]{@link http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.html}.\n   *\n   * @return {number} The determinant.\n   */\n  determinant() {\n    const te = this.elements;\n    const n11 = te[0],\n      n12 = te[4],\n      n13 = te[8],\n      n14 = te[12];\n    const n21 = te[1],\n      n22 = te[5],\n      n23 = te[9],\n      n24 = te[13];\n    const n31 = te[2],\n      n32 = te[6],\n      n33 = te[10],\n      n34 = te[14];\n    const n41 = te[3],\n      n42 = te[7],\n      n43 = te[11],\n      n44 = te[15];\n\n    //TODO: make this more efficient\n\n    return n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);\n  }\n\n  /**\n   * Transposes this matrix in place.\n   *\n   * @return {Matrix4} A reference to this matrix.\n   */\n  transpose() {\n    const te = this.elements;\n    let tmp;\n    tmp = te[1];\n    te[1] = te[4];\n    te[4] = tmp;\n    tmp = te[2];\n    te[2] = te[8];\n    te[8] = tmp;\n    tmp = te[6];\n    te[6] = te[9];\n    te[9] = tmp;\n    tmp = te[3];\n    te[3] = te[12];\n    te[12] = tmp;\n    tmp = te[7];\n    te[7] = te[13];\n    te[13] = tmp;\n    tmp = te[11];\n    te[11] = te[14];\n    te[14] = tmp;\n    return this;\n  }\n\n  /**\n   * Sets the position component for this matrix from the given vector,\n   * without affecting the rest of the matrix.\n   *\n   * @param {number|Vector3} x - The x component of the vector or alternatively the vector object.\n   * @param {number} y - The y component of the vector.\n   * @param {number} z - The z component of the vector.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  setPosition(x, y, z) {\n    const te = this.elements;\n    if (x.isVector3) {\n      te[12] = x.x;\n      te[13] = x.y;\n      te[14] = x.z;\n    } else {\n      te[12] = x;\n      te[13] = y;\n      te[14] = z;\n    }\n    return this;\n  }\n\n  /**\n   * Inverts this matrix, using the [analytic method]{@link https://en.wikipedia.org/wiki/Invertible_matrix#Analytic_solution}.\n   * You can not invert with a determinant of zero. If you attempt this, the method produces\n   * a zero matrix instead.\n   *\n   * @return {Matrix4} A reference to this matrix.\n   */\n  invert() {\n    // based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n    const te = this.elements,\n      n11 = te[0],\n      n21 = te[1],\n      n31 = te[2],\n      n41 = te[3],\n      n12 = te[4],\n      n22 = te[5],\n      n32 = te[6],\n      n42 = te[7],\n      n13 = te[8],\n      n23 = te[9],\n      n33 = te[10],\n      n43 = te[11],\n      n14 = te[12],\n      n24 = te[13],\n      n34 = te[14],\n      n44 = te[15],\n      t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n      t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n      t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n      t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n    const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n    if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    const detInv = 1 / det;\n    te[0] = t11 * detInv;\n    te[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;\n    te[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;\n    te[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;\n    te[4] = t12 * detInv;\n    te[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;\n    te[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;\n    te[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;\n    te[8] = t13 * detInv;\n    te[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;\n    te[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;\n    te[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;\n    te[12] = t14 * detInv;\n    te[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;\n    te[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;\n    te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;\n    return this;\n  }\n\n  /**\n   * Multiplies the columns of this matrix by the given vector.\n   *\n   * @param {Vector3} v - The scale vector.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  scale(v) {\n    const te = this.elements;\n    const x = v.x,\n      y = v.y,\n      z = v.z;\n    te[0] *= x;\n    te[4] *= y;\n    te[8] *= z;\n    te[1] *= x;\n    te[5] *= y;\n    te[9] *= z;\n    te[2] *= x;\n    te[6] *= y;\n    te[10] *= z;\n    te[3] *= x;\n    te[7] *= y;\n    te[11] *= z;\n    return this;\n  }\n\n  /**\n   * Gets the maximum scale value of the three axes.\n   *\n   * @return {number} The maximum scale.\n   */\n  getMaxScaleOnAxis() {\n    const te = this.elements;\n    const scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];\n    const scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];\n    const scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];\n    return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));\n  }\n\n  /**\n   * Sets this matrix as a translation transform from the given vector.\n   *\n   * @param {number|Vector3} x - The amount to translate in the X axis or alternatively a translation vector.\n   * @param {number} y - The amount to translate in the Y axis.\n   * @param {number} z - The amount to translate in the z axis.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  makeTranslation(x, y, z) {\n    if (x.isVector3) {\n      this.set(1, 0, 0, x.x, 0, 1, 0, x.y, 0, 0, 1, x.z, 0, 0, 0, 1);\n    } else {\n      this.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);\n    }\n    return this;\n  }\n\n  /**\n   * Sets this matrix as a rotational transformation around the X axis by\n   * the given angle.\n   *\n   * @param {number} theta - The rotation in radians.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  makeRotationX(theta) {\n    const c = Math.cos(theta),\n      s = Math.sin(theta);\n    this.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);\n    return this;\n  }\n\n  /**\n   * Sets this matrix as a rotational transformation around the Y axis by\n   * the given angle.\n   *\n   * @param {number} theta - The rotation in radians.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  makeRotationY(theta) {\n    const c = Math.cos(theta),\n      s = Math.sin(theta);\n    this.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);\n    return this;\n  }\n\n  /**\n   * Sets this matrix as a rotational transformation around the Z axis by\n   * the given angle.\n   *\n   * @param {number} theta - The rotation in radians.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  makeRotationZ(theta) {\n    const c = Math.cos(theta),\n      s = Math.sin(theta);\n    this.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n    return this;\n  }\n\n  /**\n   * Sets this matrix as a rotational transformation around the given axis by\n   * the given angle.\n   *\n   * This is a somewhat controversial but mathematically sound alternative to\n   * rotating via Quaternions. See the discussion [here]{@link https://www.gamedev.net/articles/programming/math-and-physics/do-we-really-need-quaternions-r1199}.\n   *\n   * @param {Vector3} axis - The normalized rotation axis.\n   * @param {number} angle - The rotation in radians.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  makeRotationAxis(axis, angle) {\n    // Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n    const c = Math.cos(angle);\n    const s = Math.sin(angle);\n    const t = 1 - c;\n    const x = axis.x,\n      y = axis.y,\n      z = axis.z;\n    const tx = t * x,\n      ty = t * y;\n    this.set(tx * x + c, tx * y - s * z, tx * z + s * y, 0, tx * y + s * z, ty * y + c, ty * z - s * x, 0, tx * z - s * y, ty * z + s * x, t * z * z + c, 0, 0, 0, 0, 1);\n    return this;\n  }\n\n  /**\n   * Sets this matrix as a scale transformation.\n   *\n   * @param {number} x - The amount to scale in the X axis.\n   * @param {number} y - The amount to scale in the Y axis.\n   * @param {number} z - The amount to scale in the Z axis.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  makeScale(x, y, z) {\n    this.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);\n    return this;\n  }\n\n  /**\n   * Sets this matrix as a shear transformation.\n   *\n   * @param {number} xy - The amount to shear X by Y.\n   * @param {number} xz - The amount to shear X by Z.\n   * @param {number} yx - The amount to shear Y by X.\n   * @param {number} yz - The amount to shear Y by Z.\n   * @param {number} zx - The amount to shear Z by X.\n   * @param {number} zy - The amount to shear Z by Y.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  makeShear(xy, xz, yx, yz, zx, zy) {\n    this.set(1, yx, zx, 0, xy, 1, zy, 0, xz, yz, 1, 0, 0, 0, 0, 1);\n    return this;\n  }\n\n  /**\n   * Sets this matrix to the transformation composed of the given position,\n   * rotation (Quaternion) and scale.\n   *\n   * @param {Vector3} position - The position vector.\n   * @param {Quaternion} quaternion - The rotation as a Quaternion.\n   * @param {Vector3} scale - The scale vector.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  compose(position, quaternion, scale) {\n    const te = this.elements;\n    const x = quaternion._x,\n      y = quaternion._y,\n      z = quaternion._z,\n      w = quaternion._w;\n    const x2 = x + x,\n      y2 = y + y,\n      z2 = z + z;\n    const xx = x * x2,\n      xy = x * y2,\n      xz = x * z2;\n    const yy = y * y2,\n      yz = y * z2,\n      zz = z * z2;\n    const wx = w * x2,\n      wy = w * y2,\n      wz = w * z2;\n    const sx = scale.x,\n      sy = scale.y,\n      sz = scale.z;\n    te[0] = (1 - (yy + zz)) * sx;\n    te[1] = (xy + wz) * sx;\n    te[2] = (xz - wy) * sx;\n    te[3] = 0;\n    te[4] = (xy - wz) * sy;\n    te[5] = (1 - (xx + zz)) * sy;\n    te[6] = (yz + wx) * sy;\n    te[7] = 0;\n    te[8] = (xz + wy) * sz;\n    te[9] = (yz - wx) * sz;\n    te[10] = (1 - (xx + yy)) * sz;\n    te[11] = 0;\n    te[12] = position.x;\n    te[13] = position.y;\n    te[14] = position.z;\n    te[15] = 1;\n    return this;\n  }\n\n  /**\n   * Decomposes this matrix into its position, rotation and scale components\n   * and provides the result in the given objects.\n   *\n   * Note: Not all matrices are decomposable in this way. For example, if an\n   * object has a non-uniformly scaled parent, then the object's world matrix\n   * may not be decomposable, and this method may not be appropriate.\n   *\n   * @param {Vector3} position - The position vector.\n   * @param {Quaternion} quaternion - The rotation as a Quaternion.\n   * @param {Vector3} scale - The scale vector.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  decompose(position, quaternion, scale) {\n    const te = this.elements;\n    let sx = _v1$5.set(te[0], te[1], te[2]).length();\n    const sy = _v1$5.set(te[4], te[5], te[6]).length();\n    const sz = _v1$5.set(te[8], te[9], te[10]).length();\n\n    // if determine is negative, we need to invert one scale\n    const det = this.determinant();\n    if (det < 0) sx = -sx;\n    position.x = te[12];\n    position.y = te[13];\n    position.z = te[14];\n\n    // scale the rotation part\n    _m1$2.copy(this);\n    const invSX = 1 / sx;\n    const invSY = 1 / sy;\n    const invSZ = 1 / sz;\n    _m1$2.elements[0] *= invSX;\n    _m1$2.elements[1] *= invSX;\n    _m1$2.elements[2] *= invSX;\n    _m1$2.elements[4] *= invSY;\n    _m1$2.elements[5] *= invSY;\n    _m1$2.elements[6] *= invSY;\n    _m1$2.elements[8] *= invSZ;\n    _m1$2.elements[9] *= invSZ;\n    _m1$2.elements[10] *= invSZ;\n    quaternion.setFromRotationMatrix(_m1$2);\n    scale.x = sx;\n    scale.y = sy;\n    scale.z = sz;\n    return this;\n  }\n\n  /**\n   * Creates a perspective projection matrix. This is used internally by\n   * {@link PerspectiveCamera#updateProjectionMatrix}.\n  \t * @param {number} left - Left boundary of the viewing frustum at the near plane.\n   * @param {number} right - Right boundary of the viewing frustum at the near plane.\n   * @param {number} top - Top boundary of the viewing frustum at the near plane.\n   * @param {number} bottom - Bottom boundary of the viewing frustum at the near plane.\n   * @param {number} near - The distance from the camera to the near plane.\n   * @param {number} far - The distance from the camera to the far plane.\n   * @param {(WebGLCoordinateSystem|WebGPUCoordinateSystem)} [coordinateSystem=WebGLCoordinateSystem] - The coordinate system.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  makePerspective(left, right, top, bottom, near, far) {\n    let coordinateSystem = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : WebGLCoordinateSystem;\n    const te = this.elements;\n    const x = 2 * near / (right - left);\n    const y = 2 * near / (top - bottom);\n    const a = (right + left) / (right - left);\n    const b = (top + bottom) / (top - bottom);\n    let c, d;\n    if (coordinateSystem === WebGLCoordinateSystem) {\n      c = -(far + near) / (far - near);\n      d = -2 * far * near / (far - near);\n    } else if (coordinateSystem === WebGPUCoordinateSystem) {\n      c = -far / (far - near);\n      d = -far * near / (far - near);\n    } else {\n      throw new Error('THREE.Matrix4.makePerspective(): Invalid coordinate system: ' + coordinateSystem);\n    }\n    te[0] = x;\n    te[4] = 0;\n    te[8] = a;\n    te[12] = 0;\n    te[1] = 0;\n    te[5] = y;\n    te[9] = b;\n    te[13] = 0;\n    te[2] = 0;\n    te[6] = 0;\n    te[10] = c;\n    te[14] = d;\n    te[3] = 0;\n    te[7] = 0;\n    te[11] = -1;\n    te[15] = 0;\n    return this;\n  }\n\n  /**\n   * Creates a orthographic projection matrix. This is used internally by\n   * {@link OrthographicCamera#updateProjectionMatrix}.\n  \t * @param {number} left - Left boundary of the viewing frustum at the near plane.\n   * @param {number} right - Right boundary of the viewing frustum at the near plane.\n   * @param {number} top - Top boundary of the viewing frustum at the near plane.\n   * @param {number} bottom - Bottom boundary of the viewing frustum at the near plane.\n   * @param {number} near - The distance from the camera to the near plane.\n   * @param {number} far - The distance from the camera to the far plane.\n   * @param {(WebGLCoordinateSystem|WebGPUCoordinateSystem)} [coordinateSystem=WebGLCoordinateSystem] - The coordinate system.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  makeOrthographic(left, right, top, bottom, near, far) {\n    let coordinateSystem = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : WebGLCoordinateSystem;\n    const te = this.elements;\n    const w = 1.0 / (right - left);\n    const h = 1.0 / (top - bottom);\n    const p = 1.0 / (far - near);\n    const x = (right + left) * w;\n    const y = (top + bottom) * h;\n    let z, zInv;\n    if (coordinateSystem === WebGLCoordinateSystem) {\n      z = (far + near) * p;\n      zInv = -2 * p;\n    } else if (coordinateSystem === WebGPUCoordinateSystem) {\n      z = near * p;\n      zInv = -1 * p;\n    } else {\n      throw new Error('THREE.Matrix4.makeOrthographic(): Invalid coordinate system: ' + coordinateSystem);\n    }\n    te[0] = 2 * w;\n    te[4] = 0;\n    te[8] = 0;\n    te[12] = -x;\n    te[1] = 0;\n    te[5] = 2 * h;\n    te[9] = 0;\n    te[13] = -y;\n    te[2] = 0;\n    te[6] = 0;\n    te[10] = zInv;\n    te[14] = -z;\n    te[3] = 0;\n    te[7] = 0;\n    te[11] = 0;\n    te[15] = 1;\n    return this;\n  }\n\n  /**\n   * Returns `true` if this matrix is equal with the given one.\n   *\n   * @param {Matrix4} matrix - The matrix to test for equality.\n   * @return {boolean} Whether this matrix is equal with the given one.\n   */\n  equals(matrix) {\n    const te = this.elements;\n    const me = matrix.elements;\n    for (let i = 0; i < 16; i++) {\n      if (te[i] !== me[i]) return false;\n    }\n    return true;\n  }\n\n  /**\n   * Sets the elements of the matrix from the given array.\n   *\n   * @param {Array<number>} array - The matrix elements in column-major order.\n   * @param {number} [offset=0] - Index of the first element in the array.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  fromArray(array) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    for (let i = 0; i < 16; i++) {\n      this.elements[i] = array[i + offset];\n    }\n    return this;\n  }\n\n  /**\n   * Writes the elements of this matrix to the given array. If no array is provided,\n   * the method returns a new instance.\n   *\n   * @param {Array<number>} [array=[]] - The target array holding the matrix elements in column-major order.\n   * @param {number} [offset=0] - Index of the first element in the array.\n   * @return {Array<number>} The matrix elements in column-major order.\n   */\n  toArray() {\n    let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const te = this.elements;\n    array[offset] = te[0];\n    array[offset + 1] = te[1];\n    array[offset + 2] = te[2];\n    array[offset + 3] = te[3];\n    array[offset + 4] = te[4];\n    array[offset + 5] = te[5];\n    array[offset + 6] = te[6];\n    array[offset + 7] = te[7];\n    array[offset + 8] = te[8];\n    array[offset + 9] = te[9];\n    array[offset + 10] = te[10];\n    array[offset + 11] = te[11];\n    array[offset + 12] = te[12];\n    array[offset + 13] = te[13];\n    array[offset + 14] = te[14];\n    array[offset + 15] = te[15];\n    return array;\n  }\n}\nconst _v1$5 = /*@__PURE__*/new Vector3();\nconst _m1$2 = /*@__PURE__*/new Matrix4();\nconst _zero = /*@__PURE__*/new Vector3(0, 0, 0);\nconst _one = /*@__PURE__*/new Vector3(1, 1, 1);\nconst _x = /*@__PURE__*/new Vector3();\nconst _y = /*@__PURE__*/new Vector3();\nconst _z = /*@__PURE__*/new Vector3();\nconst _matrix$2 = /*@__PURE__*/new Matrix4();\nconst _quaternion$3 = /*@__PURE__*/new Quaternion();\n\n/**\n * A class representing Euler angles.\n *\n * Euler angles describe a rotational transformation by rotating an object on\n * its various axes in specified amounts per axis, and a specified axis\n * order.\n *\n * Iterating through an instance will yield its components (x, y, z,\n * order) in the corresponding order.\n *\n * ```js\n * const a = new THREE.Euler( 0, 1, 1.57, 'XYZ' );\n * const b = new THREE.Vector3( 1, 0, 1 );\n * b.applyEuler(a);\n * ```\n */\nclass Euler {\n  /**\n   * Constructs a new euler instance.\n   *\n   * @param {number} [x=0] - The angle of the x axis in radians.\n   * @param {number} [y=0] - The angle of the y axis in radians.\n   * @param {number} [z=0] - The angle of the z axis in radians.\n   * @param {string} [order=Euler.DEFAULT_ORDER] - A string representing the order that the rotations are applied.\n   */\n  constructor() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let order = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Euler.DEFAULT_ORDER;\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isEuler = true;\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._order = order;\n  }\n\n  /**\n   * The angle of the x axis in radians.\n   *\n   * @type {number}\n   * @default 0\n   */\n  get x() {\n    return this._x;\n  }\n  set x(value) {\n    this._x = value;\n    this._onChangeCallback();\n  }\n\n  /**\n   * The angle of the y axis in radians.\n   *\n   * @type {number}\n   * @default 0\n   */\n  get y() {\n    return this._y;\n  }\n  set y(value) {\n    this._y = value;\n    this._onChangeCallback();\n  }\n\n  /**\n   * The angle of the z axis in radians.\n   *\n   * @type {number}\n   * @default 0\n   */\n  get z() {\n    return this._z;\n  }\n  set z(value) {\n    this._z = value;\n    this._onChangeCallback();\n  }\n\n  /**\n   * A string representing the order that the rotations are applied.\n   *\n   * @type {string}\n   * @default 'XYZ'\n   */\n  get order() {\n    return this._order;\n  }\n  set order(value) {\n    this._order = value;\n    this._onChangeCallback();\n  }\n\n  /**\n   * Sets the Euler components.\n   *\n   * @param {number} x - The angle of the x axis in radians.\n   * @param {number} y - The angle of the y axis in radians.\n   * @param {number} z - The angle of the z axis in radians.\n   * @param {string} [order] - A string representing the order that the rotations are applied.\n   * @return {Euler} A reference to this Euler instance.\n   */\n  set(x, y, z) {\n    let order = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this._order;\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._order = order;\n    this._onChangeCallback();\n    return this;\n  }\n\n  /**\n   * Returns a new Euler instance with copied values from this instance.\n   *\n   * @return {Euler} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor(this._x, this._y, this._z, this._order);\n  }\n\n  /**\n   * Copies the values of the given Euler instance to this instance.\n   *\n   * @param {Euler} euler - The Euler instance to copy.\n   * @return {Euler} A reference to this Euler instance.\n   */\n  copy(euler) {\n    this._x = euler._x;\n    this._y = euler._y;\n    this._z = euler._z;\n    this._order = euler._order;\n    this._onChangeCallback();\n    return this;\n  }\n\n  /**\n   * Sets the angles of this Euler instance from a pure rotation matrix.\n   *\n   * @param {Matrix4} m - A 4x4 matrix of which the upper 3x3 of matrix is a pure rotation matrix (i.e. unscaled).\n   * @param {string} [order] - A string representing the order that the rotations are applied.\n   * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.\n   * @return {Euler} A reference to this Euler instance.\n   */\n  setFromRotationMatrix(m) {\n    let order = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._order;\n    let update = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    const te = m.elements;\n    const m11 = te[0],\n      m12 = te[4],\n      m13 = te[8];\n    const m21 = te[1],\n      m22 = te[5],\n      m23 = te[9];\n    const m31 = te[2],\n      m32 = te[6],\n      m33 = te[10];\n    switch (order) {\n      case 'XYZ':\n        this._y = Math.asin(clamp(m13, -1, 1));\n        if (Math.abs(m13) < 0.9999999) {\n          this._x = Math.atan2(-m23, m33);\n          this._z = Math.atan2(-m12, m11);\n        } else {\n          this._x = Math.atan2(m32, m22);\n          this._z = 0;\n        }\n        break;\n      case 'YXZ':\n        this._x = Math.asin(-clamp(m23, -1, 1));\n        if (Math.abs(m23) < 0.9999999) {\n          this._y = Math.atan2(m13, m33);\n          this._z = Math.atan2(m21, m22);\n        } else {\n          this._y = Math.atan2(-m31, m11);\n          this._z = 0;\n        }\n        break;\n      case 'ZXY':\n        this._x = Math.asin(clamp(m32, -1, 1));\n        if (Math.abs(m32) < 0.9999999) {\n          this._y = Math.atan2(-m31, m33);\n          this._z = Math.atan2(-m12, m22);\n        } else {\n          this._y = 0;\n          this._z = Math.atan2(m21, m11);\n        }\n        break;\n      case 'ZYX':\n        this._y = Math.asin(-clamp(m31, -1, 1));\n        if (Math.abs(m31) < 0.9999999) {\n          this._x = Math.atan2(m32, m33);\n          this._z = Math.atan2(m21, m11);\n        } else {\n          this._x = 0;\n          this._z = Math.atan2(-m12, m22);\n        }\n        break;\n      case 'YZX':\n        this._z = Math.asin(clamp(m21, -1, 1));\n        if (Math.abs(m21) < 0.9999999) {\n          this._x = Math.atan2(-m23, m22);\n          this._y = Math.atan2(-m31, m11);\n        } else {\n          this._x = 0;\n          this._y = Math.atan2(m13, m33);\n        }\n        break;\n      case 'XZY':\n        this._z = Math.asin(-clamp(m12, -1, 1));\n        if (Math.abs(m12) < 0.9999999) {\n          this._x = Math.atan2(m32, m22);\n          this._y = Math.atan2(m13, m11);\n        } else {\n          this._x = Math.atan2(-m23, m33);\n          this._y = 0;\n        }\n        break;\n      default:\n        console.warn('THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order);\n    }\n    this._order = order;\n    if (update === true) this._onChangeCallback();\n    return this;\n  }\n\n  /**\n   * Sets the angles of this Euler instance from a normalized quaternion.\n   *\n   * @param {Quaternion} q - A normalized Quaternion.\n   * @param {string} [order] - A string representing the order that the rotations are applied.\n   * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.\n   * @return {Euler} A reference to this Euler instance.\n   */\n  setFromQuaternion(q, order, update) {\n    _matrix$2.makeRotationFromQuaternion(q);\n    return this.setFromRotationMatrix(_matrix$2, order, update);\n  }\n\n  /**\n   * Sets the angles of this Euler instance from the given vector.\n   *\n   * @param {Vector3} v - The vector.\n   * @param {string} [order] - A string representing the order that the rotations are applied.\n   * @return {Euler} A reference to this Euler instance.\n   */\n  setFromVector3(v) {\n    let order = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._order;\n    return this.set(v.x, v.y, v.z, order);\n  }\n\n  /**\n   * Resets the euler angle with a new order by creating a quaternion from this\n   * euler angle and then setting this euler angle with the quaternion and the\n   * new order.\n   *\n   * Warning: This discards revolution information.\n   *\n   * @param {string} [newOrder] - A string representing the new order that the rotations are applied.\n   * @return {Euler} A reference to this Euler instance.\n   */\n  reorder(newOrder) {\n    _quaternion$3.setFromEuler(this);\n    return this.setFromQuaternion(_quaternion$3, newOrder);\n  }\n\n  /**\n   * Returns `true` if this Euler instance is equal with the given one.\n   *\n   * @param {Euler} euler - The Euler instance to test for equality.\n   * @return {boolean} Whether this Euler instance is equal with the given one.\n   */\n  equals(euler) {\n    return euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;\n  }\n\n  /**\n   * Sets this Euler instance's components to values from the given array. The first three\n   * entries of the array are assign to the x,y and z components. An optional fourth entry\n   * defines the Euler order.\n   *\n   * @param {Array<number,number,number,?string>} array - An array holding the Euler component values.\n   * @return {Euler} A reference to this Euler instance.\n   */\n  fromArray(array) {\n    this._x = array[0];\n    this._y = array[1];\n    this._z = array[2];\n    if (array[3] !== undefined) this._order = array[3];\n    this._onChangeCallback();\n    return this;\n  }\n\n  /**\n   * Writes the components of this Euler instance to the given array. If no array is provided,\n   * the method returns a new instance.\n   *\n   * @param {Array<number,number,number,string>} [array=[]] - The target array holding the Euler components.\n   * @param {number} [offset=0] - Index of the first element in the array.\n   * @return {Array<number,number,number,string>} The Euler components.\n   */\n  toArray() {\n    let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    array[offset] = this._x;\n    array[offset + 1] = this._y;\n    array[offset + 2] = this._z;\n    array[offset + 3] = this._order;\n    return array;\n  }\n  _onChange(callback) {\n    this._onChangeCallback = callback;\n    return this;\n  }\n  _onChangeCallback() {}\n  *[Symbol.iterator]() {\n    yield this._x;\n    yield this._y;\n    yield this._z;\n    yield this._order;\n  }\n}\n\n/**\n * The default Euler angle order.\n *\n * @static\n * @type {string}\n * @default 'XYZ'\n */\nEuler.DEFAULT_ORDER = 'XYZ';\n\n/**\n * A layers object assigns an 3D object to 1 or more of 32\n * layers numbered `0` to `31` - internally the layers are stored as a\n * bit mask], and by default all 3D objects are a member of layer `0`.\n *\n * This can be used to control visibility - an object must share a layer with\n * a camera to be visible when that camera's view is\n * rendered.\n *\n * All classes that inherit from {@link Object3D} have an `layers` property which\n * is an instance of this class.\n */\nclass Layers {\n  /**\n   * Constructs a new layers instance, with membership\n   * initially set to layer `0`.\n   */\n  constructor() {\n    /**\n     * A bit mask storing which of the 32 layers this layers object is currently\n     * a member of.\n     *\n     * @type {number}\n     */\n    this.mask = 1 | 0;\n  }\n\n  /**\n   * Sets membership to the given layer, and remove membership all other layers.\n   *\n   * @param {number} layer - The layer to set.\n   */\n  set(layer) {\n    this.mask = (1 << layer | 0) >>> 0;\n  }\n\n  /**\n   * Adds membership of the given layer.\n   *\n   * @param {number} layer - The layer to enable.\n   */\n  enable(layer) {\n    this.mask |= 1 << layer | 0;\n  }\n\n  /**\n   * Adds membership to all layers.\n   */\n  enableAll() {\n    this.mask = 0xffffffff | 0;\n  }\n\n  /**\n   * Toggles the membership of the given layer.\n   *\n   * @param {number} layer - The layer to toggle.\n   */\n  toggle(layer) {\n    this.mask ^= 1 << layer | 0;\n  }\n\n  /**\n   * Removes membership of the given layer.\n   *\n   * @param {number} layer - The layer to enable.\n   */\n  disable(layer) {\n    this.mask &= ~(1 << layer | 0);\n  }\n\n  /**\n   * Removes the membership from all layers.\n   */\n  disableAll() {\n    this.mask = 0;\n  }\n\n  /**\n   * Returns `true` if this and the given layers object have at least one\n   * layer in common.\n   *\n   * @param {Layers} layers - The layers to test.\n   * @return {boolean } Whether this and the given layers object have at least one layer in common or not.\n   */\n  test(layers) {\n    return (this.mask & layers.mask) !== 0;\n  }\n\n  /**\n   * Returns `true` if the given layer is enabled.\n   *\n   * @param {number} layer - The layer to test.\n   * @return {boolean } Whether the given layer is enabled or not.\n   */\n  isEnabled(layer) {\n    return (this.mask & (1 << layer | 0)) !== 0;\n  }\n}\nlet _object3DId = 0;\nconst _v1$4 = /*@__PURE__*/new Vector3();\nconst _q1 = /*@__PURE__*/new Quaternion();\nconst _m1$1 = /*@__PURE__*/new Matrix4();\nconst _target = /*@__PURE__*/new Vector3();\nconst _position$3 = /*@__PURE__*/new Vector3();\nconst _scale$2 = /*@__PURE__*/new Vector3();\nconst _quaternion$2 = /*@__PURE__*/new Quaternion();\nconst _xAxis = /*@__PURE__*/new Vector3(1, 0, 0);\nconst _yAxis = /*@__PURE__*/new Vector3(0, 1, 0);\nconst _zAxis = /*@__PURE__*/new Vector3(0, 0, 1);\n\n/**\n * Fires when the object has been added to its parent object.\n *\n * @event Object3D#added\n * @type {Object}\n */\nconst _addedEvent = {\n  type: 'added'\n};\n\n/**\n * Fires when the object has been removed from its parent object.\n *\n * @event Object3D#removed\n * @type {Object}\n */\nconst _removedEvent = {\n  type: 'removed'\n};\n\n/**\n * Fires when a new child object has been added.\n *\n * @event Object3D#childadded\n * @type {Object}\n */\nconst _childaddedEvent = {\n  type: 'childadded',\n  child: null\n};\n\n/**\n * Fires when a new child object has been added.\n *\n * @event Object3D#childremoved\n * @type {Object}\n */\nconst _childremovedEvent = {\n  type: 'childremoved',\n  child: null\n};\n\n/**\n * This is the base class for most objects in three.js and provides a set of\n * properties and methods for manipulating objects in 3D space.\n *\n * @augments EventDispatcher\n */\nclass Object3D extends EventDispatcher {\n  /**\n   * Constructs a new 3D object.\n   */\n  constructor() {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isObject3D = true;\n\n    /**\n     * The ID of the 3D object.\n     *\n     * @name Object3D#id\n     * @type {number}\n     * @readonly\n     */\n    Object.defineProperty(this, 'id', {\n      value: _object3DId++\n    });\n\n    /**\n     * The UUID of the 3D object.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.uuid = generateUUID();\n\n    /**\n     * The name of the 3D object.\n     *\n     * @type {string}\n     */\n    this.name = '';\n\n    /**\n     * The type property is used for detecting the object type\n     * in context of serialization/deserialization.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.type = 'Object3D';\n\n    /**\n     * A reference to the parent object.\n     *\n     * @type {?Object3D}\n     * @default null\n     */\n    this.parent = null;\n\n    /**\n     * An array holding the child 3D objects of this instance.\n     *\n     * @type {Array<Object3D>}\n     */\n    this.children = [];\n\n    /**\n     * Defines the `up` direction of the 3D object which influences\n     * the orientation via methods like {@link Object3D#lookAt}.\n     *\n     * The default values for all 3D objects is defined by `Object3D.DEFAULT_UP`.\n     *\n     * @type {Vector3}\n     */\n    this.up = Object3D.DEFAULT_UP.clone();\n    const position = new Vector3();\n    const rotation = new Euler();\n    const quaternion = new Quaternion();\n    const scale = new Vector3(1, 1, 1);\n    function onRotationChange() {\n      quaternion.setFromEuler(rotation, false);\n    }\n    function onQuaternionChange() {\n      rotation.setFromQuaternion(quaternion, undefined, false);\n    }\n    rotation._onChange(onRotationChange);\n    quaternion._onChange(onQuaternionChange);\n    Object.defineProperties(this, {\n      /**\n       * Represents the object's local position.\n       *\n       * @name Object3D#position\n       * @type {Vector3}\n       * @default (0,0,0)\n       */\n      position: {\n        configurable: true,\n        enumerable: true,\n        value: position\n      },\n      /**\n       * Represents the object's local rotation as Euler angles, in radians.\n       *\n       * @name Object3D#rotation\n       * @type {Euler}\n       * @default (0,0,0)\n       */\n      rotation: {\n        configurable: true,\n        enumerable: true,\n        value: rotation\n      },\n      /**\n       * Represents the object's local rotation as Quaternions.\n       *\n       * @name Object3D#quaternion\n       * @type {Quaternion}\n       */\n      quaternion: {\n        configurable: true,\n        enumerable: true,\n        value: quaternion\n      },\n      /**\n       * Represents the object's local scale.\n       *\n       * @name Object3D#scale\n       * @type {Vector3}\n       * @default (1,1,1)\n       */\n      scale: {\n        configurable: true,\n        enumerable: true,\n        value: scale\n      },\n      /**\n       * Represents the object's model-view matrix.\n       *\n       * @name Object3D#modelViewMatrix\n       * @type {Matrix4}\n       */\n      modelViewMatrix: {\n        value: new Matrix4()\n      },\n      /**\n       * Represents the object's normal matrix.\n       *\n       * @name Object3D#normalMatrix\n       * @type {Matrix3}\n       */\n      normalMatrix: {\n        value: new Matrix3()\n      }\n    });\n\n    /**\n     * Represents the object's transformation matrix in local space.\n     *\n     * @type {Matrix4}\n     */\n    this.matrix = new Matrix4();\n\n    /**\n     * Represents the object's transformation matrix in world space.\n     * If the 3D object has no parent, then it's identical to the local transformation matrix\n     *\n     * @type {Matrix4}\n     */\n    this.matrixWorld = new Matrix4();\n\n    /**\n     * When set to `true`, the engine automatically computes the local matrix from position,\n     * rotation and scale every frame.\n     *\n     * The default values for all 3D objects is defined by `Object3D.DEFAULT_MATRIX_AUTO_UPDATE`.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.matrixAutoUpdate = Object3D.DEFAULT_MATRIX_AUTO_UPDATE;\n\n    /**\n     * When set to `true`, the engine automatically computes the world matrix from the current local\n     * matrix and the object's transformation hierarchy.\n     *\n     * The default values for all 3D objects is defined by `Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE`.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.matrixWorldAutoUpdate = Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE; // checked by the renderer\n\n    /**\n     * When set to `true`, it calculates the world matrix in that frame and resets this property\n     * to `false`.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.matrixWorldNeedsUpdate = false;\n\n    /**\n     * The layer membership of the 3D object. The 3D object is only visible if it has\n     * at least one layer in common with the camera in use. This property can also be\n     * used to filter out unwanted objects in ray-intersection tests when using {@link Raycaster}.\n     *\n     * @type {Layers}\n     */\n    this.layers = new Layers();\n\n    /**\n     * When set to `true`, the 3D object gets rendered.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.visible = true;\n\n    /**\n     * When set to `true`, the 3D object gets rendered into shadow maps.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.castShadow = false;\n\n    /**\n     * When set to `true`, the 3D object is affected by shadows in the scene.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.receiveShadow = false;\n\n    /**\n     * When set to `true`, the 3D object is honored by view frustum culling.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.frustumCulled = true;\n\n    /**\n     * This value allows the default rendering order of scene graph objects to be\n     * overridden although opaque and transparent objects remain sorted independently.\n     * When this property is set for an instance of {@link Group},all descendants\n     * objects will be sorted and rendered together. Sorting is from lowest to highest\n     * render order.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.renderOrder = 0;\n\n    /**\n     * An array holding the animation clips of the 3D object.\n     *\n     * @type {Array<AnimationClip>}\n     */\n    this.animations = [];\n\n    /**\n     * Custom depth material to be used when rendering to the depth map. Can only be used\n     * in context of meshes. When shadow-casting with a {@link DirectionalLight} or {@link SpotLight},\n     * if you are modifying vertex positions in the vertex shader you must specify a custom depth\n     * material for proper shadows.\n     *\n     * Only relevant in context of {@link WebGLRenderer}.\n     *\n     * @type {(Material|undefined)}\n     * @default undefined\n     */\n    this.customDepthMaterial = undefined;\n\n    /**\n     * Same as {@link Object3D#customDepthMaterial}, but used with {@link PointLight}.\n     *\n     * Only relevant in context of {@link WebGLRenderer}.\n     *\n     * @type {(Material|undefined)}\n     * @default undefined\n     */\n    this.customDistanceMaterial = undefined;\n\n    /**\n     * An object that can be used to store custom data about the 3D object. It\n     * should not hold references to functions as these will not be cloned.\n     *\n     * @type {Object}\n     */\n    this.userData = {};\n  }\n\n  /**\n   * A callback that is executed immediately before a 3D object is rendered to a shadow map.\n   *\n   * @param {Renderer|WebGLRenderer} renderer - The renderer.\n   * @param {Object3D} object - The 3D object.\n   * @param {Camera} camera - The camera that is used to render the scene.\n   * @param {Camera} shadowCamera - The shadow camera.\n   * @param {BufferGeometry} geometry - The 3D object's geometry.\n   * @param {Material} depthMaterial - The depth material.\n   * @param {Object} group - The geometry group data.\n   */\n  onBeforeShadow(/* renderer, object, camera, shadowCamera, geometry, depthMaterial, group */) {}\n\n  /**\n   * A callback that is executed immediately after a 3D object is rendered to a shadow map.\n   *\n   * @param {Renderer|WebGLRenderer} renderer - The renderer.\n   * @param {Object3D} object - The 3D object.\n   * @param {Camera} camera - The camera that is used to render the scene.\n   * @param {Camera} shadowCamera - The shadow camera.\n   * @param {BufferGeometry} geometry - The 3D object's geometry.\n   * @param {Material} depthMaterial - The depth material.\n   * @param {Object} group - The geometry group data.\n   */\n  onAfterShadow(/* renderer, object, camera, shadowCamera, geometry, depthMaterial, group */) {}\n\n  /**\n   * A callback that is executed immediately before a 3D object is rendered.\n   *\n   * @param {Renderer|WebGLRenderer} renderer - The renderer.\n   * @param {Object3D} object - The 3D object.\n   * @param {Camera} camera - The camera that is used to render the scene.\n   * @param {BufferGeometry} geometry - The 3D object's geometry.\n   * @param {Material} material - The 3D object's material.\n   * @param {Object} group - The geometry group data.\n   */\n  onBeforeRender(/* renderer, scene, camera, geometry, material, group */) {}\n\n  /**\n   * A callback that is executed immediately after a 3D object is rendered.\n   *\n   * @param {Renderer|WebGLRenderer} renderer - The renderer.\n   * @param {Object3D} object - The 3D object.\n   * @param {Camera} camera - The camera that is used to render the scene.\n   * @param {BufferGeometry} geometry - The 3D object's geometry.\n   * @param {Material} material - The 3D object's material.\n   * @param {Object} group - The geometry group data.\n   */\n  onAfterRender(/* renderer, scene, camera, geometry, material, group */) {}\n\n  /**\n   * Applies the given transformation matrix to the object and updates the object's position,\n   * rotation and scale.\n   *\n   * @param {Matrix4} matrix - The transformation matrix.\n   */\n  applyMatrix4(matrix) {\n    if (this.matrixAutoUpdate) this.updateMatrix();\n    this.matrix.premultiply(matrix);\n    this.matrix.decompose(this.position, this.quaternion, this.scale);\n  }\n\n  /**\n   * Applies a rotation represented by given the quaternion to the 3D object.\n   *\n   * @param {Quaternion} q - The quaternion.\n   * @return {Object3D} A reference to this instance.\n   */\n  applyQuaternion(q) {\n    this.quaternion.premultiply(q);\n    return this;\n  }\n\n  /**\n   * Sets the given rotation represented as an axis/angle couple to the 3D object.\n   *\n   * @param {Vector3} axis - The (normalized) axis vector.\n   * @param {number} angle - The angle in radians.\n   */\n  setRotationFromAxisAngle(axis, angle) {\n    // assumes axis is normalized\n\n    this.quaternion.setFromAxisAngle(axis, angle);\n  }\n\n  /**\n   * Sets the given rotation represented as Euler angles to the 3D object.\n   *\n   * @param {Euler} euler - The Euler angles.\n   */\n  setRotationFromEuler(euler) {\n    this.quaternion.setFromEuler(euler, true);\n  }\n\n  /**\n   * Sets the given rotation represented as rotation matrix to the 3D object.\n   *\n   * @param {Matrix4} m - Although a 4x4 matrix is expected, the upper 3x3 portion must be\n   * a pure rotation matrix (i.e, unscaled).\n   */\n  setRotationFromMatrix(m) {\n    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n    this.quaternion.setFromRotationMatrix(m);\n  }\n\n  /**\n   * Sets the given rotation represented as a Quaternion to the 3D object.\n   *\n   * @param {Quaternion} q - The Quaternion\n   */\n  setRotationFromQuaternion(q) {\n    // assumes q is normalized\n\n    this.quaternion.copy(q);\n  }\n\n  /**\n   * Rotates the 3D object along an axis in local space.\n   *\n   * @param {Vector3} axis - The (normalized) axis vector.\n   * @param {number} angle - The angle in radians.\n   * @return {Object3D} A reference to this instance.\n   */\n  rotateOnAxis(axis, angle) {\n    // rotate object on axis in object space\n    // axis is assumed to be normalized\n\n    _q1.setFromAxisAngle(axis, angle);\n    this.quaternion.multiply(_q1);\n    return this;\n  }\n\n  /**\n   * Rotates the 3D object along an axis in world space.\n   *\n   * @param {Vector3} axis - The (normalized) axis vector.\n   * @param {number} angle - The angle in radians.\n   * @return {Object3D} A reference to this instance.\n   */\n  rotateOnWorldAxis(axis, angle) {\n    // rotate object on axis in world space\n    // axis is assumed to be normalized\n    // method assumes no rotated parent\n\n    _q1.setFromAxisAngle(axis, angle);\n    this.quaternion.premultiply(_q1);\n    return this;\n  }\n\n  /**\n   * Rotates the 3D object around its X axis in local space.\n   *\n   * @param {number} angle - The angle in radians.\n   * @return {Object3D} A reference to this instance.\n   */\n  rotateX(angle) {\n    return this.rotateOnAxis(_xAxis, angle);\n  }\n\n  /**\n   * Rotates the 3D object around its Y axis in local space.\n   *\n   * @param {number} angle - The angle in radians.\n   * @return {Object3D} A reference to this instance.\n   */\n  rotateY(angle) {\n    return this.rotateOnAxis(_yAxis, angle);\n  }\n\n  /**\n   * Rotates the 3D object around its Z axis in local space.\n   *\n   * @param {number} angle - The angle in radians.\n   * @return {Object3D} A reference to this instance.\n   */\n  rotateZ(angle) {\n    return this.rotateOnAxis(_zAxis, angle);\n  }\n\n  /**\n   * Translate the 3D object by a distance along the given axis in local space.\n   *\n   * @param {Vector3} axis - The (normalized) axis vector.\n   * @param {number} distance - The distance in world units.\n   * @return {Object3D} A reference to this instance.\n   */\n  translateOnAxis(axis, distance) {\n    // translate object by distance along axis in object space\n    // axis is assumed to be normalized\n\n    _v1$4.copy(axis).applyQuaternion(this.quaternion);\n    this.position.add(_v1$4.multiplyScalar(distance));\n    return this;\n  }\n\n  /**\n   * Translate the 3D object by a distance along its X-axis in local space.\n   *\n   * @param {number} distance - The distance in world units.\n   * @return {Object3D} A reference to this instance.\n   */\n  translateX(distance) {\n    return this.translateOnAxis(_xAxis, distance);\n  }\n\n  /**\n   * Translate the 3D object by a distance along its Y-axis in local space.\n   *\n   * @param {number} distance - The distance in world units.\n   * @return {Object3D} A reference to this instance.\n   */\n  translateY(distance) {\n    return this.translateOnAxis(_yAxis, distance);\n  }\n\n  /**\n   * Translate the 3D object by a distance along its Z-axis in local space.\n   *\n   * @param {number} distance - The distance in world units.\n   * @return {Object3D} A reference to this instance.\n   */\n  translateZ(distance) {\n    return this.translateOnAxis(_zAxis, distance);\n  }\n\n  /**\n   * Converts the given vector from this 3D object's local space to world space.\n   *\n   * @param {Vector3} vector - The vector to convert.\n   * @return {Vector3} The converted vector.\n   */\n  localToWorld(vector) {\n    this.updateWorldMatrix(true, false);\n    return vector.applyMatrix4(this.matrixWorld);\n  }\n\n  /**\n   * Converts the given vector from this 3D object's word space to local space.\n   *\n   * @param {Vector3} vector - The vector to convert.\n   * @return {Vector3} The converted vector.\n   */\n  worldToLocal(vector) {\n    this.updateWorldMatrix(true, false);\n    return vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());\n  }\n\n  /**\n   * Rotates the object to face a point in world space.\n   *\n   * This method does not support objects having non-uniformly-scaled parent(s).\n   *\n   * @param {number|Vector3} x - The x coordinate in world space. Alternatively, a vector representing a position in world space\n   * @param {number} [y] - The y coordinate in world space.\n   * @param {number} [z] - The z coordinate in world space.\n   */\n  lookAt(x, y, z) {\n    // This method does not support objects having non-uniformly-scaled parent(s)\n\n    if (x.isVector3) {\n      _target.copy(x);\n    } else {\n      _target.set(x, y, z);\n    }\n    const parent = this.parent;\n    this.updateWorldMatrix(true, false);\n    _position$3.setFromMatrixPosition(this.matrixWorld);\n    if (this.isCamera || this.isLight) {\n      _m1$1.lookAt(_position$3, _target, this.up);\n    } else {\n      _m1$1.lookAt(_target, _position$3, this.up);\n    }\n    this.quaternion.setFromRotationMatrix(_m1$1);\n    if (parent) {\n      _m1$1.extractRotation(parent.matrixWorld);\n      _q1.setFromRotationMatrix(_m1$1);\n      this.quaternion.premultiply(_q1.invert());\n    }\n  }\n\n  /**\n   * Adds the given 3D object as a child to this 3D object. An arbitrary number of\n   * objects may be added. Any current parent on an object passed in here will be\n   * removed, since an object can have at most one parent.\n   *\n   * @fires Object3D#added\n   * @fires Object3D#childadded\n   * @param {Object3D} object - The 3D object to add.\n   * @return {Object3D} A reference to this instance.\n   */\n  add(object) {\n    if (arguments.length > 1) {\n      for (let i = 0; i < arguments.length; i++) {\n        this.add(arguments[i]);\n      }\n      return this;\n    }\n    if (object === this) {\n      console.error('THREE.Object3D.add: object can\\'t be added as a child of itself.', object);\n      return this;\n    }\n    if (object && object.isObject3D) {\n      object.removeFromParent();\n      object.parent = this;\n      this.children.push(object);\n      object.dispatchEvent(_addedEvent);\n      _childaddedEvent.child = object;\n      this.dispatchEvent(_childaddedEvent);\n      _childaddedEvent.child = null;\n    } else {\n      console.error('THREE.Object3D.add: object not an instance of THREE.Object3D.', object);\n    }\n    return this;\n  }\n\n  /**\n   * Removes the given 3D object as child from this 3D object.\n   * An arbitrary number of objects may be removed.\n   *\n   * @fires Object3D#removed\n   * @fires Object3D#childremoved\n   * @param {Object3D} object - The 3D object to remove.\n   * @return {Object3D} A reference to this instance.\n   */\n  remove(object) {\n    if (arguments.length > 1) {\n      for (let i = 0; i < arguments.length; i++) {\n        this.remove(arguments[i]);\n      }\n      return this;\n    }\n    const index = this.children.indexOf(object);\n    if (index !== -1) {\n      object.parent = null;\n      this.children.splice(index, 1);\n      object.dispatchEvent(_removedEvent);\n      _childremovedEvent.child = object;\n      this.dispatchEvent(_childremovedEvent);\n      _childremovedEvent.child = null;\n    }\n    return this;\n  }\n\n  /**\n   * Removes this 3D object from its current parent.\n   *\n   * @fires Object3D#removed\n   * @fires Object3D#childremoved\n   * @return {Object3D} A reference to this instance.\n   */\n  removeFromParent() {\n    const parent = this.parent;\n    if (parent !== null) {\n      parent.remove(this);\n    }\n    return this;\n  }\n\n  /**\n   * Removes all child objects.\n   *\n   * @fires Object3D#removed\n   * @fires Object3D#childremoved\n   * @return {Object3D} A reference to this instance.\n   */\n  clear() {\n    return this.remove(...this.children);\n  }\n\n  /**\n   * Adds the given 3D object as a child of this 3D object, while maintaining the object's world\n   * transform. This method does not support scene graphs having non-uniformly-scaled nodes(s).\n   *\n   * @fires Object3D#added\n   * @fires Object3D#childadded\n   * @param {Object3D} object - The 3D object to attach.\n   * @return {Object3D} A reference to this instance.\n   */\n  attach(object) {\n    // adds object as a child of this, while maintaining the object's world transform\n\n    // Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)\n\n    this.updateWorldMatrix(true, false);\n    _m1$1.copy(this.matrixWorld).invert();\n    if (object.parent !== null) {\n      object.parent.updateWorldMatrix(true, false);\n      _m1$1.multiply(object.parent.matrixWorld);\n    }\n    object.applyMatrix4(_m1$1);\n    object.removeFromParent();\n    object.parent = this;\n    this.children.push(object);\n    object.updateWorldMatrix(false, true);\n    object.dispatchEvent(_addedEvent);\n    _childaddedEvent.child = object;\n    this.dispatchEvent(_childaddedEvent);\n    _childaddedEvent.child = null;\n    return this;\n  }\n\n  /**\n   * Searches through the 3D object and its children, starting with the 3D object\n   * itself, and returns the first with a matching ID.\n   *\n   * @param {number} id - The id.\n   * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.\n   */\n  getObjectById(id) {\n    return this.getObjectByProperty('id', id);\n  }\n\n  /**\n   * Searches through the 3D object and its children, starting with the 3D object\n   * itself, and returns the first with a matching name.\n   *\n   * @param {string} name - The name.\n   * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.\n   */\n  getObjectByName(name) {\n    return this.getObjectByProperty('name', name);\n  }\n\n  /**\n   * Searches through the 3D object and its children, starting with the 3D object\n   * itself, and returns the first with a matching property value.\n   *\n   * @param {string} name - The name of the property.\n   * @param {any} value - The value.\n   * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.\n   */\n  getObjectByProperty(name, value) {\n    if (this[name] === value) return this;\n    for (let i = 0, l = this.children.length; i < l; i++) {\n      const child = this.children[i];\n      const object = child.getObjectByProperty(name, value);\n      if (object !== undefined) {\n        return object;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Searches through the 3D object and its children, starting with the 3D object\n   * itself, and returns all 3D objects with a matching property value.\n   *\n   * @param {string} name - The name of the property.\n   * @param {any} value - The value.\n   * @param {Array<Object3D>} result - The method stores the result in this array.\n   * @return {Array<Object3D>} The found 3D objects.\n   */\n  getObjectsByProperty(name, value) {\n    let result = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    if (this[name] === value) result.push(this);\n    const children = this.children;\n    for (let i = 0, l = children.length; i < l; i++) {\n      children[i].getObjectsByProperty(name, value, result);\n    }\n    return result;\n  }\n\n  /**\n   * Returns a vector representing the position of the 3D object in world space.\n   *\n   * @param {Vector3} target - The target vector the result is stored to.\n   * @return {Vector3} The 3D object's position in world space.\n   */\n  getWorldPosition(target) {\n    this.updateWorldMatrix(true, false);\n    return target.setFromMatrixPosition(this.matrixWorld);\n  }\n\n  /**\n   * Returns a Quaternion representing the position of the 3D object in world space.\n   *\n   * @param {Quaternion} target - The target Quaternion the result is stored to.\n   * @return {Quaternion} The 3D object's rotation in world space.\n   */\n  getWorldQuaternion(target) {\n    this.updateWorldMatrix(true, false);\n    this.matrixWorld.decompose(_position$3, target, _scale$2);\n    return target;\n  }\n\n  /**\n   * Returns a vector representing the scale of the 3D object in world space.\n   *\n   * @param {Vector3} target - The target vector the result is stored to.\n   * @return {Vector3} The 3D object's scale in world space.\n   */\n  getWorldScale(target) {\n    this.updateWorldMatrix(true, false);\n    this.matrixWorld.decompose(_position$3, _quaternion$2, target);\n    return target;\n  }\n\n  /**\n   * Returns a vector representing the (\"look\") direction of the 3D object in world space.\n   *\n   * @param {Vector3} target - The target vector the result is stored to.\n   * @return {Vector3} The 3D object's direction in world space.\n   */\n  getWorldDirection(target) {\n    this.updateWorldMatrix(true, false);\n    const e = this.matrixWorld.elements;\n    return target.set(e[8], e[9], e[10]).normalize();\n  }\n\n  /**\n   * Abstract method to get intersections between a casted ray and this\n   * 3D object. Renderable 3D objects such as {@link Mesh}, {@link Line} or {@link Points}\n   * implement this method in order to use raycasting.\n   *\n   * @abstract\n   * @param {Raycaster} raycaster - The raycaster.\n   * @param {Array<Object>} intersects - An array holding the result of the method.\n   */\n  raycast(/* raycaster, intersects */) {}\n\n  /**\n   * Executes the callback on this 3D object and all descendants.\n   *\n   * Note: Modifying the scene graph inside the callback is discouraged.\n   *\n   * @param {Function} callback - A callback function that allows to process the current 3D object.\n   */\n  traverse(callback) {\n    callback(this);\n    const children = this.children;\n    for (let i = 0, l = children.length; i < l; i++) {\n      children[i].traverse(callback);\n    }\n  }\n\n  /**\n   * Like {@link Object3D#traverse}, but the callback will only be executed for visible 3D objects.\n   * Descendants of invisible 3D objects are not traversed.\n   *\n   * Note: Modifying the scene graph inside the callback is discouraged.\n   *\n   * @param {Function} callback - A callback function that allows to process the current 3D object.\n   */\n  traverseVisible(callback) {\n    if (this.visible === false) return;\n    callback(this);\n    const children = this.children;\n    for (let i = 0, l = children.length; i < l; i++) {\n      children[i].traverseVisible(callback);\n    }\n  }\n\n  /**\n   * Like {@link Object3D#traverse}, but the callback will only be executed for all ancestors.\n   *\n   * Note: Modifying the scene graph inside the callback is discouraged.\n   *\n   * @param {Function} callback - A callback function that allows to process the current 3D object.\n   */\n  traverseAncestors(callback) {\n    const parent = this.parent;\n    if (parent !== null) {\n      callback(parent);\n      parent.traverseAncestors(callback);\n    }\n  }\n\n  /**\n   * Updates the transformation matrix in local space by computing it from the current\n   * position, rotation and scale values.\n   */\n  updateMatrix() {\n    this.matrix.compose(this.position, this.quaternion, this.scale);\n    this.matrixWorldNeedsUpdate = true;\n  }\n\n  /**\n   * Updates the transformation matrix in world space of this 3D objects and its descendants.\n   *\n   * To ensure correct results, this method also recomputes the 3D object's transformation matrix in\n   * local space. The computation of the local and world matrix can be controlled with the\n   * {@link Object3D#matrixAutoUpdate} and {@link Object3D#matrixWorldAutoUpdate} flags which are both\n   * `true` by default.  Set these flags to `false` if you need more control over the update matrix process.\n   *\n   * @param {boolean} [force=false] - When set to `true`, a recomputation of world matrices is forced even\n   * when {@link Object3D#matrixWorldAutoUpdate} is set to `false`.\n   */\n  updateMatrixWorld(force) {\n    if (this.matrixAutoUpdate) this.updateMatrix();\n    if (this.matrixWorldNeedsUpdate || force) {\n      if (this.matrixWorldAutoUpdate === true) {\n        if (this.parent === null) {\n          this.matrixWorld.copy(this.matrix);\n        } else {\n          this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n        }\n      }\n      this.matrixWorldNeedsUpdate = false;\n      force = true;\n    }\n\n    // make sure descendants are updated if required\n\n    const children = this.children;\n    for (let i = 0, l = children.length; i < l; i++) {\n      const child = children[i];\n      child.updateMatrixWorld(force);\n    }\n  }\n\n  /**\n   * An alternative version of {@link Object3D#updateMatrixWorld} with more control over the\n   * update of ancestor and descendant nodes.\n   *\n   * @param {boolean} [updateParents=false] Whether ancestor nodes should be updated or not.\n   * @param {boolean} [updateChildren=false] Whether descendant nodes should be updated or not.\n   */\n  updateWorldMatrix(updateParents, updateChildren) {\n    const parent = this.parent;\n    if (updateParents === true && parent !== null) {\n      parent.updateWorldMatrix(true, false);\n    }\n    if (this.matrixAutoUpdate) this.updateMatrix();\n    if (this.matrixWorldAutoUpdate === true) {\n      if (this.parent === null) {\n        this.matrixWorld.copy(this.matrix);\n      } else {\n        this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n      }\n    }\n\n    // make sure descendants are updated\n\n    if (updateChildren === true) {\n      const children = this.children;\n      for (let i = 0, l = children.length; i < l; i++) {\n        const child = children[i];\n        child.updateWorldMatrix(false, true);\n      }\n    }\n  }\n\n  /**\n   * Serializes the 3D object into JSON.\n   *\n   * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\n   * @return {Object} A JSON object representing the serialized 3D object.\n   * @see {@link ObjectLoader#parse}\n   */\n  toJSON(meta) {\n    // meta is a string when called from JSON.stringify\n    const isRootObject = meta === undefined || typeof meta === 'string';\n    const output = {};\n\n    // meta is a hash used to collect geometries, materials.\n    // not providing it implies that this is the root object\n    // being serialized.\n    if (isRootObject) {\n      // initialize meta obj\n      meta = {\n        geometries: {},\n        materials: {},\n        textures: {},\n        images: {},\n        shapes: {},\n        skeletons: {},\n        animations: {},\n        nodes: {}\n      };\n      output.metadata = {\n        version: 4.6,\n        type: 'Object',\n        generator: 'Object3D.toJSON'\n      };\n    }\n\n    // standard Object3D serialization\n\n    const object = {};\n    object.uuid = this.uuid;\n    object.type = this.type;\n    if (this.name !== '') object.name = this.name;\n    if (this.castShadow === true) object.castShadow = true;\n    if (this.receiveShadow === true) object.receiveShadow = true;\n    if (this.visible === false) object.visible = false;\n    if (this.frustumCulled === false) object.frustumCulled = false;\n    if (this.renderOrder !== 0) object.renderOrder = this.renderOrder;\n    if (Object.keys(this.userData).length > 0) object.userData = this.userData;\n    object.layers = this.layers.mask;\n    object.matrix = this.matrix.toArray();\n    object.up = this.up.toArray();\n    if (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false;\n\n    // object specific properties\n\n    if (this.isInstancedMesh) {\n      object.type = 'InstancedMesh';\n      object.count = this.count;\n      object.instanceMatrix = this.instanceMatrix.toJSON();\n      if (this.instanceColor !== null) object.instanceColor = this.instanceColor.toJSON();\n    }\n    if (this.isBatchedMesh) {\n      object.type = 'BatchedMesh';\n      object.perObjectFrustumCulled = this.perObjectFrustumCulled;\n      object.sortObjects = this.sortObjects;\n      object.drawRanges = this._drawRanges;\n      object.reservedRanges = this._reservedRanges;\n      object.geometryInfo = this._geometryInfo.map(info => ({\n        ...info,\n        boundingBox: info.boundingBox ? {\n          min: info.boundingBox.min.toArray(),\n          max: info.boundingBox.max.toArray()\n        } : undefined,\n        boundingSphere: info.boundingSphere ? {\n          radius: info.boundingSphere.radius,\n          center: info.boundingSphere.center.toArray()\n        } : undefined\n      }));\n      object.instanceInfo = this._instanceInfo.map(info => ({\n        ...info\n      }));\n      object.availableInstanceIds = this._availableInstanceIds.slice();\n      object.availableGeometryIds = this._availableGeometryIds.slice();\n      object.nextIndexStart = this._nextIndexStart;\n      object.nextVertexStart = this._nextVertexStart;\n      object.geometryCount = this._geometryCount;\n      object.maxInstanceCount = this._maxInstanceCount;\n      object.maxVertexCount = this._maxVertexCount;\n      object.maxIndexCount = this._maxIndexCount;\n      object.geometryInitialized = this._geometryInitialized;\n      object.matricesTexture = this._matricesTexture.toJSON(meta);\n      object.indirectTexture = this._indirectTexture.toJSON(meta);\n      if (this._colorsTexture !== null) {\n        object.colorsTexture = this._colorsTexture.toJSON(meta);\n      }\n      if (this.boundingSphere !== null) {\n        object.boundingSphere = {\n          center: this.boundingSphere.center.toArray(),\n          radius: this.boundingSphere.radius\n        };\n      }\n      if (this.boundingBox !== null) {\n        object.boundingBox = {\n          min: this.boundingBox.min.toArray(),\n          max: this.boundingBox.max.toArray()\n        };\n      }\n    }\n\n    //\n\n    function serialize(library, element) {\n      if (library[element.uuid] === undefined) {\n        library[element.uuid] = element.toJSON(meta);\n      }\n      return element.uuid;\n    }\n    if (this.isScene) {\n      if (this.background) {\n        if (this.background.isColor) {\n          object.background = this.background.toJSON();\n        } else if (this.background.isTexture) {\n          object.background = this.background.toJSON(meta).uuid;\n        }\n      }\n      if (this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true) {\n        object.environment = this.environment.toJSON(meta).uuid;\n      }\n    } else if (this.isMesh || this.isLine || this.isPoints) {\n      object.geometry = serialize(meta.geometries, this.geometry);\n      const parameters = this.geometry.parameters;\n      if (parameters !== undefined && parameters.shapes !== undefined) {\n        const shapes = parameters.shapes;\n        if (Array.isArray(shapes)) {\n          for (let i = 0, l = shapes.length; i < l; i++) {\n            const shape = shapes[i];\n            serialize(meta.shapes, shape);\n          }\n        } else {\n          serialize(meta.shapes, shapes);\n        }\n      }\n    }\n    if (this.isSkinnedMesh) {\n      object.bindMode = this.bindMode;\n      object.bindMatrix = this.bindMatrix.toArray();\n      if (this.skeleton !== undefined) {\n        serialize(meta.skeletons, this.skeleton);\n        object.skeleton = this.skeleton.uuid;\n      }\n    }\n    if (this.material !== undefined) {\n      if (Array.isArray(this.material)) {\n        const uuids = [];\n        for (let i = 0, l = this.material.length; i < l; i++) {\n          uuids.push(serialize(meta.materials, this.material[i]));\n        }\n        object.material = uuids;\n      } else {\n        object.material = serialize(meta.materials, this.material);\n      }\n    }\n\n    //\n\n    if (this.children.length > 0) {\n      object.children = [];\n      for (let i = 0; i < this.children.length; i++) {\n        object.children.push(this.children[i].toJSON(meta).object);\n      }\n    }\n\n    //\n\n    if (this.animations.length > 0) {\n      object.animations = [];\n      for (let i = 0; i < this.animations.length; i++) {\n        const animation = this.animations[i];\n        object.animations.push(serialize(meta.animations, animation));\n      }\n    }\n    if (isRootObject) {\n      const geometries = extractFromCache(meta.geometries);\n      const materials = extractFromCache(meta.materials);\n      const textures = extractFromCache(meta.textures);\n      const images = extractFromCache(meta.images);\n      const shapes = extractFromCache(meta.shapes);\n      const skeletons = extractFromCache(meta.skeletons);\n      const animations = extractFromCache(meta.animations);\n      const nodes = extractFromCache(meta.nodes);\n      if (geometries.length > 0) output.geometries = geometries;\n      if (materials.length > 0) output.materials = materials;\n      if (textures.length > 0) output.textures = textures;\n      if (images.length > 0) output.images = images;\n      if (shapes.length > 0) output.shapes = shapes;\n      if (skeletons.length > 0) output.skeletons = skeletons;\n      if (animations.length > 0) output.animations = animations;\n      if (nodes.length > 0) output.nodes = nodes;\n    }\n    output.object = object;\n    return output;\n\n    // extract data from the cache hash\n    // remove metadata on each item\n    // and return as array\n    function extractFromCache(cache) {\n      const values = [];\n      for (const key in cache) {\n        const data = cache[key];\n        delete data.metadata;\n        values.push(data);\n      }\n      return values;\n    }\n  }\n\n  /**\n   * Returns a new 3D object with copied values from this instance.\n   *\n   * @param {boolean} [recursive=true] - When set to `true`, descendants of the 3D object are also cloned.\n   * @return {Object3D} A clone of this instance.\n   */\n  clone(recursive) {\n    return new this.constructor().copy(this, recursive);\n  }\n\n  /**\n   * Copies the values of the given 3D object to this instance.\n   *\n   * @param {Object3D} source - The 3D object to copy.\n   * @param {boolean} [recursive=true] - When set to `true`, descendants of the 3D object are cloned.\n   * @return {Object3D} A reference to this instance.\n   */\n  copy(source) {\n    let recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    this.name = source.name;\n    this.up.copy(source.up);\n    this.position.copy(source.position);\n    this.rotation.order = source.rotation.order;\n    this.quaternion.copy(source.quaternion);\n    this.scale.copy(source.scale);\n    this.matrix.copy(source.matrix);\n    this.matrixWorld.copy(source.matrixWorld);\n    this.matrixAutoUpdate = source.matrixAutoUpdate;\n    this.matrixWorldAutoUpdate = source.matrixWorldAutoUpdate;\n    this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n    this.layers.mask = source.layers.mask;\n    this.visible = source.visible;\n    this.castShadow = source.castShadow;\n    this.receiveShadow = source.receiveShadow;\n    this.frustumCulled = source.frustumCulled;\n    this.renderOrder = source.renderOrder;\n    this.animations = source.animations.slice();\n    this.userData = JSON.parse(JSON.stringify(source.userData));\n    if (recursive === true) {\n      for (let i = 0; i < source.children.length; i++) {\n        const child = source.children[i];\n        this.add(child.clone());\n      }\n    }\n    return this;\n  }\n}\n\n/**\n * The default up direction for objects, also used as the default\n * position for {@link DirectionalLight} and {@link HemisphereLight}.\n *\n * @static\n * @type {Vector3}\n * @default (0,1,0)\n */\nObject3D.DEFAULT_UP = /*@__PURE__*/new Vector3(0, 1, 0);\n\n/**\n * The default setting for {@link Object3D#matrixAutoUpdate} for\n * newly created 3D objects.\n *\n * @static\n * @type {boolean}\n * @default true\n */\nObject3D.DEFAULT_MATRIX_AUTO_UPDATE = true;\n\n/**\n * The default setting for {@link Object3D#matrixWorldAutoUpdate} for\n * newly created 3D objects.\n *\n * @static\n * @type {boolean}\n * @default true\n */\nObject3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;\nconst _v0$1 = /*@__PURE__*/new Vector3();\nconst _v1$3 = /*@__PURE__*/new Vector3();\nconst _v2$2 = /*@__PURE__*/new Vector3();\nconst _v3$2 = /*@__PURE__*/new Vector3();\nconst _vab = /*@__PURE__*/new Vector3();\nconst _vac = /*@__PURE__*/new Vector3();\nconst _vbc = /*@__PURE__*/new Vector3();\nconst _vap = /*@__PURE__*/new Vector3();\nconst _vbp = /*@__PURE__*/new Vector3();\nconst _vcp = /*@__PURE__*/new Vector3();\nconst _v40 = /*@__PURE__*/new Vector4();\nconst _v41 = /*@__PURE__*/new Vector4();\nconst _v42 = /*@__PURE__*/new Vector4();\n\n/**\n * A geometric triangle as defined by three vectors representing its three corners.\n */\nclass Triangle {\n  /**\n   * Constructs a new triangle.\n   *\n   * @param {Vector3} [a=(0,0,0)] - The first corner of the triangle.\n   * @param {Vector3} [b=(0,0,0)] - The second corner of the triangle.\n   * @param {Vector3} [c=(0,0,0)] - The third corner of the triangle.\n   */\n  constructor() {\n    let a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3();\n    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Vector3();\n    /**\n     * The first corner of the triangle.\n     *\n     * @type {Vector3}\n     */\n    this.a = a;\n\n    /**\n     * The second corner of the triangle.\n     *\n     * @type {Vector3}\n     */\n    this.b = b;\n\n    /**\n     * The third corner of the triangle.\n     *\n     * @type {Vector3}\n     */\n    this.c = c;\n  }\n\n  /**\n   * Computes the normal vector of a triangle.\n   *\n   * @param {Vector3} a - The first corner of the triangle.\n   * @param {Vector3} b - The second corner of the triangle.\n   * @param {Vector3} c - The third corner of the triangle.\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {Vector3} The triangle's normal.\n   */\n  static getNormal(a, b, c, target) {\n    target.subVectors(c, b);\n    _v0$1.subVectors(a, b);\n    target.cross(_v0$1);\n    const targetLengthSq = target.lengthSq();\n    if (targetLengthSq > 0) {\n      return target.multiplyScalar(1 / Math.sqrt(targetLengthSq));\n    }\n    return target.set(0, 0, 0);\n  }\n\n  /**\n   * Computes a barycentric coordinates from the given vector.\n   * Returns `null` if the triangle is degenerate.\n   *\n   * @param {Vector3} point - A point in 3D space.\n   * @param {Vector3} a - The first corner of the triangle.\n   * @param {Vector3} b - The second corner of the triangle.\n   * @param {Vector3} c - The third corner of the triangle.\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {?Vector3} The barycentric coordinates for the given point\n   */\n  static getBarycoord(point, a, b, c, target) {\n    // based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\n    _v0$1.subVectors(c, a);\n    _v1$3.subVectors(b, a);\n    _v2$2.subVectors(point, a);\n    const dot00 = _v0$1.dot(_v0$1);\n    const dot01 = _v0$1.dot(_v1$3);\n    const dot02 = _v0$1.dot(_v2$2);\n    const dot11 = _v1$3.dot(_v1$3);\n    const dot12 = _v1$3.dot(_v2$2);\n    const denom = dot00 * dot11 - dot01 * dot01;\n\n    // collinear or singular triangle\n    if (denom === 0) {\n      target.set(0, 0, 0);\n      return null;\n    }\n    const invDenom = 1 / denom;\n    const u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n    const v = (dot00 * dot12 - dot01 * dot02) * invDenom;\n\n    // barycentric coordinates must always sum to 1\n    return target.set(1 - u - v, v, u);\n  }\n\n  /**\n   * Returns `true` if the given point, when projected onto the plane of the\n   * triangle, lies within the triangle.\n   *\n   * @param {Vector3} point - The point in 3D space to test.\n   * @param {Vector3} a - The first corner of the triangle.\n   * @param {Vector3} b - The second corner of the triangle.\n   * @param {Vector3} c - The third corner of the triangle.\n   * @return {boolean} Whether the given point, when projected onto the plane of the\n   * triangle, lies within the triangle or not.\n   */\n  static containsPoint(point, a, b, c) {\n    // if the triangle is degenerate then we can't contain a point\n    if (this.getBarycoord(point, a, b, c, _v3$2) === null) {\n      return false;\n    }\n    return _v3$2.x >= 0 && _v3$2.y >= 0 && _v3$2.x + _v3$2.y <= 1;\n  }\n\n  /**\n   * Computes the value barycentrically interpolated for the given point on the\n   * triangle. Returns `null` if the triangle is degenerate.\n   *\n   * @param {Vector3} point - Position of interpolated point.\n   * @param {Vector3} p1 - The first corner of the triangle.\n   * @param {Vector3} p2 - The second corner of the triangle.\n   * @param {Vector3} p3 - The third corner of the triangle.\n   * @param {Vector3} v1 - Value to interpolate of first vertex.\n   * @param {Vector3} v2 - Value to interpolate of second vertex.\n   * @param {Vector3} v3 - Value to interpolate of third vertex.\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {?Vector3} The interpolated value.\n   */\n  static getInterpolation(point, p1, p2, p3, v1, v2, v3, target) {\n    if (this.getBarycoord(point, p1, p2, p3, _v3$2) === null) {\n      target.x = 0;\n      target.y = 0;\n      if ('z' in target) target.z = 0;\n      if ('w' in target) target.w = 0;\n      return null;\n    }\n    target.setScalar(0);\n    target.addScaledVector(v1, _v3$2.x);\n    target.addScaledVector(v2, _v3$2.y);\n    target.addScaledVector(v3, _v3$2.z);\n    return target;\n  }\n\n  /**\n   * Computes the value barycentrically interpolated for the given attribute and indices.\n   *\n   * @param {BufferAttribute} attr - The attribute to interpolate.\n   * @param {number} i1 - Index of first vertex.\n   * @param {number} i2 - Index of second vertex.\n   * @param {number} i3 - Index of third vertex.\n   * @param {Vector3} barycoord - The barycoordinate value to use to interpolate.\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {Vector3} The interpolated attribute value.\n   */\n  static getInterpolatedAttribute(attr, i1, i2, i3, barycoord, target) {\n    _v40.setScalar(0);\n    _v41.setScalar(0);\n    _v42.setScalar(0);\n    _v40.fromBufferAttribute(attr, i1);\n    _v41.fromBufferAttribute(attr, i2);\n    _v42.fromBufferAttribute(attr, i3);\n    target.setScalar(0);\n    target.addScaledVector(_v40, barycoord.x);\n    target.addScaledVector(_v41, barycoord.y);\n    target.addScaledVector(_v42, barycoord.z);\n    return target;\n  }\n\n  /**\n   * Returns `true` if the triangle is oriented towards the given direction.\n   *\n   * @param {Vector3} a - The first corner of the triangle.\n   * @param {Vector3} b - The second corner of the triangle.\n   * @param {Vector3} c - The third corner of the triangle.\n   * @param {Vector3} direction - The (normalized) direction vector.\n   * @return {boolean} Whether the triangle is oriented towards the given direction or not.\n   */\n  static isFrontFacing(a, b, c, direction) {\n    _v0$1.subVectors(c, b);\n    _v1$3.subVectors(a, b);\n\n    // strictly front facing\n    return _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;\n  }\n\n  /**\n   * Sets the triangle's vertices by copying the given values.\n   *\n   * @param {Vector3} a - The first corner of the triangle.\n   * @param {Vector3} b - The second corner of the triangle.\n   * @param {Vector3} c - The third corner of the triangle.\n   * @return {Triangle} A reference to this triangle.\n   */\n  set(a, b, c) {\n    this.a.copy(a);\n    this.b.copy(b);\n    this.c.copy(c);\n    return this;\n  }\n\n  /**\n   * Sets the triangle's vertices by copying the given array values.\n   *\n   * @param {Array<Vector3>} points - An array with 3D points.\n   * @param {number} i0 - The array index representing the first corner of the triangle.\n   * @param {number} i1 - The array index representing the second corner of the triangle.\n   * @param {number} i2 - The array index representing the third corner of the triangle.\n   * @return {Triangle} A reference to this triangle.\n   */\n  setFromPointsAndIndices(points, i0, i1, i2) {\n    this.a.copy(points[i0]);\n    this.b.copy(points[i1]);\n    this.c.copy(points[i2]);\n    return this;\n  }\n\n  /**\n   * Sets the triangle's vertices by copying the given attribute values.\n   *\n   * @param {BufferAttribute} attribute - A buffer attribute with 3D points data.\n   * @param {number} i0 - The attribute index representing the first corner of the triangle.\n   * @param {number} i1 - The attribute index representing the second corner of the triangle.\n   * @param {number} i2 - The attribute index representing the third corner of the triangle.\n   * @return {Triangle} A reference to this triangle.\n   */\n  setFromAttributeAndIndices(attribute, i0, i1, i2) {\n    this.a.fromBufferAttribute(attribute, i0);\n    this.b.fromBufferAttribute(attribute, i1);\n    this.c.fromBufferAttribute(attribute, i2);\n    return this;\n  }\n\n  /**\n   * Returns a new triangle with copied values from this instance.\n   *\n   * @return {Triangle} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  /**\n   * Copies the values of the given triangle to this instance.\n   *\n   * @param {Triangle} triangle - The triangle to copy.\n   * @return {Triangle} A reference to this triangle.\n   */\n  copy(triangle) {\n    this.a.copy(triangle.a);\n    this.b.copy(triangle.b);\n    this.c.copy(triangle.c);\n    return this;\n  }\n\n  /**\n   * Computes the area of the triangle.\n   *\n   * @return {number} The triangle's area.\n   */\n  getArea() {\n    _v0$1.subVectors(this.c, this.b);\n    _v1$3.subVectors(this.a, this.b);\n    return _v0$1.cross(_v1$3).length() * 0.5;\n  }\n\n  /**\n   * Computes the midpoint of the triangle.\n   *\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {Vector3} The triangle's midpoint.\n   */\n  getMidpoint(target) {\n    return target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);\n  }\n\n  /**\n   * Computes the normal of the triangle.\n   *\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {Vector3} The triangle's normal.\n   */\n  getNormal(target) {\n    return Triangle.getNormal(this.a, this.b, this.c, target);\n  }\n\n  /**\n   * Computes a plane the triangle lies within.\n   *\n   * @param {Plane} target - The target vector that is used to store the method's result.\n   * @return {Plane} The plane the triangle lies within.\n   */\n  getPlane(target) {\n    return target.setFromCoplanarPoints(this.a, this.b, this.c);\n  }\n\n  /**\n   * Computes a barycentric coordinates from the given vector.\n   * Returns `null` if the triangle is degenerate.\n   *\n   * @param {Vector3} point - A point in 3D space.\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {?Vector3} The barycentric coordinates for the given point\n   */\n  getBarycoord(point, target) {\n    return Triangle.getBarycoord(point, this.a, this.b, this.c, target);\n  }\n\n  /**\n   * Computes the value barycentrically interpolated for the given point on the\n   * triangle. Returns `null` if the triangle is degenerate.\n   *\n   * @param {Vector3} point - Position of interpolated point.\n   * @param {Vector3} v1 - Value to interpolate of first vertex.\n   * @param {Vector3} v2 - Value to interpolate of second vertex.\n   * @param {Vector3} v3 - Value to interpolate of third vertex.\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {?Vector3} The interpolated value.\n   */\n  getInterpolation(point, v1, v2, v3, target) {\n    return Triangle.getInterpolation(point, this.a, this.b, this.c, v1, v2, v3, target);\n  }\n\n  /**\n   * Returns `true` if the given point, when projected onto the plane of the\n   * triangle, lies within the triangle.\n   *\n   * @param {Vector3} point - The point in 3D space to test.\n   * @return {boolean} Whether the given point, when projected onto the plane of the\n   * triangle, lies within the triangle or not.\n   */\n  containsPoint(point) {\n    return Triangle.containsPoint(point, this.a, this.b, this.c);\n  }\n\n  /**\n   * Returns `true` if the triangle is oriented towards the given direction.\n   *\n   * @param {Vector3} direction - The (normalized) direction vector.\n   * @return {boolean} Whether the triangle is oriented towards the given direction or not.\n   */\n  isFrontFacing(direction) {\n    return Triangle.isFrontFacing(this.a, this.b, this.c, direction);\n  }\n\n  /**\n   * Returns `true` if this triangle intersects with the given box.\n   *\n   * @param {Box3} box - The box to intersect.\n   * @return {boolean} Whether this triangle intersects with the given box or not.\n   */\n  intersectsBox(box) {\n    return box.intersectsTriangle(this);\n  }\n\n  /**\n   * Returns the closest point on the triangle to the given point.\n   *\n   * @param {Vector3} p - The point to compute the closest point for.\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {Vector3} The closest point on the triangle.\n   */\n  closestPointToPoint(p, target) {\n    const a = this.a,\n      b = this.b,\n      c = this.c;\n    let v, w;\n\n    // algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n    // published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n    // under the accompanying license; see chapter 5.1.5 for detailed explanation.\n    // basically, we're distinguishing which of the voronoi regions of the triangle\n    // the point lies in with the minimum amount of redundant computation.\n\n    _vab.subVectors(b, a);\n    _vac.subVectors(c, a);\n    _vap.subVectors(p, a);\n    const d1 = _vab.dot(_vap);\n    const d2 = _vac.dot(_vap);\n    if (d1 <= 0 && d2 <= 0) {\n      // vertex region of A; barycentric coords (1, 0, 0)\n      return target.copy(a);\n    }\n    _vbp.subVectors(p, b);\n    const d3 = _vab.dot(_vbp);\n    const d4 = _vac.dot(_vbp);\n    if (d3 >= 0 && d4 <= d3) {\n      // vertex region of B; barycentric coords (0, 1, 0)\n      return target.copy(b);\n    }\n    const vc = d1 * d4 - d3 * d2;\n    if (vc <= 0 && d1 >= 0 && d3 <= 0) {\n      v = d1 / (d1 - d3);\n      // edge region of AB; barycentric coords (1-v, v, 0)\n      return target.copy(a).addScaledVector(_vab, v);\n    }\n    _vcp.subVectors(p, c);\n    const d5 = _vab.dot(_vcp);\n    const d6 = _vac.dot(_vcp);\n    if (d6 >= 0 && d5 <= d6) {\n      // vertex region of C; barycentric coords (0, 0, 1)\n      return target.copy(c);\n    }\n    const vb = d5 * d2 - d1 * d6;\n    if (vb <= 0 && d2 >= 0 && d6 <= 0) {\n      w = d2 / (d2 - d6);\n      // edge region of AC; barycentric coords (1-w, 0, w)\n      return target.copy(a).addScaledVector(_vac, w);\n    }\n    const va = d3 * d6 - d5 * d4;\n    if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {\n      _vbc.subVectors(c, b);\n      w = (d4 - d3) / (d4 - d3 + (d5 - d6));\n      // edge region of BC; barycentric coords (0, 1-w, w)\n      return target.copy(b).addScaledVector(_vbc, w); // edge region of BC\n    }\n\n    // face region\n    const denom = 1 / (va + vb + vc);\n    // u = va * denom\n    v = vb * denom;\n    w = vc * denom;\n    return target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);\n  }\n\n  /**\n   * Returns `true` if this triangle is equal with the given one.\n   *\n   * @param {Triangle} triangle - The triangle to test for equality.\n   * @return {boolean} Whether this triangle is equal with the given one.\n   */\n  equals(triangle) {\n    return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);\n  }\n}\nconst _colorKeywords = {\n  'aliceblue': 0xF0F8FF,\n  'antiquewhite': 0xFAEBD7,\n  'aqua': 0x00FFFF,\n  'aquamarine': 0x7FFFD4,\n  'azure': 0xF0FFFF,\n  'beige': 0xF5F5DC,\n  'bisque': 0xFFE4C4,\n  'black': 0x000000,\n  'blanchedalmond': 0xFFEBCD,\n  'blue': 0x0000FF,\n  'blueviolet': 0x8A2BE2,\n  'brown': 0xA52A2A,\n  'burlywood': 0xDEB887,\n  'cadetblue': 0x5F9EA0,\n  'chartreuse': 0x7FFF00,\n  'chocolate': 0xD2691E,\n  'coral': 0xFF7F50,\n  'cornflowerblue': 0x6495ED,\n  'cornsilk': 0xFFF8DC,\n  'crimson': 0xDC143C,\n  'cyan': 0x00FFFF,\n  'darkblue': 0x00008B,\n  'darkcyan': 0x008B8B,\n  'darkgoldenrod': 0xB8860B,\n  'darkgray': 0xA9A9A9,\n  'darkgreen': 0x006400,\n  'darkgrey': 0xA9A9A9,\n  'darkkhaki': 0xBDB76B,\n  'darkmagenta': 0x8B008B,\n  'darkolivegreen': 0x556B2F,\n  'darkorange': 0xFF8C00,\n  'darkorchid': 0x9932CC,\n  'darkred': 0x8B0000,\n  'darksalmon': 0xE9967A,\n  'darkseagreen': 0x8FBC8F,\n  'darkslateblue': 0x483D8B,\n  'darkslategray': 0x2F4F4F,\n  'darkslategrey': 0x2F4F4F,\n  'darkturquoise': 0x00CED1,\n  'darkviolet': 0x9400D3,\n  'deeppink': 0xFF1493,\n  'deepskyblue': 0x00BFFF,\n  'dimgray': 0x696969,\n  'dimgrey': 0x696969,\n  'dodgerblue': 0x1E90FF,\n  'firebrick': 0xB22222,\n  'floralwhite': 0xFFFAF0,\n  'forestgreen': 0x228B22,\n  'fuchsia': 0xFF00FF,\n  'gainsboro': 0xDCDCDC,\n  'ghostwhite': 0xF8F8FF,\n  'gold': 0xFFD700,\n  'goldenrod': 0xDAA520,\n  'gray': 0x808080,\n  'green': 0x008000,\n  'greenyellow': 0xADFF2F,\n  'grey': 0x808080,\n  'honeydew': 0xF0FFF0,\n  'hotpink': 0xFF69B4,\n  'indianred': 0xCD5C5C,\n  'indigo': 0x4B0082,\n  'ivory': 0xFFFFF0,\n  'khaki': 0xF0E68C,\n  'lavender': 0xE6E6FA,\n  'lavenderblush': 0xFFF0F5,\n  'lawngreen': 0x7CFC00,\n  'lemonchiffon': 0xFFFACD,\n  'lightblue': 0xADD8E6,\n  'lightcoral': 0xF08080,\n  'lightcyan': 0xE0FFFF,\n  'lightgoldenrodyellow': 0xFAFAD2,\n  'lightgray': 0xD3D3D3,\n  'lightgreen': 0x90EE90,\n  'lightgrey': 0xD3D3D3,\n  'lightpink': 0xFFB6C1,\n  'lightsalmon': 0xFFA07A,\n  'lightseagreen': 0x20B2AA,\n  'lightskyblue': 0x87CEFA,\n  'lightslategray': 0x778899,\n  'lightslategrey': 0x778899,\n  'lightsteelblue': 0xB0C4DE,\n  'lightyellow': 0xFFFFE0,\n  'lime': 0x00FF00,\n  'limegreen': 0x32CD32,\n  'linen': 0xFAF0E6,\n  'magenta': 0xFF00FF,\n  'maroon': 0x800000,\n  'mediumaquamarine': 0x66CDAA,\n  'mediumblue': 0x0000CD,\n  'mediumorchid': 0xBA55D3,\n  'mediumpurple': 0x9370DB,\n  'mediumseagreen': 0x3CB371,\n  'mediumslateblue': 0x7B68EE,\n  'mediumspringgreen': 0x00FA9A,\n  'mediumturquoise': 0x48D1CC,\n  'mediumvioletred': 0xC71585,\n  'midnightblue': 0x191970,\n  'mintcream': 0xF5FFFA,\n  'mistyrose': 0xFFE4E1,\n  'moccasin': 0xFFE4B5,\n  'navajowhite': 0xFFDEAD,\n  'navy': 0x000080,\n  'oldlace': 0xFDF5E6,\n  'olive': 0x808000,\n  'olivedrab': 0x6B8E23,\n  'orange': 0xFFA500,\n  'orangered': 0xFF4500,\n  'orchid': 0xDA70D6,\n  'palegoldenrod': 0xEEE8AA,\n  'palegreen': 0x98FB98,\n  'paleturquoise': 0xAFEEEE,\n  'palevioletred': 0xDB7093,\n  'papayawhip': 0xFFEFD5,\n  'peachpuff': 0xFFDAB9,\n  'peru': 0xCD853F,\n  'pink': 0xFFC0CB,\n  'plum': 0xDDA0DD,\n  'powderblue': 0xB0E0E6,\n  'purple': 0x800080,\n  'rebeccapurple': 0x663399,\n  'red': 0xFF0000,\n  'rosybrown': 0xBC8F8F,\n  'royalblue': 0x4169E1,\n  'saddlebrown': 0x8B4513,\n  'salmon': 0xFA8072,\n  'sandybrown': 0xF4A460,\n  'seagreen': 0x2E8B57,\n  'seashell': 0xFFF5EE,\n  'sienna': 0xA0522D,\n  'silver': 0xC0C0C0,\n  'skyblue': 0x87CEEB,\n  'slateblue': 0x6A5ACD,\n  'slategray': 0x708090,\n  'slategrey': 0x708090,\n  'snow': 0xFFFAFA,\n  'springgreen': 0x00FF7F,\n  'steelblue': 0x4682B4,\n  'tan': 0xD2B48C,\n  'teal': 0x008080,\n  'thistle': 0xD8BFD8,\n  'tomato': 0xFF6347,\n  'turquoise': 0x40E0D0,\n  'violet': 0xEE82EE,\n  'wheat': 0xF5DEB3,\n  'white': 0xFFFFFF,\n  'whitesmoke': 0xF5F5F5,\n  'yellow': 0xFFFF00,\n  'yellowgreen': 0x9ACD32\n};\nconst _hslA = {\n  h: 0,\n  s: 0,\n  l: 0\n};\nconst _hslB = {\n  h: 0,\n  s: 0,\n  l: 0\n};\nfunction hue2rgb(p, q, t) {\n  if (t < 0) t += 1;\n  if (t > 1) t -= 1;\n  if (t < 1 / 6) return p + (q - p) * 6 * t;\n  if (t < 1 / 2) return q;\n  if (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);\n  return p;\n}\n\n/**\n * A Color instance is represented by RGB components in the linear <i>working\n * color space</i>, which defaults to `LinearSRGBColorSpace`. Inputs\n * conventionally using `SRGBColorSpace` (such as hexadecimals and CSS\n * strings) are converted to the working color space automatically.\n *\n * ```js\n * // converted automatically from SRGBColorSpace to LinearSRGBColorSpace\n * const color = new THREE.Color().setHex( 0x112233 );\n * ```\n * Source color spaces may be specified explicitly, to ensure correct conversions.\n * ```js\n * // assumed already LinearSRGBColorSpace; no conversion\n * const color = new THREE.Color().setRGB( 0.5, 0.5, 0.5 );\n *\n * // converted explicitly from SRGBColorSpace to LinearSRGBColorSpace\n * const color = new THREE.Color().setRGB( 0.5, 0.5, 0.5, SRGBColorSpace );\n * ```\n * If THREE.ColorManagement is disabled, no conversions occur. For details,\n * see <i>Color management</i>. Iterating through a Color instance will yield\n * its components (r, g, b) in the corresponding order. A Color can be initialised\n * in any of the following ways:\n * ```js\n * //empty constructor - will default white\n * const color1 = new THREE.Color();\n *\n * //Hexadecimal color (recommended)\n * const color2 = new THREE.Color( 0xff0000 );\n *\n * //RGB string\n * const color3 = new THREE.Color(\"rgb(255, 0, 0)\");\n * const color4 = new THREE.Color(\"rgb(100%, 0%, 0%)\");\n *\n * //X11 color name - all 140 color names are supported.\n * //Note the lack of CamelCase in the name\n * const color5 = new THREE.Color( 'skyblue' );\n * //HSL string\n * const color6 = new THREE.Color(\"hsl(0, 100%, 50%)\");\n *\n * //Separate RGB values between 0 and 1\n * const color7 = new THREE.Color( 1, 0, 0 );\n * ```\n */\nclass Color {\n  /**\n   * Constructs a new color.\n   *\n   * Note that standard method of specifying color in three.js is with a hexadecimal triplet,\n   * and that method is used throughout the rest of the documentation.\n   *\n   * @param {(number|string|Color)} [r] - The red component of the color. If `g` and `b` are\n   * not provided, it can be hexadecimal triplet, a CSS-style string or another `Color` instance.\n   * @param {number} [g] - The green component.\n   * @param {number} [b] - The blue component.\n   */\n  constructor(r, g, b) {\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isColor = true;\n\n    /**\n     * The red component.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.r = 1;\n\n    /**\n     * The green component.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.g = 1;\n\n    /**\n     * The blue component.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.b = 1;\n    return this.set(r, g, b);\n  }\n\n  /**\n   * Sets the colors's components from the given values.\n   *\n   * @param {(number|string|Color)} [r] - The red component of the color. If `g` and `b` are\n   * not provided, it can be hexadecimal triplet, a CSS-style string or another `Color` instance.\n   * @param {number} [g] - The green component.\n   * @param {number} [b] - The blue component.\n   * @return {Color} A reference to this color.\n   */\n  set(r, g, b) {\n    if (g === undefined && b === undefined) {\n      // r is THREE.Color, hex or string\n\n      const value = r;\n      if (value && value.isColor) {\n        this.copy(value);\n      } else if (typeof value === 'number') {\n        this.setHex(value);\n      } else if (typeof value === 'string') {\n        this.setStyle(value);\n      }\n    } else {\n      this.setRGB(r, g, b);\n    }\n    return this;\n  }\n\n  /**\n   * Sets the colors's components to the given scalar value.\n   *\n   * @param {number} scalar - The scalar value.\n   * @return {Color} A reference to this color.\n   */\n  setScalar(scalar) {\n    this.r = scalar;\n    this.g = scalar;\n    this.b = scalar;\n    return this;\n  }\n\n  /**\n   * Sets this color from a hexadecimal value.\n   *\n   * @param {number} hex - The hexadecimal value.\n   * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n   * @return {Color} A reference to this color.\n   */\n  setHex(hex) {\n    let colorSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SRGBColorSpace;\n    hex = Math.floor(hex);\n    this.r = (hex >> 16 & 255) / 255;\n    this.g = (hex >> 8 & 255) / 255;\n    this.b = (hex & 255) / 255;\n    ColorManagement.toWorkingColorSpace(this, colorSpace);\n    return this;\n  }\n\n  /**\n   * Sets this color from RGB values.\n   *\n   * @param {number} r - Red channel value between `0.0` and `1.0`.\n   * @param {number} g - Green channel value between `0.0` and `1.0`.\n   * @param {number} b - Blue channel value between `0.0` and `1.0`.\n   * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.\n   * @return {Color} A reference to this color.\n   */\n  setRGB(r, g, b) {\n    let colorSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ColorManagement.workingColorSpace;\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    ColorManagement.toWorkingColorSpace(this, colorSpace);\n    return this;\n  }\n\n  /**\n   * Sets this color from RGB values.\n   *\n   * @param {number} h - Hue value between `0.0` and `1.0`.\n   * @param {number} s - Saturation value between `0.0` and `1.0`.\n   * @param {number} l - Lightness value between `0.0` and `1.0`.\n   * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.\n   * @return {Color} A reference to this color.\n   */\n  setHSL(h, s, l) {\n    let colorSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ColorManagement.workingColorSpace;\n    // h,s,l ranges are in 0.0 - 1.0\n    h = euclideanModulo(h, 1);\n    s = clamp(s, 0, 1);\n    l = clamp(l, 0, 1);\n    if (s === 0) {\n      this.r = this.g = this.b = l;\n    } else {\n      const p = l <= 0.5 ? l * (1 + s) : l + s - l * s;\n      const q = 2 * l - p;\n      this.r = hue2rgb(q, p, h + 1 / 3);\n      this.g = hue2rgb(q, p, h);\n      this.b = hue2rgb(q, p, h - 1 / 3);\n    }\n    ColorManagement.toWorkingColorSpace(this, colorSpace);\n    return this;\n  }\n\n  /**\n   * Sets this color from a CSS-style string. For example, `rgb(250, 0,0)`,\n   * `rgb(100%, 0%, 0%)`, `hsl(0, 100%, 50%)`, `#ff0000`, `#f00`, or `red` ( or\n   * any [X11 color name]{@link https://en.wikipedia.org/wiki/X11_color_names#Color_name_chart} -\n   * all 140 color names are supported).\n   *\n   * @param {string} style - Color as a CSS-style string.\n   * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n   * @return {Color} A reference to this color.\n   */\n  setStyle(style) {\n    let colorSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SRGBColorSpace;\n    function handleAlpha(string) {\n      if (string === undefined) return;\n      if (parseFloat(string) < 1) {\n        console.warn('THREE.Color: Alpha component of ' + style + ' will be ignored.');\n      }\n    }\n    let m;\n    if (m = /^(\\w+)\\(([^\\)]*)\\)/.exec(style)) {\n      // rgb / hsl\n\n      let color;\n      const name = m[1];\n      const components = m[2];\n      switch (name) {\n        case 'rgb':\n        case 'rgba':\n          if (color = /^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n            // rgb(255,0,0) rgba(255,0,0,0.5)\n\n            handleAlpha(color[4]);\n            return this.setRGB(Math.min(255, parseInt(color[1], 10)) / 255, Math.min(255, parseInt(color[2], 10)) / 255, Math.min(255, parseInt(color[3], 10)) / 255, colorSpace);\n          }\n          if (color = /^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n            // rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\n            handleAlpha(color[4]);\n            return this.setRGB(Math.min(100, parseInt(color[1], 10)) / 100, Math.min(100, parseInt(color[2], 10)) / 100, Math.min(100, parseInt(color[3], 10)) / 100, colorSpace);\n          }\n          break;\n        case 'hsl':\n        case 'hsla':\n          if (color = /^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n            // hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\n            handleAlpha(color[4]);\n            return this.setHSL(parseFloat(color[1]) / 360, parseFloat(color[2]) / 100, parseFloat(color[3]) / 100, colorSpace);\n          }\n          break;\n        default:\n          console.warn('THREE.Color: Unknown color model ' + style);\n      }\n    } else if (m = /^\\#([A-Fa-f\\d]+)$/.exec(style)) {\n      // hex color\n\n      const hex = m[1];\n      const size = hex.length;\n      if (size === 3) {\n        // #ff0\n        return this.setRGB(parseInt(hex.charAt(0), 16) / 15, parseInt(hex.charAt(1), 16) / 15, parseInt(hex.charAt(2), 16) / 15, colorSpace);\n      } else if (size === 6) {\n        // #ff0000\n        return this.setHex(parseInt(hex, 16), colorSpace);\n      } else {\n        console.warn('THREE.Color: Invalid hex color ' + style);\n      }\n    } else if (style && style.length > 0) {\n      return this.setColorName(style, colorSpace);\n    }\n    return this;\n  }\n\n  /**\n   * Sets this color from a color name. Faster than {@link Color#setStyle} if\n   * you don't need the other CSS-style formats.\n   *\n   * For convenience, the list of names is exposed in `Color.NAMES` as a hash.\n   * ```js\n   * Color.NAMES.aliceblue // returns 0xF0F8FF\n   * ```\n   *\n   * @param {string} style - The color name.\n   * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n   * @return {Color} A reference to this color.\n   */\n  setColorName(style) {\n    let colorSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SRGBColorSpace;\n    // color keywords\n    const hex = _colorKeywords[style.toLowerCase()];\n    if (hex !== undefined) {\n      // red\n      this.setHex(hex, colorSpace);\n    } else {\n      // unknown color\n      console.warn('THREE.Color: Unknown color ' + style);\n    }\n    return this;\n  }\n\n  /**\n   * Returns a new color with copied values from this instance.\n   *\n   * @return {Color} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor(this.r, this.g, this.b);\n  }\n\n  /**\n   * Copies the values of the given color to this instance.\n   *\n   * @param {Color} color - The color to copy.\n   * @return {Color} A reference to this color.\n   */\n  copy(color) {\n    this.r = color.r;\n    this.g = color.g;\n    this.b = color.b;\n    return this;\n  }\n\n  /**\n   * Copies the given color into this color, and then converts this color from\n   * `SRGBColorSpace` to `LinearSRGBColorSpace`.\n   *\n   * @param {Color} color - The color to copy/convert.\n   * @return {Color} A reference to this color.\n   */\n  copySRGBToLinear(color) {\n    this.r = SRGBToLinear(color.r);\n    this.g = SRGBToLinear(color.g);\n    this.b = SRGBToLinear(color.b);\n    return this;\n  }\n\n  /**\n   * Copies the given color into this color, and then converts this color from\n   * `LinearSRGBColorSpace` to `SRGBColorSpace`.\n   *\n   * @param {Color} color - The color to copy/convert.\n   * @return {Color} A reference to this color.\n   */\n  copyLinearToSRGB(color) {\n    this.r = LinearToSRGB(color.r);\n    this.g = LinearToSRGB(color.g);\n    this.b = LinearToSRGB(color.b);\n    return this;\n  }\n\n  /**\n   * Converts this color from `SRGBColorSpace` to `LinearSRGBColorSpace`.\n   *\n   * @return {Color} A reference to this color.\n   */\n  convertSRGBToLinear() {\n    this.copySRGBToLinear(this);\n    return this;\n  }\n\n  /**\n   * Converts this color from `LinearSRGBColorSpace` to `SRGBColorSpace`.\n   *\n   * @return {Color} A reference to this color.\n   */\n  convertLinearToSRGB() {\n    this.copyLinearToSRGB(this);\n    return this;\n  }\n\n  /**\n   * Returns the hexadecimal value of this color.\n   *\n   * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n   * @return {number} The hexadecimal value.\n   */\n  getHex() {\n    let colorSpace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SRGBColorSpace;\n    ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);\n    return Math.round(clamp(_color.r * 255, 0, 255)) * 65536 + Math.round(clamp(_color.g * 255, 0, 255)) * 256 + Math.round(clamp(_color.b * 255, 0, 255));\n  }\n\n  /**\n   * Returns the hexadecimal value of this color as a string (for example, 'FFFFFF').\n   *\n   * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n   * @return {string} The hexadecimal value as a string.\n   */\n  getHexString() {\n    let colorSpace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SRGBColorSpace;\n    return ('000000' + this.getHex(colorSpace).toString(16)).slice(-6);\n  }\n\n  /**\n   * Converts the colors RGB values into the HSL format and stores them into the\n   * given target object.\n   *\n   * @param {{h:number,s:number,l:number}} target - The target object that is used to store the method's result.\n   * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.\n   * @return {{h:number,s:number,l:number}} The HSL representation of this color.\n   */\n  getHSL(target) {\n    let colorSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ColorManagement.workingColorSpace;\n    // h,s,l ranges are in 0.0 - 1.0\n\n    ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);\n    const r = _color.r,\n      g = _color.g,\n      b = _color.b;\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    let hue, saturation;\n    const lightness = (min + max) / 2.0;\n    if (min === max) {\n      hue = 0;\n      saturation = 0;\n    } else {\n      const delta = max - min;\n      saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);\n      switch (max) {\n        case r:\n          hue = (g - b) / delta + (g < b ? 6 : 0);\n          break;\n        case g:\n          hue = (b - r) / delta + 2;\n          break;\n        case b:\n          hue = (r - g) / delta + 4;\n          break;\n      }\n      hue /= 6;\n    }\n    target.h = hue;\n    target.s = saturation;\n    target.l = lightness;\n    return target;\n  }\n\n  /**\n   * Returns the RGB values of this color and stores them into the given target object.\n   *\n   * @param {Color} target - The target color that is used to store the method's result.\n   * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.\n   * @return {Color} The RGB representation of this color.\n   */\n  getRGB(target) {\n    let colorSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ColorManagement.workingColorSpace;\n    ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);\n    target.r = _color.r;\n    target.g = _color.g;\n    target.b = _color.b;\n    return target;\n  }\n\n  /**\n   * Returns the value of this color as a CSS style string. Example: `rgb(255,0,0)`.\n   *\n   * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n   * @return {string} The CSS representation of this color.\n   */\n  getStyle() {\n    let colorSpace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SRGBColorSpace;\n    ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);\n    const r = _color.r,\n      g = _color.g,\n      b = _color.b;\n    if (colorSpace !== SRGBColorSpace) {\n      // Requires CSS Color Module Level 4 (https://www.w3.org/TR/css-color-4/).\n      return `color(${colorSpace} ${r.toFixed(3)} ${g.toFixed(3)} ${b.toFixed(3)})`;\n    }\n    return `rgb(${Math.round(r * 255)},${Math.round(g * 255)},${Math.round(b * 255)})`;\n  }\n\n  /**\n   * Adds the given HSL values to this color's values.\n   * Internally, this converts the color's RGB values to HSL, adds HSL\n   * and then converts the color back to RGB.\n   *\n   * @param {number} h - Hue value between `0.0` and `1.0`.\n   * @param {number} s - Saturation value between `0.0` and `1.0`.\n   * @param {number} l - Lightness value between `0.0` and `1.0`.\n   * @return {Color} A reference to this color.\n   */\n  offsetHSL(h, s, l) {\n    this.getHSL(_hslA);\n    return this.setHSL(_hslA.h + h, _hslA.s + s, _hslA.l + l);\n  }\n\n  /**\n   * Adds the RGB values of the given color to the RGB values of this color.\n   *\n   * @param {Color} color - The color to add.\n   * @return {Color} A reference to this color.\n   */\n  add(color) {\n    this.r += color.r;\n    this.g += color.g;\n    this.b += color.b;\n    return this;\n  }\n\n  /**\n   * Adds the RGB values of the given colors and stores the result in this instance.\n   *\n   * @param {Color} color1 - The first color.\n   * @param {Color} color2 - The second color.\n   * @return {Color} A reference to this color.\n   */\n  addColors(color1, color2) {\n    this.r = color1.r + color2.r;\n    this.g = color1.g + color2.g;\n    this.b = color1.b + color2.b;\n    return this;\n  }\n\n  /**\n   * Adds the given scalar value to the RGB values of this color.\n   *\n   * @param {number} s - The scalar to add.\n   * @return {Color} A reference to this color.\n   */\n  addScalar(s) {\n    this.r += s;\n    this.g += s;\n    this.b += s;\n    return this;\n  }\n\n  /**\n   * Subtracts the RGB values of the given color from the RGB values of this color.\n   *\n   * @param {Color} color - The color to subtract.\n   * @return {Color} A reference to this color.\n   */\n  sub(color) {\n    this.r = Math.max(0, this.r - color.r);\n    this.g = Math.max(0, this.g - color.g);\n    this.b = Math.max(0, this.b - color.b);\n    return this;\n  }\n\n  /**\n   * Multiplies the RGB values of the given color with the RGB values of this color.\n   *\n   * @param {Color} color - The color to multiply.\n   * @return {Color} A reference to this color.\n   */\n  multiply(color) {\n    this.r *= color.r;\n    this.g *= color.g;\n    this.b *= color.b;\n    return this;\n  }\n\n  /**\n   * Multiplies the given scalar value with the RGB values of this color.\n   *\n   * @param {number} s - The scalar to multiply.\n   * @return {Color} A reference to this color.\n   */\n  multiplyScalar(s) {\n    this.r *= s;\n    this.g *= s;\n    this.b *= s;\n    return this;\n  }\n\n  /**\n   * Linearly interpolates this color's RGB values toward the RGB values of the\n   * given color. The alpha argument can be thought of as the ratio between\n   * the two colors, where `0.0` is this color and `1.0` is the first argument.\n   *\n   * @param {Color} color - The color to converge on.\n   * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.\n   * @return {Color} A reference to this color.\n   */\n  lerp(color, alpha) {\n    this.r += (color.r - this.r) * alpha;\n    this.g += (color.g - this.g) * alpha;\n    this.b += (color.b - this.b) * alpha;\n    return this;\n  }\n\n  /**\n   * Linearly interpolates between the given colors and stores the result in this instance.\n   * The alpha argument can be thought of as the ratio between the two colors, where `0.0`\n   * is the first and `1.0` is the second color.\n   *\n   * @param {Color} color1 - The first color.\n   * @param {Color} color2 - The second color.\n   * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.\n   * @return {Color} A reference to this color.\n   */\n  lerpColors(color1, color2, alpha) {\n    this.r = color1.r + (color2.r - color1.r) * alpha;\n    this.g = color1.g + (color2.g - color1.g) * alpha;\n    this.b = color1.b + (color2.b - color1.b) * alpha;\n    return this;\n  }\n\n  /**\n   * Linearly interpolates this color's HSL values toward the HSL values of the\n   * given color. It differs from {@link Color#lerp} by not interpolating straight\n   * from one color to the other, but instead going through all the hues in between\n   * those two colors. The alpha argument can be thought of as the ratio between\n   * the two colors, where 0.0 is this color and 1.0 is the first argument.\n   *\n   * @param {Color} color - The color to converge on.\n   * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.\n   * @return {Color} A reference to this color.\n   */\n  lerpHSL(color, alpha) {\n    this.getHSL(_hslA);\n    color.getHSL(_hslB);\n    const h = lerp(_hslA.h, _hslB.h, alpha);\n    const s = lerp(_hslA.s, _hslB.s, alpha);\n    const l = lerp(_hslA.l, _hslB.l, alpha);\n    this.setHSL(h, s, l);\n    return this;\n  }\n\n  /**\n   * Sets the color's RGB components from the given 3D vector.\n   *\n   * @param {Vector3} v - The vector to set.\n   * @return {Color} A reference to this color.\n   */\n  setFromVector3(v) {\n    this.r = v.x;\n    this.g = v.y;\n    this.b = v.z;\n    return this;\n  }\n\n  /**\n   * Transforms this color with the given 3x3 matrix.\n   *\n   * @param {Matrix3} m - The matrix.\n   * @return {Color} A reference to this color.\n   */\n  applyMatrix3(m) {\n    const r = this.r,\n      g = this.g,\n      b = this.b;\n    const e = m.elements;\n    this.r = e[0] * r + e[3] * g + e[6] * b;\n    this.g = e[1] * r + e[4] * g + e[7] * b;\n    this.b = e[2] * r + e[5] * g + e[8] * b;\n    return this;\n  }\n\n  /**\n   * Returns `true` if this color is equal with the given one.\n   *\n   * @param {Color} c - The color to test for equality.\n   * @return {boolean} Whether this bounding color is equal with the given one.\n   */\n  equals(c) {\n    return c.r === this.r && c.g === this.g && c.b === this.b;\n  }\n\n  /**\n   * Sets this color's RGB components from the given array.\n   *\n   * @param {Array<number>} array - An array holding the RGB values.\n   * @param {number} [offset=0] - The offset into the array.\n   * @return {Color} A reference to this color.\n   */\n  fromArray(array) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.r = array[offset];\n    this.g = array[offset + 1];\n    this.b = array[offset + 2];\n    return this;\n  }\n\n  /**\n   * Writes the RGB components of this color to the given array. If no array is provided,\n   * the method returns a new instance.\n   *\n   * @param {Array<number>} [array=[]] - The target array holding the color components.\n   * @param {number} [offset=0] - Index of the first element in the array.\n   * @return {Array<number>} The color components.\n   */\n  toArray() {\n    let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    array[offset] = this.r;\n    array[offset + 1] = this.g;\n    array[offset + 2] = this.b;\n    return array;\n  }\n\n  /**\n   * Sets the components of this color from the given buffer attribute.\n   *\n   * @param {BufferAttribute} attribute - The buffer attribute holding color data.\n   * @param {number} index - The index into the attribute.\n   * @return {Color} A reference to this color.\n   */\n  fromBufferAttribute(attribute, index) {\n    this.r = attribute.getX(index);\n    this.g = attribute.getY(index);\n    this.b = attribute.getZ(index);\n    return this;\n  }\n\n  /**\n   * This methods defines the serialization result of this class. Returns the color\n   * as a hexadecimal value.\n   *\n   * @return {number} The hexadecimal value.\n   */\n  toJSON() {\n    return this.getHex();\n  }\n  *[Symbol.iterator]() {\n    yield this.r;\n    yield this.g;\n    yield this.b;\n  }\n}\nconst _color = /*@__PURE__*/new Color();\n\n/**\n * A dictionary with X11 color names.\n *\n * Note that multiple words such as Dark Orange become the string 'darkorange'.\n *\n * @static\n * @type {Object}\n */\nColor.NAMES = _colorKeywords;\nlet _materialId = 0;\n\n/**\n * Abstract base class for materials.\n *\n * Materials define the appearance of renderable 3D objects.\n *\n * @abstract\n * @augments EventDispatcher\n */\nclass Material extends EventDispatcher {\n  /**\n   * Constructs a new material.\n   */\n  constructor() {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isMaterial = true;\n\n    /**\n     * The ID of the material.\n     *\n     * @name Material#id\n     * @type {number}\n     * @readonly\n     */\n    Object.defineProperty(this, 'id', {\n      value: _materialId++\n    });\n\n    /**\n     * The UUID of the material.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.uuid = generateUUID();\n\n    /**\n     * The name of the material.\n     *\n     * @type {string}\n     */\n    this.name = '';\n\n    /**\n     * The type property is used for detecting the object type\n     * in context of serialization/deserialization.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.type = 'Material';\n\n    /**\n     * Defines the blending type of the material.\n     *\n     * It must be set to `CustomBlending` if custom blending properties like\n     * {@link Material#blendSrc}, {@link Material#blendDst} or {@link Material#blendEquation}\n     * should have any effect.\n     *\n     * @type {(NoBlending|NormalBlending|AdditiveBlending|SubtractiveBlending|MultiplyBlending|CustomBlending)}\n     * @default NormalBlending\n     */\n    this.blending = NormalBlending;\n\n    /**\n     * Defines which side of faces will be rendered - front, back or both.\n     *\n     * @type {(FrontSide|BackSide|DoubleSide)}\n     * @default FrontSide\n     */\n    this.side = FrontSide;\n\n    /**\n     * If set to `true`, vertex colors should be used.\n     *\n     * The engine supports RGB and RGBA vertex colors depending on whether a three (RGB) or\n     * four (RGBA) component color buffer attribute is used.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.vertexColors = false;\n\n    /**\n     * Defines how transparent the material is.\n     * A value of `0.0` indicates fully transparent, `1.0` is fully opaque.\n     *\n     * If the {@link Material#transparent} is not set to `true`,\n     * the material will remain fully opaque and this value will only affect its color.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.opacity = 1;\n\n    /**\n     * Defines whether this material is transparent. This has an effect on\n     * rendering as transparent objects need special treatment and are rendered\n     * after non-transparent objects.\n     *\n     * When set to true, the extent to which the material is transparent is\n     * controlled by {@link Material#opacity}.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.transparent = false;\n\n    /**\n     * Enables alpha hashed transparency, an alternative to {@link Material#transparent} or\n     * {@link Material#alphaTest}. The material will not be rendered if opacity is lower than\n     * a random threshold. Randomization introduces some grain or noise, but approximates alpha\n     * blending without the associated problems of sorting. Using TAA can reduce the resulting noise.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.alphaHash = false;\n\n    /**\n     * Defines the blending source factor.\n     *\n     * @type {(ZeroFactor|OneFactor|SrcColorFactor|OneMinusSrcColorFactor|SrcAlphaFactor|OneMinusSrcAlphaFactor|DstAlphaFactor|OneMinusDstAlphaFactor|DstColorFactor|OneMinusDstColorFactor|SrcAlphaSaturateFactor|ConstantColorFactor|OneMinusConstantColorFactor|ConstantAlphaFactor|OneMinusConstantAlphaFactor)}\n     * @default SrcAlphaFactor\n     */\n    this.blendSrc = SrcAlphaFactor;\n\n    /**\n     * Defines the blending destination factor.\n     *\n     * @type {(ZeroFactor|OneFactor|SrcColorFactor|OneMinusSrcColorFactor|SrcAlphaFactor|OneMinusSrcAlphaFactor|DstAlphaFactor|OneMinusDstAlphaFactor|DstColorFactor|OneMinusDstColorFactor|SrcAlphaSaturateFactor|ConstantColorFactor|OneMinusConstantColorFactor|ConstantAlphaFactor|OneMinusConstantAlphaFactor)}\n     * @default OneMinusSrcAlphaFactor\n     */\n    this.blendDst = OneMinusSrcAlphaFactor;\n\n    /**\n     * Defines the blending equation.\n     *\n     * @type {(AddEquation|SubtractEquation|ReverseSubtractEquation|MinEquation|MaxEquation)}\n     * @default AddEquation\n     */\n    this.blendEquation = AddEquation;\n\n    /**\n     * Defines the blending source alpha factor.\n     *\n     * @type {?(ZeroFactor|OneFactor|SrcColorFactor|OneMinusSrcColorFactor|SrcAlphaFactor|OneMinusSrcAlphaFactor|DstAlphaFactor|OneMinusDstAlphaFactor|DstColorFactor|OneMinusDstColorFactor|SrcAlphaSaturateFactor|ConstantColorFactor|OneMinusConstantColorFactor|ConstantAlphaFactor|OneMinusConstantAlphaFactor)}\n     * @default null\n     */\n    this.blendSrcAlpha = null;\n\n    /**\n     * Defines the blending destination alpha factor.\n     *\n     * @type {?(ZeroFactor|OneFactor|SrcColorFactor|OneMinusSrcColorFactor|SrcAlphaFactor|OneMinusSrcAlphaFactor|DstAlphaFactor|OneMinusDstAlphaFactor|DstColorFactor|OneMinusDstColorFactor|SrcAlphaSaturateFactor|ConstantColorFactor|OneMinusConstantColorFactor|ConstantAlphaFactor|OneMinusConstantAlphaFactor)}\n     * @default null\n     */\n    this.blendDstAlpha = null;\n\n    /**\n     * Defines the blending equation of the alpha channel.\n     *\n     * @type {?(AddEquation|SubtractEquation|ReverseSubtractEquation|MinEquation|MaxEquation)}\n     * @default null\n     */\n    this.blendEquationAlpha = null;\n\n    /**\n     * Represents the RGB values of the constant blend color.\n     *\n     * This property has only an effect when using custom blending with `ConstantColor` or `OneMinusConstantColor`.\n     *\n     * @type {Color}\n     * @default (0,0,0)\n     */\n    this.blendColor = new Color(0, 0, 0);\n\n    /**\n     * Represents the alpha value of the constant blend color.\n     *\n     * This property has only an effect when using custom blending with `ConstantAlpha` or `OneMinusConstantAlpha`.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.blendAlpha = 0;\n\n    /**\n     * Defines the depth function.\n     *\n     * @type {(NeverDepth|AlwaysDepth|LessDepth|LessEqualDepth|EqualDepth|GreaterEqualDepth|GreaterDepth|NotEqualDepth)}\n     * @default LessEqualDepth\n     */\n    this.depthFunc = LessEqualDepth;\n\n    /**\n     * Whether to have depth test enabled when rendering this material.\n     * When the depth test is disabled, the depth write will also be implicitly disabled.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.depthTest = true;\n\n    /**\n     * Whether rendering this material has any effect on the depth buffer.\n     *\n     * When drawing 2D overlays it can be useful to disable the depth writing in\n     * order to layer several things together without creating z-index artifacts.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.depthWrite = true;\n\n    /**\n     * The bit mask to use when writing to the stencil buffer.\n     *\n     * @type {number}\n     * @default 0xff\n     */\n    this.stencilWriteMask = 0xff;\n\n    /**\n     * The stencil comparison function to use.\n     *\n     * @type {NeverStencilFunc|LessStencilFunc|EqualStencilFunc|LessEqualStencilFunc|GreaterStencilFunc|NotEqualStencilFunc|GreaterEqualStencilFunc|AlwaysStencilFunc}\n     * @default AlwaysStencilFunc\n     */\n    this.stencilFunc = AlwaysStencilFunc;\n\n    /**\n     * The value to use when performing stencil comparisons or stencil operations.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.stencilRef = 0;\n\n    /**\n     * The bit mask to use when comparing against the stencil buffer.\n     *\n     * @type {number}\n     * @default 0xff\n     */\n    this.stencilFuncMask = 0xff;\n\n    /**\n     * Which stencil operation to perform when the comparison function returns `false`.\n     *\n     * @type {ZeroStencilOp|KeepStencilOp|ReplaceStencilOp|IncrementStencilOp|DecrementStencilOp|IncrementWrapStencilOp|DecrementWrapStencilOp|InvertStencilOp}\n     * @default KeepStencilOp\n     */\n    this.stencilFail = KeepStencilOp;\n\n    /**\n     * Which stencil operation to perform when the comparison function returns\n     * `true` but the depth test fails.\n     *\n     * @type {ZeroStencilOp|KeepStencilOp|ReplaceStencilOp|IncrementStencilOp|DecrementStencilOp|IncrementWrapStencilOp|DecrementWrapStencilOp|InvertStencilOp}\n     * @default KeepStencilOp\n     */\n    this.stencilZFail = KeepStencilOp;\n\n    /**\n     * Which stencil operation to perform when the comparison function returns\n     * `true` and the depth test passes.\n     *\n     * @type {ZeroStencilOp|KeepStencilOp|ReplaceStencilOp|IncrementStencilOp|DecrementStencilOp|IncrementWrapStencilOp|DecrementWrapStencilOp|InvertStencilOp}\n     * @default KeepStencilOp\n     */\n    this.stencilZPass = KeepStencilOp;\n\n    /**\n     * Whether stencil operations are performed against the stencil buffer. In\n     * order to perform writes or comparisons against the stencil buffer this\n     * value must be `true`.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.stencilWrite = false;\n\n    /**\n     * User-defined clipping planes specified as THREE.Plane objects in world\n     * space. These planes apply to the objects this material is attached to.\n     * Points in space whose signed distance to the plane is negative are clipped\n     * (not rendered). This requires {@link WebGLRenderer#localClippingEnabled} to\n     * be `true`.\n     *\n     * @type {?Array<Plane>}\n     * @default null\n     */\n    this.clippingPlanes = null;\n\n    /**\n     * Changes the behavior of clipping planes so that only their intersection is\n     * clipped, rather than their union.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.clipIntersection = false;\n\n    /**\n     * Defines whether to clip shadows according to the clipping planes specified\n     * on this material.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.clipShadows = false;\n\n    /**\n     * Defines which side of faces cast shadows. If `null`, the side casting shadows\n     * is determined as follows:\n     *\n     * - When {@link Material#side} is set to `FrontSide`, the back side cast shadows.\n     * - When {@link Material#side} is set to `BackSide`, the front side cast shadows.\n     * - When {@link Material#side} is set to `DoubleSide`, both sides cast shadows.\n     *\n     * @type {?(FrontSide|BackSide|DoubleSide)}\n     * @default null\n     */\n    this.shadowSide = null;\n\n    /**\n     * Whether to render the material's color.\n     *\n     * This can be used in conjunction with {@link Object3D#renderOder} to create invisible\n     * objects that occlude other objects.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.colorWrite = true;\n\n    /**\n     * Override the renderer's default precision for this material.\n     *\n     * @type {?('highp'|'mediump'|'lowp')}\n     * @default null\n     */\n    this.precision = null;\n\n    /**\n     * Whether to use polygon offset or not. When enabled, each fragment's depth value will\n     * be offset after it is interpolated from the depth values of the appropriate vertices.\n     * The offset is added before the depth test is performed and before the value is written\n     * into the depth buffer.\n     *\n     * Can be useful for rendering hidden-line images, for applying decals to surfaces, and for\n     * rendering solids with highlighted edges.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.polygonOffset = false;\n\n    /**\n     * Specifies a scale factor that is used to create a variable depth offset for each polygon.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.polygonOffsetFactor = 0;\n\n    /**\n     * Is multiplied by an implementation-specific value to create a constant depth offset.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.polygonOffsetUnits = 0;\n\n    /**\n     * Whether to apply dithering to the color to remove the appearance of banding.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.dithering = false;\n\n    /**\n     * Whether alpha to coverage should be enabled or not. Can only be used with MSAA-enabled contexts\n     * (meaning when the renderer was created with *antialias* parameter set to `true`). Enabling this\n     * will smooth aliasing on clip plane edges and alphaTest-clipped edges.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.alphaToCoverage = false;\n\n    /**\n     * Whether to premultiply the alpha (transparency) value.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.premultipliedAlpha = false;\n\n    /**\n     * Whether double-sided, transparent objects should be rendered with a single pass or not.\n     *\n     * The engine renders double-sided, transparent objects with two draw calls (back faces first,\n     * then front faces) to mitigate transparency artifacts. There are scenarios however where this\n     * approach produces no quality gains but still doubles draw calls e.g. when rendering flat\n     * vegetation like grass sprites. In these cases, set the `forceSinglePass` flag to `true` to\n     * disable the two pass rendering to avoid performance issues.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.forceSinglePass = false;\n\n    /**\n     * Whether it's possible to override the material with {@link Scene#overrideMaterial} or not.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.allowOverride = true;\n\n    /**\n     * Defines whether 3D objects using this material are visible.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.visible = true;\n\n    /**\n     * Defines whether this material is tone mapped according to the renderer's tone mapping setting.\n     *\n     * It is ignored when rendering to a render target or using post processing or when using\n     * `WebGPURenderer`. In all these cases, all materials are honored by tone mapping.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.toneMapped = true;\n\n    /**\n     * An object that can be used to store custom data about the Material. It\n     * should not hold references to functions as these will not be cloned.\n     *\n     * @type {Object}\n     */\n    this.userData = {};\n\n    /**\n     * This starts at `0` and counts how many times {@link Material#needsUpdate} is set to `true`.\n     *\n     * @type {number}\n     * @readonly\n     * @default 0\n     */\n    this.version = 0;\n    this._alphaTest = 0;\n  }\n\n  /**\n   * Sets the alpha value to be used when running an alpha test. The material\n   * will not be rendered if the opacity is lower than this value.\n   *\n   * @type {number}\n   * @readonly\n   * @default 0\n   */\n  get alphaTest() {\n    return this._alphaTest;\n  }\n  set alphaTest(value) {\n    if (this._alphaTest > 0 !== value > 0) {\n      this.version++;\n    }\n    this._alphaTest = value;\n  }\n\n  /**\n   * An optional callback that is executed immediately before the material is used to render a 3D object.\n   *\n   * This method can only be used when rendering with {@link WebGLRenderer}.\n   *\n   * @param {WebGLRenderer} renderer - The renderer.\n   * @param {Scene} scene - The scene.\n   * @param {Camera} camera - The camera that is used to render the scene.\n   * @param {BufferGeometry} geometry - The 3D object's geometry.\n   * @param {Object3D} object - The 3D object.\n   * @param {Object} group - The geometry group data.\n   */\n  onBeforeRender(/* renderer, scene, camera, geometry, object, group */) {}\n\n  /**\n   * An optional callback that is executed immediately before the shader\n   * program is compiled. This function is called with the shader source code\n   * as a parameter. Useful for the modification of built-in materials.\n   *\n   * This method can only be used when rendering with {@link WebGLRenderer}. The\n   * recommended approach when customizing materials is to use `WebGPURenderer` with the new\n   * Node Material system and [TSL]{@link https://github.com/mrdoob/three.js/wiki/Three.js-Shading-Language}.\n   *\n   * @param {{vertexShader:string,fragmentShader:string,uniforms:Object}} shaderobject - The object holds the uniforms and the vertex and fragment shader source.\n   * @param {WebGLRenderer} renderer - A reference to the renderer.\n   */\n  onBeforeCompile(/* shaderobject, renderer */) {}\n\n  /**\n   * In case {@link Material#onBeforeCompile} is used, this callback can be used to identify\n   * values of settings used in `onBeforeCompile()`, so three.js can reuse a cached\n   * shader or recompile the shader for this material as needed.\n   *\n   * This method can only be used when rendering with {@link WebGLRenderer}.\n   *\n   * @return {string} The custom program cache key.\n   */\n  customProgramCacheKey() {\n    return this.onBeforeCompile.toString();\n  }\n\n  /**\n   * This method can be used to set default values from parameter objects.\n   * It is a generic implementation so it can be used with different types\n   * of materials.\n   *\n   * @param {Object} [values] - The material values to set.\n   */\n  setValues(values) {\n    if (values === undefined) return;\n    for (const key in values) {\n      const newValue = values[key];\n      if (newValue === undefined) {\n        console.warn(`THREE.Material: parameter '${key}' has value of undefined.`);\n        continue;\n      }\n      const currentValue = this[key];\n      if (currentValue === undefined) {\n        console.warn(`THREE.Material: '${key}' is not a property of THREE.${this.type}.`);\n        continue;\n      }\n      if (currentValue && currentValue.isColor) {\n        currentValue.set(newValue);\n      } else if (currentValue && currentValue.isVector3 && newValue && newValue.isVector3) {\n        currentValue.copy(newValue);\n      } else {\n        this[key] = newValue;\n      }\n    }\n  }\n\n  /**\n   * Serializes the material into JSON.\n   *\n   * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\n   * @return {Object} A JSON object representing the serialized material.\n   * @see {@link ObjectLoader#parse}\n   */\n  toJSON(meta) {\n    const isRootObject = meta === undefined || typeof meta === 'string';\n    if (isRootObject) {\n      meta = {\n        textures: {},\n        images: {}\n      };\n    }\n    const data = {\n      metadata: {\n        version: 4.6,\n        type: 'Material',\n        generator: 'Material.toJSON'\n      }\n    };\n\n    // standard Material serialization\n    data.uuid = this.uuid;\n    data.type = this.type;\n    if (this.name !== '') data.name = this.name;\n    if (this.color && this.color.isColor) data.color = this.color.getHex();\n    if (this.roughness !== undefined) data.roughness = this.roughness;\n    if (this.metalness !== undefined) data.metalness = this.metalness;\n    if (this.sheen !== undefined) data.sheen = this.sheen;\n    if (this.sheenColor && this.sheenColor.isColor) data.sheenColor = this.sheenColor.getHex();\n    if (this.sheenRoughness !== undefined) data.sheenRoughness = this.sheenRoughness;\n    if (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();\n    if (this.emissiveIntensity !== undefined && this.emissiveIntensity !== 1) data.emissiveIntensity = this.emissiveIntensity;\n    if (this.specular && this.specular.isColor) data.specular = this.specular.getHex();\n    if (this.specularIntensity !== undefined) data.specularIntensity = this.specularIntensity;\n    if (this.specularColor && this.specularColor.isColor) data.specularColor = this.specularColor.getHex();\n    if (this.shininess !== undefined) data.shininess = this.shininess;\n    if (this.clearcoat !== undefined) data.clearcoat = this.clearcoat;\n    if (this.clearcoatRoughness !== undefined) data.clearcoatRoughness = this.clearcoatRoughness;\n    if (this.clearcoatMap && this.clearcoatMap.isTexture) {\n      data.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;\n    }\n    if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {\n      data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;\n    }\n    if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {\n      data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;\n      data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n    }\n    if (this.dispersion !== undefined) data.dispersion = this.dispersion;\n    if (this.iridescence !== undefined) data.iridescence = this.iridescence;\n    if (this.iridescenceIOR !== undefined) data.iridescenceIOR = this.iridescenceIOR;\n    if (this.iridescenceThicknessRange !== undefined) data.iridescenceThicknessRange = this.iridescenceThicknessRange;\n    if (this.iridescenceMap && this.iridescenceMap.isTexture) {\n      data.iridescenceMap = this.iridescenceMap.toJSON(meta).uuid;\n    }\n    if (this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture) {\n      data.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(meta).uuid;\n    }\n    if (this.anisotropy !== undefined) data.anisotropy = this.anisotropy;\n    if (this.anisotropyRotation !== undefined) data.anisotropyRotation = this.anisotropyRotation;\n    if (this.anisotropyMap && this.anisotropyMap.isTexture) {\n      data.anisotropyMap = this.anisotropyMap.toJSON(meta).uuid;\n    }\n    if (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;\n    if (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta).uuid;\n    if (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;\n    if (this.lightMap && this.lightMap.isTexture) {\n      data.lightMap = this.lightMap.toJSON(meta).uuid;\n      data.lightMapIntensity = this.lightMapIntensity;\n    }\n    if (this.aoMap && this.aoMap.isTexture) {\n      data.aoMap = this.aoMap.toJSON(meta).uuid;\n      data.aoMapIntensity = this.aoMapIntensity;\n    }\n    if (this.bumpMap && this.bumpMap.isTexture) {\n      data.bumpMap = this.bumpMap.toJSON(meta).uuid;\n      data.bumpScale = this.bumpScale;\n    }\n    if (this.normalMap && this.normalMap.isTexture) {\n      data.normalMap = this.normalMap.toJSON(meta).uuid;\n      data.normalMapType = this.normalMapType;\n      data.normalScale = this.normalScale.toArray();\n    }\n    if (this.displacementMap && this.displacementMap.isTexture) {\n      data.displacementMap = this.displacementMap.toJSON(meta).uuid;\n      data.displacementScale = this.displacementScale;\n      data.displacementBias = this.displacementBias;\n    }\n    if (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;\n    if (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;\n    if (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;\n    if (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;\n    if (this.specularIntensityMap && this.specularIntensityMap.isTexture) data.specularIntensityMap = this.specularIntensityMap.toJSON(meta).uuid;\n    if (this.specularColorMap && this.specularColorMap.isTexture) data.specularColorMap = this.specularColorMap.toJSON(meta).uuid;\n    if (this.envMap && this.envMap.isTexture) {\n      data.envMap = this.envMap.toJSON(meta).uuid;\n      if (this.combine !== undefined) data.combine = this.combine;\n    }\n    if (this.envMapRotation !== undefined) data.envMapRotation = this.envMapRotation.toArray();\n    if (this.envMapIntensity !== undefined) data.envMapIntensity = this.envMapIntensity;\n    if (this.reflectivity !== undefined) data.reflectivity = this.reflectivity;\n    if (this.refractionRatio !== undefined) data.refractionRatio = this.refractionRatio;\n    if (this.gradientMap && this.gradientMap.isTexture) {\n      data.gradientMap = this.gradientMap.toJSON(meta).uuid;\n    }\n    if (this.transmission !== undefined) data.transmission = this.transmission;\n    if (this.transmissionMap && this.transmissionMap.isTexture) data.transmissionMap = this.transmissionMap.toJSON(meta).uuid;\n    if (this.thickness !== undefined) data.thickness = this.thickness;\n    if (this.thicknessMap && this.thicknessMap.isTexture) data.thicknessMap = this.thicknessMap.toJSON(meta).uuid;\n    if (this.attenuationDistance !== undefined && this.attenuationDistance !== Infinity) data.attenuationDistance = this.attenuationDistance;\n    if (this.attenuationColor !== undefined) data.attenuationColor = this.attenuationColor.getHex();\n    if (this.size !== undefined) data.size = this.size;\n    if (this.shadowSide !== null) data.shadowSide = this.shadowSide;\n    if (this.sizeAttenuation !== undefined) data.sizeAttenuation = this.sizeAttenuation;\n    if (this.blending !== NormalBlending) data.blending = this.blending;\n    if (this.side !== FrontSide) data.side = this.side;\n    if (this.vertexColors === true) data.vertexColors = true;\n    if (this.opacity < 1) data.opacity = this.opacity;\n    if (this.transparent === true) data.transparent = true;\n    if (this.blendSrc !== SrcAlphaFactor) data.blendSrc = this.blendSrc;\n    if (this.blendDst !== OneMinusSrcAlphaFactor) data.blendDst = this.blendDst;\n    if (this.blendEquation !== AddEquation) data.blendEquation = this.blendEquation;\n    if (this.blendSrcAlpha !== null) data.blendSrcAlpha = this.blendSrcAlpha;\n    if (this.blendDstAlpha !== null) data.blendDstAlpha = this.blendDstAlpha;\n    if (this.blendEquationAlpha !== null) data.blendEquationAlpha = this.blendEquationAlpha;\n    if (this.blendColor && this.blendColor.isColor) data.blendColor = this.blendColor.getHex();\n    if (this.blendAlpha !== 0) data.blendAlpha = this.blendAlpha;\n    if (this.depthFunc !== LessEqualDepth) data.depthFunc = this.depthFunc;\n    if (this.depthTest === false) data.depthTest = this.depthTest;\n    if (this.depthWrite === false) data.depthWrite = this.depthWrite;\n    if (this.colorWrite === false) data.colorWrite = this.colorWrite;\n    if (this.stencilWriteMask !== 0xff) data.stencilWriteMask = this.stencilWriteMask;\n    if (this.stencilFunc !== AlwaysStencilFunc) data.stencilFunc = this.stencilFunc;\n    if (this.stencilRef !== 0) data.stencilRef = this.stencilRef;\n    if (this.stencilFuncMask !== 0xff) data.stencilFuncMask = this.stencilFuncMask;\n    if (this.stencilFail !== KeepStencilOp) data.stencilFail = this.stencilFail;\n    if (this.stencilZFail !== KeepStencilOp) data.stencilZFail = this.stencilZFail;\n    if (this.stencilZPass !== KeepStencilOp) data.stencilZPass = this.stencilZPass;\n    if (this.stencilWrite === true) data.stencilWrite = this.stencilWrite;\n\n    // rotation (SpriteMaterial)\n    if (this.rotation !== undefined && this.rotation !== 0) data.rotation = this.rotation;\n    if (this.polygonOffset === true) data.polygonOffset = true;\n    if (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;\n    if (this.polygonOffsetUnits !== 0) data.polygonOffsetUnits = this.polygonOffsetUnits;\n    if (this.linewidth !== undefined && this.linewidth !== 1) data.linewidth = this.linewidth;\n    if (this.dashSize !== undefined) data.dashSize = this.dashSize;\n    if (this.gapSize !== undefined) data.gapSize = this.gapSize;\n    if (this.scale !== undefined) data.scale = this.scale;\n    if (this.dithering === true) data.dithering = true;\n    if (this.alphaTest > 0) data.alphaTest = this.alphaTest;\n    if (this.alphaHash === true) data.alphaHash = true;\n    if (this.alphaToCoverage === true) data.alphaToCoverage = true;\n    if (this.premultipliedAlpha === true) data.premultipliedAlpha = true;\n    if (this.forceSinglePass === true) data.forceSinglePass = true;\n    if (this.wireframe === true) data.wireframe = true;\n    if (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;\n    if (this.wireframeLinecap !== 'round') data.wireframeLinecap = this.wireframeLinecap;\n    if (this.wireframeLinejoin !== 'round') data.wireframeLinejoin = this.wireframeLinejoin;\n    if (this.flatShading === true) data.flatShading = true;\n    if (this.visible === false) data.visible = false;\n    if (this.toneMapped === false) data.toneMapped = false;\n    if (this.fog === false) data.fog = false;\n    if (Object.keys(this.userData).length > 0) data.userData = this.userData;\n\n    // TODO: Copied from Object3D.toJSON\n\n    function extractFromCache(cache) {\n      const values = [];\n      for (const key in cache) {\n        const data = cache[key];\n        delete data.metadata;\n        values.push(data);\n      }\n      return values;\n    }\n    if (isRootObject) {\n      const textures = extractFromCache(meta.textures);\n      const images = extractFromCache(meta.images);\n      if (textures.length > 0) data.textures = textures;\n      if (images.length > 0) data.images = images;\n    }\n    return data;\n  }\n\n  /**\n   * Returns a new material with copied values from this instance.\n   *\n   * @return {Material} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  /**\n   * Copies the values of the given material to this instance.\n   *\n   * @param {Material} source - The material to copy.\n   * @return {Material} A reference to this instance.\n   */\n  copy(source) {\n    this.name = source.name;\n    this.blending = source.blending;\n    this.side = source.side;\n    this.vertexColors = source.vertexColors;\n    this.opacity = source.opacity;\n    this.transparent = source.transparent;\n    this.blendSrc = source.blendSrc;\n    this.blendDst = source.blendDst;\n    this.blendEquation = source.blendEquation;\n    this.blendSrcAlpha = source.blendSrcAlpha;\n    this.blendDstAlpha = source.blendDstAlpha;\n    this.blendEquationAlpha = source.blendEquationAlpha;\n    this.blendColor.copy(source.blendColor);\n    this.blendAlpha = source.blendAlpha;\n    this.depthFunc = source.depthFunc;\n    this.depthTest = source.depthTest;\n    this.depthWrite = source.depthWrite;\n    this.stencilWriteMask = source.stencilWriteMask;\n    this.stencilFunc = source.stencilFunc;\n    this.stencilRef = source.stencilRef;\n    this.stencilFuncMask = source.stencilFuncMask;\n    this.stencilFail = source.stencilFail;\n    this.stencilZFail = source.stencilZFail;\n    this.stencilZPass = source.stencilZPass;\n    this.stencilWrite = source.stencilWrite;\n    const srcPlanes = source.clippingPlanes;\n    let dstPlanes = null;\n    if (srcPlanes !== null) {\n      const n = srcPlanes.length;\n      dstPlanes = new Array(n);\n      for (let i = 0; i !== n; ++i) {\n        dstPlanes[i] = srcPlanes[i].clone();\n      }\n    }\n    this.clippingPlanes = dstPlanes;\n    this.clipIntersection = source.clipIntersection;\n    this.clipShadows = source.clipShadows;\n    this.shadowSide = source.shadowSide;\n    this.colorWrite = source.colorWrite;\n    this.precision = source.precision;\n    this.polygonOffset = source.polygonOffset;\n    this.polygonOffsetFactor = source.polygonOffsetFactor;\n    this.polygonOffsetUnits = source.polygonOffsetUnits;\n    this.dithering = source.dithering;\n    this.alphaTest = source.alphaTest;\n    this.alphaHash = source.alphaHash;\n    this.alphaToCoverage = source.alphaToCoverage;\n    this.premultipliedAlpha = source.premultipliedAlpha;\n    this.forceSinglePass = source.forceSinglePass;\n    this.visible = source.visible;\n    this.toneMapped = source.toneMapped;\n    this.userData = JSON.parse(JSON.stringify(source.userData));\n    return this;\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   *\n   * @fires Material#dispose\n   */\n  dispose() {\n    /**\n     * Fires when the material has been disposed of.\n     *\n     * @event Material#dispose\n     * @type {Object}\n     */\n    this.dispatchEvent({\n      type: 'dispose'\n    });\n  }\n\n  /**\n   * Setting this property to `true` indicates the engine the material\n   * needs to be recompiled.\n   *\n   * @type {boolean}\n   * @default false\n   * @param {boolean} value\n   */\n  set needsUpdate(value) {\n    if (value === true) this.version++;\n  }\n}\n\n/**\n * A material for drawing geometries in a simple shaded (flat or wireframe) way.\n *\n * This material is not affected by lights.\n *\n * @augments Material\n */\nclass MeshBasicMaterial extends Material {\n  /**\n   * Constructs a new mesh basic material.\n   *\n   * @param {Object} [parameters] - An object with one or more properties\n   * defining the material's appearance. Any property of the material\n   * (including any property from inherited materials) can be passed\n   * in here. Color values can be passed any type of value accepted\n   * by {@link Color#set}.\n   */\n  constructor(parameters) {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isMeshBasicMaterial = true;\n    this.type = 'MeshBasicMaterial';\n\n    /**\n     * Color of the material.\n     *\n     * @type {Color}\n     * @default (1,1,1)\n     */\n    this.color = new Color(0xffffff); // emissive\n\n    /**\n     * The color map. May optionally include an alpha channel, typically combined\n     * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\n     * color is modulated by the diffuse `color`.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.map = null;\n\n    /**\n     * The light map. Requires a second set of UVs.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.lightMap = null;\n\n    /**\n     * Intensity of the baked light.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.lightMapIntensity = 1.0;\n\n    /**\n     * The red channel of this texture is used as the ambient occlusion map.\n     * Requires a second set of UVs.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.aoMap = null;\n\n    /**\n     * Intensity of the ambient occlusion effect. Range is `[0,1]`, where `0`\n     * disables ambient occlusion. Where intensity is `1` and the AO map's\n     * red channel is also `1`, ambient light is fully occluded on a surface.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.aoMapIntensity = 1.0;\n\n    /**\n     * Specular map used by the material.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.specularMap = null;\n\n    /**\n     * The alpha map is a grayscale texture that controls the opacity across the\n     * surface (black: fully transparent; white: fully opaque).\n     *\n     * Only the color of the texture is used, ignoring the alpha channel if one\n     * exists. For RGB and RGBA textures, the renderer will use the green channel\n     * when sampling this texture due to the extra bit of precision provided for\n     * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n     * luminance/alpha textures will also still work as expected.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.alphaMap = null;\n\n    /**\n     * The environment map.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.envMap = null;\n\n    /**\n     * The rotation of the environment map in radians.\n     *\n     * @type {Euler}\n     * @default (0,0,0)\n     */\n    this.envMapRotation = new Euler();\n\n    /**\n     * How to combine the result of the surface's color with the environment map, if any.\n     *\n     * When set to `MixOperation`, the {@link MeshBasicMaterial#reflectivity} is used to\n     * blend between the two colors.\n     *\n     * @type {(MultiplyOperation|MixOperation|AddOperation)}\n     * @default MultiplyOperation\n     */\n    this.combine = MultiplyOperation;\n\n    /**\n     * How much the environment map affects the surface.\n     * The valid range is between `0` (no reflections) and `1` (full reflections).\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.reflectivity = 1;\n\n    /**\n     * The index of refraction (IOR) of air (approximately 1) divided by the\n     * index of refraction of the material. It is used with environment mapping\n     * modes {@link CubeRefractionMapping} and {@link EquirectangularRefractionMapping}.\n     * The refraction ratio should not exceed `1`.\n     *\n     * @type {number}\n     * @default 0.98\n     */\n    this.refractionRatio = 0.98;\n\n    /**\n     * Renders the geometry as a wireframe.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.wireframe = false;\n\n    /**\n     * Controls the thickness of the wireframe.\n     *\n     * Can only be used with {@link SVGRenderer}.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.wireframeLinewidth = 1;\n\n    /**\n     * Defines appearance of wireframe ends.\n     *\n     * Can only be used with {@link SVGRenderer}.\n     *\n     * @type {('round'|'bevel'|'miter')}\n     * @default 'round'\n     */\n    this.wireframeLinecap = 'round';\n\n    /**\n     * Defines appearance of wireframe joints.\n     *\n     * Can only be used with {@link SVGRenderer}.\n     *\n     * @type {('round'|'bevel'|'miter')}\n     * @default 'round'\n     */\n    this.wireframeLinejoin = 'round';\n\n    /**\n     * Whether the material is affected by fog or not.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.fog = true;\n    this.setValues(parameters);\n  }\n  copy(source) {\n    super.copy(source);\n    this.color.copy(source.color);\n    this.map = source.map;\n    this.lightMap = source.lightMap;\n    this.lightMapIntensity = source.lightMapIntensity;\n    this.aoMap = source.aoMap;\n    this.aoMapIntensity = source.aoMapIntensity;\n    this.specularMap = source.specularMap;\n    this.alphaMap = source.alphaMap;\n    this.envMap = source.envMap;\n    this.envMapRotation.copy(source.envMapRotation);\n    this.combine = source.combine;\n    this.reflectivity = source.reflectivity;\n    this.refractionRatio = source.refractionRatio;\n    this.wireframe = source.wireframe;\n    this.wireframeLinewidth = source.wireframeLinewidth;\n    this.wireframeLinecap = source.wireframeLinecap;\n    this.wireframeLinejoin = source.wireframeLinejoin;\n    this.fog = source.fog;\n    return this;\n  }\n}\n\n// Fast Half Float Conversions, http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n\nconst _tables = /*@__PURE__*/_generateTables();\nfunction _generateTables() {\n  // float32 to float16 helpers\n\n  const buffer = new ArrayBuffer(4);\n  const floatView = new Float32Array(buffer);\n  const uint32View = new Uint32Array(buffer);\n  const baseTable = new Uint32Array(512);\n  const shiftTable = new Uint32Array(512);\n  for (let i = 0; i < 256; ++i) {\n    const e = i - 127;\n\n    // very small number (0, -0)\n\n    if (e < -27) {\n      baseTable[i] = 0x0000;\n      baseTable[i | 0x100] = 0x8000;\n      shiftTable[i] = 24;\n      shiftTable[i | 0x100] = 24;\n\n      // small number (denorm)\n    } else if (e < -14) {\n      baseTable[i] = 0x0400 >> -e - 14;\n      baseTable[i | 0x100] = 0x0400 >> -e - 14 | 0x8000;\n      shiftTable[i] = -e - 1;\n      shiftTable[i | 0x100] = -e - 1;\n\n      // normal number\n    } else if (e <= 15) {\n      baseTable[i] = e + 15 << 10;\n      baseTable[i | 0x100] = e + 15 << 10 | 0x8000;\n      shiftTable[i] = 13;\n      shiftTable[i | 0x100] = 13;\n\n      // large number (Infinity, -Infinity)\n    } else if (e < 128) {\n      baseTable[i] = 0x7c00;\n      baseTable[i | 0x100] = 0xfc00;\n      shiftTable[i] = 24;\n      shiftTable[i | 0x100] = 24;\n\n      // stay (NaN, Infinity, -Infinity)\n    } else {\n      baseTable[i] = 0x7c00;\n      baseTable[i | 0x100] = 0xfc00;\n      shiftTable[i] = 13;\n      shiftTable[i | 0x100] = 13;\n    }\n  }\n\n  // float16 to float32 helpers\n\n  const mantissaTable = new Uint32Array(2048);\n  const exponentTable = new Uint32Array(64);\n  const offsetTable = new Uint32Array(64);\n  for (let i = 1; i < 1024; ++i) {\n    let m = i << 13; // zero pad mantissa bits\n    let e = 0; // zero exponent\n\n    // normalized\n    while ((m & 0x00800000) === 0) {\n      m <<= 1;\n      e -= 0x00800000; // decrement exponent\n    }\n    m &= -8388609; // clear leading 1 bit\n    e += 0x38800000; // adjust bias\n\n    mantissaTable[i] = m | e;\n  }\n  for (let i = 1024; i < 2048; ++i) {\n    mantissaTable[i] = 0x38000000 + (i - 1024 << 13);\n  }\n  for (let i = 1; i < 31; ++i) {\n    exponentTable[i] = i << 23;\n  }\n  exponentTable[31] = 0x47800000;\n  exponentTable[32] = 0x80000000;\n  for (let i = 33; i < 63; ++i) {\n    exponentTable[i] = 0x80000000 + (i - 32 << 23);\n  }\n  exponentTable[63] = 0xc7800000;\n  for (let i = 1; i < 64; ++i) {\n    if (i !== 32) {\n      offsetTable[i] = 1024;\n    }\n  }\n  return {\n    floatView: floatView,\n    uint32View: uint32View,\n    baseTable: baseTable,\n    shiftTable: shiftTable,\n    mantissaTable: mantissaTable,\n    exponentTable: exponentTable,\n    offsetTable: offsetTable\n  };\n}\n\n/**\n * Returns a half precision floating point value (FP16) from the given single\n * precision floating point value (FP32).\n *\n * @param {number} val - A single precision floating point value.\n * @return {number} The FP16 value.\n */\nfunction toHalfFloat(val) {\n  if (Math.abs(val) > 65504) console.warn('THREE.DataUtils.toHalfFloat(): Value out of range.');\n  val = clamp(val, -65504, 65504);\n  _tables.floatView[0] = val;\n  const f = _tables.uint32View[0];\n  const e = f >> 23 & 0x1ff;\n  return _tables.baseTable[e] + ((f & 0x007fffff) >> _tables.shiftTable[e]);\n}\n\n/**\n * Returns a single precision floating point value (FP32) from the given half\n * precision floating point value (FP16).\n *\n * @param {number} val - A half precision floating point value.\n * @return {number} The FP32 value.\n */\nfunction fromHalfFloat(val) {\n  const m = val >> 10;\n  _tables.uint32View[0] = _tables.mantissaTable[_tables.offsetTable[m] + (val & 0x3ff)] + _tables.exponentTable[m];\n  return _tables.floatView[0];\n}\n\n/**\n * A class containing utility functions for data.\n *\n * @hideconstructor\n */\nclass DataUtils {\n  /**\n   * Returns a half precision floating point value (FP16) from the given single\n   * precision floating point value (FP32).\n   *\n   * @param {number} val - A single precision floating point value.\n   * @return {number} The FP16 value.\n   */\n  static toHalfFloat(val) {\n    return toHalfFloat(val);\n  }\n\n  /**\n   * Returns a single precision floating point value (FP32) from the given half\n   * precision floating point value (FP16).\n   *\n   * @param {number} val - A half precision floating point value.\n   * @return {number} The FP32 value.\n   */\n  static fromHalfFloat(val) {\n    return fromHalfFloat(val);\n  }\n}\nconst _vector$9 = /*@__PURE__*/new Vector3();\nconst _vector2$1 = /*@__PURE__*/new Vector2();\nlet _id$2 = 0;\n\n/**\n * This class stores data for an attribute (such as vertex positions, face\n * indices, normals, colors, UVs, and any custom attributes ) associated with\n * a geometry, which allows for more efficient passing of data to the GPU.\n *\n * When working with vector-like data, the `fromBufferAttribute( attribute, index )`\n * helper methods on vector and color class might be helpful. E.g. {@link Vector3#fromBufferAttribute}.\n */\nclass BufferAttribute {\n  /**\n   * Constructs a new buffer attribute.\n   *\n   * @param {TypedArray} array - The array holding the attribute data.\n   * @param {number} itemSize - The item size.\n   * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n   */\n  constructor(array, itemSize) {\n    let normalized = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (Array.isArray(array)) {\n      throw new TypeError('THREE.BufferAttribute: array should be a Typed Array.');\n    }\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isBufferAttribute = true;\n\n    /**\n     * The ID of the buffer attribute.\n     *\n     * @name BufferAttribute#id\n     * @type {number}\n     * @readonly\n     */\n    Object.defineProperty(this, 'id', {\n      value: _id$2++\n    });\n\n    /**\n     * The name of the buffer attribute.\n     *\n     * @type {string}\n     */\n    this.name = '';\n\n    /**\n     * The array holding the attribute data. It should have `itemSize * numVertices`\n     * elements, where `numVertices` is the number of vertices in the associated geometry.\n     *\n     * @type {TypedArray}\n     */\n    this.array = array;\n\n    /**\n     * The number of values of the array that should be associated with a particular vertex.\n     * For instance, if this attribute is storing a 3-component vector (such as a position,\n     * normal, or color), then the value should be `3`.\n     *\n     * @type {number}\n     */\n    this.itemSize = itemSize;\n\n    /**\n     * Represents the number of items this buffer attribute stores. It is internally computed\n     * by dividing the `array` length by the `itemSize`.\n     *\n     * @type {number}\n     * @readonly\n     */\n    this.count = array !== undefined ? array.length / itemSize : 0;\n\n    /**\n     * Applies to integer data only. Indicates how the underlying data in the buffer maps to\n     * the values in the GLSL code. For instance, if `array` is an instance of `UInt16Array`,\n     * and `normalized` is `true`, the values `0 -+65535` in the array data will be mapped to\n     * `0.0f - +1.0f` in the GLSL attribute. If `normalized` is `false`, the values will be converted\n     * to floats unmodified, i.e. `65535` becomes `65535.0f`.\n     *\n     * @type {boolean}\n     */\n    this.normalized = normalized;\n\n    /**\n     * Defines the intended usage pattern of the data store for optimization purposes.\n     *\n     * Note: After the initial use of a buffer, its usage cannot be changed. Instead,\n     * instantiate a new one and set the desired usage before the next render.\n     *\n     * @type {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)}\n     * @default StaticDrawUsage\n     */\n    this.usage = StaticDrawUsage;\n\n    /**\n     * This can be used to only update some components of stored vectors (for example, just the\n     * component related to color). Use the `addUpdateRange()` function to add ranges to this array.\n     *\n     * @type {Array<Object>}\n     */\n    this.updateRanges = [];\n\n    /**\n     * Configures the bound GPU type for use in shaders.\n     *\n     * Note: this only has an effect for integer arrays and is not configurable for float arrays.\n     * For lower precision float types, use `Float16BufferAttribute`.\n     *\n     * @type {(FloatType|IntType)}\n     * @default FloatType\n     */\n    this.gpuType = FloatType;\n\n    /**\n     * A version number, incremented every time the `needsUpdate` is set to `true`.\n     *\n     * @type {number}\n     */\n    this.version = 0;\n  }\n\n  /**\n   * A callback function that is executed after the renderer has transferred the attribute\n   * array data to the GPU.\n   */\n  onUploadCallback() {}\n\n  /**\n   * Flag to indicate that this attribute has changed and should be re-sent to\n   * the GPU. Set this to `true` when you modify the value of the array.\n   *\n   * @type {number}\n   * @default false\n   * @param {boolean} value\n   */\n  set needsUpdate(value) {\n    if (value === true) this.version++;\n  }\n\n  /**\n   * Sets the usage of this buffer attribute.\n   *\n   * @param {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)} value - The usage to set.\n   * @return {BufferAttribute} A reference to this buffer attribute.\n   */\n  setUsage(value) {\n    this.usage = value;\n    return this;\n  }\n\n  /**\n   * Adds a range of data in the data array to be updated on the GPU.\n   *\n   * @param {number} start - Position at which to start update.\n   * @param {number} count - The number of components to update.\n   */\n  addUpdateRange(start, count) {\n    this.updateRanges.push({\n      start,\n      count\n    });\n  }\n\n  /**\n   * Clears the update ranges.\n   */\n  clearUpdateRanges() {\n    this.updateRanges.length = 0;\n  }\n\n  /**\n   * Copies the values of the given buffer attribute to this instance.\n   *\n   * @param {BufferAttribute} source - The buffer attribute to copy.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  copy(source) {\n    this.name = source.name;\n    this.array = new source.array.constructor(source.array);\n    this.itemSize = source.itemSize;\n    this.count = source.count;\n    this.normalized = source.normalized;\n    this.usage = source.usage;\n    this.gpuType = source.gpuType;\n    return this;\n  }\n\n  /**\n   * Copies a vector from the given buffer attribute to this one. The start\n   * and destination position in the attribute buffers are represented by the\n   * given indices.\n   *\n   * @param {number} index1 - The destination index into this buffer attribute.\n   * @param {BufferAttribute} attribute - The buffer attribute to copy from.\n   * @param {number} index2 - The source index into the given buffer attribute.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  copyAt(index1, attribute, index2) {\n    index1 *= this.itemSize;\n    index2 *= attribute.itemSize;\n    for (let i = 0, l = this.itemSize; i < l; i++) {\n      this.array[index1 + i] = attribute.array[index2 + i];\n    }\n    return this;\n  }\n\n  /**\n   * Copies the given array data into this buffer attribute.\n   *\n   * @param {(TypedArray|Array)} array - The array to copy.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  copyArray(array) {\n    this.array.set(array);\n    return this;\n  }\n\n  /**\n   * Applies the given 3x3 matrix to the given attribute. Works with\n   * item size `2` and `3`.\n   *\n   * @param {Matrix3} m - The matrix to apply.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  applyMatrix3(m) {\n    if (this.itemSize === 2) {\n      for (let i = 0, l = this.count; i < l; i++) {\n        _vector2$1.fromBufferAttribute(this, i);\n        _vector2$1.applyMatrix3(m);\n        this.setXY(i, _vector2$1.x, _vector2$1.y);\n      }\n    } else if (this.itemSize === 3) {\n      for (let i = 0, l = this.count; i < l; i++) {\n        _vector$9.fromBufferAttribute(this, i);\n        _vector$9.applyMatrix3(m);\n        this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Applies the given 4x4 matrix to the given attribute. Only works with\n   * item size `3`.\n   *\n   * @param {Matrix4} m - The matrix to apply.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  applyMatrix4(m) {\n    for (let i = 0, l = this.count; i < l; i++) {\n      _vector$9.fromBufferAttribute(this, i);\n      _vector$9.applyMatrix4(m);\n      this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n    }\n    return this;\n  }\n\n  /**\n   * Applies the given 3x3 normal matrix to the given attribute. Only works with\n   * item size `3`.\n   *\n   * @param {Matrix3} m - The normal matrix to apply.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  applyNormalMatrix(m) {\n    for (let i = 0, l = this.count; i < l; i++) {\n      _vector$9.fromBufferAttribute(this, i);\n      _vector$9.applyNormalMatrix(m);\n      this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n    }\n    return this;\n  }\n\n  /**\n   * Applies the given 4x4 matrix to the given attribute. Only works with\n   * item size `3` and with direction vectors.\n   *\n   * @param {Matrix4} m - The matrix to apply.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  transformDirection(m) {\n    for (let i = 0, l = this.count; i < l; i++) {\n      _vector$9.fromBufferAttribute(this, i);\n      _vector$9.transformDirection(m);\n      this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n    }\n    return this;\n  }\n\n  /**\n   * Sets the given array data in the buffer attribute.\n   *\n   * @param {(TypedArray|Array)} value - The array data to set.\n   * @param {number} [offset=0] - The offset in this buffer attribute's array.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  set(value) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    // Matching BufferAttribute constructor, do not normalize the array.\n    this.array.set(value, offset);\n    return this;\n  }\n\n  /**\n   * Returns the given component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @param {number} component - The component index.\n   * @return {number} The returned value.\n   */\n  getComponent(index, component) {\n    let value = this.array[index * this.itemSize + component];\n    if (this.normalized) value = denormalize(value, this.array);\n    return value;\n  }\n\n  /**\n   * Sets the given value to the given component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @param {number} component - The component index.\n   * @param {number} value - The value to set.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  setComponent(index, component, value) {\n    if (this.normalized) value = normalize(value, this.array);\n    this.array[index * this.itemSize + component] = value;\n    return this;\n  }\n\n  /**\n   * Returns the x component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @return {number} The x component.\n   */\n  getX(index) {\n    let x = this.array[index * this.itemSize];\n    if (this.normalized) x = denormalize(x, this.array);\n    return x;\n  }\n\n  /**\n   * Sets the x component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @param {number} x - The value to set.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  setX(index, x) {\n    if (this.normalized) x = normalize(x, this.array);\n    this.array[index * this.itemSize] = x;\n    return this;\n  }\n\n  /**\n   * Returns the y component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @return {number} The y component.\n   */\n  getY(index) {\n    let y = this.array[index * this.itemSize + 1];\n    if (this.normalized) y = denormalize(y, this.array);\n    return y;\n  }\n\n  /**\n   * Sets the y component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @param {number} y - The value to set.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  setY(index, y) {\n    if (this.normalized) y = normalize(y, this.array);\n    this.array[index * this.itemSize + 1] = y;\n    return this;\n  }\n\n  /**\n   * Returns the z component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @return {number} The z component.\n   */\n  getZ(index) {\n    let z = this.array[index * this.itemSize + 2];\n    if (this.normalized) z = denormalize(z, this.array);\n    return z;\n  }\n\n  /**\n   * Sets the z component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @param {number} z - The value to set.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  setZ(index, z) {\n    if (this.normalized) z = normalize(z, this.array);\n    this.array[index * this.itemSize + 2] = z;\n    return this;\n  }\n\n  /**\n   * Returns the w component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @return {number} The w component.\n   */\n  getW(index) {\n    let w = this.array[index * this.itemSize + 3];\n    if (this.normalized) w = denormalize(w, this.array);\n    return w;\n  }\n\n  /**\n   * Sets the w component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @param {number} w - The value to set.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  setW(index, w) {\n    if (this.normalized) w = normalize(w, this.array);\n    this.array[index * this.itemSize + 3] = w;\n    return this;\n  }\n\n  /**\n   * Sets the x and y component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @param {number} x - The value for the x component to set.\n   * @param {number} y - The value for the y component to set.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  setXY(index, x, y) {\n    index *= this.itemSize;\n    if (this.normalized) {\n      x = normalize(x, this.array);\n      y = normalize(y, this.array);\n    }\n    this.array[index + 0] = x;\n    this.array[index + 1] = y;\n    return this;\n  }\n\n  /**\n   * Sets the x, y and z component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @param {number} x - The value for the x component to set.\n   * @param {number} y - The value for the y component to set.\n   * @param {number} z - The value for the z component to set.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  setXYZ(index, x, y, z) {\n    index *= this.itemSize;\n    if (this.normalized) {\n      x = normalize(x, this.array);\n      y = normalize(y, this.array);\n      z = normalize(z, this.array);\n    }\n    this.array[index + 0] = x;\n    this.array[index + 1] = y;\n    this.array[index + 2] = z;\n    return this;\n  }\n\n  /**\n   * Sets the x, y, z and w component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @param {number} x - The value for the x component to set.\n   * @param {number} y - The value for the y component to set.\n   * @param {number} z - The value for the z component to set.\n   * @param {number} w - The value for the w component to set.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  setXYZW(index, x, y, z, w) {\n    index *= this.itemSize;\n    if (this.normalized) {\n      x = normalize(x, this.array);\n      y = normalize(y, this.array);\n      z = normalize(z, this.array);\n      w = normalize(w, this.array);\n    }\n    this.array[index + 0] = x;\n    this.array[index + 1] = y;\n    this.array[index + 2] = z;\n    this.array[index + 3] = w;\n    return this;\n  }\n\n  /**\n   * Sets the given callback function that is executed after the Renderer has transferred\n   * the attribute array data to the GPU. Can be used to perform clean-up operations after\n   * the upload when attribute data are not needed anymore on the CPU side.\n   *\n   * @param {Function} callback - The `onUpload()` callback.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  onUpload(callback) {\n    this.onUploadCallback = callback;\n    return this;\n  }\n\n  /**\n   * Returns a new buffer attribute with copied values from this instance.\n   *\n   * @return {BufferAttribute} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor(this.array, this.itemSize).copy(this);\n  }\n\n  /**\n   * Serializes the buffer attribute into JSON.\n   *\n   * @return {Object} A JSON object representing the serialized buffer attribute.\n   */\n  toJSON() {\n    const data = {\n      itemSize: this.itemSize,\n      type: this.array.constructor.name,\n      array: Array.from(this.array),\n      normalized: this.normalized\n    };\n    if (this.name !== '') data.name = this.name;\n    if (this.usage !== StaticDrawUsage) data.usage = this.usage;\n    return data;\n  }\n}\n\n/**\n * Convenient class that can be used when creating a `Int8` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */\nclass Int8BufferAttribute extends BufferAttribute {\n  /**\n   * Constructs a new buffer attribute.\n   *\n   * @param {(Array<number>|Int8Array)} array - The array holding the attribute data.\n   * @param {number} itemSize - The item size.\n   * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n   */\n  constructor(array, itemSize, normalized) {\n    super(new Int8Array(array), itemSize, normalized);\n  }\n}\n\n/**\n * Convenient class that can be used when creating a `UInt8` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */\nclass Uint8BufferAttribute extends BufferAttribute {\n  /**\n   * Constructs a new buffer attribute.\n   *\n   * @param {(Array<number>|Uint8Array)} array - The array holding the attribute data.\n   * @param {number} itemSize - The item size.\n   * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n   */\n  constructor(array, itemSize, normalized) {\n    super(new Uint8Array(array), itemSize, normalized);\n  }\n}\n\n/**\n * Convenient class that can be used when creating a `UInt8Clamped` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */\nclass Uint8ClampedBufferAttribute extends BufferAttribute {\n  /**\n   * Constructs a new buffer attribute.\n   *\n   * @param {(Array<number>|Uint8ClampedArray)} array - The array holding the attribute data.\n   * @param {number} itemSize - The item size.\n   * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n   */\n  constructor(array, itemSize, normalized) {\n    super(new Uint8ClampedArray(array), itemSize, normalized);\n  }\n}\n\n/**\n * Convenient class that can be used when creating a `Int16` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */\nclass Int16BufferAttribute extends BufferAttribute {\n  /**\n   * Constructs a new buffer attribute.\n   *\n   * @param {(Array<number>|Int16Array)} array - The array holding the attribute data.\n   * @param {number} itemSize - The item size.\n   * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n   */\n  constructor(array, itemSize, normalized) {\n    super(new Int16Array(array), itemSize, normalized);\n  }\n}\n\n/**\n * Convenient class that can be used when creating a `UInt16` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */\nclass Uint16BufferAttribute extends BufferAttribute {\n  /**\n   * Constructs a new buffer attribute.\n   *\n   * @param {(Array<number>|Uint16Array)} array - The array holding the attribute data.\n   * @param {number} itemSize - The item size.\n   * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n   */\n  constructor(array, itemSize, normalized) {\n    super(new Uint16Array(array), itemSize, normalized);\n  }\n}\n\n/**\n * Convenient class that can be used when creating a `Int32` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */\nclass Int32BufferAttribute extends BufferAttribute {\n  /**\n   * Constructs a new buffer attribute.\n   *\n   * @param {(Array<number>|Int32Array)} array - The array holding the attribute data.\n   * @param {number} itemSize - The item size.\n   * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n   */\n  constructor(array, itemSize, normalized) {\n    super(new Int32Array(array), itemSize, normalized);\n  }\n}\n\n/**\n * Convenient class that can be used when creating a `UInt32` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */\nclass Uint32BufferAttribute extends BufferAttribute {\n  /**\n   * Constructs a new buffer attribute.\n   *\n   * @param {(Array<number>|Uint32Array)} array - The array holding the attribute data.\n   * @param {number} itemSize - The item size.\n   * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n   */\n  constructor(array, itemSize, normalized) {\n    super(new Uint32Array(array), itemSize, normalized);\n  }\n}\n\n/**\n * Convenient class that can be used when creating a `Float16` buffer attribute with\n * a plain `Array` instance.\n *\n * This class automatically converts to and from FP16 since `Float16Array` is not\n * natively supported in JavaScript.\n *\n * @augments BufferAttribute\n */\nclass Float16BufferAttribute extends BufferAttribute {\n  /**\n   * Constructs a new buffer attribute.\n   *\n   * @param {(Array<number>|Uint16Array)} array - The array holding the attribute data.\n   * @param {number} itemSize - The item size.\n   * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n   */\n  constructor(array, itemSize, normalized) {\n    super(new Uint16Array(array), itemSize, normalized);\n    this.isFloat16BufferAttribute = true;\n  }\n  getX(index) {\n    let x = fromHalfFloat(this.array[index * this.itemSize]);\n    if (this.normalized) x = denormalize(x, this.array);\n    return x;\n  }\n  setX(index, x) {\n    if (this.normalized) x = normalize(x, this.array);\n    this.array[index * this.itemSize] = toHalfFloat(x);\n    return this;\n  }\n  getY(index) {\n    let y = fromHalfFloat(this.array[index * this.itemSize + 1]);\n    if (this.normalized) y = denormalize(y, this.array);\n    return y;\n  }\n  setY(index, y) {\n    if (this.normalized) y = normalize(y, this.array);\n    this.array[index * this.itemSize + 1] = toHalfFloat(y);\n    return this;\n  }\n  getZ(index) {\n    let z = fromHalfFloat(this.array[index * this.itemSize + 2]);\n    if (this.normalized) z = denormalize(z, this.array);\n    return z;\n  }\n  setZ(index, z) {\n    if (this.normalized) z = normalize(z, this.array);\n    this.array[index * this.itemSize + 2] = toHalfFloat(z);\n    return this;\n  }\n  getW(index) {\n    let w = fromHalfFloat(this.array[index * this.itemSize + 3]);\n    if (this.normalized) w = denormalize(w, this.array);\n    return w;\n  }\n  setW(index, w) {\n    if (this.normalized) w = normalize(w, this.array);\n    this.array[index * this.itemSize + 3] = toHalfFloat(w);\n    return this;\n  }\n  setXY(index, x, y) {\n    index *= this.itemSize;\n    if (this.normalized) {\n      x = normalize(x, this.array);\n      y = normalize(y, this.array);\n    }\n    this.array[index + 0] = toHalfFloat(x);\n    this.array[index + 1] = toHalfFloat(y);\n    return this;\n  }\n  setXYZ(index, x, y, z) {\n    index *= this.itemSize;\n    if (this.normalized) {\n      x = normalize(x, this.array);\n      y = normalize(y, this.array);\n      z = normalize(z, this.array);\n    }\n    this.array[index + 0] = toHalfFloat(x);\n    this.array[index + 1] = toHalfFloat(y);\n    this.array[index + 2] = toHalfFloat(z);\n    return this;\n  }\n  setXYZW(index, x, y, z, w) {\n    index *= this.itemSize;\n    if (this.normalized) {\n      x = normalize(x, this.array);\n      y = normalize(y, this.array);\n      z = normalize(z, this.array);\n      w = normalize(w, this.array);\n    }\n    this.array[index + 0] = toHalfFloat(x);\n    this.array[index + 1] = toHalfFloat(y);\n    this.array[index + 2] = toHalfFloat(z);\n    this.array[index + 3] = toHalfFloat(w);\n    return this;\n  }\n}\n\n/**\n * Convenient class that can be used when creating a `Float32` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */\nclass Float32BufferAttribute extends BufferAttribute {\n  /**\n   * Constructs a new buffer attribute.\n   *\n   * @param {(Array<number>|Float32Array)} array - The array holding the attribute data.\n   * @param {number} itemSize - The item size.\n   * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n   */\n  constructor(array, itemSize, normalized) {\n    super(new Float32Array(array), itemSize, normalized);\n  }\n}\nlet _id$1 = 0;\nconst _m1 = /*@__PURE__*/new Matrix4();\nconst _obj = /*@__PURE__*/new Object3D();\nconst _offset = /*@__PURE__*/new Vector3();\nconst _box$2 = /*@__PURE__*/new Box3();\nconst _boxMorphTargets = /*@__PURE__*/new Box3();\nconst _vector$8 = /*@__PURE__*/new Vector3();\n\n/**\n * A representation of mesh, line, or point geometry. Includes vertex\n * positions, face indices, normals, colors, UVs, and custom attributes\n * within buffers, reducing the cost of passing all this data to the GPU.\n *\n * ```js\n * const geometry = new THREE.BufferGeometry();\n * // create a simple square shape. We duplicate the top left and bottom right\n * // vertices because each vertex needs to appear once per triangle.\n * const vertices = new Float32Array( [\n * \t-1.0, -1.0,  1.0, // v0\n * \t 1.0, -1.0,  1.0, // v1\n * \t 1.0,  1.0,  1.0, // v2\n *\n * \t 1.0,  1.0,  1.0, // v3\n * \t-1.0,  1.0,  1.0, // v4\n * \t-1.0, -1.0,  1.0  // v5\n * ] );\n * // itemSize = 3 because there are 3 values (components) per vertex\n * geometry.setAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n * const material = new THREE.MeshBasicMaterial( { color: 0xff0000 } );\n * const mesh = new THREE.Mesh( geometry, material );\n * ```\n *\n * @augments EventDispatcher\n */\nclass BufferGeometry extends EventDispatcher {\n  /**\n   * Constructs a new geometry.\n   */\n  constructor() {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isBufferGeometry = true;\n\n    /**\n     * The ID of the geometry.\n     *\n     * @name BufferGeometry#id\n     * @type {number}\n     * @readonly\n     */\n    Object.defineProperty(this, 'id', {\n      value: _id$1++\n    });\n\n    /**\n     * The UUID of the geometry.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.uuid = generateUUID();\n\n    /**\n     * The name of the geometry.\n     *\n     * @type {string}\n     */\n    this.name = '';\n    this.type = 'BufferGeometry';\n\n    /**\n     * Allows for vertices to be re-used across multiple triangles; this is\n     * called using \"indexed triangles\". Each triangle is associated with the\n     * indices of three vertices. This attribute therefore stores the index of\n     * each vertex for each triangular face. If this attribute is not set, the\n     * renderer assumes that each three contiguous positions represent a single triangle.\n     *\n     * @type {?BufferAttribute}\n     * @default null\n     */\n    this.index = null;\n\n    /**\n     * A (storage) buffer attribute which was generated with a compute shader and\n     * now defines indirect draw calls.\n     *\n     * Can only be used with {@link WebGPURenderer} and a WebGPU backend.\n     *\n     * @type {?BufferAttribute}\n     * @default null\n     */\n    this.indirect = null;\n\n    /**\n     * This dictionary has as id the name of the attribute to be set and as value\n     * the buffer attribute to set it to. Rather than accessing this property directly,\n     * use `setAttribute()` and `getAttribute()` to access attributes of this geometry.\n     *\n     * @type {Object<string,(BufferAttribute|InterleavedBufferAttribute)>}\n     */\n    this.attributes = {};\n\n    /**\n     * This dictionary holds the morph targets of the geometry.\n     *\n     * Note: Once the geometry has been rendered, the morph attribute data cannot\n     * be changed. You will have to call `dispose()?, and create a new geometry instance.\n     *\n     * @type {Object}\n     */\n    this.morphAttributes = {};\n\n    /**\n     * Used to control the morph target behavior; when set to `true`, the morph\n     * target data is treated as relative offsets, rather than as absolute\n     * positions/normals.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.morphTargetsRelative = false;\n\n    /**\n     * Split the geometry into groups, each of which will be rendered in a\n     * separate draw call. This allows an array of materials to be used with the geometry.\n     *\n     * Use `addGroup()` and `clearGroups()` to edit groups, rather than modifying this array directly.\n     *\n     * Every vertex and index must belong to exactly one group — groups must not share vertices or\n     * indices, and must not leave vertices or indices unused.\n     *\n     * @type {Array<Object>}\n     */\n    this.groups = [];\n\n    /**\n     * Bounding box for the geometry which can be calculated with `computeBoundingBox()`.\n     *\n     * @type {Box3}\n     * @default null\n     */\n    this.boundingBox = null;\n\n    /**\n     * Bounding sphere for the geometry which can be calculated with `computeBoundingSphere()`.\n     *\n     * @type {Sphere}\n     * @default null\n     */\n    this.boundingSphere = null;\n\n    /**\n     * Determines the part of the geometry to render. This should not be set directly,\n     * instead use `setDrawRange()`.\n     *\n     * @type {{start:number,count:number}}\n     */\n    this.drawRange = {\n      start: 0,\n      count: Infinity\n    };\n\n    /**\n     * An object that can be used to store custom data about the geometry.\n     * It should not hold references to functions as these will not be cloned.\n     *\n     * @type {Object}\n     */\n    this.userData = {};\n  }\n\n  /**\n   * Returns the index of this geometry.\n   *\n   * @return {?BufferAttribute} The index. Returns `null` if no index is defined.\n   */\n  getIndex() {\n    return this.index;\n  }\n\n  /**\n   * Sets the given index to this geometry.\n   *\n   * @param {Array<number>|BufferAttribute} index - The index to set.\n   * @return {BufferGeometry} A reference to this instance.\n   */\n  setIndex(index) {\n    if (Array.isArray(index)) {\n      this.index = new (arrayNeedsUint32(index) ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);\n    } else {\n      this.index = index;\n    }\n    return this;\n  }\n\n  /**\n   * Sets the given indirect attribute to this geometry.\n   *\n   * @param {BufferAttribute} indirect - The attribute holding indirect draw calls.\n   * @return {BufferGeometry} A reference to this instance.\n   */\n  setIndirect(indirect) {\n    this.indirect = indirect;\n    return this;\n  }\n\n  /**\n   * Returns the indirect attribute of this geometry.\n   *\n   * @return {?BufferAttribute} The indirect attribute. Returns `null` if no indirect attribute is defined.\n   */\n  getIndirect() {\n    return this.indirect;\n  }\n\n  /**\n   * Returns the buffer attribute for the given name.\n   *\n   * @param {string} name - The attribute name.\n   * @return {BufferAttribute|InterleavedBufferAttribute|undefined} The buffer attribute.\n   * Returns `undefined` if not attribute has been found.\n   */\n  getAttribute(name) {\n    return this.attributes[name];\n  }\n\n  /**\n   * Sets the given attribute for the given name.\n   *\n   * @param {string} name - The attribute name.\n   * @param {BufferAttribute|InterleavedBufferAttribute} attribute - The attribute to set.\n   * @return {BufferGeometry} A reference to this instance.\n   */\n  setAttribute(name, attribute) {\n    this.attributes[name] = attribute;\n    return this;\n  }\n\n  /**\n   * Deletes the attribute for the given name.\n   *\n   * @param {string} name - The attribute name to delete.\n   * @return {BufferGeometry} A reference to this instance.\n   */\n  deleteAttribute(name) {\n    delete this.attributes[name];\n    return this;\n  }\n\n  /**\n   * Returns `true` if this geometry has an attribute for the given name.\n   *\n   * @param {string} name - The attribute name.\n   * @return {boolean} Whether this geometry has an attribute for the given name or not.\n   */\n  hasAttribute(name) {\n    return this.attributes[name] !== undefined;\n  }\n\n  /**\n   * Adds a group to this geometry.\n   *\n   * @param {number} start - The first element in this draw call. That is the first\n   * vertex for non-indexed geometry, otherwise the first triangle index.\n   * @param {number} count - Specifies how many vertices (or indices) are part of this group.\n   * @param {number} [materialIndex=0] - The material array index to use.\n   */\n  addGroup(start, count) {\n    let materialIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    this.groups.push({\n      start: start,\n      count: count,\n      materialIndex: materialIndex\n    });\n  }\n\n  /**\n   * Clears all groups.\n   */\n  clearGroups() {\n    this.groups = [];\n  }\n\n  /**\n   * Sets the draw range for this geometry.\n   *\n   * @param {number} start - The first vertex for non-indexed geometry, otherwise the first triangle index.\n   * @param {number} count - For non-indexed BufferGeometry, `count` is the number of vertices to render.\n   * For indexed BufferGeometry, `count` is the number of indices to render.\n   */\n  setDrawRange(start, count) {\n    this.drawRange.start = start;\n    this.drawRange.count = count;\n  }\n\n  /**\n   * Applies the given 4x4 transformation matrix to the geometry.\n   *\n   * @param {Matrix4} matrix - The matrix to apply.\n   * @return {BufferGeometry} A reference to this instance.\n   */\n  applyMatrix4(matrix) {\n    const position = this.attributes.position;\n    if (position !== undefined) {\n      position.applyMatrix4(matrix);\n      position.needsUpdate = true;\n    }\n    const normal = this.attributes.normal;\n    if (normal !== undefined) {\n      const normalMatrix = new Matrix3().getNormalMatrix(matrix);\n      normal.applyNormalMatrix(normalMatrix);\n      normal.needsUpdate = true;\n    }\n    const tangent = this.attributes.tangent;\n    if (tangent !== undefined) {\n      tangent.transformDirection(matrix);\n      tangent.needsUpdate = true;\n    }\n    if (this.boundingBox !== null) {\n      this.computeBoundingBox();\n    }\n    if (this.boundingSphere !== null) {\n      this.computeBoundingSphere();\n    }\n    return this;\n  }\n\n  /**\n   * Applies the rotation represented by the Quaternion to the geometry.\n   *\n   * @param {Quaternion} q - The Quaternion to apply.\n   * @return {BufferGeometry} A reference to this instance.\n   */\n  applyQuaternion(q) {\n    _m1.makeRotationFromQuaternion(q);\n    this.applyMatrix4(_m1);\n    return this;\n  }\n\n  /**\n   * Rotates the geometry about the X axis. This is typically done as a one time\n   * operation, and not during a loop. Use {@link Object3D#rotation} for typical\n   * real-time mesh rotation.\n   *\n   * @param {number} angle - The angle in radians.\n   * @return {BufferGeometry} A reference to this instance.\n   */\n  rotateX(angle) {\n    // rotate geometry around world x-axis\n\n    _m1.makeRotationX(angle);\n    this.applyMatrix4(_m1);\n    return this;\n  }\n\n  /**\n   * Rotates the geometry about the Y axis. This is typically done as a one time\n   * operation, and not during a loop. Use {@link Object3D#rotation} for typical\n   * real-time mesh rotation.\n   *\n   * @param {number} angle - The angle in radians.\n   * @return {BufferGeometry} A reference to this instance.\n   */\n  rotateY(angle) {\n    // rotate geometry around world y-axis\n\n    _m1.makeRotationY(angle);\n    this.applyMatrix4(_m1);\n    return this;\n  }\n\n  /**\n   * Rotates the geometry about the Z axis. This is typically done as a one time\n   * operation, and not during a loop. Use {@link Object3D#rotation} for typical\n   * real-time mesh rotation.\n   *\n   * @param {number} angle - The angle in radians.\n   * @return {BufferGeometry} A reference to this instance.\n   */\n  rotateZ(angle) {\n    // rotate geometry around world z-axis\n\n    _m1.makeRotationZ(angle);\n    this.applyMatrix4(_m1);\n    return this;\n  }\n\n  /**\n   * Translates the geometry. This is typically done as a one time\n   * operation, and not during a loop. Use {@link Object3D#position} for typical\n   * real-time mesh rotation.\n   *\n   * @param {number} x - The x offset.\n   * @param {number} y - The y offset.\n   * @param {number} z - The z offset.\n   * @return {BufferGeometry} A reference to this instance.\n   */\n  translate(x, y, z) {\n    // translate geometry\n\n    _m1.makeTranslation(x, y, z);\n    this.applyMatrix4(_m1);\n    return this;\n  }\n\n  /**\n   * Scales the geometry. This is typically done as a one time\n   * operation, and not during a loop. Use {@link Object3D#scale} for typical\n   * real-time mesh rotation.\n   *\n   * @param {number} x - The x scale.\n   * @param {number} y - The y scale.\n   * @param {number} z - The z scale.\n   * @return {BufferGeometry} A reference to this instance.\n   */\n  scale(x, y, z) {\n    // scale geometry\n\n    _m1.makeScale(x, y, z);\n    this.applyMatrix4(_m1);\n    return this;\n  }\n\n  /**\n   * Rotates the geometry to face a point in 3D space. This is typically done as a one time\n   * operation, and not during a loop. Use {@link Object3D#lookAt} for typical\n   * real-time mesh rotation.\n   *\n   * @param {Vector3} vector - The target point.\n   * @return {BufferGeometry} A reference to this instance.\n   */\n  lookAt(vector) {\n    _obj.lookAt(vector);\n    _obj.updateMatrix();\n    this.applyMatrix4(_obj.matrix);\n    return this;\n  }\n\n  /**\n   * Center the geometry based on its bounding box.\n   *\n   * @return {BufferGeometry} A reference to this instance.\n   */\n  center() {\n    this.computeBoundingBox();\n    this.boundingBox.getCenter(_offset).negate();\n    this.translate(_offset.x, _offset.y, _offset.z);\n    return this;\n  }\n\n  /**\n   * Defines a geometry by creating a `position` attribute based on the given array of points. The array\n   * can hold 2D or 3D vectors. When using two-dimensional data, the `z` coordinate for all vertices is\n   * set to `0`.\n   *\n   * If the method is used with an existing `position` attribute, the vertex data are overwritten with the\n   * data from the array. The length of the array must match the vertex count.\n   *\n   * @param {Array<Vector2>|Array<Vector3>} points - The points.\n   * @return {BufferGeometry} A reference to this instance.\n   */\n  setFromPoints(points) {\n    const positionAttribute = this.getAttribute('position');\n    if (positionAttribute === undefined) {\n      const position = [];\n      for (let i = 0, l = points.length; i < l; i++) {\n        const point = points[i];\n        position.push(point.x, point.y, point.z || 0);\n      }\n      this.setAttribute('position', new Float32BufferAttribute(position, 3));\n    } else {\n      const l = Math.min(points.length, positionAttribute.count); // make sure data do not exceed buffer size\n\n      for (let i = 0; i < l; i++) {\n        const point = points[i];\n        positionAttribute.setXYZ(i, point.x, point.y, point.z || 0);\n      }\n      if (points.length > positionAttribute.count) {\n        console.warn('THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry.');\n      }\n      positionAttribute.needsUpdate = true;\n    }\n    return this;\n  }\n\n  /**\n   * Computes the bounding box of the geometry, and updates the `boundingBox` member.\n   * The bounding box is not computed by the engine; it must be computed by your app.\n   * You may need to recompute the bounding box if the geometry vertices are modified.\n   */\n  computeBoundingBox() {\n    if (this.boundingBox === null) {\n      this.boundingBox = new Box3();\n    }\n    const position = this.attributes.position;\n    const morphAttributesPosition = this.morphAttributes.position;\n    if (position && position.isGLBufferAttribute) {\n      console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.', this);\n      this.boundingBox.set(new Vector3(-Infinity, -Infinity, -Infinity), new Vector3(+Infinity, +Infinity, +Infinity));\n      return;\n    }\n    if (position !== undefined) {\n      this.boundingBox.setFromBufferAttribute(position);\n\n      // process morph attributes if present\n\n      if (morphAttributesPosition) {\n        for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {\n          const morphAttribute = morphAttributesPosition[i];\n          _box$2.setFromBufferAttribute(morphAttribute);\n          if (this.morphTargetsRelative) {\n            _vector$8.addVectors(this.boundingBox.min, _box$2.min);\n            this.boundingBox.expandByPoint(_vector$8);\n            _vector$8.addVectors(this.boundingBox.max, _box$2.max);\n            this.boundingBox.expandByPoint(_vector$8);\n          } else {\n            this.boundingBox.expandByPoint(_box$2.min);\n            this.boundingBox.expandByPoint(_box$2.max);\n          }\n        }\n      }\n    } else {\n      this.boundingBox.makeEmpty();\n    }\n    if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {\n      console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this);\n    }\n  }\n\n  /**\n   * Computes the bounding sphere of the geometry, and updates the `boundingSphere` member.\n   * The engine automatically computes the bounding sphere when it is needed, e.g., for ray casting or view frustum culling.\n   * You may need to recompute the bounding sphere if the geometry vertices are modified.\n   */\n  computeBoundingSphere() {\n    if (this.boundingSphere === null) {\n      this.boundingSphere = new Sphere();\n    }\n    const position = this.attributes.position;\n    const morphAttributesPosition = this.morphAttributes.position;\n    if (position && position.isGLBufferAttribute) {\n      console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.', this);\n      this.boundingSphere.set(new Vector3(), Infinity);\n      return;\n    }\n    if (position) {\n      // first, find the center of the bounding sphere\n\n      const center = this.boundingSphere.center;\n      _box$2.setFromBufferAttribute(position);\n\n      // process morph attributes if present\n\n      if (morphAttributesPosition) {\n        for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {\n          const morphAttribute = morphAttributesPosition[i];\n          _boxMorphTargets.setFromBufferAttribute(morphAttribute);\n          if (this.morphTargetsRelative) {\n            _vector$8.addVectors(_box$2.min, _boxMorphTargets.min);\n            _box$2.expandByPoint(_vector$8);\n            _vector$8.addVectors(_box$2.max, _boxMorphTargets.max);\n            _box$2.expandByPoint(_vector$8);\n          } else {\n            _box$2.expandByPoint(_boxMorphTargets.min);\n            _box$2.expandByPoint(_boxMorphTargets.max);\n          }\n        }\n      }\n      _box$2.getCenter(center);\n\n      // second, try to find a boundingSphere with a radius smaller than the\n      // boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n      let maxRadiusSq = 0;\n      for (let i = 0, il = position.count; i < il; i++) {\n        _vector$8.fromBufferAttribute(position, i);\n        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));\n      }\n\n      // process morph attributes if present\n\n      if (morphAttributesPosition) {\n        for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {\n          const morphAttribute = morphAttributesPosition[i];\n          const morphTargetsRelative = this.morphTargetsRelative;\n          for (let j = 0, jl = morphAttribute.count; j < jl; j++) {\n            _vector$8.fromBufferAttribute(morphAttribute, j);\n            if (morphTargetsRelative) {\n              _offset.fromBufferAttribute(position, j);\n              _vector$8.add(_offset);\n            }\n            maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));\n          }\n        }\n      }\n      this.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n      if (isNaN(this.boundingSphere.radius)) {\n        console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this);\n      }\n    }\n  }\n\n  /**\n   * Calculates and adds a tangent attribute to this geometry.\n   *\n   * The computation is only supported for indexed geometries and if position, normal, and uv attributes\n   * are defined. When using a tangent space normal map, prefer the MikkTSpace algorithm provided by\n   * {@link BufferGeometryUtils#computeMikkTSpaceTangents} instead.\n   */\n  computeTangents() {\n    const index = this.index;\n    const attributes = this.attributes;\n\n    // based on http://www.terathon.com/code/tangent.html\n    // (per vertex tangents)\n\n    if (index === null || attributes.position === undefined || attributes.normal === undefined || attributes.uv === undefined) {\n      console.error('THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)');\n      return;\n    }\n    const positionAttribute = attributes.position;\n    const normalAttribute = attributes.normal;\n    const uvAttribute = attributes.uv;\n    if (this.hasAttribute('tangent') === false) {\n      this.setAttribute('tangent', new BufferAttribute(new Float32Array(4 * positionAttribute.count), 4));\n    }\n    const tangentAttribute = this.getAttribute('tangent');\n    const tan1 = [],\n      tan2 = [];\n    for (let i = 0; i < positionAttribute.count; i++) {\n      tan1[i] = new Vector3();\n      tan2[i] = new Vector3();\n    }\n    const vA = new Vector3(),\n      vB = new Vector3(),\n      vC = new Vector3(),\n      uvA = new Vector2(),\n      uvB = new Vector2(),\n      uvC = new Vector2(),\n      sdir = new Vector3(),\n      tdir = new Vector3();\n    function handleTriangle(a, b, c) {\n      vA.fromBufferAttribute(positionAttribute, a);\n      vB.fromBufferAttribute(positionAttribute, b);\n      vC.fromBufferAttribute(positionAttribute, c);\n      uvA.fromBufferAttribute(uvAttribute, a);\n      uvB.fromBufferAttribute(uvAttribute, b);\n      uvC.fromBufferAttribute(uvAttribute, c);\n      vB.sub(vA);\n      vC.sub(vA);\n      uvB.sub(uvA);\n      uvC.sub(uvA);\n      const r = 1.0 / (uvB.x * uvC.y - uvC.x * uvB.y);\n\n      // silently ignore degenerate uv triangles having coincident or colinear vertices\n\n      if (!isFinite(r)) return;\n      sdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);\n      tdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r);\n      tan1[a].add(sdir);\n      tan1[b].add(sdir);\n      tan1[c].add(sdir);\n      tan2[a].add(tdir);\n      tan2[b].add(tdir);\n      tan2[c].add(tdir);\n    }\n    let groups = this.groups;\n    if (groups.length === 0) {\n      groups = [{\n        start: 0,\n        count: index.count\n      }];\n    }\n    for (let i = 0, il = groups.length; i < il; ++i) {\n      const group = groups[i];\n      const start = group.start;\n      const count = group.count;\n      for (let j = start, jl = start + count; j < jl; j += 3) {\n        handleTriangle(index.getX(j + 0), index.getX(j + 1), index.getX(j + 2));\n      }\n    }\n    const tmp = new Vector3(),\n      tmp2 = new Vector3();\n    const n = new Vector3(),\n      n2 = new Vector3();\n    function handleVertex(v) {\n      n.fromBufferAttribute(normalAttribute, v);\n      n2.copy(n);\n      const t = tan1[v];\n\n      // Gram-Schmidt orthogonalize\n\n      tmp.copy(t);\n      tmp.sub(n.multiplyScalar(n.dot(t))).normalize();\n\n      // Calculate handedness\n\n      tmp2.crossVectors(n2, t);\n      const test = tmp2.dot(tan2[v]);\n      const w = test < 0.0 ? -1 : 1.0;\n      tangentAttribute.setXYZW(v, tmp.x, tmp.y, tmp.z, w);\n    }\n    for (let i = 0, il = groups.length; i < il; ++i) {\n      const group = groups[i];\n      const start = group.start;\n      const count = group.count;\n      for (let j = start, jl = start + count; j < jl; j += 3) {\n        handleVertex(index.getX(j + 0));\n        handleVertex(index.getX(j + 1));\n        handleVertex(index.getX(j + 2));\n      }\n    }\n  }\n\n  /**\n   * Computes vertex normals for the given vertex data. For indexed geometries, the method sets\n   * each vertex normal to be the average of the face normals of the faces that share that vertex.\n   * For non-indexed geometries, vertices are not shared, and the method sets each vertex normal\n   * to be the same as the face normal.\n   */\n  computeVertexNormals() {\n    const index = this.index;\n    const positionAttribute = this.getAttribute('position');\n    if (positionAttribute !== undefined) {\n      let normalAttribute = this.getAttribute('normal');\n      if (normalAttribute === undefined) {\n        normalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);\n        this.setAttribute('normal', normalAttribute);\n      } else {\n        // reset existing normals to zero\n\n        for (let i = 0, il = normalAttribute.count; i < il; i++) {\n          normalAttribute.setXYZ(i, 0, 0, 0);\n        }\n      }\n      const pA = new Vector3(),\n        pB = new Vector3(),\n        pC = new Vector3();\n      const nA = new Vector3(),\n        nB = new Vector3(),\n        nC = new Vector3();\n      const cb = new Vector3(),\n        ab = new Vector3();\n\n      // indexed elements\n\n      if (index) {\n        for (let i = 0, il = index.count; i < il; i += 3) {\n          const vA = index.getX(i + 0);\n          const vB = index.getX(i + 1);\n          const vC = index.getX(i + 2);\n          pA.fromBufferAttribute(positionAttribute, vA);\n          pB.fromBufferAttribute(positionAttribute, vB);\n          pC.fromBufferAttribute(positionAttribute, vC);\n          cb.subVectors(pC, pB);\n          ab.subVectors(pA, pB);\n          cb.cross(ab);\n          nA.fromBufferAttribute(normalAttribute, vA);\n          nB.fromBufferAttribute(normalAttribute, vB);\n          nC.fromBufferAttribute(normalAttribute, vC);\n          nA.add(cb);\n          nB.add(cb);\n          nC.add(cb);\n          normalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);\n          normalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);\n          normalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);\n        }\n      } else {\n        // non-indexed elements (unconnected triangle soup)\n\n        for (let i = 0, il = positionAttribute.count; i < il; i += 3) {\n          pA.fromBufferAttribute(positionAttribute, i + 0);\n          pB.fromBufferAttribute(positionAttribute, i + 1);\n          pC.fromBufferAttribute(positionAttribute, i + 2);\n          cb.subVectors(pC, pB);\n          ab.subVectors(pA, pB);\n          cb.cross(ab);\n          normalAttribute.setXYZ(i + 0, cb.x, cb.y, cb.z);\n          normalAttribute.setXYZ(i + 1, cb.x, cb.y, cb.z);\n          normalAttribute.setXYZ(i + 2, cb.x, cb.y, cb.z);\n        }\n      }\n      this.normalizeNormals();\n      normalAttribute.needsUpdate = true;\n    }\n  }\n\n  /**\n   * Ensures every normal vector in a geometry will have a magnitude of `1`. This will\n   * correct lighting on the geometry surfaces.\n   */\n  normalizeNormals() {\n    const normals = this.attributes.normal;\n    for (let i = 0, il = normals.count; i < il; i++) {\n      _vector$8.fromBufferAttribute(normals, i);\n      _vector$8.normalize();\n      normals.setXYZ(i, _vector$8.x, _vector$8.y, _vector$8.z);\n    }\n  }\n\n  /**\n   * Return a new non-index version of this indexed geometry. If the geometry\n   * is already non-indexed, the method is a NOOP.\n   *\n   * @return {BufferGeometry} The non-indexed version of this indexed geometry.\n   */\n  toNonIndexed() {\n    function convertBufferAttribute(attribute, indices) {\n      const array = attribute.array;\n      const itemSize = attribute.itemSize;\n      const normalized = attribute.normalized;\n      const array2 = new array.constructor(indices.length * itemSize);\n      let index = 0,\n        index2 = 0;\n      for (let i = 0, l = indices.length; i < l; i++) {\n        if (attribute.isInterleavedBufferAttribute) {\n          index = indices[i] * attribute.data.stride + attribute.offset;\n        } else {\n          index = indices[i] * itemSize;\n        }\n        for (let j = 0; j < itemSize; j++) {\n          array2[index2++] = array[index++];\n        }\n      }\n      return new BufferAttribute(array2, itemSize, normalized);\n    }\n\n    //\n\n    if (this.index === null) {\n      console.warn('THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.');\n      return this;\n    }\n    const geometry2 = new BufferGeometry();\n    const indices = this.index.array;\n    const attributes = this.attributes;\n\n    // attributes\n\n    for (const name in attributes) {\n      const attribute = attributes[name];\n      const newAttribute = convertBufferAttribute(attribute, indices);\n      geometry2.setAttribute(name, newAttribute);\n    }\n\n    // morph attributes\n\n    const morphAttributes = this.morphAttributes;\n    for (const name in morphAttributes) {\n      const morphArray = [];\n      const morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes\n\n      for (let i = 0, il = morphAttribute.length; i < il; i++) {\n        const attribute = morphAttribute[i];\n        const newAttribute = convertBufferAttribute(attribute, indices);\n        morphArray.push(newAttribute);\n      }\n      geometry2.morphAttributes[name] = morphArray;\n    }\n    geometry2.morphTargetsRelative = this.morphTargetsRelative;\n\n    // groups\n\n    const groups = this.groups;\n    for (let i = 0, l = groups.length; i < l; i++) {\n      const group = groups[i];\n      geometry2.addGroup(group.start, group.count, group.materialIndex);\n    }\n    return geometry2;\n  }\n\n  /**\n   * Serializes the geometry into JSON.\n   *\n   * @return {Object} A JSON object representing the serialized geometry.\n   */\n  toJSON() {\n    const data = {\n      metadata: {\n        version: 4.6,\n        type: 'BufferGeometry',\n        generator: 'BufferGeometry.toJSON'\n      }\n    };\n\n    // standard BufferGeometry serialization\n\n    data.uuid = this.uuid;\n    data.type = this.type;\n    if (this.name !== '') data.name = this.name;\n    if (Object.keys(this.userData).length > 0) data.userData = this.userData;\n    if (this.parameters !== undefined) {\n      const parameters = this.parameters;\n      for (const key in parameters) {\n        if (parameters[key] !== undefined) data[key] = parameters[key];\n      }\n      return data;\n    }\n\n    // for simplicity the code assumes attributes are not shared across geometries, see #15811\n\n    data.data = {\n      attributes: {}\n    };\n    const index = this.index;\n    if (index !== null) {\n      data.data.index = {\n        type: index.array.constructor.name,\n        array: Array.prototype.slice.call(index.array)\n      };\n    }\n    const attributes = this.attributes;\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      data.data.attributes[key] = attribute.toJSON(data.data);\n    }\n    const morphAttributes = {};\n    let hasMorphAttributes = false;\n    for (const key in this.morphAttributes) {\n      const attributeArray = this.morphAttributes[key];\n      const array = [];\n      for (let i = 0, il = attributeArray.length; i < il; i++) {\n        const attribute = attributeArray[i];\n        array.push(attribute.toJSON(data.data));\n      }\n      if (array.length > 0) {\n        morphAttributes[key] = array;\n        hasMorphAttributes = true;\n      }\n    }\n    if (hasMorphAttributes) {\n      data.data.morphAttributes = morphAttributes;\n      data.data.morphTargetsRelative = this.morphTargetsRelative;\n    }\n    const groups = this.groups;\n    if (groups.length > 0) {\n      data.data.groups = JSON.parse(JSON.stringify(groups));\n    }\n    const boundingSphere = this.boundingSphere;\n    if (boundingSphere !== null) {\n      data.data.boundingSphere = {\n        center: boundingSphere.center.toArray(),\n        radius: boundingSphere.radius\n      };\n    }\n    return data;\n  }\n\n  /**\n   * Returns a new geometry with copied values from this instance.\n   *\n   * @return {BufferGeometry} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  /**\n   * Copies the values of the given geometry to this instance.\n   *\n   * @param {BufferGeometry} source - The geometry to copy.\n   * @return {BufferGeometry} A reference to this instance.\n   */\n  copy(source) {\n    // reset\n\n    this.index = null;\n    this.attributes = {};\n    this.morphAttributes = {};\n    this.groups = [];\n    this.boundingBox = null;\n    this.boundingSphere = null;\n\n    // used for storing cloned, shared data\n\n    const data = {};\n\n    // name\n\n    this.name = source.name;\n\n    // index\n\n    const index = source.index;\n    if (index !== null) {\n      this.setIndex(index.clone());\n    }\n\n    // attributes\n\n    const attributes = source.attributes;\n    for (const name in attributes) {\n      const attribute = attributes[name];\n      this.setAttribute(name, attribute.clone(data));\n    }\n\n    // morph attributes\n\n    const morphAttributes = source.morphAttributes;\n    for (const name in morphAttributes) {\n      const array = [];\n      const morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes\n\n      for (let i = 0, l = morphAttribute.length; i < l; i++) {\n        array.push(morphAttribute[i].clone(data));\n      }\n      this.morphAttributes[name] = array;\n    }\n    this.morphTargetsRelative = source.morphTargetsRelative;\n\n    // groups\n\n    const groups = source.groups;\n    for (let i = 0, l = groups.length; i < l; i++) {\n      const group = groups[i];\n      this.addGroup(group.start, group.count, group.materialIndex);\n    }\n\n    // bounding box\n\n    const boundingBox = source.boundingBox;\n    if (boundingBox !== null) {\n      this.boundingBox = boundingBox.clone();\n    }\n\n    // bounding sphere\n\n    const boundingSphere = source.boundingSphere;\n    if (boundingSphere !== null) {\n      this.boundingSphere = boundingSphere.clone();\n    }\n\n    // draw range\n\n    this.drawRange.start = source.drawRange.start;\n    this.drawRange.count = source.drawRange.count;\n\n    // user data\n\n    this.userData = source.userData;\n    return this;\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   *\n   * @fires BufferGeometry#dispose\n   */\n  dispose() {\n    this.dispatchEvent({\n      type: 'dispose'\n    });\n  }\n}\nconst _inverseMatrix$3 = /*@__PURE__*/new Matrix4();\nconst _ray$3 = /*@__PURE__*/new Ray();\nconst _sphere$6 = /*@__PURE__*/new Sphere();\nconst _sphereHitAt = /*@__PURE__*/new Vector3();\nconst _vA$1 = /*@__PURE__*/new Vector3();\nconst _vB$1 = /*@__PURE__*/new Vector3();\nconst _vC$1 = /*@__PURE__*/new Vector3();\nconst _tempA = /*@__PURE__*/new Vector3();\nconst _morphA = /*@__PURE__*/new Vector3();\nconst _intersectionPoint = /*@__PURE__*/new Vector3();\nconst _intersectionPointWorld = /*@__PURE__*/new Vector3();\n\n/**\n * Class representing triangular polygon mesh based objects.\n *\n * ```js\n * const geometry = new THREE.BoxGeometry( 1, 1, 1 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const mesh = new THREE.Mesh( geometry, material );\n * scene.add( mesh );\n * ```\n *\n * @augments Object3D\n */\nclass Mesh extends Object3D {\n  /**\n   * Constructs a new mesh.\n   *\n   * @param {BufferGeometry} [geometry] - The mesh geometry.\n   * @param {Material|Array<Material>} [material] - The mesh material.\n   */\n  constructor() {\n    let geometry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new BufferGeometry();\n    let material = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new MeshBasicMaterial();\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isMesh = true;\n    this.type = 'Mesh';\n\n    /**\n     * The mesh geometry.\n     *\n     * @type {BufferGeometry}\n     */\n    this.geometry = geometry;\n\n    /**\n     * The mesh material.\n     *\n     * @type {Material|Array<Material>}\n     * @default MeshBasicMaterial\n     */\n    this.material = material;\n\n    /**\n     * A dictionary representing the morph targets in the geometry. The key is the\n     * morph targets name, the value its attribute index. This member is `undefined`\n     * by default and only set when morph targets are detected in the geometry.\n     *\n     * @type {Object<String,number>|undefined}\n     * @default undefined\n     */\n    this.morphTargetDictionary = undefined;\n\n    /**\n     * An array of weights typically in the range `[0,1]` that specify how much of the morph\n     * is applied. This member is `undefined` by default and only set when morph targets are\n     * detected in the geometry.\n     *\n     * @type {Array<number>|undefined}\n     * @default undefined\n     */\n    this.morphTargetInfluences = undefined;\n    this.updateMorphTargets();\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    if (source.morphTargetInfluences !== undefined) {\n      this.morphTargetInfluences = source.morphTargetInfluences.slice();\n    }\n    if (source.morphTargetDictionary !== undefined) {\n      this.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);\n    }\n    this.material = Array.isArray(source.material) ? source.material.slice() : source.material;\n    this.geometry = source.geometry;\n    return this;\n  }\n\n  /**\n   * Sets the values of {@link Mesh#morphTargetDictionary} and {@link Mesh#morphTargetInfluences}\n   * to make sure existing morph targets can influence this 3D object.\n   */\n  updateMorphTargets() {\n    const geometry = this.geometry;\n    const morphAttributes = geometry.morphAttributes;\n    const keys = Object.keys(morphAttributes);\n    if (keys.length > 0) {\n      const morphAttribute = morphAttributes[keys[0]];\n      if (morphAttribute !== undefined) {\n        this.morphTargetInfluences = [];\n        this.morphTargetDictionary = {};\n        for (let m = 0, ml = morphAttribute.length; m < ml; m++) {\n          const name = morphAttribute[m].name || String(m);\n          this.morphTargetInfluences.push(0);\n          this.morphTargetDictionary[name] = m;\n        }\n      }\n    }\n  }\n\n  /**\n   * Returns the local-space position of the vertex at the given index, taking into\n   * account the current animation state of both morph targets and skinning.\n   *\n   * @param {number} index - The vertex index.\n   * @param {Vector3} target - The target object that is used to store the method's result.\n   * @return {Vector3} The vertex position in local space.\n   */\n  getVertexPosition(index, target) {\n    const geometry = this.geometry;\n    const position = geometry.attributes.position;\n    const morphPosition = geometry.morphAttributes.position;\n    const morphTargetsRelative = geometry.morphTargetsRelative;\n    target.fromBufferAttribute(position, index);\n    const morphInfluences = this.morphTargetInfluences;\n    if (morphPosition && morphInfluences) {\n      _morphA.set(0, 0, 0);\n      for (let i = 0, il = morphPosition.length; i < il; i++) {\n        const influence = morphInfluences[i];\n        const morphAttribute = morphPosition[i];\n        if (influence === 0) continue;\n        _tempA.fromBufferAttribute(morphAttribute, index);\n        if (morphTargetsRelative) {\n          _morphA.addScaledVector(_tempA, influence);\n        } else {\n          _morphA.addScaledVector(_tempA.sub(target), influence);\n        }\n      }\n      target.add(_morphA);\n    }\n    return target;\n  }\n\n  /**\n   * Computes intersection points between a casted ray and this line.\n   *\n   * @param {Raycaster} raycaster - The raycaster.\n   * @param {Array<Object>} intersects - The target array that holds the intersection points.\n   */\n  raycast(raycaster, intersects) {\n    const geometry = this.geometry;\n    const material = this.material;\n    const matrixWorld = this.matrixWorld;\n    if (material === undefined) return;\n\n    // test with bounding sphere in world space\n\n    if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n    _sphere$6.copy(geometry.boundingSphere);\n    _sphere$6.applyMatrix4(matrixWorld);\n\n    // check distance from ray origin to bounding sphere\n\n    _ray$3.copy(raycaster.ray).recast(raycaster.near);\n    if (_sphere$6.containsPoint(_ray$3.origin) === false) {\n      if (_ray$3.intersectSphere(_sphere$6, _sphereHitAt) === null) return;\n      if (_ray$3.origin.distanceToSquared(_sphereHitAt) > (raycaster.far - raycaster.near) ** 2) return;\n    }\n\n    // convert ray to local space of mesh\n\n    _inverseMatrix$3.copy(matrixWorld).invert();\n    _ray$3.copy(raycaster.ray).applyMatrix4(_inverseMatrix$3);\n\n    // test with bounding box in local space\n\n    if (geometry.boundingBox !== null) {\n      if (_ray$3.intersectsBox(geometry.boundingBox) === false) return;\n    }\n\n    // test for intersections with geometry\n\n    this._computeIntersections(raycaster, intersects, _ray$3);\n  }\n  _computeIntersections(raycaster, intersects, rayLocalSpace) {\n    let intersection;\n    const geometry = this.geometry;\n    const material = this.material;\n    const index = geometry.index;\n    const position = geometry.attributes.position;\n    const uv = geometry.attributes.uv;\n    const uv1 = geometry.attributes.uv1;\n    const normal = geometry.attributes.normal;\n    const groups = geometry.groups;\n    const drawRange = geometry.drawRange;\n    if (index !== null) {\n      // indexed buffer geometry\n\n      if (Array.isArray(material)) {\n        for (let i = 0, il = groups.length; i < il; i++) {\n          const group = groups[i];\n          const groupMaterial = material[group.materialIndex];\n          const start = Math.max(group.start, drawRange.start);\n          const end = Math.min(index.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));\n          for (let j = start, jl = end; j < jl; j += 3) {\n            const a = index.getX(j);\n            const b = index.getX(j + 1);\n            const c = index.getX(j + 2);\n            intersection = checkGeometryIntersection(this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);\n            if (intersection) {\n              intersection.faceIndex = Math.floor(j / 3); // triangle number in indexed buffer semantics\n              intersection.face.materialIndex = group.materialIndex;\n              intersects.push(intersection);\n            }\n          }\n        }\n      } else {\n        const start = Math.max(0, drawRange.start);\n        const end = Math.min(index.count, drawRange.start + drawRange.count);\n        for (let i = start, il = end; i < il; i += 3) {\n          const a = index.getX(i);\n          const b = index.getX(i + 1);\n          const c = index.getX(i + 2);\n          intersection = checkGeometryIntersection(this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);\n          if (intersection) {\n            intersection.faceIndex = Math.floor(i / 3); // triangle number in indexed buffer semantics\n            intersects.push(intersection);\n          }\n        }\n      }\n    } else if (position !== undefined) {\n      // non-indexed buffer geometry\n\n      if (Array.isArray(material)) {\n        for (let i = 0, il = groups.length; i < il; i++) {\n          const group = groups[i];\n          const groupMaterial = material[group.materialIndex];\n          const start = Math.max(group.start, drawRange.start);\n          const end = Math.min(position.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));\n          for (let j = start, jl = end; j < jl; j += 3) {\n            const a = j;\n            const b = j + 1;\n            const c = j + 2;\n            intersection = checkGeometryIntersection(this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);\n            if (intersection) {\n              intersection.faceIndex = Math.floor(j / 3); // triangle number in non-indexed buffer semantics\n              intersection.face.materialIndex = group.materialIndex;\n              intersects.push(intersection);\n            }\n          }\n        }\n      } else {\n        const start = Math.max(0, drawRange.start);\n        const end = Math.min(position.count, drawRange.start + drawRange.count);\n        for (let i = start, il = end; i < il; i += 3) {\n          const a = i;\n          const b = i + 1;\n          const c = i + 2;\n          intersection = checkGeometryIntersection(this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);\n          if (intersection) {\n            intersection.faceIndex = Math.floor(i / 3); // triangle number in non-indexed buffer semantics\n            intersects.push(intersection);\n          }\n        }\n      }\n    }\n  }\n}\nfunction checkIntersection$1(object, material, raycaster, ray, pA, pB, pC, point) {\n  let intersect;\n  if (material.side === BackSide) {\n    intersect = ray.intersectTriangle(pC, pB, pA, true, point);\n  } else {\n    intersect = ray.intersectTriangle(pA, pB, pC, material.side === FrontSide, point);\n  }\n  if (intersect === null) return null;\n  _intersectionPointWorld.copy(point);\n  _intersectionPointWorld.applyMatrix4(object.matrixWorld);\n  const distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);\n  if (distance < raycaster.near || distance > raycaster.far) return null;\n  return {\n    distance: distance,\n    point: _intersectionPointWorld.clone(),\n    object: object\n  };\n}\nfunction checkGeometryIntersection(object, material, raycaster, ray, uv, uv1, normal, a, b, c) {\n  object.getVertexPosition(a, _vA$1);\n  object.getVertexPosition(b, _vB$1);\n  object.getVertexPosition(c, _vC$1);\n  const intersection = checkIntersection$1(object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint);\n  if (intersection) {\n    const barycoord = new Vector3();\n    Triangle.getBarycoord(_intersectionPoint, _vA$1, _vB$1, _vC$1, barycoord);\n    if (uv) {\n      intersection.uv = Triangle.getInterpolatedAttribute(uv, a, b, c, barycoord, new Vector2());\n    }\n    if (uv1) {\n      intersection.uv1 = Triangle.getInterpolatedAttribute(uv1, a, b, c, barycoord, new Vector2());\n    }\n    if (normal) {\n      intersection.normal = Triangle.getInterpolatedAttribute(normal, a, b, c, barycoord, new Vector3());\n      if (intersection.normal.dot(ray.direction) > 0) {\n        intersection.normal.multiplyScalar(-1);\n      }\n    }\n    const face = {\n      a: a,\n      b: b,\n      c: c,\n      normal: new Vector3(),\n      materialIndex: 0\n    };\n    Triangle.getNormal(_vA$1, _vB$1, _vC$1, face.normal);\n    intersection.face = face;\n    intersection.barycoord = barycoord;\n  }\n  return intersection;\n}\n\n/**\n * A geometry class for a rectangular cuboid with a given width, height, and depth.\n * On creation, the cuboid is centred on the origin, with each edge parallel to one\n * of the axes.\n *\n * ```js\n * const geometry = new THREE.BoxGeometry( 1, 1, 1 );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n * const cube = new THREE.Mesh( geometry, material );\n * scene.add( cube );\n * ```\n *\n * @augments BufferGeometry\n */\nclass BoxGeometry extends BufferGeometry {\n  /**\n   * Constructs a new box geometry.\n   *\n   * @param {number} [width=1] - The width. That is, the length of the edges parallel to the X axis.\n   * @param {number} [height=1] - The height. That is, the length of the edges parallel to the Y axis.\n   * @param {number} [depth=1] - The depth. That is, the length of the edges parallel to the Z axis.\n   * @param {number} [widthSegments=1] - Number of segmented rectangular faces along the width of the sides.\n   * @param {number} [heightSegments=1] - Number of segmented rectangular faces along the height of the sides.\n   * @param {number} [depthSegments=1] - Number of segmented rectangular faces along the depth of the sides.\n   */\n  constructor() {\n    let width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let widthSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    let heightSegments = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n    let depthSegments = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n    super();\n    this.type = 'BoxGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      width: width,\n      height: height,\n      depth: depth,\n      widthSegments: widthSegments,\n      heightSegments: heightSegments,\n      depthSegments: depthSegments\n    };\n    const scope = this;\n\n    // segments\n\n    widthSegments = Math.floor(widthSegments);\n    heightSegments = Math.floor(heightSegments);\n    depthSegments = Math.floor(depthSegments);\n\n    // buffers\n\n    const indices = [];\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n\n    // helper variables\n\n    let numberOfVertices = 0;\n    let groupStart = 0;\n\n    // build each side of the box geometry\n\n    buildPlane('z', 'y', 'x', -1, -1, depth, height, width, depthSegments, heightSegments, 0); // px\n    buildPlane('z', 'y', 'x', 1, -1, depth, height, -width, depthSegments, heightSegments, 1); // nx\n    buildPlane('x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2); // py\n    buildPlane('x', 'z', 'y', 1, -1, width, depth, -height, widthSegments, depthSegments, 3); // ny\n    buildPlane('x', 'y', 'z', 1, -1, width, height, depth, widthSegments, heightSegments, 4); // pz\n    buildPlane('x', 'y', 'z', -1, -1, width, height, -depth, widthSegments, heightSegments, 5); // nz\n\n    // build geometry\n\n    this.setIndex(indices);\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n    function buildPlane(u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex) {\n      const segmentWidth = width / gridX;\n      const segmentHeight = height / gridY;\n      const widthHalf = width / 2;\n      const heightHalf = height / 2;\n      const depthHalf = depth / 2;\n      const gridX1 = gridX + 1;\n      const gridY1 = gridY + 1;\n      let vertexCounter = 0;\n      let groupCount = 0;\n      const vector = new Vector3();\n\n      // generate vertices, normals and uvs\n\n      for (let iy = 0; iy < gridY1; iy++) {\n        const y = iy * segmentHeight - heightHalf;\n        for (let ix = 0; ix < gridX1; ix++) {\n          const x = ix * segmentWidth - widthHalf;\n\n          // set values to correct vector component\n\n          vector[u] = x * udir;\n          vector[v] = y * vdir;\n          vector[w] = depthHalf;\n\n          // now apply vector to vertex buffer\n\n          vertices.push(vector.x, vector.y, vector.z);\n\n          // set values to correct vector component\n\n          vector[u] = 0;\n          vector[v] = 0;\n          vector[w] = depth > 0 ? 1 : -1;\n\n          // now apply vector to normal buffer\n\n          normals.push(vector.x, vector.y, vector.z);\n\n          // uvs\n\n          uvs.push(ix / gridX);\n          uvs.push(1 - iy / gridY);\n\n          // counters\n\n          vertexCounter += 1;\n        }\n      }\n\n      // indices\n\n      // 1. you need three indices to draw a single face\n      // 2. a single segment consists of two faces\n      // 3. so we need to generate six (2*3) indices per segment\n\n      for (let iy = 0; iy < gridY; iy++) {\n        for (let ix = 0; ix < gridX; ix++) {\n          const a = numberOfVertices + ix + gridX1 * iy;\n          const b = numberOfVertices + ix + gridX1 * (iy + 1);\n          const c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);\n          const d = numberOfVertices + (ix + 1) + gridX1 * iy;\n\n          // faces\n\n          indices.push(a, b, d);\n          indices.push(b, c, d);\n\n          // increase counter\n\n          groupCount += 6;\n        }\n      }\n\n      // add a group to the geometry. this will ensure multi material support\n\n      scope.addGroup(groupStart, groupCount, materialIndex);\n\n      // calculate new start value for groups\n\n      groupStart += groupCount;\n\n      // update total number of vertices\n\n      numberOfVertices += vertexCounter;\n    }\n  }\n  copy(source) {\n    super.copy(source);\n    this.parameters = Object.assign({}, source.parameters);\n    return this;\n  }\n\n  /**\n   * Factory method for creating an instance of this class from the given\n   * JSON object.\n   *\n   * @param {Object} data - A JSON object representing the serialized geometry.\n   * @return {BoxGeometry} A new instance.\n   */\n  static fromJSON(data) {\n    return new BoxGeometry(data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);\n  }\n}\n\n// Uniform Utilities\n\nfunction cloneUniforms(src) {\n  const dst = {};\n  for (const u in src) {\n    dst[u] = {};\n    for (const p in src[u]) {\n      const property = src[u][p];\n      if (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture || property.isQuaternion)) {\n        if (property.isRenderTargetTexture) {\n          console.warn('UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().');\n          dst[u][p] = null;\n        } else {\n          dst[u][p] = property.clone();\n        }\n      } else if (Array.isArray(property)) {\n        dst[u][p] = property.slice();\n      } else {\n        dst[u][p] = property;\n      }\n    }\n  }\n  return dst;\n}\nfunction mergeUniforms(uniforms) {\n  const merged = {};\n  for (let u = 0; u < uniforms.length; u++) {\n    const tmp = cloneUniforms(uniforms[u]);\n    for (const p in tmp) {\n      merged[p] = tmp[p];\n    }\n  }\n  return merged;\n}\nfunction cloneUniformsGroups(src) {\n  const dst = [];\n  for (let u = 0; u < src.length; u++) {\n    dst.push(src[u].clone());\n  }\n  return dst;\n}\nfunction getUnlitUniformColorSpace(renderer) {\n  const currentRenderTarget = renderer.getRenderTarget();\n  if (currentRenderTarget === null) {\n    // https://github.com/mrdoob/three.js/pull/23937#issuecomment-1111067398\n    return renderer.outputColorSpace;\n  }\n\n  // https://github.com/mrdoob/three.js/issues/27868\n  if (currentRenderTarget.isXRRenderTarget === true) {\n    return currentRenderTarget.texture.colorSpace;\n  }\n  return ColorManagement.workingColorSpace;\n}\n\n// Legacy\n\nconst UniformsUtils = {\n  clone: cloneUniforms,\n  merge: mergeUniforms\n};\nvar default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\nvar default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n\n/**\n * A material rendered with custom shaders. A shader is a small program written in GLSL.\n * that runs on the GPU. You may want to use a custom shader if you need to implement an\n * effect not included with any of the built-in materials.\n *\n * There are the following notes to bear in mind when using a `ShaderMaterial`:\n *\n * - `ShaderMaterial` can only be used with {@link WebGLRenderer}.\n * - Built in attributes and uniforms are passed to the shaders along with your code. If\n * you don't want that, use {@link RawShaderMaterial} instead.\n * - You can use the directive `#pragma unroll_loop_start` and `#pragma unroll_loop_end`\n * in order to unroll a `for` loop in GLSL by the shader preprocessor. The directive has\n * to be placed right above the loop. The loop formatting has to correspond to a defined standard.\n *   - The loop has to be [normalized]{@link https://en.wikipedia.org/wiki/Normalized_loop}.\n *   - The loop variable has to be *i*.\n *   - The value `UNROLLED_LOOP_INDEX` will be replaced with the explicitly\n * value of *i* for the given iteration and can be used in preprocessor\n * statements.\n *\n * ```js\n * const material = new THREE.ShaderMaterial( {\n * \tuniforms: {\n * \t\ttime: { value: 1.0 },\n * \t\tresolution: { value: new THREE.Vector2() }\n * \t},\n * \tvertexShader: document.getElementById( 'vertexShader' ).textContent,\n * \tfragmentShader: document.getElementById( 'fragmentShader' ).textContent\n * } );\n * ```\n *\n * @augments Material\n */\nclass ShaderMaterial extends Material {\n  /**\n   * Constructs a new shader material.\n   *\n   * @param {Object} [parameters] - An object with one or more properties\n   * defining the material's appearance. Any property of the material\n   * (including any property from inherited materials) can be passed\n   * in here. Color values can be passed any type of value accepted\n   * by {@link Color#set}.\n   */\n  constructor(parameters) {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isShaderMaterial = true;\n    this.type = 'ShaderMaterial';\n\n    /**\n     * Defines custom constants using `#define` directives within the GLSL code\n     * for both the vertex shader and the fragment shader; each key/value pair\n     * yields another directive.\n     * ```js\n     * defines: {\n     * \tFOO: 15,\n     * \tBAR: true\n     * }\n     * ```\n     * Yields the lines:\n     * ```\n     * #define FOO 15\n     * #define BAR true\n     * ```\n     *\n     * @type {Object}\n     */\n    this.defines = {};\n\n    /**\n     * An object of the form:\n     * ```js\n     * {\n     * \t\"uniform1\": { value: 1.0 },\n     * \t\"uniform2\": { value: 2 }\n     * }\n     * ```\n     * specifying the uniforms to be passed to the shader code; keys are uniform\n     * names, values are definitions of the form\n     * ```\n     * {\n     * \tvalue: 1.0\n     * }\n     * ```\n     * where `value` is the value of the uniform. Names must match the name of\n     * the uniform, as defined in the GLSL code. Note that uniforms are refreshed\n     * on every frame, so updating the value of the uniform will immediately\n     * update the value available to the GLSL code.\n     *\n     * @type {Object}\n     */\n    this.uniforms = {};\n\n    /**\n     * An array holding uniforms groups for configuring UBOs.\n     *\n     * @type {Array<UniformsGroup>}\n     */\n    this.uniformsGroups = [];\n\n    /**\n     * Vertex shader GLSL code. This is the actual code for the shader.\n     *\n     * @type {string}\n     */\n    this.vertexShader = default_vertex;\n\n    /**\n     * Fragment shader GLSL code. This is the actual code for the shader.\n     *\n     * @type {string}\n     */\n    this.fragmentShader = default_fragment;\n\n    /**\n     * Controls line thickness or lines.\n     *\n     * WebGL and WebGPU ignore this setting and always render line primitives with a\n     * width of one pixel.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.linewidth = 1;\n\n    /**\n     * Renders the geometry as a wireframe.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.wireframe = false;\n\n    /**\n     * Controls the thickness of the wireframe.\n     *\n     * WebGL and WebGPU ignore this property and always render\n     * 1 pixel wide lines.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.wireframeLinewidth = 1;\n\n    /**\n     * Define whether the material color is affected by global fog settings; `true`\n     * to pass fog uniforms to the shader.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.fog = false;\n\n    /**\n     * Defines whether this material uses lighting; `true` to pass uniform data\n     * related to lighting to this shader.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.lights = false;\n\n    /**\n     * Defines whether this material supports clipping; `true` to let the renderer\n     * pass the clippingPlanes uniform.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.clipping = false;\n\n    /**\n     * Overwritten and set to `true` by default.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.forceSinglePass = true;\n\n    /**\n     * This object allows to enable certain WebGL 2 extensions.\n     *\n     * - clipCullDistance: set to `true` to use vertex shader clipping\n     * - multiDraw: set to `true` to use vertex shader multi_draw / enable gl_DrawID\n     *\n     * @type {{clipCullDistance:false,multiDraw:false}}\n     */\n    this.extensions = {\n      clipCullDistance: false,\n      // set to use vertex shader clipping\n      multiDraw: false // set to use vertex shader multi_draw / enable gl_DrawID\n    };\n\n    /**\n     * When the rendered geometry doesn't include these attributes but the\n     * material does, these default values will be passed to the shaders. This\n     * avoids errors when buffer data is missing.\n     *\n     * - color: [ 1, 1, 1 ]\n     * - uv: [ 0, 0 ]\n     * - uv1: [ 0, 0 ]\n     *\n     * @type {Object}\n     */\n    this.defaultAttributeValues = {\n      'color': [1, 1, 1],\n      'uv': [0, 0],\n      'uv1': [0, 0]\n    };\n\n    /**\n     * If set, this calls [gl.bindAttribLocation]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindAttribLocation}\n     * to bind a generic vertex index to an attribute variable.\n     *\n     * @type {string|undefined}\n     * @default undefined\n     */\n    this.index0AttributeName = undefined;\n\n    /**\n     * Can be used to force a uniform update while changing uniforms in\n     * {@link Object3D#onBeforeRender}.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.uniformsNeedUpdate = false;\n\n    /**\n     * Defines the GLSL version of custom shader code.\n     *\n     * @type {?(GLSL1|GLSL3)}\n     * @default null\n     */\n    this.glslVersion = null;\n    if (parameters !== undefined) {\n      this.setValues(parameters);\n    }\n  }\n  copy(source) {\n    super.copy(source);\n    this.fragmentShader = source.fragmentShader;\n    this.vertexShader = source.vertexShader;\n    this.uniforms = cloneUniforms(source.uniforms);\n    this.uniformsGroups = cloneUniformsGroups(source.uniformsGroups);\n    this.defines = Object.assign({}, source.defines);\n    this.wireframe = source.wireframe;\n    this.wireframeLinewidth = source.wireframeLinewidth;\n    this.fog = source.fog;\n    this.lights = source.lights;\n    this.clipping = source.clipping;\n    this.extensions = Object.assign({}, source.extensions);\n    this.glslVersion = source.glslVersion;\n    return this;\n  }\n  toJSON(meta) {\n    const data = super.toJSON(meta);\n    data.glslVersion = this.glslVersion;\n    data.uniforms = {};\n    for (const name in this.uniforms) {\n      const uniform = this.uniforms[name];\n      const value = uniform.value;\n      if (value && value.isTexture) {\n        data.uniforms[name] = {\n          type: 't',\n          value: value.toJSON(meta).uuid\n        };\n      } else if (value && value.isColor) {\n        data.uniforms[name] = {\n          type: 'c',\n          value: value.getHex()\n        };\n      } else if (value && value.isVector2) {\n        data.uniforms[name] = {\n          type: 'v2',\n          value: value.toArray()\n        };\n      } else if (value && value.isVector3) {\n        data.uniforms[name] = {\n          type: 'v3',\n          value: value.toArray()\n        };\n      } else if (value && value.isVector4) {\n        data.uniforms[name] = {\n          type: 'v4',\n          value: value.toArray()\n        };\n      } else if (value && value.isMatrix3) {\n        data.uniforms[name] = {\n          type: 'm3',\n          value: value.toArray()\n        };\n      } else if (value && value.isMatrix4) {\n        data.uniforms[name] = {\n          type: 'm4',\n          value: value.toArray()\n        };\n      } else {\n        data.uniforms[name] = {\n          value: value\n        };\n\n        // note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n      }\n    }\n    if (Object.keys(this.defines).length > 0) data.defines = this.defines;\n    data.vertexShader = this.vertexShader;\n    data.fragmentShader = this.fragmentShader;\n    data.lights = this.lights;\n    data.clipping = this.clipping;\n    const extensions = {};\n    for (const key in this.extensions) {\n      if (this.extensions[key] === true) extensions[key] = true;\n    }\n    if (Object.keys(extensions).length > 0) data.extensions = extensions;\n    return data;\n  }\n}\n\n/**\n * Abstract base class for cameras. This class should always be inherited\n * when you build a new camera.\n *\n * @abstract\n * @augments Object3D\n */\nclass Camera extends Object3D {\n  /**\n   * Constructs a new camera.\n   */\n  constructor() {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isCamera = true;\n    this.type = 'Camera';\n\n    /**\n     * The inverse of the camera's world matrix.\n     *\n     * @type {Matrix4}\n     */\n    this.matrixWorldInverse = new Matrix4();\n\n    /**\n     * The camera's projection matrix.\n     *\n     * @type {Matrix4}\n     */\n    this.projectionMatrix = new Matrix4();\n\n    /**\n     * The inverse of the camera's projection matrix.\n     *\n     * @type {Matrix4}\n     */\n    this.projectionMatrixInverse = new Matrix4();\n\n    /**\n     * The coordinate system in which the camera is used.\n     *\n     * @type {(WebGLCoordinateSystem|WebGPUCoordinateSystem)}\n     */\n    this.coordinateSystem = WebGLCoordinateSystem;\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.matrixWorldInverse.copy(source.matrixWorldInverse);\n    this.projectionMatrix.copy(source.projectionMatrix);\n    this.projectionMatrixInverse.copy(source.projectionMatrixInverse);\n    this.coordinateSystem = source.coordinateSystem;\n    return this;\n  }\n\n  /**\n   * Returns a vector representing the (\"look\") direction of the 3D object in world space.\n   *\n   * This method is overwritten since cameras have a different forward vector compared to other\n   * 3D objects. A camera looks down its local, negative z-axis by default.\n   *\n   * @param {Vector3} target - The target vector the result is stored to.\n   * @return {Vector3} The 3D object's direction in world space.\n   */\n  getWorldDirection(target) {\n    return super.getWorldDirection(target).negate();\n  }\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    this.matrixWorldInverse.copy(this.matrixWorld).invert();\n  }\n  updateWorldMatrix(updateParents, updateChildren) {\n    super.updateWorldMatrix(updateParents, updateChildren);\n    this.matrixWorldInverse.copy(this.matrixWorld).invert();\n  }\n  clone() {\n    return new this.constructor().copy(this);\n  }\n}\nconst _v3$1 = /*@__PURE__*/new Vector3();\nconst _minTarget = /*@__PURE__*/new Vector2();\nconst _maxTarget = /*@__PURE__*/new Vector2();\n\n/**\n * Camera that uses [perspective projection]{@link https://en.wikipedia.org/wiki/Perspective_(graphical)}.\n *\n * This projection mode is designed to mimic the way the human eye sees. It\n * is the most common projection mode used for rendering a 3D scene.\n *\n * ```js\n * const camera = new THREE.PerspectiveCamera( 45, width / height, 1, 1000 );\n * scene.add( camera );\n * ```\n *\n * @augments Camera\n */\nclass PerspectiveCamera extends Camera {\n  /**\n   * Constructs a new perspective camera.\n   *\n   * @param {number} [fov=50] - The vertical field of view.\n   * @param {number} [aspect=1] - The aspect ratio.\n   * @param {number} [near=0.1] - The camera's near plane.\n   * @param {number} [far=2000] - The camera's far plane.\n   */\n  constructor() {\n    let fov = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n    let aspect = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let near = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.1;\n    let far = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2000;\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isPerspectiveCamera = true;\n    this.type = 'PerspectiveCamera';\n\n    /**\n     * The vertical field of view, from bottom to top of view,\n     * in degrees.\n     *\n     * @type {number}\n     * @default 50\n     */\n    this.fov = fov;\n\n    /**\n     * The zoom factor of the camera.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.zoom = 1;\n\n    /**\n     * The camera's near plane. The valid range is greater than `0`\n     * and less than the current value of {@link PerspectiveCamera#far}.\n     *\n     * Note that, unlike for the {@link OrthographicCamera}, `0` is <em>not</em> a\n     * valid value for a perspective camera's near plane.\n     *\n     * @type {number}\n     * @default 0.1\n     */\n    this.near = near;\n\n    /**\n     * The camera's far plane. Must be greater than the\n     * current value of {@link PerspectiveCamera#near}.\n     *\n     * @type {number}\n     * @default 2000\n     */\n    this.far = far;\n\n    /**\n     * Object distance used for stereoscopy and depth-of-field effects. This\n     * parameter does not influence the projection matrix unless a\n     * {@link StereoCamera} is being used.\n     *\n     * @type {number}\n     * @default 10\n     */\n    this.focus = 10;\n\n    /**\n     * The aspect ratio, usually the canvas width / canvas height.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.aspect = aspect;\n\n    /**\n     * Represents the frustum window specification. This property should not be edited\n     * directly but via {@link PerspectiveCamera#setViewOffset} and {@link PerspectiveCamera#clearViewOffset}.\n     *\n     * @type {?Object}\n     * @default null\n     */\n    this.view = null;\n\n    /**\n     * Film size used for the larger axis. Default is `35` (millimeters). This\n     * parameter does not influence the projection matrix unless {@link PerspectiveCamera#filmOffset}\n     * is set to a nonzero value.\n     *\n     * @type {number}\n     * @default 35\n     */\n    this.filmGauge = 35;\n\n    /**\n     * Horizontal off-center offset in the same unit as {@link PerspectiveCamera#filmGauge}.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.filmOffset = 0;\n    this.updateProjectionMatrix();\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.fov = source.fov;\n    this.zoom = source.zoom;\n    this.near = source.near;\n    this.far = source.far;\n    this.focus = source.focus;\n    this.aspect = source.aspect;\n    this.view = source.view === null ? null : Object.assign({}, source.view);\n    this.filmGauge = source.filmGauge;\n    this.filmOffset = source.filmOffset;\n    return this;\n  }\n\n  /**\n   * Sets the FOV by focal length in respect to the current {@link PerspectiveCamera#filmGauge}.\n   *\n   * The default film gauge is 35, so that the focal length can be specified for\n   * a 35mm (full frame) camera.\n   *\n   * @param {number} focalLength - Values for focal length and film gauge must have the same unit.\n   */\n  setFocalLength(focalLength) {\n    /** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */\n    const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n    this.fov = RAD2DEG * 2 * Math.atan(vExtentSlope);\n    this.updateProjectionMatrix();\n  }\n\n  /**\n   * Returns the focal length from the current {@link PerspectiveCamera#fov} and\n   * {@link PerspectiveCamera#filmGauge}.\n   *\n   * @return {number} The computed focal length.\n   */\n  getFocalLength() {\n    const vExtentSlope = Math.tan(DEG2RAD * 0.5 * this.fov);\n    return 0.5 * this.getFilmHeight() / vExtentSlope;\n  }\n\n  /**\n   * Returns the current vertical field of view angle in degrees considering {@link PerspectiveCamera#zoom}.\n   *\n   * @return {number} The effective FOV.\n   */\n  getEffectiveFOV() {\n    return RAD2DEG * 2 * Math.atan(Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom);\n  }\n\n  /**\n   * Returns the width of the image on the film. If {@link PerspectiveCamera#aspect} is greater than or\n   * equal to one (landscape format), the result equals {@link PerspectiveCamera#filmGauge}.\n   *\n   * @return {number} The film width.\n   */\n  getFilmWidth() {\n    // film not completely covered in portrait format (aspect < 1)\n    return this.filmGauge * Math.min(this.aspect, 1);\n  }\n\n  /**\n   * Returns the height of the image on the film. If {@link PerspectiveCamera#aspect} is greater than or\n   * equal to one (landscape format), the result equals {@link PerspectiveCamera#filmGauge}.\n   *\n   * @return {number} The film width.\n   */\n  getFilmHeight() {\n    // film not completely covered in landscape format (aspect > 1)\n    return this.filmGauge / Math.max(this.aspect, 1);\n  }\n\n  /**\n   * Computes the 2D bounds of the camera's viewable rectangle at a given distance along the viewing direction.\n   * Sets `minTarget` and `maxTarget` to the coordinates of the lower-left and upper-right corners of the view rectangle.\n   *\n   * @param {number} distance - The viewing distance.\n   * @param {Vector2} minTarget - The lower-left corner of the view rectangle is written into this vector.\n   * @param {Vector2} maxTarget - The upper-right corner of the view rectangle is written into this vector.\n   */\n  getViewBounds(distance, minTarget, maxTarget) {\n    _v3$1.set(-1, -1, 0.5).applyMatrix4(this.projectionMatrixInverse);\n    minTarget.set(_v3$1.x, _v3$1.y).multiplyScalar(-distance / _v3$1.z);\n    _v3$1.set(1, 1, 0.5).applyMatrix4(this.projectionMatrixInverse);\n    maxTarget.set(_v3$1.x, _v3$1.y).multiplyScalar(-distance / _v3$1.z);\n  }\n\n  /**\n   * Computes the width and height of the camera's viewable rectangle at a given distance along the viewing direction.\n   *\n   * @param {number} distance - The viewing distance.\n   * @param {Vector2} target - The target vector that is used to store result where x is width and y is height.\n   * @returns {Vector2} The view size.\n   */\n  getViewSize(distance, target) {\n    this.getViewBounds(distance, _minTarget, _maxTarget);\n    return target.subVectors(_maxTarget, _minTarget);\n  }\n\n  /**\n   * Sets an offset in a larger frustum. This is useful for multi-window or\n   * multi-monitor/multi-machine setups.\n   *\n   * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n   * the monitors are in grid like this\n   *```\n   *   +---+---+---+\n   *   | A | B | C |\n   *   +---+---+---+\n   *   | D | E | F |\n   *   +---+---+---+\n   *```\n   * then for each monitor you would call it like this:\n   *```js\n   * const w = 1920;\n   * const h = 1080;\n   * const fullWidth = w * 3;\n   * const fullHeight = h * 2;\n   *\n   * // --A--\n   * camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n   * // --B--\n   * camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n   * // --C--\n   * camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n   * // --D--\n   * camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n   * // --E--\n   * camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n   * // --F--\n   * camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n   * ```\n   *\n   * Note there is no reason monitors have to be the same size or in a grid.\n   *\n   * @param {number} fullWidth - The full width of multiview setup.\n   * @param {number} fullHeight - The full height of multiview setup.\n   * @param {number} x - The horizontal offset of the subcamera.\n   * @param {number} y - The vertical offset of the subcamera.\n   * @param {number} width - The width of subcamera.\n   * @param {number} height - The height of subcamera.\n   */\n  setViewOffset(fullWidth, fullHeight, x, y, width, height) {\n    this.aspect = fullWidth / fullHeight;\n    if (this.view === null) {\n      this.view = {\n        enabled: true,\n        fullWidth: 1,\n        fullHeight: 1,\n        offsetX: 0,\n        offsetY: 0,\n        width: 1,\n        height: 1\n      };\n    }\n    this.view.enabled = true;\n    this.view.fullWidth = fullWidth;\n    this.view.fullHeight = fullHeight;\n    this.view.offsetX = x;\n    this.view.offsetY = y;\n    this.view.width = width;\n    this.view.height = height;\n    this.updateProjectionMatrix();\n  }\n\n  /**\n   * Removes the view offset from the projection matrix.\n   */\n  clearViewOffset() {\n    if (this.view !== null) {\n      this.view.enabled = false;\n    }\n    this.updateProjectionMatrix();\n  }\n\n  /**\n   * Updates the camera's projection matrix. Must be called after any change of\n   * camera properties.\n   */\n  updateProjectionMatrix() {\n    const near = this.near;\n    let top = near * Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom;\n    let height = 2 * top;\n    let width = this.aspect * height;\n    let left = -0.5 * width;\n    const view = this.view;\n    if (this.view !== null && this.view.enabled) {\n      const fullWidth = view.fullWidth,\n        fullHeight = view.fullHeight;\n      left += view.offsetX * width / fullWidth;\n      top -= view.offsetY * height / fullHeight;\n      width *= view.width / fullWidth;\n      height *= view.height / fullHeight;\n    }\n    const skew = this.filmOffset;\n    if (skew !== 0) left += near * skew / this.getFilmWidth();\n    this.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far, this.coordinateSystem);\n    this.projectionMatrixInverse.copy(this.projectionMatrix).invert();\n  }\n  toJSON(meta) {\n    const data = super.toJSON(meta);\n    data.object.fov = this.fov;\n    data.object.zoom = this.zoom;\n    data.object.near = this.near;\n    data.object.far = this.far;\n    data.object.focus = this.focus;\n    data.object.aspect = this.aspect;\n    if (this.view !== null) data.object.view = Object.assign({}, this.view);\n    data.object.filmGauge = this.filmGauge;\n    data.object.filmOffset = this.filmOffset;\n    return data;\n  }\n}\nconst fov = -90; // negative fov is not an error\nconst aspect = 1;\n\n/**\n * A special type of camera that is positioned in 3D space to render its surroundings into a\n * cube render target. The render target can then be used as an environment map for rendering\n * realtime reflections in your scene.\n *\n * ```js\n * // Create cube render target\n * const cubeRenderTarget = new THREE.WebGLCubeRenderTarget( 256, { generateMipmaps: true, minFilter: THREE.LinearMipmapLinearFilter } );\n *\n * // Create cube camera\n * const cubeCamera = new THREE.CubeCamera( 1, 100000, cubeRenderTarget );\n * scene.add( cubeCamera );\n *\n * // Create car\n * const chromeMaterial = new THREE.MeshLambertMaterial( { color: 0xffffff, envMap: cubeRenderTarget.texture } );\n * const car = new THREE.Mesh( carGeometry, chromeMaterial );\n * scene.add( car );\n *\n * // Update the render target cube\n * car.visible = false;\n * cubeCamera.position.copy( car.position );\n * cubeCamera.update( renderer, scene );\n *\n * // Render the scene\n * car.visible = true;\n * renderer.render( scene, camera );\n * ```\n *\n * @augments Object3D\n */\nclass CubeCamera extends Object3D {\n  /**\n   * Constructs a new cube camera.\n   *\n   * @param {number} near - The camera's near plane.\n   * @param {number} far - The camera's far plane.\n   * @param {WebGLCubeRenderTarget} renderTarget - The cube render target.\n   */\n  constructor(near, far, renderTarget) {\n    super();\n    this.type = 'CubeCamera';\n\n    /**\n     * A reference to the cube render target.\n     *\n     * @type {WebGLCubeRenderTarget}\n     */\n    this.renderTarget = renderTarget;\n\n    /**\n     * The current active coordinate system.\n     *\n     * @type {?(WebGLCoordinateSystem|WebGPUCoordinateSystem)}\n     * @default null\n     */\n    this.coordinateSystem = null;\n\n    /**\n     * The current active mipmap level\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.activeMipmapLevel = 0;\n    const cameraPX = new PerspectiveCamera(fov, aspect, near, far);\n    cameraPX.layers = this.layers;\n    this.add(cameraPX);\n    const cameraNX = new PerspectiveCamera(fov, aspect, near, far);\n    cameraNX.layers = this.layers;\n    this.add(cameraNX);\n    const cameraPY = new PerspectiveCamera(fov, aspect, near, far);\n    cameraPY.layers = this.layers;\n    this.add(cameraPY);\n    const cameraNY = new PerspectiveCamera(fov, aspect, near, far);\n    cameraNY.layers = this.layers;\n    this.add(cameraNY);\n    const cameraPZ = new PerspectiveCamera(fov, aspect, near, far);\n    cameraPZ.layers = this.layers;\n    this.add(cameraPZ);\n    const cameraNZ = new PerspectiveCamera(fov, aspect, near, far);\n    cameraNZ.layers = this.layers;\n    this.add(cameraNZ);\n  }\n\n  /**\n   * Must be called when the coordinate system of the cube camera is changed.\n   */\n  updateCoordinateSystem() {\n    const coordinateSystem = this.coordinateSystem;\n    const cameras = this.children.concat();\n    const [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = cameras;\n    for (const camera of cameras) this.remove(camera);\n    if (coordinateSystem === WebGLCoordinateSystem) {\n      cameraPX.up.set(0, 1, 0);\n      cameraPX.lookAt(1, 0, 0);\n      cameraNX.up.set(0, 1, 0);\n      cameraNX.lookAt(-1, 0, 0);\n      cameraPY.up.set(0, 0, -1);\n      cameraPY.lookAt(0, 1, 0);\n      cameraNY.up.set(0, 0, 1);\n      cameraNY.lookAt(0, -1, 0);\n      cameraPZ.up.set(0, 1, 0);\n      cameraPZ.lookAt(0, 0, 1);\n      cameraNZ.up.set(0, 1, 0);\n      cameraNZ.lookAt(0, 0, -1);\n    } else if (coordinateSystem === WebGPUCoordinateSystem) {\n      cameraPX.up.set(0, -1, 0);\n      cameraPX.lookAt(-1, 0, 0);\n      cameraNX.up.set(0, -1, 0);\n      cameraNX.lookAt(1, 0, 0);\n      cameraPY.up.set(0, 0, 1);\n      cameraPY.lookAt(0, 1, 0);\n      cameraNY.up.set(0, 0, -1);\n      cameraNY.lookAt(0, -1, 0);\n      cameraPZ.up.set(0, -1, 0);\n      cameraPZ.lookAt(0, 0, 1);\n      cameraNZ.up.set(0, -1, 0);\n      cameraNZ.lookAt(0, 0, -1);\n    } else {\n      throw new Error('THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: ' + coordinateSystem);\n    }\n    for (const camera of cameras) {\n      this.add(camera);\n      camera.updateMatrixWorld();\n    }\n  }\n\n  /**\n   * Calling this method will render the given scene with the given renderer\n   * into the cube render target of the camera.\n   *\n   * @param {(Renderer|WebGLRenderer)} renderer - The renderer.\n   * @param {Scene} scene - The scene to render.\n   */\n  update(renderer, scene) {\n    if (this.parent === null) this.updateMatrixWorld();\n    const {\n      renderTarget,\n      activeMipmapLevel\n    } = this;\n    if (this.coordinateSystem !== renderer.coordinateSystem) {\n      this.coordinateSystem = renderer.coordinateSystem;\n      this.updateCoordinateSystem();\n    }\n    const [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = this.children;\n    const currentRenderTarget = renderer.getRenderTarget();\n    const currentActiveCubeFace = renderer.getActiveCubeFace();\n    const currentActiveMipmapLevel = renderer.getActiveMipmapLevel();\n    const currentXrEnabled = renderer.xr.enabled;\n    renderer.xr.enabled = false;\n    const generateMipmaps = renderTarget.texture.generateMipmaps;\n    renderTarget.texture.generateMipmaps = false;\n    renderer.setRenderTarget(renderTarget, 0, activeMipmapLevel);\n    renderer.render(scene, cameraPX);\n    renderer.setRenderTarget(renderTarget, 1, activeMipmapLevel);\n    renderer.render(scene, cameraNX);\n    renderer.setRenderTarget(renderTarget, 2, activeMipmapLevel);\n    renderer.render(scene, cameraPY);\n    renderer.setRenderTarget(renderTarget, 3, activeMipmapLevel);\n    renderer.render(scene, cameraNY);\n    renderer.setRenderTarget(renderTarget, 4, activeMipmapLevel);\n    renderer.render(scene, cameraPZ);\n\n    // mipmaps are generated during the last call of render()\n    // at this point, all sides of the cube render target are defined\n\n    renderTarget.texture.generateMipmaps = generateMipmaps;\n    renderer.setRenderTarget(renderTarget, 5, activeMipmapLevel);\n    renderer.render(scene, cameraNZ);\n    renderer.setRenderTarget(currentRenderTarget, currentActiveCubeFace, currentActiveMipmapLevel);\n    renderer.xr.enabled = currentXrEnabled;\n    renderTarget.texture.needsPMREMUpdate = true;\n  }\n}\n\n/**\n * Creates a cube texture made up of six images.\n *\n * ```js\n * const loader = new THREE.CubeTextureLoader();\n * loader.setPath( 'textures/cube/pisa/' );\n *\n * const textureCube = loader.load( [\n * \t'px.png', 'nx.png', 'py.png', 'ny.png', 'pz.png', 'nz.png'\n * ] );\n *\n * const material = new THREE.MeshBasicMaterial( { color: 0xffffff, envMap: textureCube } );\n * ```\n *\n * @augments Texture\n */\nclass CubeTexture extends Texture {\n  /**\n   * Constructs a new cube texture.\n   *\n   * @param {Array<Image>} [images=[]] - An array holding a image for each side of a cube.\n   * @param {number} [mapping=CubeReflectionMapping] - The texture mapping.\n   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n   * @param {number} [magFilter=LinearFilter] - The mag filter value.\n   * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.\n   * @param {number} [format=RGBAFormat] - The texture format.\n   * @param {number} [type=UnsignedByteType] - The texture type.\n   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n   * @param {string} [colorSpace=NoColorSpace] - The color space value.\n   */\n  constructor() {\n    let images = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let mapping = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CubeReflectionMapping;\n    let wrapS = arguments.length > 2 ? arguments[2] : undefined;\n    let wrapT = arguments.length > 3 ? arguments[3] : undefined;\n    let magFilter = arguments.length > 4 ? arguments[4] : undefined;\n    let minFilter = arguments.length > 5 ? arguments[5] : undefined;\n    let format = arguments.length > 6 ? arguments[6] : undefined;\n    let type = arguments.length > 7 ? arguments[7] : undefined;\n    let anisotropy = arguments.length > 8 ? arguments[8] : undefined;\n    let colorSpace = arguments.length > 9 ? arguments[9] : undefined;\n    super(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isCubeTexture = true;\n\n    /**\n     * If set to `true`, the texture is flipped along the vertical axis when\n     * uploaded to the GPU.\n     *\n     * Overwritten and set to `false` by default.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.flipY = false;\n  }\n\n  /**\n   * Alias for {@link CubeTexture#image}.\n   *\n   * @type {Array<Image>}\n   */\n  get images() {\n    return this.image;\n  }\n  set images(value) {\n    this.image = value;\n  }\n}\n\n/**\n * A cube render target used in context of {@link WebGLRenderer}.\n *\n * @augments WebGLRenderTarget\n */\nclass WebGLCubeRenderTarget extends WebGLRenderTarget {\n  /**\n   * Constructs a new cube render target.\n   *\n   * @param {number} [size=1] - The size of the render target.\n   * @param {RenderTarget~Options} [options] - The configuration object.\n   */\n  constructor() {\n    let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(size, size, options);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isWebGLCubeRenderTarget = true;\n    const image = {\n      width: size,\n      height: size,\n      depth: 1\n    };\n    const images = [image, image, image, image, image, image];\n\n    /**\n     * Overwritten with a different texture type.\n     *\n     * @type {DataArrayTexture}\n     */\n    this.texture = new CubeTexture(images, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace);\n\n    // By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)\n    // in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,\n    // in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.\n\n    // three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped\n    // and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture\n    // as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).\n\n    this.texture.isRenderTargetTexture = true;\n    this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n    this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n  }\n\n  /**\n   * Converts the given equirectangular texture to a cube map.\n   *\n   * @param {WebGLRenderer} renderer - The renderer.\n   * @param {Texture} texture - The equirectangular texture.\n   * @return {WebGLCubeRenderTarget} A reference to this cube render target.\n   */\n  fromEquirectangularTexture(renderer, texture) {\n    this.texture.type = texture.type;\n    this.texture.colorSpace = texture.colorSpace;\n    this.texture.generateMipmaps = texture.generateMipmaps;\n    this.texture.minFilter = texture.minFilter;\n    this.texture.magFilter = texture.magFilter;\n    const shader = {\n      uniforms: {\n        tEquirect: {\n          value: null\n        }\n      },\n      vertexShader: /* glsl */`\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t`,\n      fragmentShader: /* glsl */`\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t`\n    };\n    const geometry = new BoxGeometry(5, 5, 5);\n    const material = new ShaderMaterial({\n      name: 'CubemapFromEquirect',\n      uniforms: cloneUniforms(shader.uniforms),\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader,\n      side: BackSide,\n      blending: NoBlending\n    });\n    material.uniforms.tEquirect.value = texture;\n    const mesh = new Mesh(geometry, material);\n    const currentMinFilter = texture.minFilter;\n\n    // Avoid blurred poles\n    if (texture.minFilter === LinearMipmapLinearFilter) texture.minFilter = LinearFilter;\n    const camera = new CubeCamera(1, 10, this);\n    camera.update(renderer, mesh);\n    texture.minFilter = currentMinFilter;\n    mesh.geometry.dispose();\n    mesh.material.dispose();\n    return this;\n  }\n\n  /**\n   * Clears this cube render target.\n   *\n   * @param {WebGLRenderer} renderer - The renderer.\n   * @param {boolean} [color=true] - Whether the color buffer should be cleared or not.\n   * @param {boolean} [depth=true] - Whether the depth buffer should be cleared or not.\n   * @param {boolean} [stencil=true] - Whether the stencil buffer should be cleared or not.\n   */\n  clear(renderer) {\n    let color = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    let stencil = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    const currentRenderTarget = renderer.getRenderTarget();\n    for (let i = 0; i < 6; i++) {\n      renderer.setRenderTarget(this, i);\n      renderer.clear(color, depth, stencil);\n    }\n    renderer.setRenderTarget(currentRenderTarget);\n  }\n}\n\n/**\n * This is almost identical to an {@link Object3D}. Its purpose is to\n * make working with groups of objects syntactically clearer.\n *\n * ```js\n * // Create a group and add the two cubes.\n * // These cubes can now be rotated / scaled etc as a group.\n * const group = new THREE.Group();\n *\n * group.add( meshA );\n * group.add( meshB );\n *\n * scene.add( group );\n * ```\n *\n * @augments Object3D\n */\nclass Group extends Object3D {\n  constructor() {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isGroup = true;\n    this.type = 'Group';\n  }\n}\nconst _moveEvent = {\n  type: 'move'\n};\n\n/**\n * Class for representing a XR controller with its\n * different coordinate systems.\n *\n * @private\n */\nclass WebXRController {\n  /**\n   * Constructs a new XR controller.\n   */\n  constructor() {\n    /**\n     * A group representing the target ray space\n     * of the XR controller.\n     *\n     * @private\n     * @type {?Group}\n     * @default null\n     */\n    this._targetRay = null;\n\n    /**\n     * A group representing the grip space\n     * of the XR controller.\n     *\n     * @private\n     * @type {?Group}\n     * @default null\n     */\n    this._grip = null;\n\n    /**\n     * A group representing the hand space\n     * of the XR controller.\n     *\n     * @private\n     * @type {?Group}\n     * @default null\n     */\n    this._hand = null;\n  }\n\n  /**\n   * Returns a group representing the hand space of the XR controller.\n   *\n   * @return {Group} A group representing the hand space of the XR controller.\n   */\n  getHandSpace() {\n    if (this._hand === null) {\n      this._hand = new Group();\n      this._hand.matrixAutoUpdate = false;\n      this._hand.visible = false;\n      this._hand.joints = {};\n      this._hand.inputState = {\n        pinching: false\n      };\n    }\n    return this._hand;\n  }\n\n  /**\n   * Returns a group representing the target ray space of the XR controller.\n   *\n   * @return {Group} A group representing the target ray space of the XR controller.\n   */\n  getTargetRaySpace() {\n    if (this._targetRay === null) {\n      this._targetRay = new Group();\n      this._targetRay.matrixAutoUpdate = false;\n      this._targetRay.visible = false;\n      this._targetRay.hasLinearVelocity = false;\n      this._targetRay.linearVelocity = new Vector3();\n      this._targetRay.hasAngularVelocity = false;\n      this._targetRay.angularVelocity = new Vector3();\n    }\n    return this._targetRay;\n  }\n\n  /**\n   * Returns a group representing the grip space of the XR controller.\n   *\n   * @return {Group} A group representing the grip space of the XR controller.\n   */\n  getGripSpace() {\n    if (this._grip === null) {\n      this._grip = new Group();\n      this._grip.matrixAutoUpdate = false;\n      this._grip.visible = false;\n      this._grip.hasLinearVelocity = false;\n      this._grip.linearVelocity = new Vector3();\n      this._grip.hasAngularVelocity = false;\n      this._grip.angularVelocity = new Vector3();\n    }\n    return this._grip;\n  }\n\n  /**\n   * Dispatches the given event to the groups representing\n   * the different coordinate spaces of the XR controller.\n   *\n   * @param {Object} event - The event to dispatch.\n   * @return {WebXRController} A reference to this instance.\n   */\n  dispatchEvent(event) {\n    if (this._targetRay !== null) {\n      this._targetRay.dispatchEvent(event);\n    }\n    if (this._grip !== null) {\n      this._grip.dispatchEvent(event);\n    }\n    if (this._hand !== null) {\n      this._hand.dispatchEvent(event);\n    }\n    return this;\n  }\n\n  /**\n   * Connects the controller with the given XR input source.\n   *\n   * @param {XRInputSource} inputSource - The input source.\n   * @return {WebXRController} A reference to this instance.\n   */\n  connect(inputSource) {\n    if (inputSource && inputSource.hand) {\n      const hand = this._hand;\n      if (hand) {\n        for (const inputjoint of inputSource.hand.values()) {\n          // Initialize hand with joints when connected\n          this._getHandJoint(hand, inputjoint);\n        }\n      }\n    }\n    this.dispatchEvent({\n      type: 'connected',\n      data: inputSource\n    });\n    return this;\n  }\n\n  /**\n   * Disconnects the controller from the given XR input source.\n   *\n   * @param {XRInputSource} inputSource - The input source.\n   * @return {WebXRController} A reference to this instance.\n   */\n  disconnect(inputSource) {\n    this.dispatchEvent({\n      type: 'disconnected',\n      data: inputSource\n    });\n    if (this._targetRay !== null) {\n      this._targetRay.visible = false;\n    }\n    if (this._grip !== null) {\n      this._grip.visible = false;\n    }\n    if (this._hand !== null) {\n      this._hand.visible = false;\n    }\n    return this;\n  }\n\n  /**\n   * Updates the controller with the given input source, XR frame and reference space.\n   * This updates the transformations of the groups that represent the different\n   * coordinate systems of the controller.\n   *\n   * @param {XRInputSource} inputSource - The input source.\n   * @param {XRFrame} frame - The XR frame.\n   * @param {XRReferenceSpace} referenceSpace - The reference space.\n   * @return {WebXRController} A reference to this instance.\n   */\n  update(inputSource, frame, referenceSpace) {\n    let inputPose = null;\n    let gripPose = null;\n    let handPose = null;\n    const targetRay = this._targetRay;\n    const grip = this._grip;\n    const hand = this._hand;\n    if (inputSource && frame.session.visibilityState !== 'visible-blurred') {\n      if (hand && inputSource.hand) {\n        handPose = true;\n        for (const inputjoint of inputSource.hand.values()) {\n          // Update the joints groups with the XRJoint poses\n          const jointPose = frame.getJointPose(inputjoint, referenceSpace);\n\n          // The transform of this joint will be updated with the joint pose on each frame\n          const joint = this._getHandJoint(hand, inputjoint);\n          if (jointPose !== null) {\n            joint.matrix.fromArray(jointPose.transform.matrix);\n            joint.matrix.decompose(joint.position, joint.rotation, joint.scale);\n            joint.matrixWorldNeedsUpdate = true;\n            joint.jointRadius = jointPose.radius;\n          }\n          joint.visible = jointPose !== null;\n        }\n\n        // Custom events\n\n        // Check pinchz\n        const indexTip = hand.joints['index-finger-tip'];\n        const thumbTip = hand.joints['thumb-tip'];\n        const distance = indexTip.position.distanceTo(thumbTip.position);\n        const distanceToPinch = 0.02;\n        const threshold = 0.005;\n        if (hand.inputState.pinching && distance > distanceToPinch + threshold) {\n          hand.inputState.pinching = false;\n          this.dispatchEvent({\n            type: 'pinchend',\n            handedness: inputSource.handedness,\n            target: this\n          });\n        } else if (!hand.inputState.pinching && distance <= distanceToPinch - threshold) {\n          hand.inputState.pinching = true;\n          this.dispatchEvent({\n            type: 'pinchstart',\n            handedness: inputSource.handedness,\n            target: this\n          });\n        }\n      } else {\n        if (grip !== null && inputSource.gripSpace) {\n          gripPose = frame.getPose(inputSource.gripSpace, referenceSpace);\n          if (gripPose !== null) {\n            grip.matrix.fromArray(gripPose.transform.matrix);\n            grip.matrix.decompose(grip.position, grip.rotation, grip.scale);\n            grip.matrixWorldNeedsUpdate = true;\n            if (gripPose.linearVelocity) {\n              grip.hasLinearVelocity = true;\n              grip.linearVelocity.copy(gripPose.linearVelocity);\n            } else {\n              grip.hasLinearVelocity = false;\n            }\n            if (gripPose.angularVelocity) {\n              grip.hasAngularVelocity = true;\n              grip.angularVelocity.copy(gripPose.angularVelocity);\n            } else {\n              grip.hasAngularVelocity = false;\n            }\n          }\n        }\n      }\n      if (targetRay !== null) {\n        inputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);\n\n        // Some runtimes (namely Vive Cosmos with Vive OpenXR Runtime) have only grip space and ray space is equal to it\n        if (inputPose === null && gripPose !== null) {\n          inputPose = gripPose;\n        }\n        if (inputPose !== null) {\n          targetRay.matrix.fromArray(inputPose.transform.matrix);\n          targetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);\n          targetRay.matrixWorldNeedsUpdate = true;\n          if (inputPose.linearVelocity) {\n            targetRay.hasLinearVelocity = true;\n            targetRay.linearVelocity.copy(inputPose.linearVelocity);\n          } else {\n            targetRay.hasLinearVelocity = false;\n          }\n          if (inputPose.angularVelocity) {\n            targetRay.hasAngularVelocity = true;\n            targetRay.angularVelocity.copy(inputPose.angularVelocity);\n          } else {\n            targetRay.hasAngularVelocity = false;\n          }\n          this.dispatchEvent(_moveEvent);\n        }\n      }\n    }\n    if (targetRay !== null) {\n      targetRay.visible = inputPose !== null;\n    }\n    if (grip !== null) {\n      grip.visible = gripPose !== null;\n    }\n    if (hand !== null) {\n      hand.visible = handPose !== null;\n    }\n    return this;\n  }\n\n  /**\n   * Returns a group representing the hand joint for the given input joint.\n   *\n   * @private\n   * @param {Group} hand - The group representing the hand space.\n   * @param {XRJointSpace} inputjoint - The hand joint data.\n   * @return {Group} A group representing the hand joint for the given input joint.\n   */\n  _getHandJoint(hand, inputjoint) {\n    if (hand.joints[inputjoint.jointName] === undefined) {\n      const joint = new Group();\n      joint.matrixAutoUpdate = false;\n      joint.visible = false;\n      hand.joints[inputjoint.jointName] = joint;\n      hand.add(joint);\n    }\n    return hand.joints[inputjoint.jointName];\n  }\n}\n\n/**\n * This class can be used to define an exponential squared fog,\n * which gives a clear view near the camera and a faster than exponentially\n * densening fog farther from the camera.\n *\n * ```js\n * const scene = new THREE.Scene();\n * scene.fog = new THREE.FogExp2( 0xcccccc, 0.002 );\n * ```\n */\nclass FogExp2 {\n  /**\n   * Constructs a new fog.\n   *\n   * @param {number|Color} color - The fog's color.\n   * @param {number} [density=0.00025] - Defines how fast the fog will grow dense.\n   */\n  constructor(color) {\n    let density = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.00025;\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isFogExp2 = true;\n\n    /**\n     * The name of the fog.\n     *\n     * @type {string}\n     */\n    this.name = '';\n\n    /**\n     * The fog's color.\n     *\n     * @type {Color}\n     */\n    this.color = new Color(color);\n\n    /**\n     *  Defines how fast the fog will grow dense.\n     *\n     * @type {number}\n     * @default 0.00025\n     */\n    this.density = density;\n  }\n\n  /**\n   * Returns a new fog with copied values from this instance.\n   *\n   * @return {FogExp2} A clone of this instance.\n   */\n  clone() {\n    return new FogExp2(this.color, this.density);\n  }\n\n  /**\n   * Serializes the fog into JSON.\n   *\n   * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\n   * @return {Object} A JSON object representing the serialized fog\n   */\n  toJSON(/* meta */\n  ) {\n    return {\n      type: 'FogExp2',\n      name: this.name,\n      color: this.color.getHex(),\n      density: this.density\n    };\n  }\n}\n\n/**\n * This class can be used to define a linear fog that grows linearly denser\n * with the distance.\n *\n * ```js\n * const scene = new THREE.Scene();\n * scene.fog = new THREE.Fog( 0xcccccc, 10, 15 );\n * ```\n */\nclass Fog {\n  /**\n   * Constructs a new fog.\n   *\n   * @param {number|Color} color - The fog's color.\n   * @param {number} [near=1] - The minimum distance to start applying fog.\n   * @param {number} [far=1000] - The maximum distance at which fog stops being calculated and applied.\n   */\n  constructor(color) {\n    let near = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let far = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1000;\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isFog = true;\n\n    /**\n     * The name of the fog.\n     *\n     * @type {string}\n     */\n    this.name = '';\n\n    /**\n     * The fog's color.\n     *\n     * @type {Color}\n     */\n    this.color = new Color(color);\n\n    /**\n     * The minimum distance to start applying fog. Objects that are less than\n     * `near` units from the active camera won't be affected by fog.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.near = near;\n\n    /**\n     * The maximum distance at which fog stops being calculated and applied.\n     * Objects that are more than `far` units away from the active camera won't\n     * be affected by fog.\n     *\n     * @type {number}\n     * @default 1000\n     */\n    this.far = far;\n  }\n\n  /**\n   * Returns a new fog with copied values from this instance.\n   *\n   * @return {Fog} A clone of this instance.\n   */\n  clone() {\n    return new Fog(this.color, this.near, this.far);\n  }\n\n  /**\n   * Serializes the fog into JSON.\n   *\n   * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\n   * @return {Object} A JSON object representing the serialized fog\n   */\n  toJSON(/* meta */\n  ) {\n    return {\n      type: 'Fog',\n      name: this.name,\n      color: this.color.getHex(),\n      near: this.near,\n      far: this.far\n    };\n  }\n}\n\n/**\n * Scenes allow you to set up what is to be rendered and where by three.js.\n * This is where you place 3D objects like meshes, lines or lights.\n *\n * @augments Object3D\n */\nclass Scene extends Object3D {\n  /**\n   * Constructs a new scene.\n   */\n  constructor() {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isScene = true;\n    this.type = 'Scene';\n\n    /**\n     * Defines the background of the scene. Valid inputs are:\n     *\n     * - A color for defining a uniform colored background.\n     * - A texture for defining a (flat) textured background.\n     * - Cube textures or equirectangular textures for defining a skybox.\n     *\n     * @type {?(Color|Texture)}\n     * @default null\n     */\n    this.background = null;\n\n    /**\n     * Sets the environment map for all physical materials in the scene. However,\n     * it's not possible to overwrite an existing texture assigned to the `envMap`\n     * material property.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.environment = null;\n\n    /**\n     * A fog instance defining the type of fog that affects everything\n     * rendered in the scene.\n     *\n     * @type {?(Fog|FogExp2)}\n     * @default null\n     */\n    this.fog = null;\n\n    /**\n     * Sets the blurriness of the background. Only influences environment maps\n     * assigned to {@link Scene#background}. Valid input is a float between `0`\n     * and `1`.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.backgroundBlurriness = 0;\n\n    /**\n     * Attenuates the color of the background. Only applies to background textures.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.backgroundIntensity = 1;\n\n    /**\n     * The rotation of the background in radians. Only influences environment maps\n     * assigned to {@link Scene#background}.\n     *\n     * @type {Euler}\n     * @default (0,0,0)\n     */\n    this.backgroundRotation = new Euler();\n\n    /**\n     * Attenuates the color of the environment. Only influences environment maps\n     * assigned to {@link Scene#environment}.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.environmentIntensity = 1;\n\n    /**\n     * The rotation of the environment map in radians. Only influences physical materials\n     * in the scene when {@link Scene#environment} is used.\n     *\n     * @type {Euler}\n     * @default (0,0,0)\n     */\n    this.environmentRotation = new Euler();\n\n    /**\n     * Forces everything in the scene to be rendered with the defined material. It is possible\n     * to exclude materials from override by setting {@link Material#allowOverride} to `false`.\n     *\n     * @type {?Material}\n     * @default null\n     */\n    this.overrideMaterial = null;\n    if (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n      __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {\n        detail: this\n      }));\n    }\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    if (source.background !== null) this.background = source.background.clone();\n    if (source.environment !== null) this.environment = source.environment.clone();\n    if (source.fog !== null) this.fog = source.fog.clone();\n    this.backgroundBlurriness = source.backgroundBlurriness;\n    this.backgroundIntensity = source.backgroundIntensity;\n    this.backgroundRotation.copy(source.backgroundRotation);\n    this.environmentIntensity = source.environmentIntensity;\n    this.environmentRotation.copy(source.environmentRotation);\n    if (source.overrideMaterial !== null) this.overrideMaterial = source.overrideMaterial.clone();\n    this.matrixAutoUpdate = source.matrixAutoUpdate;\n    return this;\n  }\n  toJSON(meta) {\n    const data = super.toJSON(meta);\n    if (this.fog !== null) data.object.fog = this.fog.toJSON();\n    if (this.backgroundBlurriness > 0) data.object.backgroundBlurriness = this.backgroundBlurriness;\n    if (this.backgroundIntensity !== 1) data.object.backgroundIntensity = this.backgroundIntensity;\n    data.object.backgroundRotation = this.backgroundRotation.toArray();\n    if (this.environmentIntensity !== 1) data.object.environmentIntensity = this.environmentIntensity;\n    data.object.environmentRotation = this.environmentRotation.toArray();\n    return data;\n  }\n}\n\n/**\n * \"Interleaved\" means that multiple attributes, possibly of different types,\n * (e.g., position, normal, uv, color) are packed into a single array buffer.\n *\n * An introduction into interleaved arrays can be found here: [Interleaved array basics]{@link https://blog.tojicode.com/2011/05/interleaved-array-basics.html}\n */\nclass InterleavedBuffer {\n  /**\n   * Constructs a new interleaved buffer.\n   *\n   * @param {TypedArray} array - A typed array with a shared buffer storing attribute data.\n   * @param {number} stride - The number of typed-array elements per vertex.\n   */\n  constructor(array, stride) {\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isInterleavedBuffer = true;\n\n    /**\n     * A typed array with a shared buffer storing attribute data.\n     *\n     * @type {TypedArray}\n     */\n    this.array = array;\n\n    /**\n     * The number of typed-array elements per vertex.\n     *\n     * @type {number}\n     */\n    this.stride = stride;\n\n    /**\n     * The total number of elements in the array\n     *\n     * @type {number}\n     * @readonly\n     */\n    this.count = array !== undefined ? array.length / stride : 0;\n\n    /**\n     * Defines the intended usage pattern of the data store for optimization purposes.\n     *\n     * Note: After the initial use of a buffer, its usage cannot be changed. Instead,\n     * instantiate a new one and set the desired usage before the next render.\n     *\n     * @type {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)}\n     * @default StaticDrawUsage\n     */\n    this.usage = StaticDrawUsage;\n\n    /**\n     * This can be used to only update some components of stored vectors (for example, just the\n     * component related to color). Use the `addUpdateRange()` function to add ranges to this array.\n     *\n     * @type {Array<Object>}\n     */\n    this.updateRanges = [];\n\n    /**\n     * A version number, incremented every time the `needsUpdate` is set to `true`.\n     *\n     * @type {number}\n     */\n    this.version = 0;\n\n    /**\n     * The UUID of the interleaved buffer.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.uuid = generateUUID();\n  }\n\n  /**\n   * A callback function that is executed after the renderer has transferred the attribute array\n   * data to the GPU.\n   */\n  onUploadCallback() {}\n\n  /**\n   * Flag to indicate that this attribute has changed and should be re-sent to\n   * the GPU. Set this to `true` when you modify the value of the array.\n   *\n   * @type {number}\n   * @default false\n   * @param {boolean} value\n   */\n  set needsUpdate(value) {\n    if (value === true) this.version++;\n  }\n\n  /**\n   * Sets the usage of this interleaved buffer.\n   *\n   * @param {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)} value - The usage to set.\n   * @return {InterleavedBuffer} A reference to this interleaved buffer.\n   */\n  setUsage(value) {\n    this.usage = value;\n    return this;\n  }\n\n  /**\n   * Adds a range of data in the data array to be updated on the GPU.\n   *\n   * @param {number} start - Position at which to start update.\n   * @param {number} count - The number of components to update.\n   */\n  addUpdateRange(start, count) {\n    this.updateRanges.push({\n      start,\n      count\n    });\n  }\n\n  /**\n   * Clears the update ranges.\n   */\n  clearUpdateRanges() {\n    this.updateRanges.length = 0;\n  }\n\n  /**\n   * Copies the values of the given interleaved buffer to this instance.\n   *\n   * @param {InterleavedBuffer} source - The interleaved buffer to copy.\n   * @return {InterleavedBuffer} A reference to this instance.\n   */\n  copy(source) {\n    this.array = new source.array.constructor(source.array);\n    this.count = source.count;\n    this.stride = source.stride;\n    this.usage = source.usage;\n    return this;\n  }\n\n  /**\n   * Copies a vector from the given interleaved buffer to this one. The start\n   * and destination position in the attribute buffers are represented by the\n   * given indices.\n   *\n   * @param {number} index1 - The destination index into this interleaved buffer.\n   * @param {InterleavedBuffer} interleavedBuffer - The interleaved buffer to copy from.\n   * @param {number} index2 - The source index into the given interleaved buffer.\n   * @return {InterleavedBuffer} A reference to this instance.\n   */\n  copyAt(index1, interleavedBuffer, index2) {\n    index1 *= this.stride;\n    index2 *= interleavedBuffer.stride;\n    for (let i = 0, l = this.stride; i < l; i++) {\n      this.array[index1 + i] = interleavedBuffer.array[index2 + i];\n    }\n    return this;\n  }\n\n  /**\n   * Sets the given array data in the interleaved buffer.\n   *\n   * @param {(TypedArray|Array)} value - The array data to set.\n   * @param {number} [offset=0] - The offset in this interleaved buffer's array.\n   * @return {InterleavedBuffer} A reference to this instance.\n   */\n  set(value) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.array.set(value, offset);\n    return this;\n  }\n\n  /**\n   * Returns a new interleaved buffer with copied values from this instance.\n   *\n   * @param {Object} [data] - An object with shared array buffers that allows to retain shared structures.\n   * @return {InterleavedBuffer} A clone of this instance.\n   */\n  clone(data) {\n    if (data.arrayBuffers === undefined) {\n      data.arrayBuffers = {};\n    }\n    if (this.array.buffer._uuid === undefined) {\n      this.array.buffer._uuid = generateUUID();\n    }\n    if (data.arrayBuffers[this.array.buffer._uuid] === undefined) {\n      data.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;\n    }\n    const array = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);\n    const ib = new this.constructor(array, this.stride);\n    ib.setUsage(this.usage);\n    return ib;\n  }\n\n  /**\n   * Sets the given callback function that is executed after the Renderer has transferred\n   * the array data to the GPU. Can be used to perform clean-up operations after\n   * the upload when data are not needed anymore on the CPU side.\n   *\n   * @param {Function} callback - The `onUpload()` callback.\n   * @return {InterleavedBuffer} A reference to this instance.\n   */\n  onUpload(callback) {\n    this.onUploadCallback = callback;\n    return this;\n  }\n\n  /**\n   * Serializes the interleaved buffer into JSON.\n   *\n   * @param {Object} [data] - An optional value holding meta information about the serialization.\n   * @return {Object} A JSON object representing the serialized interleaved buffer.\n   */\n  toJSON(data) {\n    if (data.arrayBuffers === undefined) {\n      data.arrayBuffers = {};\n    }\n\n    // generate UUID for array buffer if necessary\n\n    if (this.array.buffer._uuid === undefined) {\n      this.array.buffer._uuid = generateUUID();\n    }\n    if (data.arrayBuffers[this.array.buffer._uuid] === undefined) {\n      data.arrayBuffers[this.array.buffer._uuid] = Array.from(new Uint32Array(this.array.buffer));\n    }\n\n    //\n\n    return {\n      uuid: this.uuid,\n      buffer: this.array.buffer._uuid,\n      type: this.array.constructor.name,\n      stride: this.stride\n    };\n  }\n}\nconst _vector$7 = /*@__PURE__*/new Vector3();\n\n/**\n * An alternative version of a buffer attribute with interleaved data. Interleaved\n * attributes share a common interleaved data storage ({@link InterleavedBuffer}) and refer with\n * different offsets into the buffer.\n */\nclass InterleavedBufferAttribute {\n  /**\n   * Constructs a new interleaved buffer attribute.\n   *\n   * @param {InterleavedBuffer} interleavedBuffer - The buffer holding the interleaved data.\n   * @param {number} itemSize - The item size.\n   * @param {number} offset - The attribute offset into the buffer.\n   * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n   */\n  constructor(interleavedBuffer, itemSize, offset) {\n    let normalized = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isInterleavedBufferAttribute = true;\n\n    /**\n     * The name of the buffer attribute.\n     *\n     * @type {string}\n     */\n    this.name = '';\n\n    /**\n     * The buffer holding the interleaved data.\n     *\n     * @type {InterleavedBuffer}\n     */\n    this.data = interleavedBuffer;\n\n    /**\n     * The item size, see {@link BufferAttribute#itemSize}.\n     *\n     * @type {number}\n     */\n    this.itemSize = itemSize;\n\n    /**\n     * The attribute offset into the buffer.\n     *\n     * @type {number}\n     */\n    this.offset = offset;\n\n    /**\n     * Whether the data are normalized or not, see {@link BufferAttribute#normalized}\n     *\n     * @type {InterleavedBuffer}\n     */\n    this.normalized = normalized;\n  }\n\n  /**\n   * The item count of this buffer attribute.\n   *\n   * @type {number}\n   * @readonly\n   */\n  get count() {\n    return this.data.count;\n  }\n\n  /**\n   * The array holding the interleaved buffer attribute data.\n   *\n   * @type {TypedArray}\n   */\n  get array() {\n    return this.data.array;\n  }\n\n  /**\n   * Flag to indicate that this attribute has changed and should be re-sent to\n   * the GPU. Set this to `true` when you modify the value of the array.\n   *\n   * @type {number}\n   * @default false\n   * @param {boolean} value\n   */\n  set needsUpdate(value) {\n    this.data.needsUpdate = value;\n  }\n\n  /**\n   * Applies the given 4x4 matrix to the given attribute. Only works with\n   * item size `3`.\n   *\n   * @param {Matrix4} m - The matrix to apply.\n   * @return {InterleavedBufferAttribute} A reference to this instance.\n   */\n  applyMatrix4(m) {\n    for (let i = 0, l = this.data.count; i < l; i++) {\n      _vector$7.fromBufferAttribute(this, i);\n      _vector$7.applyMatrix4(m);\n      this.setXYZ(i, _vector$7.x, _vector$7.y, _vector$7.z);\n    }\n    return this;\n  }\n\n  /**\n   * Applies the given 3x3 normal matrix to the given attribute. Only works with\n   * item size `3`.\n   *\n   * @param {Matrix3} m - The normal matrix to apply.\n   * @return {InterleavedBufferAttribute} A reference to this instance.\n   */\n  applyNormalMatrix(m) {\n    for (let i = 0, l = this.count; i < l; i++) {\n      _vector$7.fromBufferAttribute(this, i);\n      _vector$7.applyNormalMatrix(m);\n      this.setXYZ(i, _vector$7.x, _vector$7.y, _vector$7.z);\n    }\n    return this;\n  }\n\n  /**\n   * Applies the given 4x4 matrix to the given attribute. Only works with\n   * item size `3` and with direction vectors.\n   *\n   * @param {Matrix4} m - The matrix to apply.\n   * @return {InterleavedBufferAttribute} A reference to this instance.\n   */\n  transformDirection(m) {\n    for (let i = 0, l = this.count; i < l; i++) {\n      _vector$7.fromBufferAttribute(this, i);\n      _vector$7.transformDirection(m);\n      this.setXYZ(i, _vector$7.x, _vector$7.y, _vector$7.z);\n    }\n    return this;\n  }\n\n  /**\n   * Returns the given component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @param {number} component - The component index.\n   * @return {number} The returned value.\n   */\n  getComponent(index, component) {\n    let value = this.array[index * this.data.stride + this.offset + component];\n    if (this.normalized) value = denormalize(value, this.array);\n    return value;\n  }\n\n  /**\n   * Sets the given value to the given component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @param {number} component - The component index.\n   * @param {number} value - The value to set.\n   * @return {InterleavedBufferAttribute} A reference to this instance.\n   */\n  setComponent(index, component, value) {\n    if (this.normalized) value = normalize(value, this.array);\n    this.data.array[index * this.data.stride + this.offset + component] = value;\n    return this;\n  }\n\n  /**\n   * Sets the x component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @param {number} x - The value to set.\n   * @return {InterleavedBufferAttribute} A reference to this instance.\n   */\n  setX(index, x) {\n    if (this.normalized) x = normalize(x, this.array);\n    this.data.array[index * this.data.stride + this.offset] = x;\n    return this;\n  }\n\n  /**\n   * Sets the y component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @param {number} y - The value to set.\n   * @return {InterleavedBufferAttribute} A reference to this instance.\n   */\n  setY(index, y) {\n    if (this.normalized) y = normalize(y, this.array);\n    this.data.array[index * this.data.stride + this.offset + 1] = y;\n    return this;\n  }\n\n  /**\n   * Sets the z component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @param {number} z - The value to set.\n   * @return {InterleavedBufferAttribute} A reference to this instance.\n   */\n  setZ(index, z) {\n    if (this.normalized) z = normalize(z, this.array);\n    this.data.array[index * this.data.stride + this.offset + 2] = z;\n    return this;\n  }\n\n  /**\n   * Sets the w component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @param {number} w - The value to set.\n   * @return {InterleavedBufferAttribute} A reference to this instance.\n   */\n  setW(index, w) {\n    if (this.normalized) w = normalize(w, this.array);\n    this.data.array[index * this.data.stride + this.offset + 3] = w;\n    return this;\n  }\n\n  /**\n   * Returns the x component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @return {number} The x component.\n   */\n  getX(index) {\n    let x = this.data.array[index * this.data.stride + this.offset];\n    if (this.normalized) x = denormalize(x, this.array);\n    return x;\n  }\n\n  /**\n   * Returns the y component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @return {number} The y component.\n   */\n  getY(index) {\n    let y = this.data.array[index * this.data.stride + this.offset + 1];\n    if (this.normalized) y = denormalize(y, this.array);\n    return y;\n  }\n\n  /**\n   * Returns the z component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @return {number} The z component.\n   */\n  getZ(index) {\n    let z = this.data.array[index * this.data.stride + this.offset + 2];\n    if (this.normalized) z = denormalize(z, this.array);\n    return z;\n  }\n\n  /**\n   * Returns the w component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @return {number} The w component.\n   */\n  getW(index) {\n    let w = this.data.array[index * this.data.stride + this.offset + 3];\n    if (this.normalized) w = denormalize(w, this.array);\n    return w;\n  }\n\n  /**\n   * Sets the x and y component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @param {number} x - The value for the x component to set.\n   * @param {number} y - The value for the y component to set.\n   * @return {InterleavedBufferAttribute} A reference to this instance.\n   */\n  setXY(index, x, y) {\n    index = index * this.data.stride + this.offset;\n    if (this.normalized) {\n      x = normalize(x, this.array);\n      y = normalize(y, this.array);\n    }\n    this.data.array[index + 0] = x;\n    this.data.array[index + 1] = y;\n    return this;\n  }\n\n  /**\n   * Sets the x, y and z component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @param {number} x - The value for the x component to set.\n   * @param {number} y - The value for the y component to set.\n   * @param {number} z - The value for the z component to set.\n   * @return {InterleavedBufferAttribute} A reference to this instance.\n   */\n  setXYZ(index, x, y, z) {\n    index = index * this.data.stride + this.offset;\n    if (this.normalized) {\n      x = normalize(x, this.array);\n      y = normalize(y, this.array);\n      z = normalize(z, this.array);\n    }\n    this.data.array[index + 0] = x;\n    this.data.array[index + 1] = y;\n    this.data.array[index + 2] = z;\n    return this;\n  }\n\n  /**\n   * Sets the x, y, z and w component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @param {number} x - The value for the x component to set.\n   * @param {number} y - The value for the y component to set.\n   * @param {number} z - The value for the z component to set.\n   * @param {number} w - The value for the w component to set.\n   * @return {InterleavedBufferAttribute} A reference to this instance.\n   */\n  setXYZW(index, x, y, z, w) {\n    index = index * this.data.stride + this.offset;\n    if (this.normalized) {\n      x = normalize(x, this.array);\n      y = normalize(y, this.array);\n      z = normalize(z, this.array);\n      w = normalize(w, this.array);\n    }\n    this.data.array[index + 0] = x;\n    this.data.array[index + 1] = y;\n    this.data.array[index + 2] = z;\n    this.data.array[index + 3] = w;\n    return this;\n  }\n\n  /**\n   * Returns a new buffer attribute with copied values from this instance.\n   *\n   * If no parameter is provided, cloning an interleaved buffer attribute will de-interleave buffer data.\n   *\n   * @param {Object} [data] - An object with interleaved buffers that allows to retain the interleaved property.\n   * @return {BufferAttribute|InterleavedBufferAttribute} A clone of this instance.\n   */\n  clone(data) {\n    if (data === undefined) {\n      console.log('THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.');\n      const array = [];\n      for (let i = 0; i < this.count; i++) {\n        const index = i * this.data.stride + this.offset;\n        for (let j = 0; j < this.itemSize; j++) {\n          array.push(this.data.array[index + j]);\n        }\n      }\n      return new BufferAttribute(new this.array.constructor(array), this.itemSize, this.normalized);\n    } else {\n      if (data.interleavedBuffers === undefined) {\n        data.interleavedBuffers = {};\n      }\n      if (data.interleavedBuffers[this.data.uuid] === undefined) {\n        data.interleavedBuffers[this.data.uuid] = this.data.clone(data);\n      }\n      return new InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);\n    }\n  }\n\n  /**\n   * Serializes the buffer attribute into JSON.\n   *\n   * If no parameter is provided, cloning an interleaved buffer attribute will de-interleave buffer data.\n   *\n   * @param {Object} [data] - An optional value holding meta information about the serialization.\n   * @return {Object} A JSON object representing the serialized buffer attribute.\n   */\n  toJSON(data) {\n    if (data === undefined) {\n      console.log('THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.');\n      const array = [];\n      for (let i = 0; i < this.count; i++) {\n        const index = i * this.data.stride + this.offset;\n        for (let j = 0; j < this.itemSize; j++) {\n          array.push(this.data.array[index + j]);\n        }\n      }\n\n      // de-interleave data and save it as an ordinary buffer attribute for now\n\n      return {\n        itemSize: this.itemSize,\n        type: this.array.constructor.name,\n        array: array,\n        normalized: this.normalized\n      };\n    } else {\n      // save as true interleaved attribute\n\n      if (data.interleavedBuffers === undefined) {\n        data.interleavedBuffers = {};\n      }\n      if (data.interleavedBuffers[this.data.uuid] === undefined) {\n        data.interleavedBuffers[this.data.uuid] = this.data.toJSON(data);\n      }\n      return {\n        isInterleavedBufferAttribute: true,\n        itemSize: this.itemSize,\n        data: this.data.uuid,\n        offset: this.offset,\n        normalized: this.normalized\n      };\n    }\n  }\n}\n\n/**\n * A material for rendering instances of {@link Sprite}.\n *\n * ```js\n * const map = new THREE.TextureLoader().load( 'textures/sprite.png' );\n * const material = new THREE.SpriteMaterial( { map: map, color: 0xffffff } );\n *\n * const sprite = new THREE.Sprite( material );\n * sprite.scale.set(200, 200, 1)\n * scene.add( sprite );\n * ```\n *\n * @augments Material\n */\nclass SpriteMaterial extends Material {\n  /**\n   * Constructs a new sprite material.\n   *\n   * @param {Object} [parameters] - An object with one or more properties\n   * defining the material's appearance. Any property of the material\n   * (including any property from inherited materials) can be passed\n   * in here. Color values can be passed any type of value accepted\n   * by {@link Color#set}.\n   */\n  constructor(parameters) {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isSpriteMaterial = true;\n    this.type = 'SpriteMaterial';\n\n    /**\n     * Color of the material.\n     *\n     * @type {Color}\n     * @default (1,1,1)\n     */\n    this.color = new Color(0xffffff);\n\n    /**\n     * The color map. May optionally include an alpha channel, typically combined\n     * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\n     * color is modulated by the diffuse `color`.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.map = null;\n\n    /**\n     * The alpha map is a grayscale texture that controls the opacity across the\n     * surface (black: fully transparent; white: fully opaque).\n     *\n     * Only the color of the texture is used, ignoring the alpha channel if one\n     * exists. For RGB and RGBA textures, the renderer will use the green channel\n     * when sampling this texture due to the extra bit of precision provided for\n     * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n     * luminance/alpha textures will also still work as expected.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.alphaMap = null;\n\n    /**\n     * The rotation of the sprite in radians.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.rotation = 0;\n\n    /**\n     * Specifies whether size of the sprite is attenuated by the camera depth (perspective camera only).\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.sizeAttenuation = true;\n\n    /**\n     * Overwritten since sprite materials are transparent\n     * by default.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.transparent = true;\n\n    /**\n     * Whether the material is affected by fog or not.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.fog = true;\n    this.setValues(parameters);\n  }\n  copy(source) {\n    super.copy(source);\n    this.color.copy(source.color);\n    this.map = source.map;\n    this.alphaMap = source.alphaMap;\n    this.rotation = source.rotation;\n    this.sizeAttenuation = source.sizeAttenuation;\n    this.fog = source.fog;\n    return this;\n  }\n}\nlet _geometry;\nconst _intersectPoint = /*@__PURE__*/new Vector3();\nconst _worldScale = /*@__PURE__*/new Vector3();\nconst _mvPosition = /*@__PURE__*/new Vector3();\nconst _alignedPosition = /*@__PURE__*/new Vector2();\nconst _rotatedPosition = /*@__PURE__*/new Vector2();\nconst _viewWorldMatrix = /*@__PURE__*/new Matrix4();\nconst _vA = /*@__PURE__*/new Vector3();\nconst _vB = /*@__PURE__*/new Vector3();\nconst _vC = /*@__PURE__*/new Vector3();\nconst _uvA = /*@__PURE__*/new Vector2();\nconst _uvB = /*@__PURE__*/new Vector2();\nconst _uvC = /*@__PURE__*/new Vector2();\n\n/**\n * A sprite is a plane that always faces towards the camera, generally with a\n * partially transparent texture applied.\n *\n * Sprites do not cast shadows, setting {@link Object3D#castShadow} to `true` will\n * have no effect.\n *\n * ```js\n * const map = new THREE.TextureLoader().load( 'sprite.png' );\n * const material = new THREE.SpriteMaterial( { map: map } );\n *\n * const sprite = new THREE.Sprite( material );\n * scene.add( sprite );\n * ```\n *\n * @augments Object3D\n */\nclass Sprite extends Object3D {\n  /**\n   * Constructs a new sprite.\n   *\n   * @param {SpriteMaterial} [material] - The sprite material.\n   */\n  constructor() {\n    let material = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new SpriteMaterial();\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isSprite = true;\n    this.type = 'Sprite';\n    if (_geometry === undefined) {\n      _geometry = new BufferGeometry();\n      const float32Array = new Float32Array([-0.5, -0.5, 0, 0, 0, 0.5, -0.5, 0, 1, 0, 0.5, 0.5, 0, 1, 1, -0.5, 0.5, 0, 0, 1]);\n      const interleavedBuffer = new InterleavedBuffer(float32Array, 5);\n      _geometry.setIndex([0, 1, 2, 0, 2, 3]);\n      _geometry.setAttribute('position', new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));\n      _geometry.setAttribute('uv', new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));\n    }\n\n    /**\n     * The sprite geometry.\n     *\n     * @type {BufferGeometry}\n     */\n    this.geometry = _geometry;\n\n    /**\n     * The sprite material.\n     *\n     * @type {SpriteMaterial}\n     */\n    this.material = material;\n\n    /**\n     * The sprite's anchor point, and the point around which the sprite rotates.\n     * A value of `(0.5, 0.5)` corresponds to the midpoint of the sprite. A value\n     * of `(0, 0)` corresponds to the lower left corner of the sprite.\n     *\n     * @type {Vector2}\n     * @default (0.5,0.5)\n     */\n    this.center = new Vector2(0.5, 0.5);\n  }\n\n  /**\n   * Computes intersection points between a casted ray and this sprite.\n   *\n   * @param {Raycaster} raycaster - The raycaster.\n   * @param {Array<Object>} intersects - The target array that holds the intersection points.\n   */\n  raycast(raycaster, intersects) {\n    if (raycaster.camera === null) {\n      console.error('THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.');\n    }\n    _worldScale.setFromMatrixScale(this.matrixWorld);\n    _viewWorldMatrix.copy(raycaster.camera.matrixWorld);\n    this.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse, this.matrixWorld);\n    _mvPosition.setFromMatrixPosition(this.modelViewMatrix);\n    if (raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) {\n      _worldScale.multiplyScalar(-_mvPosition.z);\n    }\n    const rotation = this.material.rotation;\n    let sin, cos;\n    if (rotation !== 0) {\n      cos = Math.cos(rotation);\n      sin = Math.sin(rotation);\n    }\n    const center = this.center;\n    transformVertex(_vA.set(-0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n    transformVertex(_vB.set(0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n    transformVertex(_vC.set(0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n    _uvA.set(0, 0);\n    _uvB.set(1, 0);\n    _uvC.set(1, 1);\n\n    // check first triangle\n    let intersect = raycaster.ray.intersectTriangle(_vA, _vB, _vC, false, _intersectPoint);\n    if (intersect === null) {\n      // check second triangle\n      transformVertex(_vB.set(-0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n      _uvB.set(0, 1);\n      intersect = raycaster.ray.intersectTriangle(_vA, _vC, _vB, false, _intersectPoint);\n      if (intersect === null) {\n        return;\n      }\n    }\n    const distance = raycaster.ray.origin.distanceTo(_intersectPoint);\n    if (distance < raycaster.near || distance > raycaster.far) return;\n    intersects.push({\n      distance: distance,\n      point: _intersectPoint.clone(),\n      uv: Triangle.getInterpolation(_intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2()),\n      face: null,\n      object: this\n    });\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    if (source.center !== undefined) this.center.copy(source.center);\n    this.material = source.material;\n    return this;\n  }\n}\nfunction transformVertex(vertexPosition, mvPosition, center, scale, sin, cos) {\n  // compute position in camera space\n  _alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale);\n\n  // to check if rotation is not zero\n  if (sin !== undefined) {\n    _rotatedPosition.x = cos * _alignedPosition.x - sin * _alignedPosition.y;\n    _rotatedPosition.y = sin * _alignedPosition.x + cos * _alignedPosition.y;\n  } else {\n    _rotatedPosition.copy(_alignedPosition);\n  }\n  vertexPosition.copy(mvPosition);\n  vertexPosition.x += _rotatedPosition.x;\n  vertexPosition.y += _rotatedPosition.y;\n\n  // transform to world space\n  vertexPosition.applyMatrix4(_viewWorldMatrix);\n}\nconst _v1$2 = /*@__PURE__*/new Vector3();\nconst _v2$1 = /*@__PURE__*/new Vector3();\n\n/**\n * A component for providing a basic Level of Detail (LOD) mechanism.\n *\n * Every LOD level is associated with an object, and rendering can be switched\n * between them at the distances specified. Typically you would create, say,\n * three meshes, one for far away (low detail), one for mid range (medium\n * detail) and one for close up (high detail).\n *\n * ```js\n * const lod = new THREE.LOD();\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n *\n * //Create spheres with 3 levels of detail and create new LOD levels for them\n * for( let i = 0; i < 3; i++ ) {\n *\n * \tconst geometry = new THREE.IcosahedronGeometry( 10, 3 - i );\n * \tconst mesh = new THREE.Mesh( geometry, material );\n * \tlod.addLevel( mesh, i * 75 );\n *\n * }\n *\n * scene.add( lod );\n * ```\n *\n * @augments Object3D\n */\nclass LOD extends Object3D {\n  /**\n   * Constructs a new LOD.\n   */\n  constructor() {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isLOD = true;\n\n    /**\n     * The current LOD index.\n     *\n     * @private\n     * @type {number}\n     * @default 0\n     */\n    this._currentLevel = 0;\n    this.type = 'LOD';\n    Object.defineProperties(this, {\n      /**\n       * This array holds the LOD levels.\n       *\n       * @name LOD#levels\n       * @type {Array<{object:Object3D,distance:number,hysteresis:number}>}\n       */\n      levels: {\n        enumerable: true,\n        value: []\n      }\n    });\n\n    /**\n     * Whether the LOD object is updated automatically by the renderer per frame\n     * or not. If set to `false`, you have to call {@link LOD#update} in the\n     * render loop by yourself.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.autoUpdate = true;\n  }\n  copy(source) {\n    super.copy(source, false);\n    const levels = source.levels;\n    for (let i = 0, l = levels.length; i < l; i++) {\n      const level = levels[i];\n      this.addLevel(level.object.clone(), level.distance, level.hysteresis);\n    }\n    this.autoUpdate = source.autoUpdate;\n    return this;\n  }\n\n  /**\n   * Adds a mesh that will display at a certain distance and greater. Typically\n   * the further away the distance, the lower the detail on the mesh.\n   *\n   * @param {Object3D} object - The 3D object to display at this level.\n   * @param {number} [distance=0] - The distance at which to display this level of detail.\n   * @param {number} [hysteresis=0] - Threshold used to avoid flickering at LOD boundaries, as a fraction of distance.\n   * @return {LOD} A reference to this instance.\n   */\n  addLevel(object) {\n    let distance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let hysteresis = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    distance = Math.abs(distance);\n    const levels = this.levels;\n    let l;\n    for (l = 0; l < levels.length; l++) {\n      if (distance < levels[l].distance) {\n        break;\n      }\n    }\n    levels.splice(l, 0, {\n      distance: distance,\n      hysteresis: hysteresis,\n      object: object\n    });\n    this.add(object);\n    return this;\n  }\n\n  /**\n   * Removes an existing level, based on the distance from the camera.\n   * Returns `true` when the level has been removed. Otherwise `false`.\n   *\n   * @param {number} distance - Distance of the level to remove.\n   * @return {boolean} Whether the level has been removed or not.\n   */\n  removeLevel(distance) {\n    const levels = this.levels;\n    for (let i = 0; i < levels.length; i++) {\n      if (levels[i].distance === distance) {\n        const removedElements = levels.splice(i, 1);\n        this.remove(removedElements[0].object);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Returns the currently active LOD level index.\n   *\n   * @return {number} The current active LOD level index.\n   */\n  getCurrentLevel() {\n    return this._currentLevel;\n  }\n\n  /**\n   * Returns a reference to the first 3D object that is greater than\n   * the given distance.\n   *\n   * @param {number} distance - The LOD distance.\n   * @return {Object3D|null} The found 3D object. `null` if no 3D object has been found.\n   */\n  getObjectForDistance(distance) {\n    const levels = this.levels;\n    if (levels.length > 0) {\n      let i, l;\n      for (i = 1, l = levels.length; i < l; i++) {\n        let levelDistance = levels[i].distance;\n        if (levels[i].object.visible) {\n          levelDistance -= levelDistance * levels[i].hysteresis;\n        }\n        if (distance < levelDistance) {\n          break;\n        }\n      }\n      return levels[i - 1].object;\n    }\n    return null;\n  }\n\n  /**\n   * Computes intersection points between a casted ray and this LOD.\n   *\n   * @param {Raycaster} raycaster - The raycaster.\n   * @param {Array<Object>} intersects - The target array that holds the intersection points.\n   */\n  raycast(raycaster, intersects) {\n    const levels = this.levels;\n    if (levels.length > 0) {\n      _v1$2.setFromMatrixPosition(this.matrixWorld);\n      const distance = raycaster.ray.origin.distanceTo(_v1$2);\n      this.getObjectForDistance(distance).raycast(raycaster, intersects);\n    }\n  }\n\n  /**\n   * Updates the LOD by computing which LOD level should be visible according\n   * to the current distance of the given camera.\n   *\n   * @param {Camera} camera - The camera the scene is rendered with.\n   */\n  update(camera) {\n    const levels = this.levels;\n    if (levels.length > 1) {\n      _v1$2.setFromMatrixPosition(camera.matrixWorld);\n      _v2$1.setFromMatrixPosition(this.matrixWorld);\n      const distance = _v1$2.distanceTo(_v2$1) / camera.zoom;\n      levels[0].object.visible = true;\n      let i, l;\n      for (i = 1, l = levels.length; i < l; i++) {\n        let levelDistance = levels[i].distance;\n        if (levels[i].object.visible) {\n          levelDistance -= levelDistance * levels[i].hysteresis;\n        }\n        if (distance >= levelDistance) {\n          levels[i - 1].object.visible = false;\n          levels[i].object.visible = true;\n        } else {\n          break;\n        }\n      }\n      this._currentLevel = i - 1;\n      for (; i < l; i++) {\n        levels[i].object.visible = false;\n      }\n    }\n  }\n  toJSON(meta) {\n    const data = super.toJSON(meta);\n    if (this.autoUpdate === false) data.object.autoUpdate = false;\n    data.object.levels = [];\n    const levels = this.levels;\n    for (let i = 0, l = levels.length; i < l; i++) {\n      const level = levels[i];\n      data.object.levels.push({\n        object: level.object.uuid,\n        distance: level.distance,\n        hysteresis: level.hysteresis\n      });\n    }\n    return data;\n  }\n}\nconst _basePosition = /*@__PURE__*/new Vector3();\nconst _skinIndex = /*@__PURE__*/new Vector4();\nconst _skinWeight = /*@__PURE__*/new Vector4();\nconst _vector3 = /*@__PURE__*/new Vector3();\nconst _matrix4 = /*@__PURE__*/new Matrix4();\nconst _vertex = /*@__PURE__*/new Vector3();\nconst _sphere$5 = /*@__PURE__*/new Sphere();\nconst _inverseMatrix$2 = /*@__PURE__*/new Matrix4();\nconst _ray$2 = /*@__PURE__*/new Ray();\n\n/**\n * A mesh that has a {@link Skeleton} that can then be used to animate the\n * vertices of the geometry with skinning/skeleton animation.\n *\n * Next to a valid skeleton, the skinned mesh requires skin indices and weights\n * as buffer attributes in its geometry. These attribute define which bones affect a single\n * vertex to a certain extend.\n *\n * Typically skinned meshes are not created manually but loaders like {@link GLTFLoader}\n * or {@link FBXLoader } import respective models.\n *\n * @augments Mesh\n */\nclass SkinnedMesh extends Mesh {\n  /**\n   * Constructs a new skinned mesh.\n   *\n   * @param {BufferGeometry} [geometry] - The mesh geometry.\n   * @param {Material|Array<Material>} [material] - The mesh material.\n   */\n  constructor(geometry, material) {\n    super(geometry, material);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isSkinnedMesh = true;\n    this.type = 'SkinnedMesh';\n\n    /**\n     * `AttachedBindMode` means the skinned mesh shares the same world space as the skeleton.\n     * This is not true when using `DetachedBindMode` which is useful when sharing a skeleton\n     * across multiple skinned meshes.\n     *\n     * @type {(AttachedBindMode|DetachedBindMode)}\n     * @default AttachedBindMode\n     */\n    this.bindMode = AttachedBindMode;\n\n    /**\n     * The base matrix that is used for the bound bone transforms.\n     *\n     * @type {Matrix4}\n     */\n    this.bindMatrix = new Matrix4();\n\n    /**\n     * The base matrix that is used for resetting the bound bone transforms.\n     *\n     * @type {Matrix4}\n     */\n    this.bindMatrixInverse = new Matrix4();\n\n    /**\n     * The bounding box of the skinned mesh. Can be computed via {@link SkinnedMesh#computeBoundingBox}.\n     *\n     * @type {?Box3}\n     * @default null\n     */\n    this.boundingBox = null;\n\n    /**\n     * The bounding sphere of the skinned mesh. Can be computed via {@link SkinnedMesh#computeBoundingSphere}.\n     *\n     * @type {?Sphere}\n     * @default null\n     */\n    this.boundingSphere = null;\n  }\n\n  /**\n   * Computes the bounding box of the skinned mesh, and updates {@link SkinnedMesh#boundingBox}.\n   * The bounding box is not automatically computed by the engine; this method must be called by your app.\n   * If the skinned mesh is animated, the bounding box should be recomputed per frame in order to reflect\n   * the current animation state.\n   */\n  computeBoundingBox() {\n    const geometry = this.geometry;\n    if (this.boundingBox === null) {\n      this.boundingBox = new Box3();\n    }\n    this.boundingBox.makeEmpty();\n    const positionAttribute = geometry.getAttribute('position');\n    for (let i = 0; i < positionAttribute.count; i++) {\n      this.getVertexPosition(i, _vertex);\n      this.boundingBox.expandByPoint(_vertex);\n    }\n  }\n\n  /**\n   * Computes the bounding sphere of the skinned mesh, and updates {@link SkinnedMesh#boundingSphere}.\n   * The bounding sphere is automatically computed by the engine once when it is needed, e.g., for ray casting\n   * and view frustum culling. If the skinned mesh is animated, the bounding sphere should be recomputed\n   * per frame in order to reflect the current animation state.\n   */\n  computeBoundingSphere() {\n    const geometry = this.geometry;\n    if (this.boundingSphere === null) {\n      this.boundingSphere = new Sphere();\n    }\n    this.boundingSphere.makeEmpty();\n    const positionAttribute = geometry.getAttribute('position');\n    for (let i = 0; i < positionAttribute.count; i++) {\n      this.getVertexPosition(i, _vertex);\n      this.boundingSphere.expandByPoint(_vertex);\n    }\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.bindMode = source.bindMode;\n    this.bindMatrix.copy(source.bindMatrix);\n    this.bindMatrixInverse.copy(source.bindMatrixInverse);\n    this.skeleton = source.skeleton;\n    if (source.boundingBox !== null) this.boundingBox = source.boundingBox.clone();\n    if (source.boundingSphere !== null) this.boundingSphere = source.boundingSphere.clone();\n    return this;\n  }\n  raycast(raycaster, intersects) {\n    const material = this.material;\n    const matrixWorld = this.matrixWorld;\n    if (material === undefined) return;\n\n    // test with bounding sphere in world space\n\n    if (this.boundingSphere === null) this.computeBoundingSphere();\n    _sphere$5.copy(this.boundingSphere);\n    _sphere$5.applyMatrix4(matrixWorld);\n    if (raycaster.ray.intersectsSphere(_sphere$5) === false) return;\n\n    // convert ray to local space of skinned mesh\n\n    _inverseMatrix$2.copy(matrixWorld).invert();\n    _ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2);\n\n    // test with bounding box in local space\n\n    if (this.boundingBox !== null) {\n      if (_ray$2.intersectsBox(this.boundingBox) === false) return;\n    }\n\n    // test for intersections with geometry\n\n    this._computeIntersections(raycaster, intersects, _ray$2);\n  }\n  getVertexPosition(index, target) {\n    super.getVertexPosition(index, target);\n    this.applyBoneTransform(index, target);\n    return target;\n  }\n\n  /**\n   * Binds the given skeleton to the skinned mesh.\n   *\n   * @param {Skeleton} skeleton - The skeleton to bind.\n   * @param {Matrix4} [bindMatrix] - The bind matrix. If no bind matrix is provided,\n   * the skinned mesh's world matrix will be used instead.\n   */\n  bind(skeleton, bindMatrix) {\n    this.skeleton = skeleton;\n    if (bindMatrix === undefined) {\n      this.updateMatrixWorld(true);\n      this.skeleton.calculateInverses();\n      bindMatrix = this.matrixWorld;\n    }\n    this.bindMatrix.copy(bindMatrix);\n    this.bindMatrixInverse.copy(bindMatrix).invert();\n  }\n\n  /**\n   * This method sets the skinned mesh in the rest pose).\n   */\n  pose() {\n    this.skeleton.pose();\n  }\n\n  /**\n   * Normalizes the skin weights which are defined as a buffer attribute\n   * in the skinned mesh's geometry.\n   */\n  normalizeSkinWeights() {\n    const vector = new Vector4();\n    const skinWeight = this.geometry.attributes.skinWeight;\n    for (let i = 0, l = skinWeight.count; i < l; i++) {\n      vector.fromBufferAttribute(skinWeight, i);\n      const scale = 1.0 / vector.manhattanLength();\n      if (scale !== Infinity) {\n        vector.multiplyScalar(scale);\n      } else {\n        vector.set(1, 0, 0, 0); // do something reasonable\n      }\n      skinWeight.setXYZW(i, vector.x, vector.y, vector.z, vector.w);\n    }\n  }\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    if (this.bindMode === AttachedBindMode) {\n      this.bindMatrixInverse.copy(this.matrixWorld).invert();\n    } else if (this.bindMode === DetachedBindMode) {\n      this.bindMatrixInverse.copy(this.bindMatrix).invert();\n    } else {\n      console.warn('THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode);\n    }\n  }\n\n  /**\n   * Applies the bone transform associated with the given index to the given\n   * vertex position. Returns the updated vector.\n   *\n   * @param {number} index - The vertex index.\n   * @param {Vector3} target - The target object that is used to store the method's result.\n   * the skinned mesh's world matrix will be used instead.\n   * @return {Vector3} The updated vertex position.\n   */\n  applyBoneTransform(index, target) {\n    const skeleton = this.skeleton;\n    const geometry = this.geometry;\n    _skinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index);\n    _skinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index);\n    _basePosition.copy(target).applyMatrix4(this.bindMatrix);\n    target.set(0, 0, 0);\n    for (let i = 0; i < 4; i++) {\n      const weight = _skinWeight.getComponent(i);\n      if (weight !== 0) {\n        const boneIndex = _skinIndex.getComponent(i);\n        _matrix4.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld, skeleton.boneInverses[boneIndex]);\n        target.addScaledVector(_vector3.copy(_basePosition).applyMatrix4(_matrix4), weight);\n      }\n    }\n    return target.applyMatrix4(this.bindMatrixInverse);\n  }\n}\n\n/**\n * A bone which is part of a {@link Skeleton}. The skeleton in turn is used by\n * the {@link SkinnedMesh}.\n *\n * ```js\n * const root = new THREE.Bone();\n * const child = new THREE.Bone();\n *\n * root.add( child );\n * child.position.y = 5;\n * ```\n *\n * @augments Object3D\n */\nclass Bone extends Object3D {\n  /**\n   * Constructs a new bone.\n   */\n  constructor() {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isBone = true;\n    this.type = 'Bone';\n  }\n}\n\n/**\n * Creates a texture directly from raw buffer data.\n *\n * The interpretation of the data depends on type and format: If the type is\n * `UnsignedByteType`, a `Uint8Array` will be useful for addressing the\n * texel data. If the format is `RGBAFormat`, data needs four values for\n * one texel; Red, Green, Blue and Alpha (typically the opacity).\n *\n * @augments Texture\n */\nclass DataTexture extends Texture {\n  /**\n   * Constructs a new data texture.\n   *\n   * @param {?TypedArray} [data=null] - The buffer data.\n   * @param {number} [width=1] - The width of the texture.\n   * @param {number} [height=1] - The height of the texture.\n   * @param {number} [format=RGBAFormat] - The texture format.\n   * @param {number} [type=UnsignedByteType] - The texture type.\n   * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.\n   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n   * @param {number} [magFilter=NearestFilter] - The mag filter value.\n   * @param {number} [minFilter=NearestFilter] - The min filter value.\n   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n   * @param {string} [colorSpace=NoColorSpace] - The color space.\n   */\n  constructor() {\n    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let format = arguments.length > 3 ? arguments[3] : undefined;\n    let type = arguments.length > 4 ? arguments[4] : undefined;\n    let mapping = arguments.length > 5 ? arguments[5] : undefined;\n    let wrapS = arguments.length > 6 ? arguments[6] : undefined;\n    let wrapT = arguments.length > 7 ? arguments[7] : undefined;\n    let magFilter = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : NearestFilter;\n    let minFilter = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : NearestFilter;\n    let anisotropy = arguments.length > 10 ? arguments[10] : undefined;\n    let colorSpace = arguments.length > 11 ? arguments[11] : undefined;\n    super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isDataTexture = true;\n\n    /**\n     * The image definition of a data texture.\n     *\n     * @type {{data:TypedArray,width:number,height:number}}\n     */\n    this.image = {\n      data: data,\n      width: width,\n      height: height\n    };\n\n    /**\n     * Whether to generate mipmaps (if possible) for a texture.\n     *\n     * Overwritten and set to `false` by default.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.generateMipmaps = false;\n\n    /**\n     * If set to `true`, the texture is flipped along the vertical axis when\n     * uploaded to the GPU.\n     *\n     * Overwritten and set to `false` by default.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.flipY = false;\n\n    /**\n     * Specifies the alignment requirements for the start of each pixel row in memory.\n     *\n     * Overwritten and set to `1` by default.\n     *\n     * @type {boolean}\n     * @default 1\n     */\n    this.unpackAlignment = 1;\n  }\n}\nconst _offsetMatrix = /*@__PURE__*/new Matrix4();\nconst _identityMatrix = /*@__PURE__*/new Matrix4();\n\n/**\n * Class for representing the armatures in `three.js`. The skeleton\n * is defined by a hierarchy of bones.\n *\n * ```js\n * const bones = [];\n *\n * const shoulder = new THREE.Bone();\n * const elbow = new THREE.Bone();\n * const hand = new THREE.Bone();\n *\n * shoulder.add( elbow );\n * elbow.add( hand );\n *\n * bones.push( shoulder , elbow, hand);\n *\n * shoulder.position.y = -5;\n * elbow.position.y = 0;\n * hand.position.y = 5;\n *\n * const armSkeleton = new THREE.Skeleton( bones );\n * ```\n */\nclass Skeleton {\n  /**\n   * Constructs a new skeleton.\n   *\n   * @param {Array<Bone>} [bones] - An array of bones.\n   * @param {Array<Matrix4>} [boneInverses] - An array of bone inverse matrices.\n   * If not provided, these matrices will be computed automatically via {@link Skeleton#calculateInverses}.\n   */\n  constructor() {\n    let bones = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let boneInverses = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    this.uuid = generateUUID();\n\n    /**\n     * An array of bones defining the skeleton.\n     *\n     * @type {Array<Bone>}\n     */\n    this.bones = bones.slice(0);\n\n    /**\n     * An array of bone inverse matrices.\n     *\n     * @type {Array<Matrix4>}\n     */\n    this.boneInverses = boneInverses;\n\n    /**\n     * An array buffer holding the bone data.\n     * Input data for {@link Skeleton#boneTexture}.\n     *\n     * @type {?Float32Array}\n     * @default null\n     */\n    this.boneMatrices = null;\n\n    /**\n     * A texture holding the bone data for use\n     * in the vertex shader.\n     *\n     * @type {?DataTexture}\n     * @default null\n     */\n    this.boneTexture = null;\n    this.init();\n  }\n\n  /**\n   * Initializes the skeleton. This method gets automatically called by the constructor\n   * but depending on how the skeleton is created it might be necessary to call this method\n   * manually.\n   */\n  init() {\n    const bones = this.bones;\n    const boneInverses = this.boneInverses;\n    this.boneMatrices = new Float32Array(bones.length * 16);\n\n    // calculate inverse bone matrices if necessary\n\n    if (boneInverses.length === 0) {\n      this.calculateInverses();\n    } else {\n      // handle special case\n\n      if (bones.length !== boneInverses.length) {\n        console.warn('THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.');\n        this.boneInverses = [];\n        for (let i = 0, il = this.bones.length; i < il; i++) {\n          this.boneInverses.push(new Matrix4());\n        }\n      }\n    }\n  }\n\n  /**\n   * Computes the bone inverse matrices. This method resets {@link Skeleton#boneInverses}\n   * and fills it with new matrices.\n   */\n  calculateInverses() {\n    this.boneInverses.length = 0;\n    for (let i = 0, il = this.bones.length; i < il; i++) {\n      const inverse = new Matrix4();\n      if (this.bones[i]) {\n        inverse.copy(this.bones[i].matrixWorld).invert();\n      }\n      this.boneInverses.push(inverse);\n    }\n  }\n\n  /**\n   * Resets the skeleton to the base pose.\n   */\n  pose() {\n    // recover the bind-time world matrices\n\n    for (let i = 0, il = this.bones.length; i < il; i++) {\n      const bone = this.bones[i];\n      if (bone) {\n        bone.matrixWorld.copy(this.boneInverses[i]).invert();\n      }\n    }\n\n    // compute the local matrices, positions, rotations and scales\n\n    for (let i = 0, il = this.bones.length; i < il; i++) {\n      const bone = this.bones[i];\n      if (bone) {\n        if (bone.parent && bone.parent.isBone) {\n          bone.matrix.copy(bone.parent.matrixWorld).invert();\n          bone.matrix.multiply(bone.matrixWorld);\n        } else {\n          bone.matrix.copy(bone.matrixWorld);\n        }\n        bone.matrix.decompose(bone.position, bone.quaternion, bone.scale);\n      }\n    }\n  }\n\n  /**\n   * Resets the skeleton to the base pose.\n   */\n  update() {\n    const bones = this.bones;\n    const boneInverses = this.boneInverses;\n    const boneMatrices = this.boneMatrices;\n    const boneTexture = this.boneTexture;\n\n    // flatten bone matrices to array\n\n    for (let i = 0, il = bones.length; i < il; i++) {\n      // compute the offset between the current and the original transform\n\n      const matrix = bones[i] ? bones[i].matrixWorld : _identityMatrix;\n      _offsetMatrix.multiplyMatrices(matrix, boneInverses[i]);\n      _offsetMatrix.toArray(boneMatrices, i * 16);\n    }\n    if (boneTexture !== null) {\n      boneTexture.needsUpdate = true;\n    }\n  }\n\n  /**\n   * Returns a new skeleton with copied values from this instance.\n   *\n   * @return {Skeleton} A clone of this instance.\n   */\n  clone() {\n    return new Skeleton(this.bones, this.boneInverses);\n  }\n\n  /**\n   * Computes a data texture for passing bone data to the vertex shader.\n   *\n   * @return {Skeleton} A reference of this instance.\n   */\n  computeBoneTexture() {\n    // layout (1 matrix = 4 pixels)\n    //      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n    //  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n    //       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n    //       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n    //       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n    let size = Math.sqrt(this.bones.length * 4); // 4 pixels needed for 1 matrix\n    size = Math.ceil(size / 4) * 4;\n    size = Math.max(size, 4);\n    const boneMatrices = new Float32Array(size * size * 4); // 4 floats per RGBA pixel\n    boneMatrices.set(this.boneMatrices); // copy current values\n\n    const boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);\n    boneTexture.needsUpdate = true;\n    this.boneMatrices = boneMatrices;\n    this.boneTexture = boneTexture;\n    return this;\n  }\n\n  /**\n   * Searches through the skeleton's bone array and returns the first with a\n   * matching name.\n   *\n   * @param {string} name - The name of the bone.\n   * @return {Bone|undefined} The found bone. `undefined` if no bone has been found.\n   */\n  getBoneByName(name) {\n    for (let i = 0, il = this.bones.length; i < il; i++) {\n      const bone = this.bones[i];\n      if (bone.name === name) {\n        return bone;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    if (this.boneTexture !== null) {\n      this.boneTexture.dispose();\n      this.boneTexture = null;\n    }\n  }\n\n  /**\n   * Setups the skeleton by the given JSON and bones.\n   *\n   * @param {Object} json - The skeleton as serialized JSON.\n   * @param {Object<string, Bone>} bones - An array of bones.\n   * @return {Skeleton} A reference of this instance.\n   */\n  fromJSON(json, bones) {\n    this.uuid = json.uuid;\n    for (let i = 0, l = json.bones.length; i < l; i++) {\n      const uuid = json.bones[i];\n      let bone = bones[uuid];\n      if (bone === undefined) {\n        console.warn('THREE.Skeleton: No bone found with UUID:', uuid);\n        bone = new Bone();\n      }\n      this.bones.push(bone);\n      this.boneInverses.push(new Matrix4().fromArray(json.boneInverses[i]));\n    }\n    this.init();\n    return this;\n  }\n\n  /**\n   * Serializes the skeleton into JSON.\n   *\n   * @return {Object} A JSON object representing the serialized skeleton.\n   * @see {@link ObjectLoader#parse}\n   */\n  toJSON() {\n    const data = {\n      metadata: {\n        version: 4.6,\n        type: 'Skeleton',\n        generator: 'Skeleton.toJSON'\n      },\n      bones: [],\n      boneInverses: []\n    };\n    data.uuid = this.uuid;\n    const bones = this.bones;\n    const boneInverses = this.boneInverses;\n    for (let i = 0, l = bones.length; i < l; i++) {\n      const bone = bones[i];\n      data.bones.push(bone.uuid);\n      const boneInverse = boneInverses[i];\n      data.boneInverses.push(boneInverse.toArray());\n    }\n    return data;\n  }\n}\n\n/**\n * An instanced version of a buffer attribute.\n *\n * @augments BufferAttribute\n */\nclass InstancedBufferAttribute extends BufferAttribute {\n  /**\n   * Constructs a new instanced buffer attribute.\n   *\n   * @param {TypedArray} array - The array holding the attribute data.\n   * @param {number} itemSize - The item size.\n   * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n   * @param {number} [meshPerAttribute=1] - How often a value of this buffer attribute should be repeated.\n   */\n  constructor(array, itemSize, normalized) {\n    let meshPerAttribute = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    super(array, itemSize, normalized);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isInstancedBufferAttribute = true;\n\n    /**\n     * Defines how often a value of this buffer attribute should be repeated. A\n     * value of one means that each value of the instanced attribute is used for\n     * a single instance. A value of two means that each value is used for two\n     * consecutive instances (and so on).\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.meshPerAttribute = meshPerAttribute;\n  }\n  copy(source) {\n    super.copy(source);\n    this.meshPerAttribute = source.meshPerAttribute;\n    return this;\n  }\n  toJSON() {\n    const data = super.toJSON();\n    data.meshPerAttribute = this.meshPerAttribute;\n    data.isInstancedBufferAttribute = true;\n    return data;\n  }\n}\nconst _instanceLocalMatrix = /*@__PURE__*/new Matrix4();\nconst _instanceWorldMatrix = /*@__PURE__*/new Matrix4();\nconst _instanceIntersects = [];\nconst _box3 = /*@__PURE__*/new Box3();\nconst _identity = /*@__PURE__*/new Matrix4();\nconst _mesh$1 = /*@__PURE__*/new Mesh();\nconst _sphere$4 = /*@__PURE__*/new Sphere();\n\n/**\n * A special version of a mesh with instanced rendering support. Use\n * this class if you have to render a large number of objects with the same\n * geometry and material(s) but with different world transformations. The usage\n * of 'InstancedMesh' will help you to reduce the number of draw calls and thus\n * improve the overall rendering performance in your application.\n *\n * @augments Mesh\n */\nclass InstancedMesh extends Mesh {\n  /**\n   * Constructs a new instanced mesh.\n   *\n   * @param {BufferGeometry} [geometry] - The mesh geometry.\n   * @param {Material|Array<Material>} [material] - The mesh material.\n   * @param {number} count - The number of instances.\n   */\n  constructor(geometry, material, count) {\n    super(geometry, material);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isInstancedMesh = true;\n\n    /**\n     * Represents the local transformation of all instances. You have to set its\n     * {@link BufferAttribute#needsUpdate} flag to true if you modify instanced data\n     * via {@link InstancedMesh#setMatrixAt}.\n     *\n     * @type {InstancedBufferAttribute}\n     */\n    this.instanceMatrix = new InstancedBufferAttribute(new Float32Array(count * 16), 16);\n\n    /**\n     * Represents the color of all instances. You have to set its\n     * {@link BufferAttribute#needsUpdate} flag to true if you modify instanced data\n     * via {@link InstancedMesh#setColorAt}.\n     *\n     * @type {?InstancedBufferAttribute}\n     * @default null\n     */\n    this.instanceColor = null;\n\n    /**\n     * Represents the morph target weights of all instances. You have to set its\n     * {@link Texture#needsUpdate} flag to true if you modify instanced data\n     * via {@link InstancedMesh#setMorphAt}.\n     *\n     * @type {?DataTexture}\n     * @default null\n     */\n    this.morphTexture = null;\n\n    /**\n     * The number of instances.\n     *\n     * @type {number}\n     */\n    this.count = count;\n\n    /**\n     * The bounding box of the instanced mesh. Can be computed via {@link InstancedMesh#computeBoundingBox}.\n     *\n     * @type {?Box3}\n     * @default null\n     */\n    this.boundingBox = null;\n\n    /**\n     * The bounding sphere of the instanced mesh. Can be computed via {@link InstancedMesh#computeBoundingSphere}.\n     *\n     * @type {?Sphere}\n     * @default null\n     */\n    this.boundingSphere = null;\n    for (let i = 0; i < count; i++) {\n      this.setMatrixAt(i, _identity);\n    }\n  }\n\n  /**\n   * Computes the bounding box of the instanced mesh, and updates {@link InstancedMesh#boundingBox}.\n   * The bounding box is not automatically computed by the engine; this method must be called by your app.\n   * You may need to recompute the bounding box if an instance is transformed via {@link InstancedMesh#setMatrixAt}.\n   */\n  computeBoundingBox() {\n    const geometry = this.geometry;\n    const count = this.count;\n    if (this.boundingBox === null) {\n      this.boundingBox = new Box3();\n    }\n    if (geometry.boundingBox === null) {\n      geometry.computeBoundingBox();\n    }\n    this.boundingBox.makeEmpty();\n    for (let i = 0; i < count; i++) {\n      this.getMatrixAt(i, _instanceLocalMatrix);\n      _box3.copy(geometry.boundingBox).applyMatrix4(_instanceLocalMatrix);\n      this.boundingBox.union(_box3);\n    }\n  }\n\n  /**\n   * Computes the bounding sphere of the instanced mesh, and updates {@link InstancedMesh#boundingSphere}\n   * The engine automatically computes the bounding sphere when it is needed, e.g., for ray casting or view frustum culling.\n   * You may need to recompute the bounding sphere if an instance is transformed via {@link InstancedMesh#setMatrixAt}.\n   */\n  computeBoundingSphere() {\n    const geometry = this.geometry;\n    const count = this.count;\n    if (this.boundingSphere === null) {\n      this.boundingSphere = new Sphere();\n    }\n    if (geometry.boundingSphere === null) {\n      geometry.computeBoundingSphere();\n    }\n    this.boundingSphere.makeEmpty();\n    for (let i = 0; i < count; i++) {\n      this.getMatrixAt(i, _instanceLocalMatrix);\n      _sphere$4.copy(geometry.boundingSphere).applyMatrix4(_instanceLocalMatrix);\n      this.boundingSphere.union(_sphere$4);\n    }\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.instanceMatrix.copy(source.instanceMatrix);\n    if (source.morphTexture !== null) this.morphTexture = source.morphTexture.clone();\n    if (source.instanceColor !== null) this.instanceColor = source.instanceColor.clone();\n    this.count = source.count;\n    if (source.boundingBox !== null) this.boundingBox = source.boundingBox.clone();\n    if (source.boundingSphere !== null) this.boundingSphere = source.boundingSphere.clone();\n    return this;\n  }\n\n  /**\n   * Gets the color of the defined instance.\n   *\n   * @param {number} index - The instance index.\n   * @param {Color} color - The target object that is used to store the method's result.\n   */\n  getColorAt(index, color) {\n    color.fromArray(this.instanceColor.array, index * 3);\n  }\n\n  /**\n   * Gets the local transformation matrix of the defined instance.\n   *\n   * @param {number} index - The instance index.\n   * @param {Matrix4} matrix - The target object that is used to store the method's result.\n   */\n  getMatrixAt(index, matrix) {\n    matrix.fromArray(this.instanceMatrix.array, index * 16);\n  }\n\n  /**\n   * Gets the morph target weights of the defined instance.\n   *\n   * @param {number} index - The instance index.\n   * @param {Mesh} object - The target object that is used to store the method's result.\n   */\n  getMorphAt(index, object) {\n    const objectInfluences = object.morphTargetInfluences;\n    const array = this.morphTexture.source.data.data;\n    const len = objectInfluences.length + 1; // All influences + the baseInfluenceSum\n\n    const dataIndex = index * len + 1; // Skip the baseInfluenceSum at the beginning\n\n    for (let i = 0; i < objectInfluences.length; i++) {\n      objectInfluences[i] = array[dataIndex + i];\n    }\n  }\n  raycast(raycaster, intersects) {\n    const matrixWorld = this.matrixWorld;\n    const raycastTimes = this.count;\n    _mesh$1.geometry = this.geometry;\n    _mesh$1.material = this.material;\n    if (_mesh$1.material === undefined) return;\n\n    // test with bounding sphere first\n\n    if (this.boundingSphere === null) this.computeBoundingSphere();\n    _sphere$4.copy(this.boundingSphere);\n    _sphere$4.applyMatrix4(matrixWorld);\n    if (raycaster.ray.intersectsSphere(_sphere$4) === false) return;\n\n    // now test each instance\n\n    for (let instanceId = 0; instanceId < raycastTimes; instanceId++) {\n      // calculate the world matrix for each instance\n\n      this.getMatrixAt(instanceId, _instanceLocalMatrix);\n      _instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix);\n\n      // the mesh represents this single instance\n\n      _mesh$1.matrixWorld = _instanceWorldMatrix;\n      _mesh$1.raycast(raycaster, _instanceIntersects);\n\n      // process the result of raycast\n\n      for (let i = 0, l = _instanceIntersects.length; i < l; i++) {\n        const intersect = _instanceIntersects[i];\n        intersect.instanceId = instanceId;\n        intersect.object = this;\n        intersects.push(intersect);\n      }\n      _instanceIntersects.length = 0;\n    }\n  }\n\n  /**\n   * Sets the given color to the defined instance. Make sure you set the `needsUpdate` flag of\n   * {@link InstancedMesh#instanceColor} to `true` after updating all the colors.\n   *\n   * @param {number} index - The instance index.\n   * @param {Color} color - The instance color.\n   */\n  setColorAt(index, color) {\n    if (this.instanceColor === null) {\n      this.instanceColor = new InstancedBufferAttribute(new Float32Array(this.instanceMatrix.count * 3).fill(1), 3);\n    }\n    color.toArray(this.instanceColor.array, index * 3);\n  }\n\n  /**\n   * Sets the given local transformation matrix to the defined instance. Make sure you set the `needsUpdate` flag of\n   * {@link InstancedMesh#instanceMatrix} to `true` after updating all the colors.\n   *\n   * @param {number} index - The instance index.\n   * @param {Matrix4} matrix - The local transformation.\n   */\n  setMatrixAt(index, matrix) {\n    matrix.toArray(this.instanceMatrix.array, index * 16);\n  }\n\n  /**\n   * Sets the morph target weights to the defined instance. Make sure you set the `needsUpdate` flag of\n   * {@link InstancedMesh#morphTexture} to `true` after updating all the influences.\n   *\n   * @param {number} index - The instance index.\n   * @param {Mesh} object -  A mesh which `morphTargetInfluences` property containing the morph target weights\n   * of a single instance.\n   */\n  setMorphAt(index, object) {\n    const objectInfluences = object.morphTargetInfluences;\n    const len = objectInfluences.length + 1; // morphBaseInfluence + all influences\n\n    if (this.morphTexture === null) {\n      this.morphTexture = new DataTexture(new Float32Array(len * this.count), len, this.count, RedFormat, FloatType);\n    }\n    const array = this.morphTexture.source.data.data;\n    let morphInfluencesSum = 0;\n    for (let i = 0; i < objectInfluences.length; i++) {\n      morphInfluencesSum += objectInfluences[i];\n    }\n    const morphBaseInfluence = this.geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n    const dataIndex = len * index;\n    array[dataIndex] = morphBaseInfluence;\n    array.set(objectInfluences, dataIndex + 1);\n  }\n  updateMorphTargets() {}\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    this.dispatchEvent({\n      type: 'dispose'\n    });\n    if (this.morphTexture !== null) {\n      this.morphTexture.dispose();\n      this.morphTexture = null;\n    }\n  }\n}\nconst _vector1 = /*@__PURE__*/new Vector3();\nconst _vector2 = /*@__PURE__*/new Vector3();\nconst _normalMatrix = /*@__PURE__*/new Matrix3();\n\n/**\n * A two dimensional surface that extends infinitely in 3D space, represented\n * in [Hessian normal form]{@link http://mathworld.wolfram.com/HessianNormalForm.html}\n * by a unit length normal vector and a constant.\n */\nclass Plane {\n  /**\n   * Constructs a new plane.\n   *\n   * @param {Vector3} [normal=(1,0,0)] - A unit length vector defining the normal of the plane.\n   * @param {number} [constant=0] - The signed distance from the origin to the plane.\n   */\n  constructor() {\n    let normal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3(1, 0, 0);\n    let constant = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isPlane = true;\n\n    /**\n     * A unit length vector defining the normal of the plane.\n     *\n     * @type {Vector3}\n     */\n    this.normal = normal;\n\n    /**\n     * The signed distance from the origin to the plane.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.constant = constant;\n  }\n\n  /**\n   * Sets the plane components by copying the given values.\n   *\n   * @param {Vector3} normal - The normal.\n   * @param {number} constant - The constant.\n   * @return {Plane} A reference to this plane.\n   */\n  set(normal, constant) {\n    this.normal.copy(normal);\n    this.constant = constant;\n    return this;\n  }\n\n  /**\n   * Sets the plane components by defining `x`, `y`, `z` as the\n   * plane normal and `w` as the constant.\n   *\n   * @param {number} x - The value for the normal's x component.\n   * @param {number} y - The value for the normal's y component.\n   * @param {number} z - The value for the normal's z component.\n   * @param {number} w - The constant value.\n   * @return {Plane} A reference to this plane.\n   */\n  setComponents(x, y, z, w) {\n    this.normal.set(x, y, z);\n    this.constant = w;\n    return this;\n  }\n\n  /**\n   * Sets the plane from the given normal and coplanar point (that is a point\n   * that lies onto the plane).\n   *\n   * @param {Vector3} normal - The normal.\n   * @param {Vector3} point - A coplanar point.\n   * @return {Plane} A reference to this plane.\n   */\n  setFromNormalAndCoplanarPoint(normal, point) {\n    this.normal.copy(normal);\n    this.constant = -point.dot(this.normal);\n    return this;\n  }\n\n  /**\n   * Sets the plane from three coplanar points. The winding order is\n   * assumed to be counter-clockwise, and determines the direction of\n   * the plane normal.\n   *\n   * @param {Vector3} a - The first coplanar point.\n   * @param {Vector3} b - The second coplanar point.\n   * @param {Vector3} c - The third coplanar point.\n   * @return {Plane} A reference to this plane.\n   */\n  setFromCoplanarPoints(a, b, c) {\n    const normal = _vector1.subVectors(c, b).cross(_vector2.subVectors(a, b)).normalize();\n\n    // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n    this.setFromNormalAndCoplanarPoint(normal, a);\n    return this;\n  }\n\n  /**\n   * Copies the values of the given plane to this instance.\n   *\n   * @param {Plane} plane - The plane to copy.\n   * @return {Plane} A reference to this plane.\n   */\n  copy(plane) {\n    this.normal.copy(plane.normal);\n    this.constant = plane.constant;\n    return this;\n  }\n\n  /**\n   * Normalizes the plane normal and adjusts the constant accordingly.\n   *\n   * @return {Plane} A reference to this plane.\n   */\n  normalize() {\n    // Note: will lead to a divide by zero if the plane is invalid.\n\n    const inverseNormalLength = 1.0 / this.normal.length();\n    this.normal.multiplyScalar(inverseNormalLength);\n    this.constant *= inverseNormalLength;\n    return this;\n  }\n\n  /**\n   * Negates both the plane normal and the constant.\n   *\n   * @return {Plane} A reference to this plane.\n   */\n  negate() {\n    this.constant *= -1;\n    this.normal.negate();\n    return this;\n  }\n\n  /**\n   * Returns the signed distance from the given point to this plane.\n   *\n   * @param {Vector3} point - The point to compute the distance for.\n   * @return {number} The signed distance.\n   */\n  distanceToPoint(point) {\n    return this.normal.dot(point) + this.constant;\n  }\n\n  /**\n   * Returns the signed distance from the given sphere to this plane.\n   *\n   * @param {Sphere} sphere - The sphere to compute the distance for.\n   * @return {number} The signed distance.\n   */\n  distanceToSphere(sphere) {\n    return this.distanceToPoint(sphere.center) - sphere.radius;\n  }\n\n  /**\n   * Projects a the given point onto the plane.\n   *\n   * @param {Vector3} point - The point to project.\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {Vector3} The projected point on the plane.\n   */\n  projectPoint(point, target) {\n    return target.copy(point).addScaledVector(this.normal, -this.distanceToPoint(point));\n  }\n\n  /**\n   * Returns the intersection point of the passed line and the plane. Returns\n   * `null` if the line does not intersect. Returns the line's starting point if\n   * the line is coplanar with the plane.\n   *\n   * @param {Line3} line - The line to compute the intersection for.\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {?Vector3} The intersection point.\n   */\n  intersectLine(line, target) {\n    const direction = line.delta(_vector1);\n    const denominator = this.normal.dot(direction);\n    if (denominator === 0) {\n      // line is coplanar, return origin\n      if (this.distanceToPoint(line.start) === 0) {\n        return target.copy(line.start);\n      }\n\n      // Unsure if this is the correct method to handle this case.\n      return null;\n    }\n    const t = -(line.start.dot(this.normal) + this.constant) / denominator;\n    if (t < 0 || t > 1) {\n      return null;\n    }\n    return target.copy(line.start).addScaledVector(direction, t);\n  }\n\n  /**\n   * Returns `true` if the given line segment intersects with (passes through) the plane.\n   *\n   * @param {Line3} line - The line to test.\n   * @return {boolean} Whether the given line segment intersects with the plane or not.\n   */\n  intersectsLine(line) {\n    // Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n    const startSign = this.distanceToPoint(line.start);\n    const endSign = this.distanceToPoint(line.end);\n    return startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;\n  }\n\n  /**\n   * Returns `true` if the given bounding box intersects with the plane.\n   *\n   * @param {Box3} box - The bounding box to test.\n   * @return {boolean} Whether the given bounding box intersects with the plane or not.\n   */\n  intersectsBox(box) {\n    return box.intersectsPlane(this);\n  }\n\n  /**\n   * Returns `true` if the given bounding sphere intersects with the plane.\n   *\n   * @param {Sphere} sphere - The bounding sphere to test.\n   * @return {boolean} Whether the given bounding sphere intersects with the plane or not.\n   */\n  intersectsSphere(sphere) {\n    return sphere.intersectsPlane(this);\n  }\n\n  /**\n   * Returns a coplanar vector to the plane, by calculating the\n   * projection of the normal at the origin onto the plane.\n   *\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {Vector3} The coplanar point.\n   */\n  coplanarPoint(target) {\n    return target.copy(this.normal).multiplyScalar(-this.constant);\n  }\n\n  /**\n   * Apply a 4x4 matrix to the plane. The matrix must be an affine, homogeneous transform.\n   *\n   * The optional normal matrix can be pre-computed like so:\n   * ```js\n   * const optionalNormalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\n   * ```\n   *\n   * @param {Matrix4} matrix - The transformation matrix.\n   * @param {Matrix4} [optionalNormalMatrix] - A pre-computed normal matrix.\n   * @return {Plane} A reference to this plane.\n   */\n  applyMatrix4(matrix, optionalNormalMatrix) {\n    const normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);\n    const referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);\n    const normal = this.normal.applyMatrix3(normalMatrix).normalize();\n    this.constant = -referencePoint.dot(normal);\n    return this;\n  }\n\n  /**\n   * Translates the plane by the distance defined by the given offset vector.\n   * Note that this only affects the plane constant and will not affect the normal vector.\n   *\n   * @param {Vector3} offset - The offset vector.\n   * @return {Plane} A reference to this plane.\n   */\n  translate(offset) {\n    this.constant -= offset.dot(this.normal);\n    return this;\n  }\n\n  /**\n   * Returns `true` if this plane is equal with the given one.\n   *\n   * @param {Plane} plane - The plane to test for equality.\n   * @return {boolean} Whether this plane is equal with the given one.\n   */\n  equals(plane) {\n    return plane.normal.equals(this.normal) && plane.constant === this.constant;\n  }\n\n  /**\n   * Returns a new plane with copied values from this instance.\n   *\n   * @return {Plane} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor().copy(this);\n  }\n}\nconst _sphere$3 = /*@__PURE__*/new Sphere();\nconst _vector$6 = /*@__PURE__*/new Vector3();\n\n/**\n * Frustums are used to determine what is inside the camera's field of view.\n * They help speed up the rendering process - objects which lie outside a camera's\n * frustum can safely be excluded from rendering.\n *\n * This class is mainly intended for use internally by a renderer.\n */\nclass Frustum {\n  /**\n   * Constructs a new frustum.\n   *\n   * @param {Plane} [p0] - The first plane that encloses the frustum.\n   * @param {Plane} [p1] - The second plane that encloses the frustum.\n   * @param {Plane} [p2] - The third plane that encloses the frustum.\n   * @param {Plane} [p3] - The fourth plane that encloses the frustum.\n   * @param {Plane} [p4] - The fifth plane that encloses the frustum.\n   * @param {Plane} [p5] - The sixth plane that encloses the frustum.\n   */\n  constructor() {\n    let p0 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Plane();\n    let p1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Plane();\n    let p2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Plane();\n    let p3 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Plane();\n    let p4 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new Plane();\n    let p5 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new Plane();\n    /**\n     * This array holds the planes that enclose the frustum.\n     *\n     * @type {Array<Plane>}\n     */\n    this.planes = [p0, p1, p2, p3, p4, p5];\n  }\n\n  /**\n   * Sets the frustum planes by copying the given planes.\n   *\n   * @param {Plane} [p0] - The first plane that encloses the frustum.\n   * @param {Plane} [p1] - The second plane that encloses the frustum.\n   * @param {Plane} [p2] - The third plane that encloses the frustum.\n   * @param {Plane} [p3] - The fourth plane that encloses the frustum.\n   * @param {Plane} [p4] - The fifth plane that encloses the frustum.\n   * @param {Plane} [p5] - The sixth plane that encloses the frustum.\n   * @return {Frustum} A reference to this frustum.\n   */\n  set(p0, p1, p2, p3, p4, p5) {\n    const planes = this.planes;\n    planes[0].copy(p0);\n    planes[1].copy(p1);\n    planes[2].copy(p2);\n    planes[3].copy(p3);\n    planes[4].copy(p4);\n    planes[5].copy(p5);\n    return this;\n  }\n\n  /**\n   * Copies the values of the given frustum to this instance.\n   *\n   * @param {Frustum} frustum - The frustum to copy.\n   * @return {Frustum} A reference to this frustum.\n   */\n  copy(frustum) {\n    const planes = this.planes;\n    for (let i = 0; i < 6; i++) {\n      planes[i].copy(frustum.planes[i]);\n    }\n    return this;\n  }\n\n  /**\n   * Sets the frustum planes from the given projection matrix.\n   *\n   * @param {Matrix4} m - The projection matrix.\n   * @param {(WebGLCoordinateSystem|WebGPUCoordinateSystem)} coordinateSystem - The coordinate system.\n   * @return {Frustum} A reference to this frustum.\n   */\n  setFromProjectionMatrix(m) {\n    let coordinateSystem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : WebGLCoordinateSystem;\n    const planes = this.planes;\n    const me = m.elements;\n    const me0 = me[0],\n      me1 = me[1],\n      me2 = me[2],\n      me3 = me[3];\n    const me4 = me[4],\n      me5 = me[5],\n      me6 = me[6],\n      me7 = me[7];\n    const me8 = me[8],\n      me9 = me[9],\n      me10 = me[10],\n      me11 = me[11];\n    const me12 = me[12],\n      me13 = me[13],\n      me14 = me[14],\n      me15 = me[15];\n    planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();\n    planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();\n    planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();\n    planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();\n    planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();\n    if (coordinateSystem === WebGLCoordinateSystem) {\n      planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();\n    } else if (coordinateSystem === WebGPUCoordinateSystem) {\n      planes[5].setComponents(me2, me6, me10, me14).normalize();\n    } else {\n      throw new Error('THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: ' + coordinateSystem);\n    }\n    return this;\n  }\n\n  /**\n   * Returns `true` if the 3D object's bounding sphere is intersecting this frustum.\n   *\n   * Note that the 3D object must have a geometry so that the bounding sphere can be calculated.\n   *\n   * @param {Object3D} object - The 3D object to test.\n   * @return {boolean} Whether the 3D object's bounding sphere is intersecting this frustum or not.\n   */\n  intersectsObject(object) {\n    if (object.boundingSphere !== undefined) {\n      if (object.boundingSphere === null) object.computeBoundingSphere();\n      _sphere$3.copy(object.boundingSphere).applyMatrix4(object.matrixWorld);\n    } else {\n      const geometry = object.geometry;\n      if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n      _sphere$3.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);\n    }\n    return this.intersectsSphere(_sphere$3);\n  }\n\n  /**\n   * Returns `true` if the given sprite is intersecting this frustum.\n   *\n   * @param {Sprite} sprite - The sprite to test.\n   * @return {boolean} Whether the sprite is intersecting this frustum or not.\n   */\n  intersectsSprite(sprite) {\n    _sphere$3.center.set(0, 0, 0);\n    _sphere$3.radius = 0.7071067811865476;\n    _sphere$3.applyMatrix4(sprite.matrixWorld);\n    return this.intersectsSphere(_sphere$3);\n  }\n\n  /**\n   * Returns `true` if the given bounding sphere is intersecting this frustum.\n   *\n   * @param {Sphere} sphere - The bounding sphere to test.\n   * @return {boolean} Whether the bounding sphere is intersecting this frustum or not.\n   */\n  intersectsSphere(sphere) {\n    const planes = this.planes;\n    const center = sphere.center;\n    const negRadius = -sphere.radius;\n    for (let i = 0; i < 6; i++) {\n      const distance = planes[i].distanceToPoint(center);\n      if (distance < negRadius) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Returns `true` if the given bounding box is intersecting this frustum.\n   *\n   * @param {Box3} box - The bounding box to test.\n   * @return {boolean} Whether the bounding box is intersecting this frustum or not.\n   */\n  intersectsBox(box) {\n    const planes = this.planes;\n    for (let i = 0; i < 6; i++) {\n      const plane = planes[i];\n\n      // corner at max distance\n\n      _vector$6.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n      _vector$6.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n      _vector$6.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n      if (plane.distanceToPoint(_vector$6) < 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Returns `true` if the given point lies within the frustum.\n   *\n   * @param {Vector3} point - The point to test.\n   * @return {boolean} Whether the point lies within this frustum or not.\n   */\n  containsPoint(point) {\n    const planes = this.planes;\n    for (let i = 0; i < 6; i++) {\n      if (planes[i].distanceToPoint(point) < 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Returns a new frustum with copied values from this instance.\n   *\n   * @return {Frustum} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor().copy(this);\n  }\n}\nconst _projScreenMatrix$2 = /*@__PURE__*/new Matrix4();\nconst _frustum$1 = /*@__PURE__*/new Frustum();\n\n/**\n * FrustumArray is used to determine if an object is visible in at least one camera\n * from an array of cameras. This is particularly useful for multi-view renderers.\n*/\nclass FrustumArray {\n  /**\n   * Constructs a new frustum array.\n   *\n   */\n  constructor() {\n    /**\n     * The coordinate system to use.\n     *\n     * @type {WebGLCoordinateSystem|WebGPUCoordinateSystem}\n     * @default WebGLCoordinateSystem\n     */\n    this.coordinateSystem = WebGLCoordinateSystem;\n  }\n\n  /**\n   * Returns `true` if the 3D object's bounding sphere is intersecting any frustum\n   * from the camera array.\n   *\n   * @param {Object3D} object - The 3D object to test.\n   * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.\n   * @return {boolean} Whether the 3D object is visible in any camera.\n   */\n  intersectsObject(object, cameraArray) {\n    if (!cameraArray.isArrayCamera || cameraArray.cameras.length === 0) {\n      return false;\n    }\n    for (let i = 0; i < cameraArray.cameras.length; i++) {\n      const camera = cameraArray.cameras[i];\n      _projScreenMatrix$2.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n      _frustum$1.setFromProjectionMatrix(_projScreenMatrix$2, this.coordinateSystem);\n      if (_frustum$1.intersectsObject(object)) {\n        return true; // Object is visible in at least one camera\n      }\n    }\n    return false; // Not visible in any camera\n  }\n\n  /**\n   * Returns `true` if the given sprite is intersecting any frustum\n   * from the camera array.\n   *\n   * @param {Sprite} sprite - The sprite to test.\n   * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.\n   * @return {boolean} Whether the sprite is visible in any camera.\n   */\n  intersectsSprite(sprite, cameraArray) {\n    if (!cameraArray || !cameraArray.cameras || cameraArray.cameras.length === 0) {\n      return false;\n    }\n    for (let i = 0; i < cameraArray.cameras.length; i++) {\n      const camera = cameraArray.cameras[i];\n      _projScreenMatrix$2.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n      _frustum$1.setFromProjectionMatrix(_projScreenMatrix$2, this.coordinateSystem);\n      if (_frustum$1.intersectsSprite(sprite)) {\n        return true; // Sprite is visible in at least one camera\n      }\n    }\n    return false; // Not visible in any camera\n  }\n\n  /**\n   * Returns `true` if the given bounding sphere is intersecting any frustum\n   * from the camera array.\n   *\n   * @param {Sphere} sphere - The bounding sphere to test.\n   * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.\n   * @return {boolean} Whether the sphere is visible in any camera.\n   */\n  intersectsSphere(sphere, cameraArray) {\n    if (!cameraArray || !cameraArray.cameras || cameraArray.cameras.length === 0) {\n      return false;\n    }\n    for (let i = 0; i < cameraArray.cameras.length; i++) {\n      const camera = cameraArray.cameras[i];\n      _projScreenMatrix$2.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n      _frustum$1.setFromProjectionMatrix(_projScreenMatrix$2, this.coordinateSystem);\n      if (_frustum$1.intersectsSphere(sphere)) {\n        return true; // Sphere is visible in at least one camera\n      }\n    }\n    return false; // Not visible in any camera\n  }\n\n  /**\n   * Returns `true` if the given bounding box is intersecting any frustum\n   * from the camera array.\n   *\n   * @param {Box3} box - The bounding box to test.\n   * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.\n   * @return {boolean} Whether the box is visible in any camera.\n   */\n  intersectsBox(box, cameraArray) {\n    if (!cameraArray || !cameraArray.cameras || cameraArray.cameras.length === 0) {\n      return false;\n    }\n    for (let i = 0; i < cameraArray.cameras.length; i++) {\n      const camera = cameraArray.cameras[i];\n      _projScreenMatrix$2.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n      _frustum$1.setFromProjectionMatrix(_projScreenMatrix$2, this.coordinateSystem);\n      if (_frustum$1.intersectsBox(box)) {\n        return true; // Box is visible in at least one camera\n      }\n    }\n    return false; // Not visible in any camera\n  }\n\n  /**\n   * Returns `true` if the given point lies within any frustum\n   * from the camera array.\n   *\n   * @param {Vector3} point - The point to test.\n   * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.\n   * @return {boolean} Whether the point is visible in any camera.\n   */\n  containsPoint(point, cameraArray) {\n    if (!cameraArray || !cameraArray.cameras || cameraArray.cameras.length === 0) {\n      return false;\n    }\n    for (let i = 0; i < cameraArray.cameras.length; i++) {\n      const camera = cameraArray.cameras[i];\n      _projScreenMatrix$2.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n      _frustum$1.setFromProjectionMatrix(_projScreenMatrix$2, this.coordinateSystem);\n      if (_frustum$1.containsPoint(point)) {\n        return true; // Point is visible in at least one camera\n      }\n    }\n    return false; // Not visible in any camera\n  }\n\n  /**\n   * Returns a new frustum array with copied values from this instance.\n   *\n   * @return {FrustumArray} A clone of this instance.\n   */\n  clone() {\n    return new FrustumArray();\n  }\n}\nfunction ascIdSort(a, b) {\n  return a - b;\n}\nfunction sortOpaque(a, b) {\n  return a.z - b.z;\n}\nfunction sortTransparent(a, b) {\n  return b.z - a.z;\n}\nclass MultiDrawRenderList {\n  constructor() {\n    this.index = 0;\n    this.pool = [];\n    this.list = [];\n  }\n  push(start, count, z, index) {\n    const pool = this.pool;\n    const list = this.list;\n    if (this.index >= pool.length) {\n      pool.push({\n        start: -1,\n        count: -1,\n        z: -1,\n        index: -1\n      });\n    }\n    const item = pool[this.index];\n    list.push(item);\n    this.index++;\n    item.start = start;\n    item.count = count;\n    item.z = z;\n    item.index = index;\n  }\n  reset() {\n    this.list.length = 0;\n    this.index = 0;\n  }\n}\nconst _matrix$1 = /*@__PURE__*/new Matrix4();\nconst _whiteColor = /*@__PURE__*/new Color(1, 1, 1);\nconst _frustum = /*@__PURE__*/new Frustum();\nconst _frustumArray = /*@__PURE__*/new FrustumArray();\nconst _box$1 = /*@__PURE__*/new Box3();\nconst _sphere$2 = /*@__PURE__*/new Sphere();\nconst _vector$5 = /*@__PURE__*/new Vector3();\nconst _forward = /*@__PURE__*/new Vector3();\nconst _temp = /*@__PURE__*/new Vector3();\nconst _renderList = /*@__PURE__*/new MultiDrawRenderList();\nconst _mesh = /*@__PURE__*/new Mesh();\nconst _batchIntersects = [];\n\n// copies data from attribute \"src\" into \"target\" starting at \"targetOffset\"\nfunction copyAttributeData(src, target) {\n  let targetOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  const itemSize = target.itemSize;\n  if (src.isInterleavedBufferAttribute || src.array.constructor !== target.array.constructor) {\n    // use the component getters and setters if the array data cannot\n    // be copied directly\n    const vertexCount = src.count;\n    for (let i = 0; i < vertexCount; i++) {\n      for (let c = 0; c < itemSize; c++) {\n        target.setComponent(i + targetOffset, c, src.getComponent(i, c));\n      }\n    }\n  } else {\n    // faster copy approach using typed array set function\n    target.array.set(src.array, targetOffset * itemSize);\n  }\n  target.needsUpdate = true;\n}\n\n// safely copies array contents to a potentially smaller array\nfunction copyArrayContents(src, target) {\n  if (src.constructor !== target.constructor) {\n    // if arrays are of a different type (eg due to index size increasing) then data must be per-element copied\n    const len = Math.min(src.length, target.length);\n    for (let i = 0; i < len; i++) {\n      target[i] = src[i];\n    }\n  } else {\n    // if the arrays use the same data layout we can use a fast block copy\n    const len = Math.min(src.length, target.length);\n    target.set(new src.constructor(src.buffer, 0, len));\n  }\n}\n\n/**\n * A special version of a mesh with multi draw batch rendering support. Use\n * this class if you have to render a large number of objects with the same\n * material but with different geometries or world transformations. The usage of\n * `BatchedMesh` will help you to reduce the number of draw calls and thus improve the overall\n * rendering performance in your application.\n *\n * ```js\n * const box = new THREE.BoxGeometry( 1, 1, 1 );\n * const sphere = new THREE.SphereGeometry( 1, 12, 12 );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n *\n * // initialize and add geometries into the batched mesh\n * const batchedMesh = new BatchedMesh( 10, 5000, 10000, material );\n * const boxGeometryId = batchedMesh.addGeometry( box );\n * const sphereGeometryId = batchedMesh.addGeometry( sphere );\n *\n * // create instances of those geometries\n * const boxInstancedId1 = batchedMesh.addInstance( boxGeometryId );\n * const boxInstancedId2 = batchedMesh.addInstance( boxGeometryId );\n *\n * const sphereInstancedId1 = batchedMesh.addInstance( sphereGeometryId );\n * const sphereInstancedId2 = batchedMesh.addInstance( sphereGeometryId );\n *\n * // position the geometries\n * batchedMesh.setMatrixAt( boxInstancedId1, boxMatrix1 );\n * batchedMesh.setMatrixAt( boxInstancedId2, boxMatrix2 );\n *\n * batchedMesh.setMatrixAt( sphereInstancedId1, sphereMatrix1 );\n * batchedMesh.setMatrixAt( sphereInstancedId2, sphereMatrix2 );\n *\n * scene.add( batchedMesh );\n * ```\n *\n * @augments Mesh\n */\nclass BatchedMesh extends Mesh {\n  /**\n   * Constructs a new batched mesh.\n   *\n   * @param {number} maxInstanceCount - The maximum number of individual instances planned to be added and rendered.\n   * @param {number} maxVertexCount - The maximum number of vertices to be used by all unique geometries.\n   * @param {number} [maxIndexCount=maxVertexCount*2] - The maximum number of indices to be used by all unique geometries\n   * @param {Material|Array<Material>} [material] - The mesh material.\n   */\n  constructor(maxInstanceCount, maxVertexCount) {\n    let maxIndexCount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : maxVertexCount * 2;\n    let material = arguments.length > 3 ? arguments[3] : undefined;\n    super(new BufferGeometry(), material);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isBatchedMesh = true;\n\n    /**\n     * When set ot `true`, the individual objects of a batch are frustum culled.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.perObjectFrustumCulled = true;\n\n    /**\n     * When set to `true`, the individual objects of a batch are sorted to improve overdraw-related artifacts.\n     * If the material is marked as \"transparent\" objects are rendered back to front and if not then they are\n     * rendered front to back.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.sortObjects = true;\n\n    /**\n     * The bounding box of the batched mesh. Can be computed via {@link BatchedMesh#computeBoundingBox}.\n     *\n     * @type {?Box3}\n     * @default null\n     */\n    this.boundingBox = null;\n\n    /**\n     * The bounding sphere of the batched mesh. Can be computed via {@link BatchedMesh#computeBoundingSphere}.\n     *\n     * @type {?Sphere}\n     * @default null\n     */\n    this.boundingSphere = null;\n\n    /**\n     * Takes a sort a function that is run before render. The function takes a list of instances to\n     * sort and a camera. The objects in the list include a \"z\" field to perform a depth-ordered\n     * sort with.\n     *\n     * @type {?Function}\n     * @default null\n     */\n    this.customSort = null;\n\n    // stores visible, active, and geometry id per instance and reserved buffer ranges for geometries\n    this._instanceInfo = [];\n    this._geometryInfo = [];\n\n    // instance, geometry ids that have been set as inactive, and are available to be overwritten\n    this._availableInstanceIds = [];\n    this._availableGeometryIds = [];\n\n    // used to track where the next point is that geometry should be inserted\n    this._nextIndexStart = 0;\n    this._nextVertexStart = 0;\n    this._geometryCount = 0;\n\n    // flags\n    this._visibilityChanged = true;\n    this._geometryInitialized = false;\n\n    // cached user options\n    this._maxInstanceCount = maxInstanceCount;\n    this._maxVertexCount = maxVertexCount;\n    this._maxIndexCount = maxIndexCount;\n\n    // buffers for multi draw\n    this._multiDrawCounts = new Int32Array(maxInstanceCount);\n    this._multiDrawStarts = new Int32Array(maxInstanceCount);\n    this._multiDrawCount = 0;\n    this._multiDrawInstances = null;\n\n    // Local matrix per geometry by using data texture\n    this._matricesTexture = null;\n    this._indirectTexture = null;\n    this._colorsTexture = null;\n    this._initMatricesTexture();\n    this._initIndirectTexture();\n  }\n\n  /**\n   * The maximum number of individual instances that can be stored in the batch.\n   *\n   * @type {number}\n   * @readonly\n   */\n  get maxInstanceCount() {\n    return this._maxInstanceCount;\n  }\n\n  /**\n   * The instance count.\n   *\n   * @type {number}\n   * @readonly\n   */\n  get instanceCount() {\n    return this._instanceInfo.length - this._availableInstanceIds.length;\n  }\n\n  /**\n   * The number of unused vertices.\n   *\n   * @type {number}\n   * @readonly\n   */\n  get unusedVertexCount() {\n    return this._maxVertexCount - this._nextVertexStart;\n  }\n\n  /**\n   * The number of unused indices.\n   *\n   * @type {number}\n   * @readonly\n   */\n  get unusedIndexCount() {\n    return this._maxIndexCount - this._nextIndexStart;\n  }\n  _initMatricesTexture() {\n    // layout (1 matrix = 4 pixels)\n    //      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n    //  with  8x8  pixel texture max   16 matrices * 4 pixels =  (8 * 8)\n    //       16x16 pixel texture max   64 matrices * 4 pixels = (16 * 16)\n    //       32x32 pixel texture max  256 matrices * 4 pixels = (32 * 32)\n    //       64x64 pixel texture max 1024 matrices * 4 pixels = (64 * 64)\n\n    let size = Math.sqrt(this._maxInstanceCount * 4); // 4 pixels needed for 1 matrix\n    size = Math.ceil(size / 4) * 4;\n    size = Math.max(size, 4);\n    const matricesArray = new Float32Array(size * size * 4); // 4 floats per RGBA pixel\n    const matricesTexture = new DataTexture(matricesArray, size, size, RGBAFormat, FloatType);\n    this._matricesTexture = matricesTexture;\n  }\n  _initIndirectTexture() {\n    let size = Math.sqrt(this._maxInstanceCount);\n    size = Math.ceil(size);\n    const indirectArray = new Uint32Array(size * size);\n    const indirectTexture = new DataTexture(indirectArray, size, size, RedIntegerFormat, UnsignedIntType);\n    this._indirectTexture = indirectTexture;\n  }\n  _initColorsTexture() {\n    let size = Math.sqrt(this._maxInstanceCount);\n    size = Math.ceil(size);\n\n    // 4 floats per RGBA pixel initialized to white\n    const colorsArray = new Float32Array(size * size * 4).fill(1);\n    const colorsTexture = new DataTexture(colorsArray, size, size, RGBAFormat, FloatType);\n    colorsTexture.colorSpace = ColorManagement.workingColorSpace;\n    this._colorsTexture = colorsTexture;\n  }\n  _initializeGeometry(reference) {\n    const geometry = this.geometry;\n    const maxVertexCount = this._maxVertexCount;\n    const maxIndexCount = this._maxIndexCount;\n    if (this._geometryInitialized === false) {\n      for (const attributeName in reference.attributes) {\n        const srcAttribute = reference.getAttribute(attributeName);\n        const {\n          array,\n          itemSize,\n          normalized\n        } = srcAttribute;\n        const dstArray = new array.constructor(maxVertexCount * itemSize);\n        const dstAttribute = new BufferAttribute(dstArray, itemSize, normalized);\n        geometry.setAttribute(attributeName, dstAttribute);\n      }\n      if (reference.getIndex() !== null) {\n        // Reserve last u16 index for primitive restart.\n        const indexArray = maxVertexCount > 65535 ? new Uint32Array(maxIndexCount) : new Uint16Array(maxIndexCount);\n        geometry.setIndex(new BufferAttribute(indexArray, 1));\n      }\n      this._geometryInitialized = true;\n    }\n  }\n\n  // Make sure the geometry is compatible with the existing combined geometry attributes\n  _validateGeometry(geometry) {\n    // check to ensure the geometries are using consistent attributes and indices\n    const batchGeometry = this.geometry;\n    if (Boolean(geometry.getIndex()) !== Boolean(batchGeometry.getIndex())) {\n      throw new Error('THREE.BatchedMesh: All geometries must consistently have \"index\".');\n    }\n    for (const attributeName in batchGeometry.attributes) {\n      if (!geometry.hasAttribute(attributeName)) {\n        throw new Error(`THREE.BatchedMesh: Added geometry missing \"${attributeName}\". All geometries must have consistent attributes.`);\n      }\n      const srcAttribute = geometry.getAttribute(attributeName);\n      const dstAttribute = batchGeometry.getAttribute(attributeName);\n      if (srcAttribute.itemSize !== dstAttribute.itemSize || srcAttribute.normalized !== dstAttribute.normalized) {\n        throw new Error('THREE.BatchedMesh: All attributes must have a consistent itemSize and normalized value.');\n      }\n    }\n  }\n\n  /**\n   * Validates the instance defined by the given ID.\n   *\n   * @param {number} instanceId - The instance to validate.\n   */\n  validateInstanceId(instanceId) {\n    const instanceInfo = this._instanceInfo;\n    if (instanceId < 0 || instanceId >= instanceInfo.length || instanceInfo[instanceId].active === false) {\n      throw new Error(`THREE.BatchedMesh: Invalid instanceId ${instanceId}. Instance is either out of range or has been deleted.`);\n    }\n  }\n\n  /**\n   * Validates the geometry defined by the given ID.\n   *\n   * @param {number} geometryId - The geometry to validate.\n   */\n  validateGeometryId(geometryId) {\n    const geometryInfoList = this._geometryInfo;\n    if (geometryId < 0 || geometryId >= geometryInfoList.length || geometryInfoList[geometryId].active === false) {\n      throw new Error(`THREE.BatchedMesh: Invalid geometryId ${geometryId}. Geometry is either out of range or has been deleted.`);\n    }\n  }\n\n  /**\n   * Takes a sort a function that is run before render. The function takes a list of instances to\n   * sort and a camera. The objects in the list include a \"z\" field to perform a depth-ordered sort with.\n   *\n   * @param {Function} func - The custom sort function.\n   * @return {BatchedMesh} A reference to this batched mesh.\n   */\n  setCustomSort(func) {\n    this.customSort = func;\n    return this;\n  }\n\n  /**\n   * Computes the bounding box, updating {@link BatchedMesh#boundingBox}.\n   * Bounding boxes aren't computed by default. They need to be explicitly computed,\n   * otherwise they are `null`.\n   */\n  computeBoundingBox() {\n    if (this.boundingBox === null) {\n      this.boundingBox = new Box3();\n    }\n    const boundingBox = this.boundingBox;\n    const instanceInfo = this._instanceInfo;\n    boundingBox.makeEmpty();\n    for (let i = 0, l = instanceInfo.length; i < l; i++) {\n      if (instanceInfo[i].active === false) continue;\n      const geometryId = instanceInfo[i].geometryIndex;\n      this.getMatrixAt(i, _matrix$1);\n      this.getBoundingBoxAt(geometryId, _box$1).applyMatrix4(_matrix$1);\n      boundingBox.union(_box$1);\n    }\n  }\n\n  /**\n   * Computes the bounding sphere, updating {@link BatchedMesh#boundingSphere}.\n   * Bounding spheres aren't computed by default. They need to be explicitly computed,\n   * otherwise they are `null`.\n   */\n  computeBoundingSphere() {\n    if (this.boundingSphere === null) {\n      this.boundingSphere = new Sphere();\n    }\n    const boundingSphere = this.boundingSphere;\n    const instanceInfo = this._instanceInfo;\n    boundingSphere.makeEmpty();\n    for (let i = 0, l = instanceInfo.length; i < l; i++) {\n      if (instanceInfo[i].active === false) continue;\n      const geometryId = instanceInfo[i].geometryIndex;\n      this.getMatrixAt(i, _matrix$1);\n      this.getBoundingSphereAt(geometryId, _sphere$2).applyMatrix4(_matrix$1);\n      boundingSphere.union(_sphere$2);\n    }\n  }\n\n  /**\n   * Adds a new instance to the batch using the geometry of the given ID and returns\n   * a new id referring to the new instance to be used by other functions.\n   *\n   * @param {number} geometryId - The ID of a previously added geometry via {@link BatchedMesh#addGeometry}.\n   * @return {number} The instance ID.\n   */\n  addInstance(geometryId) {\n    const atCapacity = this._instanceInfo.length >= this.maxInstanceCount;\n\n    // ensure we're not over geometry\n    if (atCapacity && this._availableInstanceIds.length === 0) {\n      throw new Error('THREE.BatchedMesh: Maximum item count reached.');\n    }\n    const instanceInfo = {\n      visible: true,\n      active: true,\n      geometryIndex: geometryId\n    };\n    let drawId = null;\n\n    // Prioritize using previously freed instance ids\n    if (this._availableInstanceIds.length > 0) {\n      this._availableInstanceIds.sort(ascIdSort);\n      drawId = this._availableInstanceIds.shift();\n      this._instanceInfo[drawId] = instanceInfo;\n    } else {\n      drawId = this._instanceInfo.length;\n      this._instanceInfo.push(instanceInfo);\n    }\n    const matricesTexture = this._matricesTexture;\n    _matrix$1.identity().toArray(matricesTexture.image.data, drawId * 16);\n    matricesTexture.needsUpdate = true;\n    const colorsTexture = this._colorsTexture;\n    if (colorsTexture) {\n      _whiteColor.toArray(colorsTexture.image.data, drawId * 4);\n      colorsTexture.needsUpdate = true;\n    }\n    this._visibilityChanged = true;\n    return drawId;\n  }\n\n  /**\n   * Adds the given geometry to the batch and returns the associated\n   * geometry id referring to it to be used in other functions.\n   *\n   * @param {BufferGeometry} geometry - The geometry to add.\n   * @param {number} [reservedVertexCount=-1] - Optional parameter specifying the amount of\n   * vertex buffer space to reserve for the added geometry. This is necessary if it is planned\n   * to set a new geometry at this index at a later time that is larger than the original geometry.\n   * Defaults to the length of the given geometry vertex buffer.\n   * @param {number} [reservedIndexCount=-1] - Optional parameter specifying the amount of index\n   * buffer space to reserve for the added geometry. This is necessary if it is planned to set a\n   * new geometry at this index at a later time that is larger than the original geometry. Defaults to\n   * the length of the given geometry index buffer.\n   * @return {number} The geometry ID.\n   */\n  addGeometry(geometry) {\n    let reservedVertexCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n    let reservedIndexCount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n    this._initializeGeometry(geometry);\n    this._validateGeometry(geometry);\n    const geometryInfo = {\n      // geometry information\n      vertexStart: -1,\n      vertexCount: -1,\n      reservedVertexCount: -1,\n      indexStart: -1,\n      indexCount: -1,\n      reservedIndexCount: -1,\n      // draw range information\n      start: -1,\n      count: -1,\n      // state\n      boundingBox: null,\n      boundingSphere: null,\n      active: true\n    };\n    const geometryInfoList = this._geometryInfo;\n    geometryInfo.vertexStart = this._nextVertexStart;\n    geometryInfo.reservedVertexCount = reservedVertexCount === -1 ? geometry.getAttribute('position').count : reservedVertexCount;\n    const index = geometry.getIndex();\n    const hasIndex = index !== null;\n    if (hasIndex) {\n      geometryInfo.indexStart = this._nextIndexStart;\n      geometryInfo.reservedIndexCount = reservedIndexCount === -1 ? index.count : reservedIndexCount;\n    }\n    if (geometryInfo.indexStart !== -1 && geometryInfo.indexStart + geometryInfo.reservedIndexCount > this._maxIndexCount || geometryInfo.vertexStart + geometryInfo.reservedVertexCount > this._maxVertexCount) {\n      throw new Error('THREE.BatchedMesh: Reserved space request exceeds the maximum buffer size.');\n    }\n\n    // update id\n    let geometryId;\n    if (this._availableGeometryIds.length > 0) {\n      this._availableGeometryIds.sort(ascIdSort);\n      geometryId = this._availableGeometryIds.shift();\n      geometryInfoList[geometryId] = geometryInfo;\n    } else {\n      geometryId = this._geometryCount;\n      this._geometryCount++;\n      geometryInfoList.push(geometryInfo);\n    }\n\n    // update the geometry\n    this.setGeometryAt(geometryId, geometry);\n\n    // increment the next geometry position\n    this._nextIndexStart = geometryInfo.indexStart + geometryInfo.reservedIndexCount;\n    this._nextVertexStart = geometryInfo.vertexStart + geometryInfo.reservedVertexCount;\n    return geometryId;\n  }\n\n  /**\n   * Replaces the geometry at the given ID with the provided geometry. Throws an error if there\n   * is not enough space reserved for geometry. Calling this will change all instances that are\n   * rendering that geometry.\n   *\n   * @param {number} geometryId - The ID of the geometry that should be replaced with the given geometry.\n   * @param {BufferGeometry} geometry - The new geometry.\n   * @return {number} The geometry ID.\n   */\n  setGeometryAt(geometryId, geometry) {\n    if (geometryId >= this._geometryCount) {\n      throw new Error('THREE.BatchedMesh: Maximum geometry count reached.');\n    }\n    this._validateGeometry(geometry);\n    const batchGeometry = this.geometry;\n    const hasIndex = batchGeometry.getIndex() !== null;\n    const dstIndex = batchGeometry.getIndex();\n    const srcIndex = geometry.getIndex();\n    const geometryInfo = this._geometryInfo[geometryId];\n    if (hasIndex && srcIndex.count > geometryInfo.reservedIndexCount || geometry.attributes.position.count > geometryInfo.reservedVertexCount) {\n      throw new Error('THREE.BatchedMesh: Reserved space not large enough for provided geometry.');\n    }\n\n    // copy geometry buffer data over\n    const vertexStart = geometryInfo.vertexStart;\n    const reservedVertexCount = geometryInfo.reservedVertexCount;\n    geometryInfo.vertexCount = geometry.getAttribute('position').count;\n    for (const attributeName in batchGeometry.attributes) {\n      // copy attribute data\n      const srcAttribute = geometry.getAttribute(attributeName);\n      const dstAttribute = batchGeometry.getAttribute(attributeName);\n      copyAttributeData(srcAttribute, dstAttribute, vertexStart);\n\n      // fill the rest in with zeroes\n      const itemSize = srcAttribute.itemSize;\n      for (let i = srcAttribute.count, l = reservedVertexCount; i < l; i++) {\n        const index = vertexStart + i;\n        for (let c = 0; c < itemSize; c++) {\n          dstAttribute.setComponent(index, c, 0);\n        }\n      }\n      dstAttribute.needsUpdate = true;\n      dstAttribute.addUpdateRange(vertexStart * itemSize, reservedVertexCount * itemSize);\n    }\n\n    // copy index\n    if (hasIndex) {\n      const indexStart = geometryInfo.indexStart;\n      const reservedIndexCount = geometryInfo.reservedIndexCount;\n      geometryInfo.indexCount = geometry.getIndex().count;\n\n      // copy index data over\n      for (let i = 0; i < srcIndex.count; i++) {\n        dstIndex.setX(indexStart + i, vertexStart + srcIndex.getX(i));\n      }\n\n      // fill the rest in with zeroes\n      for (let i = srcIndex.count, l = reservedIndexCount; i < l; i++) {\n        dstIndex.setX(indexStart + i, vertexStart);\n      }\n      dstIndex.needsUpdate = true;\n      dstIndex.addUpdateRange(indexStart, geometryInfo.reservedIndexCount);\n    }\n\n    // update the draw range\n    geometryInfo.start = hasIndex ? geometryInfo.indexStart : geometryInfo.vertexStart;\n    geometryInfo.count = hasIndex ? geometryInfo.indexCount : geometryInfo.vertexCount;\n\n    // store the bounding boxes\n    geometryInfo.boundingBox = null;\n    if (geometry.boundingBox !== null) {\n      geometryInfo.boundingBox = geometry.boundingBox.clone();\n    }\n    geometryInfo.boundingSphere = null;\n    if (geometry.boundingSphere !== null) {\n      geometryInfo.boundingSphere = geometry.boundingSphere.clone();\n    }\n    this._visibilityChanged = true;\n    return geometryId;\n  }\n\n  /**\n   * Deletes the geometry defined by the given ID from this batch. Any instances referencing\n   * this geometry will also be removed as a side effect.\n   *\n   * @param {number} geometryId - The ID of the geometry to remove from the batch.\n   * @return {BatchedMesh} A reference to this batched mesh.\n   */\n  deleteGeometry(geometryId) {\n    const geometryInfoList = this._geometryInfo;\n    if (geometryId >= geometryInfoList.length || geometryInfoList[geometryId].active === false) {\n      return this;\n    }\n\n    // delete any instances associated with this geometry\n    const instanceInfo = this._instanceInfo;\n    for (let i = 0, l = instanceInfo.length; i < l; i++) {\n      if (instanceInfo[i].active && instanceInfo[i].geometryIndex === geometryId) {\n        this.deleteInstance(i);\n      }\n    }\n    geometryInfoList[geometryId].active = false;\n    this._availableGeometryIds.push(geometryId);\n    this._visibilityChanged = true;\n    return this;\n  }\n\n  /**\n   * Deletes an existing instance from the batch using the given ID.\n   *\n   * @param {number} instanceId - The ID of the instance to remove from the batch.\n   * @return {BatchedMesh} A reference to this batched mesh.\n   */\n  deleteInstance(instanceId) {\n    this.validateInstanceId(instanceId);\n    this._instanceInfo[instanceId].active = false;\n    this._availableInstanceIds.push(instanceId);\n    this._visibilityChanged = true;\n    return this;\n  }\n\n  /**\n   * Repacks the sub geometries in [name] to remove any unused space remaining from\n   * previously deleted geometry, freeing up space to add new geometry.\n   *\n   * @param {number} instanceId - The ID of the instance to remove from the batch.\n   * @return {BatchedMesh} A reference to this batched mesh.\n   */\n  optimize() {\n    // track the next indices to copy data to\n    let nextVertexStart = 0;\n    let nextIndexStart = 0;\n\n    // Iterate over all geometry ranges in order sorted from earliest in the geometry buffer to latest\n    // in the geometry buffer. Because draw range objects can be reused there is no guarantee of their order.\n    const geometryInfoList = this._geometryInfo;\n    const indices = geometryInfoList.map((e, i) => i).sort((a, b) => {\n      return geometryInfoList[a].vertexStart - geometryInfoList[b].vertexStart;\n    });\n    const geometry = this.geometry;\n    for (let i = 0, l = geometryInfoList.length; i < l; i++) {\n      // if a geometry range is inactive then don't copy anything\n      const index = indices[i];\n      const geometryInfo = geometryInfoList[index];\n      if (geometryInfo.active === false) {\n        continue;\n      }\n\n      // if a geometry contains an index buffer then shift it, as well\n      if (geometry.index !== null) {\n        if (geometryInfo.indexStart !== nextIndexStart) {\n          const {\n            indexStart,\n            vertexStart,\n            reservedIndexCount\n          } = geometryInfo;\n          const index = geometry.index;\n          const array = index.array;\n\n          // shift the index pointers based on how the vertex data will shift\n          // adjusting the index must happen first so the original vertex start value is available\n          const elementDelta = nextVertexStart - vertexStart;\n          for (let j = indexStart; j < indexStart + reservedIndexCount; j++) {\n            array[j] = array[j] + elementDelta;\n          }\n          index.array.copyWithin(nextIndexStart, indexStart, indexStart + reservedIndexCount);\n          index.addUpdateRange(nextIndexStart, reservedIndexCount);\n          geometryInfo.indexStart = nextIndexStart;\n        }\n        nextIndexStart += geometryInfo.reservedIndexCount;\n      }\n\n      // if a geometry needs to be moved then copy attribute data to overwrite unused space\n      if (geometryInfo.vertexStart !== nextVertexStart) {\n        const {\n          vertexStart,\n          reservedVertexCount\n        } = geometryInfo;\n        const attributes = geometry.attributes;\n        for (const key in attributes) {\n          const attribute = attributes[key];\n          const {\n            array,\n            itemSize\n          } = attribute;\n          array.copyWithin(nextVertexStart * itemSize, vertexStart * itemSize, (vertexStart + reservedVertexCount) * itemSize);\n          attribute.addUpdateRange(nextVertexStart * itemSize, reservedVertexCount * itemSize);\n        }\n        geometryInfo.vertexStart = nextVertexStart;\n      }\n      nextVertexStart += geometryInfo.reservedVertexCount;\n      geometryInfo.start = geometry.index ? geometryInfo.indexStart : geometryInfo.vertexStart;\n\n      // step the next geometry points to the shifted position\n      this._nextIndexStart = geometry.index ? geometryInfo.indexStart + geometryInfo.reservedIndexCount : 0;\n      this._nextVertexStart = geometryInfo.vertexStart + geometryInfo.reservedVertexCount;\n    }\n    return this;\n  }\n\n  /**\n   * Returns the bounding box for the given geometry.\n   *\n   * @param {number} geometryId - The ID of the geometry to return the bounding box for.\n   * @param {Box3} target - The target object that is used to store the method's result.\n   * @return {Box3|null} The geometry's bounding box. Returns `null` if no geometry has been found for the given ID.\n   */\n  getBoundingBoxAt(geometryId, target) {\n    if (geometryId >= this._geometryCount) {\n      return null;\n    }\n\n    // compute bounding box\n    const geometry = this.geometry;\n    const geometryInfo = this._geometryInfo[geometryId];\n    if (geometryInfo.boundingBox === null) {\n      const box = new Box3();\n      const index = geometry.index;\n      const position = geometry.attributes.position;\n      for (let i = geometryInfo.start, l = geometryInfo.start + geometryInfo.count; i < l; i++) {\n        let iv = i;\n        if (index) {\n          iv = index.getX(iv);\n        }\n        box.expandByPoint(_vector$5.fromBufferAttribute(position, iv));\n      }\n      geometryInfo.boundingBox = box;\n    }\n    target.copy(geometryInfo.boundingBox);\n    return target;\n  }\n\n  /**\n   * Returns the bounding sphere for the given geometry.\n   *\n   * @param {number} geometryId - The ID of the geometry to return the bounding sphere for.\n   * @param {Sphere} target - The target object that is used to store the method's result.\n   * @return {Sphere|null} The geometry's bounding sphere. Returns `null` if no geometry has been found for the given ID.\n   */\n  getBoundingSphereAt(geometryId, target) {\n    if (geometryId >= this._geometryCount) {\n      return null;\n    }\n\n    // compute bounding sphere\n    const geometry = this.geometry;\n    const geometryInfo = this._geometryInfo[geometryId];\n    if (geometryInfo.boundingSphere === null) {\n      const sphere = new Sphere();\n      this.getBoundingBoxAt(geometryId, _box$1);\n      _box$1.getCenter(sphere.center);\n      const index = geometry.index;\n      const position = geometry.attributes.position;\n      let maxRadiusSq = 0;\n      for (let i = geometryInfo.start, l = geometryInfo.start + geometryInfo.count; i < l; i++) {\n        let iv = i;\n        if (index) {\n          iv = index.getX(iv);\n        }\n        _vector$5.fromBufferAttribute(position, iv);\n        maxRadiusSq = Math.max(maxRadiusSq, sphere.center.distanceToSquared(_vector$5));\n      }\n      sphere.radius = Math.sqrt(maxRadiusSq);\n      geometryInfo.boundingSphere = sphere;\n    }\n    target.copy(geometryInfo.boundingSphere);\n    return target;\n  }\n\n  /**\n   * Sets the given local transformation matrix to the defined instance.\n   * Negatively scaled matrices are not supported.\n   *\n   * @param {number} instanceId - The ID of an instance to set the matrix of.\n   * @param {Matrix4} matrix - A 4x4 matrix representing the local transformation of a single instance.\n   * @return {BatchedMesh} A reference to this batched mesh.\n   */\n  setMatrixAt(instanceId, matrix) {\n    this.validateInstanceId(instanceId);\n    const matricesTexture = this._matricesTexture;\n    const matricesArray = this._matricesTexture.image.data;\n    matrix.toArray(matricesArray, instanceId * 16);\n    matricesTexture.needsUpdate = true;\n    return this;\n  }\n\n  /**\n   * Returns the local transformation matrix of the defined instance.\n   *\n   * @param {number} instanceId - The ID of an instance to get the matrix of.\n   * @param {Matrix4} matrix - The target object that is used to store the method's result.\n   * @return {Matrix4} The instance's local transformation matrix.\n   */\n  getMatrixAt(instanceId, matrix) {\n    this.validateInstanceId(instanceId);\n    return matrix.fromArray(this._matricesTexture.image.data, instanceId * 16);\n  }\n\n  /**\n   * Sets the given color to the defined instance.\n   *\n   * @param {number} instanceId - The ID of an instance to set the color of.\n   * @param {Color} color - The color to set the instance to.\n   * @return {BatchedMesh} A reference to this batched mesh.\n   */\n  setColorAt(instanceId, color) {\n    this.validateInstanceId(instanceId);\n    if (this._colorsTexture === null) {\n      this._initColorsTexture();\n    }\n    color.toArray(this._colorsTexture.image.data, instanceId * 4);\n    this._colorsTexture.needsUpdate = true;\n    return this;\n  }\n\n  /**\n   * Returns the color of the defined instance.\n   *\n   * @param {number} instanceId - The ID of an instance to get the color of.\n   * @param {Color} color - The target object that is used to store the method's result.\n   * @return {Color} The instance's color.\n   */\n  getColorAt(instanceId, color) {\n    this.validateInstanceId(instanceId);\n    return color.fromArray(this._colorsTexture.image.data, instanceId * 4);\n  }\n\n  /**\n   * Sets the visibility of the instance.\n   *\n   * @param {number} instanceId - The id of the instance to set the visibility of.\n   * @param {boolean} visible - Whether the instance is visible or not.\n   * @return {BatchedMesh} A reference to this batched mesh.\n   */\n  setVisibleAt(instanceId, visible) {\n    this.validateInstanceId(instanceId);\n    if (this._instanceInfo[instanceId].visible === visible) {\n      return this;\n    }\n    this._instanceInfo[instanceId].visible = visible;\n    this._visibilityChanged = true;\n    return this;\n  }\n\n  /**\n   * Returns the visibility state of the defined instance.\n   *\n   * @param {number} instanceId - The ID of an instance to get the visibility state of.\n   * @return {boolean} Whether the instance is visible or not.\n   */\n  getVisibleAt(instanceId) {\n    this.validateInstanceId(instanceId);\n    return this._instanceInfo[instanceId].visible;\n  }\n\n  /**\n   * Sets the geometry ID of the instance at the given index.\n   *\n   * @param {number} instanceId - The ID of the instance to set the geometry ID of.\n   * @param {number} geometryId - The geometry ID to be use by the instance.\n   * @return {BatchedMesh} A reference to this batched mesh.\n   */\n  setGeometryIdAt(instanceId, geometryId) {\n    this.validateInstanceId(instanceId);\n    this.validateGeometryId(geometryId);\n    this._instanceInfo[instanceId].geometryIndex = geometryId;\n    return this;\n  }\n\n  /**\n   * Returns the geometry ID of the defined instance.\n   *\n   * @param {number} instanceId - The ID of an instance to get the geometry ID of.\n   * @return {number} The instance's geometry ID.\n   */\n  getGeometryIdAt(instanceId) {\n    this.validateInstanceId(instanceId);\n    return this._instanceInfo[instanceId].geometryIndex;\n  }\n\n  /**\n   * Get the range representing the subset of triangles related to the attached geometry,\n   * indicating the starting offset and count, or `null` if invalid.\n   *\n   * @param {number} geometryId - The id of the geometry to get the range of.\n   * @param {Object} [target] - The target object that is used to store the method's result.\n   * @return {{\n   * \tvertexStart:number,vertexCount:number,reservedVertexCount:number,\n   * \tindexStart:number,indexCount:number,reservedIndexCount:number,\n   * \tstart:number,count:number\n   * }} The result object with range data.\n   */\n  getGeometryRangeAt(geometryId) {\n    let target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.validateGeometryId(geometryId);\n    const geometryInfo = this._geometryInfo[geometryId];\n    target.vertexStart = geometryInfo.vertexStart;\n    target.vertexCount = geometryInfo.vertexCount;\n    target.reservedVertexCount = geometryInfo.reservedVertexCount;\n    target.indexStart = geometryInfo.indexStart;\n    target.indexCount = geometryInfo.indexCount;\n    target.reservedIndexCount = geometryInfo.reservedIndexCount;\n    target.start = geometryInfo.start;\n    target.count = geometryInfo.count;\n    return target;\n  }\n\n  /**\n   * Resizes the necessary buffers to support the provided number of instances.\n   * If the provided arguments shrink the number of instances but there are not enough\n   * unused Ids at the end of the list then an error is thrown.\n   *\n   * @param {number} maxInstanceCount - The max number of individual instances that can be added and rendered by the batch.\n  */\n  setInstanceCount(maxInstanceCount) {\n    // shrink the available instances as much as possible\n    const availableInstanceIds = this._availableInstanceIds;\n    const instanceInfo = this._instanceInfo;\n    availableInstanceIds.sort(ascIdSort);\n    while (availableInstanceIds[availableInstanceIds.length - 1] === instanceInfo.length) {\n      instanceInfo.pop();\n      availableInstanceIds.pop();\n    }\n\n    // throw an error if it can't be shrunk to the desired size\n    if (maxInstanceCount < instanceInfo.length) {\n      throw new Error(`BatchedMesh: Instance ids outside the range ${maxInstanceCount} are being used. Cannot shrink instance count.`);\n    }\n\n    // copy the multi draw counts\n    const multiDrawCounts = new Int32Array(maxInstanceCount);\n    const multiDrawStarts = new Int32Array(maxInstanceCount);\n    copyArrayContents(this._multiDrawCounts, multiDrawCounts);\n    copyArrayContents(this._multiDrawStarts, multiDrawStarts);\n    this._multiDrawCounts = multiDrawCounts;\n    this._multiDrawStarts = multiDrawStarts;\n    this._maxInstanceCount = maxInstanceCount;\n\n    // update texture data for instance sampling\n    const indirectTexture = this._indirectTexture;\n    const matricesTexture = this._matricesTexture;\n    const colorsTexture = this._colorsTexture;\n    indirectTexture.dispose();\n    this._initIndirectTexture();\n    copyArrayContents(indirectTexture.image.data, this._indirectTexture.image.data);\n    matricesTexture.dispose();\n    this._initMatricesTexture();\n    copyArrayContents(matricesTexture.image.data, this._matricesTexture.image.data);\n    if (colorsTexture) {\n      colorsTexture.dispose();\n      this._initColorsTexture();\n      copyArrayContents(colorsTexture.image.data, this._colorsTexture.image.data);\n    }\n  }\n\n  /**\n   * Resizes the available space in the batch's vertex and index buffer attributes to the provided sizes.\n   * If the provided arguments shrink the geometry buffers but there is not enough unused space at the\n   * end of the geometry attributes then an error is thrown.\n   *\n   * @param {number} maxVertexCount - The maximum number of vertices to be used by all unique geometries to resize to.\n   * @param {number} maxIndexCount - The maximum number of indices to be used by all unique geometries to resize to.\n  */\n  setGeometrySize(maxVertexCount, maxIndexCount) {\n    // Check if we can shrink to the requested vertex attribute size\n    const validRanges = [...this._geometryInfo].filter(info => info.active);\n    const requiredVertexLength = Math.max(...validRanges.map(range => range.vertexStart + range.reservedVertexCount));\n    if (requiredVertexLength > maxVertexCount) {\n      throw new Error(`BatchedMesh: Geometry vertex values are being used outside the range ${maxIndexCount}. Cannot shrink further.`);\n    }\n\n    // Check if we can shrink to the requested index attribute size\n    if (this.geometry.index) {\n      const requiredIndexLength = Math.max(...validRanges.map(range => range.indexStart + range.reservedIndexCount));\n      if (requiredIndexLength > maxIndexCount) {\n        throw new Error(`BatchedMesh: Geometry index values are being used outside the range ${maxIndexCount}. Cannot shrink further.`);\n      }\n    }\n\n    //\n\n    // dispose of the previous geometry\n    const oldGeometry = this.geometry;\n    oldGeometry.dispose();\n\n    // recreate the geometry needed based on the previous variant\n    this._maxVertexCount = maxVertexCount;\n    this._maxIndexCount = maxIndexCount;\n    if (this._geometryInitialized) {\n      this._geometryInitialized = false;\n      this.geometry = new BufferGeometry();\n      this._initializeGeometry(oldGeometry);\n    }\n\n    // copy data from the previous geometry\n    const geometry = this.geometry;\n    if (oldGeometry.index) {\n      copyArrayContents(oldGeometry.index.array, geometry.index.array);\n    }\n    for (const key in oldGeometry.attributes) {\n      copyArrayContents(oldGeometry.attributes[key].array, geometry.attributes[key].array);\n    }\n  }\n  raycast(raycaster, intersects) {\n    const instanceInfo = this._instanceInfo;\n    const geometryInfoList = this._geometryInfo;\n    const matrixWorld = this.matrixWorld;\n    const batchGeometry = this.geometry;\n\n    // iterate over each geometry\n    _mesh.material = this.material;\n    _mesh.geometry.index = batchGeometry.index;\n    _mesh.geometry.attributes = batchGeometry.attributes;\n    if (_mesh.geometry.boundingBox === null) {\n      _mesh.geometry.boundingBox = new Box3();\n    }\n    if (_mesh.geometry.boundingSphere === null) {\n      _mesh.geometry.boundingSphere = new Sphere();\n    }\n    for (let i = 0, l = instanceInfo.length; i < l; i++) {\n      if (!instanceInfo[i].visible || !instanceInfo[i].active) {\n        continue;\n      }\n      const geometryId = instanceInfo[i].geometryIndex;\n      const geometryInfo = geometryInfoList[geometryId];\n      _mesh.geometry.setDrawRange(geometryInfo.start, geometryInfo.count);\n\n      // get the intersects\n      this.getMatrixAt(i, _mesh.matrixWorld).premultiply(matrixWorld);\n      this.getBoundingBoxAt(geometryId, _mesh.geometry.boundingBox);\n      this.getBoundingSphereAt(geometryId, _mesh.geometry.boundingSphere);\n      _mesh.raycast(raycaster, _batchIntersects);\n\n      // add batch id to the intersects\n      for (let j = 0, l = _batchIntersects.length; j < l; j++) {\n        const intersect = _batchIntersects[j];\n        intersect.object = this;\n        intersect.batchId = i;\n        intersects.push(intersect);\n      }\n      _batchIntersects.length = 0;\n    }\n    _mesh.material = null;\n    _mesh.geometry.index = null;\n    _mesh.geometry.attributes = {};\n    _mesh.geometry.setDrawRange(0, Infinity);\n  }\n  copy(source) {\n    super.copy(source);\n    this.geometry = source.geometry.clone();\n    this.perObjectFrustumCulled = source.perObjectFrustumCulled;\n    this.sortObjects = source.sortObjects;\n    this.boundingBox = source.boundingBox !== null ? source.boundingBox.clone() : null;\n    this.boundingSphere = source.boundingSphere !== null ? source.boundingSphere.clone() : null;\n    this._geometryInfo = source._geometryInfo.map(info => ({\n      ...info,\n      boundingBox: info.boundingBox !== null ? info.boundingBox.clone() : null,\n      boundingSphere: info.boundingSphere !== null ? info.boundingSphere.clone() : null\n    }));\n    this._instanceInfo = source._instanceInfo.map(info => ({\n      ...info\n    }));\n    this._availableInstanceIds = source._availableInstanceIds.slice();\n    this._availableGeometryIds = source._availableGeometryIds.slice();\n    this._nextIndexStart = source._nextIndexStart;\n    this._nextVertexStart = source._nextVertexStart;\n    this._geometryCount = source._geometryCount;\n    this._maxInstanceCount = source._maxInstanceCount;\n    this._maxVertexCount = source._maxVertexCount;\n    this._maxIndexCount = source._maxIndexCount;\n    this._geometryInitialized = source._geometryInitialized;\n    this._multiDrawCounts = source._multiDrawCounts.slice();\n    this._multiDrawStarts = source._multiDrawStarts.slice();\n    this._indirectTexture = source._indirectTexture.clone();\n    this._indirectTexture.image.data = this._indirectTexture.image.data.slice();\n    this._matricesTexture = source._matricesTexture.clone();\n    this._matricesTexture.image.data = this._matricesTexture.image.data.slice();\n    if (this._colorsTexture !== null) {\n      this._colorsTexture = source._colorsTexture.clone();\n      this._colorsTexture.image.data = this._colorsTexture.image.data.slice();\n    }\n    return this;\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    // Assuming the geometry is not shared with other meshes\n    this.geometry.dispose();\n    this._matricesTexture.dispose();\n    this._matricesTexture = null;\n    this._indirectTexture.dispose();\n    this._indirectTexture = null;\n    if (this._colorsTexture !== null) {\n      this._colorsTexture.dispose();\n      this._colorsTexture = null;\n    }\n  }\n  onBeforeRender(renderer, scene, camera, geometry, material /*, _group*/) {\n    // if visibility has not changed and frustum culling and object sorting is not required\n    // then skip iterating over all items\n    if (!this._visibilityChanged && !this.perObjectFrustumCulled && !this.sortObjects) {\n      return;\n    }\n\n    // the indexed version of the multi draw function requires specifying the start\n    // offset in bytes.\n    const index = geometry.getIndex();\n    const bytesPerElement = index === null ? 1 : index.array.BYTES_PER_ELEMENT;\n    const instanceInfo = this._instanceInfo;\n    const multiDrawStarts = this._multiDrawStarts;\n    const multiDrawCounts = this._multiDrawCounts;\n    const geometryInfoList = this._geometryInfo;\n    const perObjectFrustumCulled = this.perObjectFrustumCulled;\n    const indirectTexture = this._indirectTexture;\n    const indirectArray = indirectTexture.image.data;\n    const frustum = camera.isArrayCamera ? _frustumArray : _frustum;\n    // prepare the frustum in the local frame\n    if (perObjectFrustumCulled && !camera.isArrayCamera) {\n      _matrix$1.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse).multiply(this.matrixWorld);\n      _frustum.setFromProjectionMatrix(_matrix$1, renderer.coordinateSystem);\n    }\n    let multiDrawCount = 0;\n    if (this.sortObjects) {\n      // get the camera position in the local frame\n      _matrix$1.copy(this.matrixWorld).invert();\n      _vector$5.setFromMatrixPosition(camera.matrixWorld).applyMatrix4(_matrix$1);\n      _forward.set(0, 0, -1).transformDirection(camera.matrixWorld).transformDirection(_matrix$1);\n      for (let i = 0, l = instanceInfo.length; i < l; i++) {\n        if (instanceInfo[i].visible && instanceInfo[i].active) {\n          const geometryId = instanceInfo[i].geometryIndex;\n\n          // get the bounds in world space\n          this.getMatrixAt(i, _matrix$1);\n          this.getBoundingSphereAt(geometryId, _sphere$2).applyMatrix4(_matrix$1);\n\n          // determine whether the batched geometry is within the frustum\n          let culled = false;\n          if (perObjectFrustumCulled) {\n            culled = !frustum.intersectsSphere(_sphere$2, camera);\n          }\n          if (!culled) {\n            // get the distance from camera used for sorting\n            const geometryInfo = geometryInfoList[geometryId];\n            const z = _temp.subVectors(_sphere$2.center, _vector$5).dot(_forward);\n            _renderList.push(geometryInfo.start, geometryInfo.count, z, i);\n          }\n        }\n      }\n\n      // Sort the draw ranges and prep for rendering\n      const list = _renderList.list;\n      const customSort = this.customSort;\n      if (customSort === null) {\n        list.sort(material.transparent ? sortTransparent : sortOpaque);\n      } else {\n        customSort.call(this, list, camera);\n      }\n      for (let i = 0, l = list.length; i < l; i++) {\n        const item = list[i];\n        multiDrawStarts[multiDrawCount] = item.start * bytesPerElement;\n        multiDrawCounts[multiDrawCount] = item.count;\n        indirectArray[multiDrawCount] = item.index;\n        multiDrawCount++;\n      }\n      _renderList.reset();\n    } else {\n      for (let i = 0, l = instanceInfo.length; i < l; i++) {\n        if (instanceInfo[i].visible && instanceInfo[i].active) {\n          const geometryId = instanceInfo[i].geometryIndex;\n\n          // determine whether the batched geometry is within the frustum\n          let culled = false;\n          if (perObjectFrustumCulled) {\n            // get the bounds in world space\n            this.getMatrixAt(i, _matrix$1);\n            this.getBoundingSphereAt(geometryId, _sphere$2).applyMatrix4(_matrix$1);\n            culled = !frustum.intersectsSphere(_sphere$2, camera);\n          }\n          if (!culled) {\n            const geometryInfo = geometryInfoList[geometryId];\n            multiDrawStarts[multiDrawCount] = geometryInfo.start * bytesPerElement;\n            multiDrawCounts[multiDrawCount] = geometryInfo.count;\n            indirectArray[multiDrawCount] = i;\n            multiDrawCount++;\n          }\n        }\n      }\n    }\n    indirectTexture.needsUpdate = true;\n    this._multiDrawCount = multiDrawCount;\n    this._visibilityChanged = false;\n  }\n  onBeforeShadow(renderer, object, camera, shadowCamera, geometry, depthMaterial /* , group */) {\n    this.onBeforeRender(renderer, null, shadowCamera, geometry, depthMaterial);\n  }\n}\n\n/**\n * A material for rendering line primitives.\n *\n * Materials define the appearance of renderable 3D objects.\n *\n * ```js\n * const material = new THREE.LineBasicMaterial( { color: 0xffffff } );\n * ```\n *\n * @augments Material\n */\nclass LineBasicMaterial extends Material {\n  /**\n   * Constructs a new line basic material.\n   *\n   * @param {Object} [parameters] - An object with one or more properties\n   * defining the material's appearance. Any property of the material\n   * (including any property from inherited materials) can be passed\n   * in here. Color values can be passed any type of value accepted\n   * by {@link Color#set}.\n   */\n  constructor(parameters) {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isLineBasicMaterial = true;\n    this.type = 'LineBasicMaterial';\n\n    /**\n     * Color of the material.\n     *\n     * @type {Color}\n     * @default (1,1,1)\n     */\n    this.color = new Color(0xffffff);\n\n    /**\n     * Sets the color of the lines using data from a texture. The texture map\n     * color is modulated by the diffuse `color`.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.map = null;\n\n    /**\n     * Controls line thickness or lines.\n     *\n     * Can only be used with {@link SVGRenderer}. WebGL and WebGPU\n     * ignore this setting and always render line primitives with a\n     * width of one pixel.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.linewidth = 1;\n\n    /**\n     * Defines appearance of line ends.\n     *\n     * Can only be used with {@link SVGRenderer}.\n     *\n     * @type {('butt'|'round'|'square')}\n     * @default 'round'\n     */\n    this.linecap = 'round';\n\n    /**\n     * Defines appearance of line joints.\n     *\n     * Can only be used with {@link SVGRenderer}.\n     *\n     * @type {('round'|'bevel'|'miter')}\n     * @default 'round'\n     */\n    this.linejoin = 'round';\n\n    /**\n     * Whether the material is affected by fog or not.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.fog = true;\n    this.setValues(parameters);\n  }\n  copy(source) {\n    super.copy(source);\n    this.color.copy(source.color);\n    this.map = source.map;\n    this.linewidth = source.linewidth;\n    this.linecap = source.linecap;\n    this.linejoin = source.linejoin;\n    this.fog = source.fog;\n    return this;\n  }\n}\nconst _vStart = /*@__PURE__*/new Vector3();\nconst _vEnd = /*@__PURE__*/new Vector3();\nconst _inverseMatrix$1 = /*@__PURE__*/new Matrix4();\nconst _ray$1 = /*@__PURE__*/new Ray();\nconst _sphere$1 = /*@__PURE__*/new Sphere();\nconst _intersectPointOnRay = /*@__PURE__*/new Vector3();\nconst _intersectPointOnSegment = /*@__PURE__*/new Vector3();\n\n/**\n * A continuous line. The line are rendered by connecting consecutive\n * vertices with straight lines.\n *\n * ```js\n * const material = new THREE.LineBasicMaterial( { color: 0x0000ff } );\n *\n * const points = [];\n * points.push( new THREE.Vector3( - 10, 0, 0 ) );\n * points.push( new THREE.Vector3( 0, 10, 0 ) );\n * points.push( new THREE.Vector3( 10, 0, 0 ) );\n *\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n *\n * const line = new THREE.Line( geometry, material );\n * scene.add( line );\n * ```\n *\n * @augments Object3D\n */\nclass Line extends Object3D {\n  /**\n   * Constructs a new line.\n   *\n   * @param {BufferGeometry} [geometry] - The line geometry.\n   * @param {Material|Array<Material>} [material] - The line material.\n   */\n  constructor() {\n    let geometry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new BufferGeometry();\n    let material = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new LineBasicMaterial();\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isLine = true;\n    this.type = 'Line';\n\n    /**\n     * The line geometry.\n     *\n     * @type {BufferGeometry}\n     */\n    this.geometry = geometry;\n\n    /**\n     * The line material.\n     *\n     * @type {Material|Array<Material>}\n     * @default LineBasicMaterial\n     */\n    this.material = material;\n\n    /**\n     * A dictionary representing the morph targets in the geometry. The key is the\n     * morph targets name, the value its attribute index. This member is `undefined`\n     * by default and only set when morph targets are detected in the geometry.\n     *\n     * @type {Object<String,number>|undefined}\n     * @default undefined\n     */\n    this.morphTargetDictionary = undefined;\n\n    /**\n     * An array of weights typically in the range `[0,1]` that specify how much of the morph\n     * is applied. This member is `undefined` by default and only set when morph targets are\n     * detected in the geometry.\n     *\n     * @type {Array<number>|undefined}\n     * @default undefined\n     */\n    this.morphTargetInfluences = undefined;\n    this.updateMorphTargets();\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.material = Array.isArray(source.material) ? source.material.slice() : source.material;\n    this.geometry = source.geometry;\n    return this;\n  }\n\n  /**\n   * Computes an array of distance values which are necessary for rendering dashed lines.\n   * For each vertex in the geometry, the method calculates the cumulative length from the\n   * current point to the very beginning of the line.\n   *\n   * @return {Line} A reference to this line.\n   */\n  computeLineDistances() {\n    const geometry = this.geometry;\n\n    // we assume non-indexed geometry\n\n    if (geometry.index === null) {\n      const positionAttribute = geometry.attributes.position;\n      const lineDistances = [0];\n      for (let i = 1, l = positionAttribute.count; i < l; i++) {\n        _vStart.fromBufferAttribute(positionAttribute, i - 1);\n        _vEnd.fromBufferAttribute(positionAttribute, i);\n        lineDistances[i] = lineDistances[i - 1];\n        lineDistances[i] += _vStart.distanceTo(_vEnd);\n      }\n      geometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));\n    } else {\n      console.warn('THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');\n    }\n    return this;\n  }\n\n  /**\n   * Computes intersection points between a casted ray and this line.\n   *\n   * @param {Raycaster} raycaster - The raycaster.\n   * @param {Array<Object>} intersects - The target array that holds the intersection points.\n   */\n  raycast(raycaster, intersects) {\n    const geometry = this.geometry;\n    const matrixWorld = this.matrixWorld;\n    const threshold = raycaster.params.Line.threshold;\n    const drawRange = geometry.drawRange;\n\n    // Checking boundingSphere distance to ray\n\n    if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n    _sphere$1.copy(geometry.boundingSphere);\n    _sphere$1.applyMatrix4(matrixWorld);\n    _sphere$1.radius += threshold;\n    if (raycaster.ray.intersectsSphere(_sphere$1) === false) return;\n\n    //\n\n    _inverseMatrix$1.copy(matrixWorld).invert();\n    _ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);\n    const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n    const localThresholdSq = localThreshold * localThreshold;\n    const step = this.isLineSegments ? 2 : 1;\n    const index = geometry.index;\n    const attributes = geometry.attributes;\n    const positionAttribute = attributes.position;\n    if (index !== null) {\n      const start = Math.max(0, drawRange.start);\n      const end = Math.min(index.count, drawRange.start + drawRange.count);\n      for (let i = start, l = end - 1; i < l; i += step) {\n        const a = index.getX(i);\n        const b = index.getX(i + 1);\n        const intersect = checkIntersection(this, raycaster, _ray$1, localThresholdSq, a, b, i);\n        if (intersect) {\n          intersects.push(intersect);\n        }\n      }\n      if (this.isLineLoop) {\n        const a = index.getX(end - 1);\n        const b = index.getX(start);\n        const intersect = checkIntersection(this, raycaster, _ray$1, localThresholdSq, a, b, end - 1);\n        if (intersect) {\n          intersects.push(intersect);\n        }\n      }\n    } else {\n      const start = Math.max(0, drawRange.start);\n      const end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);\n      for (let i = start, l = end - 1; i < l; i += step) {\n        const intersect = checkIntersection(this, raycaster, _ray$1, localThresholdSq, i, i + 1, i);\n        if (intersect) {\n          intersects.push(intersect);\n        }\n      }\n      if (this.isLineLoop) {\n        const intersect = checkIntersection(this, raycaster, _ray$1, localThresholdSq, end - 1, start, end - 1);\n        if (intersect) {\n          intersects.push(intersect);\n        }\n      }\n    }\n  }\n\n  /**\n   * Sets the values of {@link Line#morphTargetDictionary} and {@link Line#morphTargetInfluences}\n   * to make sure existing morph targets can influence this 3D object.\n   */\n  updateMorphTargets() {\n    const geometry = this.geometry;\n    const morphAttributes = geometry.morphAttributes;\n    const keys = Object.keys(morphAttributes);\n    if (keys.length > 0) {\n      const morphAttribute = morphAttributes[keys[0]];\n      if (morphAttribute !== undefined) {\n        this.morphTargetInfluences = [];\n        this.morphTargetDictionary = {};\n        for (let m = 0, ml = morphAttribute.length; m < ml; m++) {\n          const name = morphAttribute[m].name || String(m);\n          this.morphTargetInfluences.push(0);\n          this.morphTargetDictionary[name] = m;\n        }\n      }\n    }\n  }\n}\nfunction checkIntersection(object, raycaster, ray, thresholdSq, a, b, i) {\n  const positionAttribute = object.geometry.attributes.position;\n  _vStart.fromBufferAttribute(positionAttribute, a);\n  _vEnd.fromBufferAttribute(positionAttribute, b);\n  const distSq = ray.distanceSqToSegment(_vStart, _vEnd, _intersectPointOnRay, _intersectPointOnSegment);\n  if (distSq > thresholdSq) return;\n  _intersectPointOnRay.applyMatrix4(object.matrixWorld); // Move back to world space for distance calculation\n\n  const distance = raycaster.ray.origin.distanceTo(_intersectPointOnRay);\n  if (distance < raycaster.near || distance > raycaster.far) return;\n  return {\n    distance: distance,\n    // What do we want? intersection point on the ray or on the segment??\n    // point: raycaster.ray.at( distance ),\n    point: _intersectPointOnSegment.clone().applyMatrix4(object.matrixWorld),\n    index: i,\n    face: null,\n    faceIndex: null,\n    barycoord: null,\n    object: object\n  };\n}\nconst _start = /*@__PURE__*/new Vector3();\nconst _end = /*@__PURE__*/new Vector3();\n\n/**\n * A series of lines drawn between pairs of vertices.\n *\n * @augments Line\n */\nclass LineSegments extends Line {\n  /**\n   * Constructs a new line segments.\n   *\n   * @param {BufferGeometry} [geometry] - The line geometry.\n   * @param {Material|Array<Material>} [material] - The line material.\n   */\n  constructor(geometry, material) {\n    super(geometry, material);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isLineSegments = true;\n    this.type = 'LineSegments';\n  }\n  computeLineDistances() {\n    const geometry = this.geometry;\n\n    // we assume non-indexed geometry\n\n    if (geometry.index === null) {\n      const positionAttribute = geometry.attributes.position;\n      const lineDistances = [];\n      for (let i = 0, l = positionAttribute.count; i < l; i += 2) {\n        _start.fromBufferAttribute(positionAttribute, i);\n        _end.fromBufferAttribute(positionAttribute, i + 1);\n        lineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];\n        lineDistances[i + 1] = lineDistances[i] + _start.distanceTo(_end);\n      }\n      geometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));\n    } else {\n      console.warn('THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');\n    }\n    return this;\n  }\n}\n\n/**\n * A continuous line. This is nearly the same as {@link Line} the only difference\n * is that the last vertex is connected with the first vertex in order to close\n * the line to form a loop.\n *\n * @augments Line\n */\nclass LineLoop extends Line {\n  /**\n   * Constructs a new line loop.\n   *\n   * @param {BufferGeometry} [geometry] - The line geometry.\n   * @param {Material|Array<Material>} [material] - The line material.\n   */\n  constructor(geometry, material) {\n    super(geometry, material);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isLineLoop = true;\n    this.type = 'LineLoop';\n  }\n}\n\n/**\n * A material for rendering point primitives.\n *\n * Materials define the appearance of renderable 3D objects.\n *\n * ```js\n * const vertices = [];\n *\n * for ( let i = 0; i < 10000; i ++ ) {\n * \tconst x = THREE.MathUtils.randFloatSpread( 2000 );\n * \tconst y = THREE.MathUtils.randFloatSpread( 2000 );\n * \tconst z = THREE.MathUtils.randFloatSpread( 2000 );\n *\n * \tvertices.push( x, y, z );\n * }\n *\n * const geometry = new THREE.BufferGeometry();\n * geometry.setAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );\n * const material = new THREE.PointsMaterial( { color: 0x888888 } );\n * const points = new THREE.Points( geometry, material );\n * scene.add( points );\n * ```\n *\n * @augments Material\n */\nclass PointsMaterial extends Material {\n  /**\n   * Constructs a new points material.\n   *\n   * @param {Object} [parameters] - An object with one or more properties\n   * defining the material's appearance. Any property of the material\n   * (including any property from inherited materials) can be passed\n   * in here. Color values can be passed any type of value accepted\n   * by {@link Color#set}.\n   */\n  constructor(parameters) {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isPointsMaterial = true;\n    this.type = 'PointsMaterial';\n\n    /**\n     * Color of the material.\n     *\n     * @type {Color}\n     * @default (1,1,1)\n     */\n    this.color = new Color(0xffffff);\n\n    /**\n     * The color map. May optionally include an alpha channel, typically combined\n     * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\n     * color is modulated by the diffuse `color`.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.map = null;\n\n    /**\n     * The alpha map is a grayscale texture that controls the opacity across the\n     * surface (black: fully transparent; white: fully opaque).\n     *\n     * Only the color of the texture is used, ignoring the alpha channel if one\n     * exists. For RGB and RGBA textures, the renderer will use the green channel\n     * when sampling this texture due to the extra bit of precision provided for\n     * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n     * luminance/alpha textures will also still work as expected.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.alphaMap = null;\n\n    /**\n     * Defines the size of the points in pixels.\n     *\n     * Might be capped if the value exceeds hardware dependent parameters like [gl.ALIASED_POINT_SIZE_RANGE]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getParamete}.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.size = 1;\n\n    /**\n     * Specifies whether size of individual points is attenuated by the camera depth (perspective camera only).\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.sizeAttenuation = true;\n\n    /**\n     * Whether the material is affected by fog or not.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.fog = true;\n    this.setValues(parameters);\n  }\n  copy(source) {\n    super.copy(source);\n    this.color.copy(source.color);\n    this.map = source.map;\n    this.alphaMap = source.alphaMap;\n    this.size = source.size;\n    this.sizeAttenuation = source.sizeAttenuation;\n    this.fog = source.fog;\n    return this;\n  }\n}\nconst _inverseMatrix = /*@__PURE__*/new Matrix4();\nconst _ray = /*@__PURE__*/new Ray();\nconst _sphere = /*@__PURE__*/new Sphere();\nconst _position$2 = /*@__PURE__*/new Vector3();\n\n/**\n * A class for displaying points or point clouds.\n *\n * @augments Object3D\n */\nclass Points extends Object3D {\n  /**\n   * Constructs a new point cloud.\n   *\n   * @param {BufferGeometry} [geometry] - The points geometry.\n   * @param {Material|Array<Material>} [material] - The points material.\n   */\n  constructor() {\n    let geometry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new BufferGeometry();\n    let material = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new PointsMaterial();\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isPoints = true;\n    this.type = 'Points';\n\n    /**\n     * The points geometry.\n     *\n     * @type {BufferGeometry}\n     */\n    this.geometry = geometry;\n\n    /**\n     * The line material.\n     *\n     * @type {Material|Array<Material>}\n     * @default PointsMaterial\n     */\n    this.material = material;\n\n    /**\n     * A dictionary representing the morph targets in the geometry. The key is the\n     * morph targets name, the value its attribute index. This member is `undefined`\n     * by default and only set when morph targets are detected in the geometry.\n     *\n     * @type {Object<String,number>|undefined}\n     * @default undefined\n     */\n    this.morphTargetDictionary = undefined;\n\n    /**\n     * An array of weights typically in the range `[0,1]` that specify how much of the morph\n     * is applied. This member is `undefined` by default and only set when morph targets are\n     * detected in the geometry.\n     *\n     * @type {Array<number>|undefined}\n     * @default undefined\n     */\n    this.morphTargetInfluences = undefined;\n    this.updateMorphTargets();\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.material = Array.isArray(source.material) ? source.material.slice() : source.material;\n    this.geometry = source.geometry;\n    return this;\n  }\n\n  /**\n   * Computes intersection points between a casted ray and this point cloud.\n   *\n   * @param {Raycaster} raycaster - The raycaster.\n   * @param {Array<Object>} intersects - The target array that holds the intersection points.\n   */\n  raycast(raycaster, intersects) {\n    const geometry = this.geometry;\n    const matrixWorld = this.matrixWorld;\n    const threshold = raycaster.params.Points.threshold;\n    const drawRange = geometry.drawRange;\n\n    // Checking boundingSphere distance to ray\n\n    if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n    _sphere.copy(geometry.boundingSphere);\n    _sphere.applyMatrix4(matrixWorld);\n    _sphere.radius += threshold;\n    if (raycaster.ray.intersectsSphere(_sphere) === false) return;\n\n    //\n\n    _inverseMatrix.copy(matrixWorld).invert();\n    _ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix);\n    const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n    const localThresholdSq = localThreshold * localThreshold;\n    const index = geometry.index;\n    const attributes = geometry.attributes;\n    const positionAttribute = attributes.position;\n    if (index !== null) {\n      const start = Math.max(0, drawRange.start);\n      const end = Math.min(index.count, drawRange.start + drawRange.count);\n      for (let i = start, il = end; i < il; i++) {\n        const a = index.getX(i);\n        _position$2.fromBufferAttribute(positionAttribute, a);\n        testPoint(_position$2, a, localThresholdSq, matrixWorld, raycaster, intersects, this);\n      }\n    } else {\n      const start = Math.max(0, drawRange.start);\n      const end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);\n      for (let i = start, l = end; i < l; i++) {\n        _position$2.fromBufferAttribute(positionAttribute, i);\n        testPoint(_position$2, i, localThresholdSq, matrixWorld, raycaster, intersects, this);\n      }\n    }\n  }\n\n  /**\n   * Sets the values of {@link Points#morphTargetDictionary} and {@link Points#morphTargetInfluences}\n   * to make sure existing morph targets can influence this 3D object.\n   */\n  updateMorphTargets() {\n    const geometry = this.geometry;\n    const morphAttributes = geometry.morphAttributes;\n    const keys = Object.keys(morphAttributes);\n    if (keys.length > 0) {\n      const morphAttribute = morphAttributes[keys[0]];\n      if (morphAttribute !== undefined) {\n        this.morphTargetInfluences = [];\n        this.morphTargetDictionary = {};\n        for (let m = 0, ml = morphAttribute.length; m < ml; m++) {\n          const name = morphAttribute[m].name || String(m);\n          this.morphTargetInfluences.push(0);\n          this.morphTargetDictionary[name] = m;\n        }\n      }\n    }\n  }\n}\nfunction testPoint(point, index, localThresholdSq, matrixWorld, raycaster, intersects, object) {\n  const rayPointDistanceSq = _ray.distanceSqToPoint(point);\n  if (rayPointDistanceSq < localThresholdSq) {\n    const intersectPoint = new Vector3();\n    _ray.closestPointToPoint(point, intersectPoint);\n    intersectPoint.applyMatrix4(matrixWorld);\n    const distance = raycaster.ray.origin.distanceTo(intersectPoint);\n    if (distance < raycaster.near || distance > raycaster.far) return;\n    intersects.push({\n      distance: distance,\n      distanceToRay: Math.sqrt(rayPointDistanceSq),\n      point: intersectPoint,\n      index: index,\n      face: null,\n      faceIndex: null,\n      barycoord: null,\n      object: object\n    });\n  }\n}\n\n/**\n * A texture for use with a video.\n *\n * ```js\n * // assuming you have created a HTML video element with id=\"video\"\n * const video = document.getElementById( 'video' );\n * const texture = new THREE.VideoTexture( video );\n * ```\n *\n * Note: After the initial use of a texture, its dimensions, format, and type\n * cannot be changed. Instead, call {@link Texture#dispose} on the texture and instantiate a new one.\n *\n * @augments Texture\n */\nclass VideoTexture extends Texture {\n  /**\n   * Constructs a new video texture.\n   *\n   * @param {HTMLVideoElement} video - The video element to use as a data source for the texture.\n   * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.\n   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n   * @param {number} [magFilter=LinearFilter] - The mag filter value.\n   * @param {number} [minFilter=LinearFilter] - The min filter value.\n   * @param {number} [format=RGBAFormat] - The texture format.\n   * @param {number} [type=UnsignedByteType] - The texture type.\n   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n   */\n  constructor(video, mapping, wrapS, wrapT) {\n    let magFilter = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : LinearFilter;\n    let minFilter = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : LinearFilter;\n    let format = arguments.length > 6 ? arguments[6] : undefined;\n    let type = arguments.length > 7 ? arguments[7] : undefined;\n    let anisotropy = arguments.length > 8 ? arguments[8] : undefined;\n    super(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isVideoTexture = true;\n\n    /**\n     * Whether to generate mipmaps (if possible) for a texture.\n     *\n     * Overwritten and set to `false` by default.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.generateMipmaps = false;\n    const scope = this;\n    function updateVideo() {\n      scope.needsUpdate = true;\n      video.requestVideoFrameCallback(updateVideo);\n    }\n    if ('requestVideoFrameCallback' in video) {\n      video.requestVideoFrameCallback(updateVideo);\n    }\n  }\n  clone() {\n    return new this.constructor(this.image).copy(this);\n  }\n\n  /**\n   * This method is called automatically by the renderer and sets {@link Texture#needsUpdate}\n   * to `true` every time a new frame is available.\n   *\n   * Only relevant if `requestVideoFrameCallback` is not supported in the browser.\n   */\n  update() {\n    const video = this.image;\n    const hasVideoFrameCallback = 'requestVideoFrameCallback' in video;\n    if (hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA) {\n      this.needsUpdate = true;\n    }\n  }\n}\n\n/**\n * This class can be used as an alternative way to define video data. Instead of using\n * an instance of `HTMLVideoElement` like with `VideoTexture`, `VideoFrameTexture` expects each frame is\n * defined manually via {@link VideoFrameTexture#setFrame}. A typical use case for this module is when\n * video frames are decoded with the WebCodecs API.\n *\n * ```js\n * const texture = new THREE.VideoFrameTexture();\n * texture.setFrame( frame );\n * ```\n *\n * @augments VideoTexture\n */\nclass VideoFrameTexture extends VideoTexture {\n  /**\n   * Constructs a new video frame texture.\n   *\n   * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.\n   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n   * @param {number} [magFilter=LinearFilter] - The mag filter value.\n   * @param {number} [minFilter=LinearFilter] - The min filter value.\n   * @param {number} [format=RGBAFormat] - The texture format.\n   * @param {number} [type=UnsignedByteType] - The texture type.\n   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n   */\n  constructor(mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n    super({}, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isVideoFrameTexture = true;\n  }\n\n  /**\n   * This method overwritten with an empty implementation since\n   * this type of texture is updated via `setFrame()`.\n   */\n  update() {}\n  clone() {\n    return new this.constructor().copy(this); // restoring Texture.clone()\n  }\n\n  /**\n   * Sets the current frame of the video. This will automatically update the texture\n   * so the data can be used for rendering.\n   *\n   * @param {VideoFrame} frame - The video frame.\n   */\n  setFrame(frame) {\n    this.image = frame;\n    this.needsUpdate = true;\n  }\n}\n\n/**\n * This class can only be used in combination with `copyFramebufferToTexture()` methods\n * of renderers. It extracts the contents of the current bound framebuffer and provides it\n * as a texture for further usage.\n *\n * ```js\n * const pixelRatio = window.devicePixelRatio;\n * const textureSize = 128 * pixelRatio;\n *\n * const frameTexture = new FramebufferTexture( textureSize, textureSize );\n *\n * // calculate start position for copying part of the frame data\n * const vector = new Vector2();\n * vector.x = ( window.innerWidth * pixelRatio / 2 ) - ( textureSize / 2 );\n * vector.y = ( window.innerHeight * pixelRatio / 2 ) - ( textureSize / 2 );\n *\n * renderer.render( scene, camera );\n *\n * // copy part of the rendered frame into the framebuffer texture\n * renderer.copyFramebufferToTexture( frameTexture, vector );\n * ```\n *\n * @augments Texture\n */\nclass FramebufferTexture extends Texture {\n  /**\n   * Constructs a new framebuffer texture.\n   *\n   * @param {number} width - The width of the texture.\n   * @param {number} height - The height of the texture.\n   */\n  constructor(width, height) {\n    super({\n      width,\n      height\n    });\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isFramebufferTexture = true;\n\n    /**\n     * How the texture is sampled when a texel covers more than one pixel.\n     *\n     * Overwritten and set to `NearestFilter` by default to disable filtering.\n     *\n     * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n     * @default NearestFilter\n     */\n    this.magFilter = NearestFilter;\n\n    /**\n     * How the texture is sampled when a texel covers less than one pixel.\n     *\n     * Overwritten and set to `NearestFilter` by default to disable filtering.\n     *\n     * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n     * @default NearestFilter\n     */\n    this.minFilter = NearestFilter;\n\n    /**\n     * Whether to generate mipmaps (if possible) for a texture.\n     *\n     * Overwritten and set to `false` by default.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.generateMipmaps = false;\n    this.needsUpdate = true;\n  }\n}\n\n/**\n * Creates a texture based on data in compressed form.\n *\n * These texture are usually loaded with {@link CompressedTextureLoader}.\n *\n * @augments Texture\n */\nclass CompressedTexture extends Texture {\n  /**\n   * Constructs a new compressed texture.\n   *\n   * @param {Array<Object>} mipmaps - This array holds for all mipmaps (including the bases mip)\n   * the data and dimensions.\n   * @param {number} width - The width of the texture.\n   * @param {number} height - The height of the texture.\n   * @param {number} [format=RGBAFormat] - The texture format.\n   * @param {number} [type=UnsignedByteType] - The texture type.\n   * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.\n   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n   * @param {number} [magFilter=LinearFilter] - The mag filter value.\n   * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.\n   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n   * @param {string} [colorSpace=NoColorSpace] - The color space.\n   */\n  constructor(mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, colorSpace) {\n    super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isCompressedTexture = true;\n\n    /**\n     * The image property of a compressed texture just defines its dimensions.\n     *\n     * @type {{width:number,height:number}}\n     */\n    this.image = {\n      width: width,\n      height: height\n    };\n\n    /**\n     * This array holds for all mipmaps (including the bases mip) the data and dimensions.\n     *\n     * @type {Array<Object>}\n     */\n    this.mipmaps = mipmaps;\n\n    /**\n     * If set to `true`, the texture is flipped along the vertical axis when\n     * uploaded to the GPU.\n     *\n     * Overwritten and set to `false` by default since it is not possible to\n     * flip compressed textures.\n     *\n     * @type {boolean}\n     * @default false\n     * @readonly\n     */\n    this.flipY = false;\n\n    /**\n     * Whether to generate mipmaps (if possible) for a texture.\n     *\n     * Overwritten and set to `false` by default since it is not\n     * possible to generate mipmaps for compressed data. Mipmaps\n     * must be embedded in the compressed texture file.\n     *\n     * @type {boolean}\n     * @default false\n     * @readonly\n     */\n    this.generateMipmaps = false;\n  }\n}\n\n/**\n * Creates a texture 2D array based on data in compressed form.\n *\n * These texture are usually loaded with {@link CompressedTextureLoader}.\n *\n * @augments CompressedTexture\n */\nclass CompressedArrayTexture extends CompressedTexture {\n  /**\n   * Constructs a new compressed array texture.\n   *\n   * @param {Array<Object>} mipmaps - This array holds for all mipmaps (including the bases mip)\n   * the data and dimensions.\n   * @param {number} width - The width of the texture.\n   * @param {number} height - The height of the texture.\n   * @param {number} depth - The depth of the texture.\n   * @param {number} [format=RGBAFormat] - The min filter value.\n   * @param {number} [type=UnsignedByteType] - The min filter value.\n   */\n  constructor(mipmaps, width, height, depth, format, type) {\n    super(mipmaps, width, height, format, type);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isCompressedArrayTexture = true;\n\n    /**\n     * The image property of a compressed texture just defines its dimensions.\n     *\n     * @name CompressedArrayTexture#image\n     * @type {{width:number,height:number,depth:number}}\n     */\n    this.image.depth = depth;\n\n    /**\n     * This defines how the texture is wrapped in the depth and corresponds to\n     * *W* in UVW mapping.\n     *\n     * @type {(RepeatWrapping|ClampToEdgeWrapping|MirroredRepeatWrapping)}\n     * @default ClampToEdgeWrapping\n     */\n    this.wrapR = ClampToEdgeWrapping;\n\n    /**\n     * A set of all layers which need to be updated in the texture.\n     *\n     * @type {Set<number>}\n     */\n    this.layerUpdates = new Set();\n  }\n\n  /**\n   * Describes that a specific layer of the texture needs to be updated.\n   * Normally when {@link Texture#needsUpdate} is set to `true`, the\n   * entire compressed texture array is sent to the GPU. Marking specific\n   * layers will only transmit subsets of all mipmaps associated with a\n   * specific depth in the array which is often much more performant.\n   *\n   * @param {number} layerIndex - The layer index that should be updated.\n   */\n  addLayerUpdate(layerIndex) {\n    this.layerUpdates.add(layerIndex);\n  }\n\n  /**\n   * Resets the layer updates registry.\n   */\n  clearLayerUpdates() {\n    this.layerUpdates.clear();\n  }\n}\n\n/**\n * Creates a cube texture based on data in compressed form.\n *\n * These texture are usually loaded with {@link CompressedTextureLoader}.\n *\n * @augments CompressedTexture\n */\nclass CompressedCubeTexture extends CompressedTexture {\n  /**\n   * Constructs a new compressed texture.\n   *\n   * @param {Array<CompressedTexture>} images - An array of compressed textures.\n   * @param {number} [format=RGBAFormat] - The texture format.\n   * @param {number} [type=UnsignedByteType] - The texture type.\n   */\n  constructor(images, format, type) {\n    super(undefined, images[0].width, images[0].height, format, type, CubeReflectionMapping);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isCompressedCubeTexture = true;\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isCubeTexture = true;\n    this.image = images;\n  }\n}\n\n/**\n * Creates a texture from a canvas element.\n *\n * This is almost the same as the base texture class, except that it sets {@link Texture#needsUpdate}\n * to `true` immediately since a canvas can directly be used for rendering.\n *\n * @augments Texture\n */\nclass CanvasTexture extends Texture {\n  /**\n   * Constructs a new texture.\n   *\n   * @param {HTMLCanvasElement} [canvas] - The HTML canvas element.\n   * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.\n   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n   * @param {number} [magFilter=LinearFilter] - The mag filter value.\n   * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.\n   * @param {number} [format=RGBAFormat] - The texture format.\n   * @param {number} [type=UnsignedByteType] - The texture type.\n   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n   */\n  constructor(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n    super(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isCanvasTexture = true;\n    this.needsUpdate = true;\n  }\n}\n\n/**\n * This class can be used to automatically save the depth information of a\n * rendering into a texture.\n *\n * @augments Texture\n */\nclass DepthTexture extends Texture {\n  /**\n   * Constructs a new depth texture.\n   *\n   * @param {number} width - The width of the texture.\n   * @param {number} height - The height of the texture.\n   * @param {number} [type=UnsignedIntType] - The texture type.\n   * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.\n   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n   * @param {number} [magFilter=LinearFilter] - The mag filter value.\n   * @param {number} [minFilter=LinearFilter] - The min filter value.\n   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n   * @param {number} [format=DepthFormat] - The texture format.\n   */\n  constructor(width, height) {\n    let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : UnsignedIntType;\n    let mapping = arguments.length > 3 ? arguments[3] : undefined;\n    let wrapS = arguments.length > 4 ? arguments[4] : undefined;\n    let wrapT = arguments.length > 5 ? arguments[5] : undefined;\n    let magFilter = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : NearestFilter;\n    let minFilter = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : NearestFilter;\n    let anisotropy = arguments.length > 8 ? arguments[8] : undefined;\n    let format = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : DepthFormat;\n    if (format !== DepthFormat && format !== DepthStencilFormat) {\n      throw new Error('DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat');\n    }\n    super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isDepthTexture = true;\n\n    /**\n     * The image property of a depth texture just defines its dimensions.\n     *\n     * @type {{width:number,height:number}}\n     */\n    this.image = {\n      width: width,\n      height: height\n    };\n\n    /**\n     * If set to `true`, the texture is flipped along the vertical axis when\n     * uploaded to the GPU.\n     *\n     * Overwritten and set to `false` by default.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.flipY = false;\n\n    /**\n     * Whether to generate mipmaps (if possible) for a texture.\n     *\n     * Overwritten and set to `false` by default.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.generateMipmaps = false;\n\n    /**\n     * Code corresponding to the depth compare function.\n     *\n     * @type {?(NeverCompare|LessCompare|EqualCompare|LessEqualCompare|GreaterCompare|NotEqualCompare|GreaterEqualCompare|AlwaysCompare)}\n     * @default null\n     */\n    this.compareFunction = null;\n  }\n  copy(source) {\n    super.copy(source);\n    this.source = new Source(Object.assign({}, source.image)); // see #30540\n    this.compareFunction = source.compareFunction;\n    return this;\n  }\n  toJSON(meta) {\n    const data = super.toJSON(meta);\n    if (this.compareFunction !== null) data.compareFunction = this.compareFunction;\n    return data;\n  }\n}\n\n/**\n * Creates an array of depth textures.\n *\n * @augments DepthTexture\n */\nclass DepthArrayTexture extends DepthTexture {\n  /**\n   * Constructs a new depth array texture.\n   *\n   * @param {number} [width=1] - The width of the texture.\n   * @param {number} [height=1] - The height of the texture.\n   * @param {number} [depth=1] - The depth of the texture.\n   */\n  constructor() {\n    let width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    super(width, height);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isDepthArrayTexture = true;\n\n    /**\n     * The image definition of a depth texture.\n     *\n     * @type {{width:number,height:number,depth:number}}\n     */\n    this.image = {\n      width: width,\n      height: height,\n      depth: depth\n    };\n\n    /**\n     * If set to `true`, the texture is flipped along the vertical axis when\n     * uploaded to the GPU.\n     *\n     * Overwritten and set to `false` by default.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.flipY = false;\n\n    /**\n     * Whether to generate mipmaps (if possible) for a texture.\n     *\n     * Overwritten and set to `false` by default.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.generateMipmaps = false;\n\n    /**\n     * Code corresponding to the depth compare function.\n     *\n     * @type {?(NeverCompare|LessCompare|EqualCompare|LessEqualCompare|GreaterCompare|NotEqualCompare|GreaterEqualCompare|AlwaysCompare)}\n     * @default null\n     */\n    this.compareFunction = null;\n\n    /**\n     * A set of all layers which need to be updated in the texture.\n     *\n     * @type {Set<number>}\n     */\n    this.layerUpdates = new Set();\n  }\n\n  /**\n   * Describes that a specific layer of the texture needs to be updated.\n   * Normally when {@link Texture#needsUpdate} is set to `true`, the\n   * entire slice is sent to the GPU. Marking specific\n   * layers will only transmit subsets of all mipmaps associated with a\n   * specific depth in the array which is often much more performant.\n   *\n   * @param {number} layerIndex - The layer index that should be updated.\n   */\n  addLayerUpdate(layerIndex) {\n    this.layerUpdates.add(layerIndex);\n  }\n\n  /**\n   * Resets the layer updates registry.\n   */\n  clearLayerUpdates() {\n    this.layerUpdates.clear();\n  }\n}\n\n/**\n * A geometry class for representing a capsule.\n *\n * ```js\n * const geometry = new THREE.CapsuleGeometry( 1, 1, 4, 8, 1 );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n * const capsule = new THREE.Mesh( geometry, material );\n * scene.add( capsule );\n * ```\n *\n * @augments BufferGeometry\n */\nclass CapsuleGeometry extends BufferGeometry {\n  /**\n   * Constructs a new capsule geometry.\n   *\n   * @param {number} [radius=1] - Radius of the capsule.\n   * @param {number} [height=1] - Height of the middle section.\n   * @param {number} [capSegments=4] - Number of curve segments used to build each cap.\n   * @param {number} [radialSegments=8] - Number of segmented faces around the circumference of the capsule. Must be an integer >= 3.\n   * @param {number} [heightSegments=1] - Number of rows of faces along the height of the middle section. Must be an integer >= 1.\n   */\n  constructor() {\n    let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let capSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;\n    let radialSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 8;\n    let heightSegments = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n    super();\n    this.type = 'CapsuleGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      radius: radius,\n      height: height,\n      capSegments: capSegments,\n      radialSegments: radialSegments,\n      heightSegments: heightSegments\n    };\n    height = Math.max(0, height);\n    capSegments = Math.max(1, Math.floor(capSegments));\n    radialSegments = Math.max(3, Math.floor(radialSegments));\n    heightSegments = Math.max(1, Math.floor(heightSegments));\n\n    // buffers\n\n    const indices = [];\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n\n    // helper variables\n\n    const halfHeight = height / 2;\n    const capArcLength = Math.PI / 2 * radius;\n    const cylinderPartLength = height;\n    const totalArcLength = 2 * capArcLength + cylinderPartLength;\n    const numVerticalSegments = capSegments * 2 + heightSegments;\n    const verticesPerRow = radialSegments + 1;\n    const normal = new Vector3();\n    const vertex = new Vector3();\n\n    // generate vertices, normals, and uvs\n\n    for (let iy = 0; iy <= numVerticalSegments; iy++) {\n      let currentArcLength = 0;\n      let profileY = 0;\n      let profileRadius = 0;\n      let normalYComponent = 0;\n      if (iy <= capSegments) {\n        // bottom cap\n        const segmentProgress = iy / capSegments;\n        const angle = segmentProgress * Math.PI / 2;\n        profileY = -halfHeight - radius * Math.cos(angle);\n        profileRadius = radius * Math.sin(angle);\n        normalYComponent = -radius * Math.cos(angle);\n        currentArcLength = segmentProgress * capArcLength;\n      } else if (iy <= capSegments + heightSegments) {\n        // middle section\n        const segmentProgress = (iy - capSegments) / heightSegments;\n        profileY = -halfHeight + segmentProgress * height;\n        profileRadius = radius;\n        normalYComponent = 0;\n        currentArcLength = capArcLength + segmentProgress * cylinderPartLength;\n      } else {\n        // top cap\n        const segmentProgress = (iy - capSegments - heightSegments) / capSegments;\n        const angle = segmentProgress * Math.PI / 2;\n        profileY = halfHeight + radius * Math.sin(angle);\n        profileRadius = radius * Math.cos(angle);\n        normalYComponent = radius * Math.sin(angle);\n        currentArcLength = capArcLength + cylinderPartLength + segmentProgress * capArcLength;\n      }\n      const v = Math.max(0, Math.min(1, currentArcLength / totalArcLength));\n\n      // special case for the poles\n\n      let uOffset = 0;\n      if (iy === 0) {\n        uOffset = 0.5 / radialSegments;\n      } else if (iy === numVerticalSegments) {\n        uOffset = -0.5 / radialSegments;\n      }\n      for (let ix = 0; ix <= radialSegments; ix++) {\n        const u = ix / radialSegments;\n        const theta = u * Math.PI * 2;\n        const sinTheta = Math.sin(theta);\n        const cosTheta = Math.cos(theta);\n\n        // vertex\n\n        vertex.x = -profileRadius * cosTheta;\n        vertex.y = profileY;\n        vertex.z = profileRadius * sinTheta;\n        vertices.push(vertex.x, vertex.y, vertex.z);\n\n        // normal\n\n        normal.set(-profileRadius * cosTheta, normalYComponent, profileRadius * sinTheta);\n        normal.normalize();\n        normals.push(normal.x, normal.y, normal.z);\n\n        // uv\n\n        uvs.push(u + uOffset, v);\n      }\n      if (iy > 0) {\n        const prevIndexRow = (iy - 1) * verticesPerRow;\n        for (let ix = 0; ix < radialSegments; ix++) {\n          const i1 = prevIndexRow + ix;\n          const i2 = prevIndexRow + ix + 1;\n          const i3 = iy * verticesPerRow + ix;\n          const i4 = iy * verticesPerRow + ix + 1;\n          indices.push(i1, i2, i3);\n          indices.push(i2, i4, i3);\n        }\n      }\n    }\n\n    // build geometry\n\n    this.setIndex(indices);\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n  }\n  copy(source) {\n    super.copy(source);\n    this.parameters = Object.assign({}, source.parameters);\n    return this;\n  }\n\n  /**\n   * Factory method for creating an instance of this class from the given\n   * JSON object.\n   *\n   * @param {Object} data - A JSON object representing the serialized geometry.\n   * @return {CapsuleGeometry} A new instance.\n   */\n  static fromJSON(data) {\n    return new CapsuleGeometry(data.radius, data.height, data.capSegments, data.radialSegments, data.heightSegments);\n  }\n}\n\n/**\n * A simple shape of Euclidean geometry. It is constructed from a\n * number of triangular segments that are oriented around a central point and\n * extend as far out as a given radius. It is built counter-clockwise from a\n * start angle and a given central angle. It can also be used to create\n * regular polygons, where the number of segments determines the number of\n * sides.\n *\n * ```js\n * const geometry = new THREE.CircleGeometry( 5, 32 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const circle = new THREE.Mesh( geometry, material );\n * scene.add( circle )\n * ```\n *\n * @augments BufferGeometry\n */\nclass CircleGeometry extends BufferGeometry {\n  /**\n   * Constructs a new circle geometry.\n   *\n   * @param {number} [radius=1] - Radius of the circle.\n   * @param {number} [segments=32] - Number of segments (triangles), minimum = `3`.\n   * @param {number} [thetaStart=0] - Start angle for first segment in radians.\n   * @param {number} [thetaLength=Math.PI*2] - The central angle, often called theta,\n   * of the circular sector in radians. The default value results in a complete circle.\n   */\n  constructor() {\n    let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let segments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 32;\n    let thetaStart = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let thetaLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Math.PI * 2;\n    super();\n    this.type = 'CircleGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      radius: radius,\n      segments: segments,\n      thetaStart: thetaStart,\n      thetaLength: thetaLength\n    };\n    segments = Math.max(3, segments);\n\n    // buffers\n\n    const indices = [];\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n\n    // helper variables\n\n    const vertex = new Vector3();\n    const uv = new Vector2();\n\n    // center point\n\n    vertices.push(0, 0, 0);\n    normals.push(0, 0, 1);\n    uvs.push(0.5, 0.5);\n    for (let s = 0, i = 3; s <= segments; s++, i += 3) {\n      const segment = thetaStart + s / segments * thetaLength;\n\n      // vertex\n\n      vertex.x = radius * Math.cos(segment);\n      vertex.y = radius * Math.sin(segment);\n      vertices.push(vertex.x, vertex.y, vertex.z);\n\n      // normal\n\n      normals.push(0, 0, 1);\n\n      // uvs\n\n      uv.x = (vertices[i] / radius + 1) / 2;\n      uv.y = (vertices[i + 1] / radius + 1) / 2;\n      uvs.push(uv.x, uv.y);\n    }\n\n    // indices\n\n    for (let i = 1; i <= segments; i++) {\n      indices.push(i, i + 1, 0);\n    }\n\n    // build geometry\n\n    this.setIndex(indices);\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n  }\n  copy(source) {\n    super.copy(source);\n    this.parameters = Object.assign({}, source.parameters);\n    return this;\n  }\n\n  /**\n   * Factory method for creating an instance of this class from the given\n   * JSON object.\n   *\n   * @param {Object} data - A JSON object representing the serialized geometry.\n   * @return {CircleGeometry} A new instance.\n   */\n  static fromJSON(data) {\n    return new CircleGeometry(data.radius, data.segments, data.thetaStart, data.thetaLength);\n  }\n}\n\n/**\n * A geometry class for representing a cylinder.\n *\n * ```js\n * const geometry = new THREE.CylinderGeometry( 5, 5, 20, 32 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const cylinder = new THREE.Mesh( geometry, material );\n * scene.add( cylinder );\n * ```\n *\n * @augments BufferGeometry\n */\nclass CylinderGeometry extends BufferGeometry {\n  /**\n   * Constructs a new cylinder geometry.\n   *\n   * @param {number} [radiusTop=1] - Radius of the cylinder at the top.\n   * @param {number} [radiusBottom=1] - Radius of the cylinder at the bottom.\n   * @param {number} [height=1] - Height of the cylinder.\n   * @param {number} [radialSegments=32] - Number of segmented faces around the circumference of the cylinder.\n   * @param {number} [heightSegments=1] - Number of rows of faces along the height of the cylinder.\n   * @param {boolean} [openEnded=false] - Whether the base of the cylinder is open or capped.\n   * @param {number} [thetaStart=0] - Start angle for first segment, in radians.\n   * @param {number} [thetaLength=Math.PI*2] - The central angle, often called theta, of the circular sector, in radians.\n   * The default value results in a complete cylinder.\n   */\n  constructor() {\n    let radiusTop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let radiusBottom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let radialSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 32;\n    let heightSegments = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n    let openEnded = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n    let thetaStart = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n    let thetaLength = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : Math.PI * 2;\n    super();\n    this.type = 'CylinderGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      radiusTop: radiusTop,\n      radiusBottom: radiusBottom,\n      height: height,\n      radialSegments: radialSegments,\n      heightSegments: heightSegments,\n      openEnded: openEnded,\n      thetaStart: thetaStart,\n      thetaLength: thetaLength\n    };\n    const scope = this;\n    radialSegments = Math.floor(radialSegments);\n    heightSegments = Math.floor(heightSegments);\n\n    // buffers\n\n    const indices = [];\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n\n    // helper variables\n\n    let index = 0;\n    const indexArray = [];\n    const halfHeight = height / 2;\n    let groupStart = 0;\n\n    // generate geometry\n\n    generateTorso();\n    if (openEnded === false) {\n      if (radiusTop > 0) generateCap(true);\n      if (radiusBottom > 0) generateCap(false);\n    }\n\n    // build geometry\n\n    this.setIndex(indices);\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n    function generateTorso() {\n      const normal = new Vector3();\n      const vertex = new Vector3();\n      let groupCount = 0;\n\n      // this will be used to calculate the normal\n      const slope = (radiusBottom - radiusTop) / height;\n\n      // generate vertices, normals and uvs\n\n      for (let y = 0; y <= heightSegments; y++) {\n        const indexRow = [];\n        const v = y / heightSegments;\n\n        // calculate the radius of the current row\n\n        const radius = v * (radiusBottom - radiusTop) + radiusTop;\n        for (let x = 0; x <= radialSegments; x++) {\n          const u = x / radialSegments;\n          const theta = u * thetaLength + thetaStart;\n          const sinTheta = Math.sin(theta);\n          const cosTheta = Math.cos(theta);\n\n          // vertex\n\n          vertex.x = radius * sinTheta;\n          vertex.y = -v * height + halfHeight;\n          vertex.z = radius * cosTheta;\n          vertices.push(vertex.x, vertex.y, vertex.z);\n\n          // normal\n\n          normal.set(sinTheta, slope, cosTheta).normalize();\n          normals.push(normal.x, normal.y, normal.z);\n\n          // uv\n\n          uvs.push(u, 1 - v);\n\n          // save index of vertex in respective row\n\n          indexRow.push(index++);\n        }\n\n        // now save vertices of the row in our index array\n\n        indexArray.push(indexRow);\n      }\n\n      // generate indices\n\n      for (let x = 0; x < radialSegments; x++) {\n        for (let y = 0; y < heightSegments; y++) {\n          // we use the index array to access the correct indices\n\n          const a = indexArray[y][x];\n          const b = indexArray[y + 1][x];\n          const c = indexArray[y + 1][x + 1];\n          const d = indexArray[y][x + 1];\n\n          // faces\n\n          if (radiusTop > 0 || y !== 0) {\n            indices.push(a, b, d);\n            groupCount += 3;\n          }\n          if (radiusBottom > 0 || y !== heightSegments - 1) {\n            indices.push(b, c, d);\n            groupCount += 3;\n          }\n        }\n      }\n\n      // add a group to the geometry. this will ensure multi material support\n\n      scope.addGroup(groupStart, groupCount, 0);\n\n      // calculate new start value for groups\n\n      groupStart += groupCount;\n    }\n    function generateCap(top) {\n      // save the index of the first center vertex\n      const centerIndexStart = index;\n      const uv = new Vector2();\n      const vertex = new Vector3();\n      let groupCount = 0;\n      const radius = top === true ? radiusTop : radiusBottom;\n      const sign = top === true ? 1 : -1;\n\n      // first we generate the center vertex data of the cap.\n      // because the geometry needs one set of uvs per face,\n      // we must generate a center vertex per face/segment\n\n      for (let x = 1; x <= radialSegments; x++) {\n        // vertex\n\n        vertices.push(0, halfHeight * sign, 0);\n\n        // normal\n\n        normals.push(0, sign, 0);\n\n        // uv\n\n        uvs.push(0.5, 0.5);\n\n        // increase index\n\n        index++;\n      }\n\n      // save the index of the last center vertex\n      const centerIndexEnd = index;\n\n      // now we generate the surrounding vertices, normals and uvs\n\n      for (let x = 0; x <= radialSegments; x++) {\n        const u = x / radialSegments;\n        const theta = u * thetaLength + thetaStart;\n        const cosTheta = Math.cos(theta);\n        const sinTheta = Math.sin(theta);\n\n        // vertex\n\n        vertex.x = radius * sinTheta;\n        vertex.y = halfHeight * sign;\n        vertex.z = radius * cosTheta;\n        vertices.push(vertex.x, vertex.y, vertex.z);\n\n        // normal\n\n        normals.push(0, sign, 0);\n\n        // uv\n\n        uv.x = cosTheta * 0.5 + 0.5;\n        uv.y = sinTheta * 0.5 * sign + 0.5;\n        uvs.push(uv.x, uv.y);\n\n        // increase index\n\n        index++;\n      }\n\n      // generate indices\n\n      for (let x = 0; x < radialSegments; x++) {\n        const c = centerIndexStart + x;\n        const i = centerIndexEnd + x;\n        if (top === true) {\n          // face top\n\n          indices.push(i, i + 1, c);\n        } else {\n          // face bottom\n\n          indices.push(i + 1, i, c);\n        }\n        groupCount += 3;\n      }\n\n      // add a group to the geometry. this will ensure multi material support\n\n      scope.addGroup(groupStart, groupCount, top === true ? 1 : 2);\n\n      // calculate new start value for groups\n\n      groupStart += groupCount;\n    }\n  }\n  copy(source) {\n    super.copy(source);\n    this.parameters = Object.assign({}, source.parameters);\n    return this;\n  }\n\n  /**\n   * Factory method for creating an instance of this class from the given\n   * JSON object.\n   *\n   * @param {Object} data - A JSON object representing the serialized geometry.\n   * @return {CylinderGeometry} A new instance.\n   */\n  static fromJSON(data) {\n    return new CylinderGeometry(data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);\n  }\n}\n\n/**\n * A geometry class for representing a cone.\n *\n * ```js\n * const geometry = new THREE.ConeGeometry( 5, 20, 32 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const cone = new THREE.Mesh(geometry, material );\n * scene.add( cone );\n * ```\n *\n * @augments CylinderGeometry\n */\nclass ConeGeometry extends CylinderGeometry {\n  /**\n   * Constructs a new cone geometry.\n   *\n   * @param {number} [radius=1] - Radius of the cone base.\n   * @param {number} [height=1] - Height of the cone.\n   * @param {number} [radialSegments=32] - Number of segmented faces around the circumference of the cone.\n   * @param {number} [heightSegments=1] - Number of rows of faces along the height of the cone.\n   * @param {boolean} [openEnded=false] - Whether the base of the cone is open or capped.\n   * @param {number} [thetaStart=0] - Start angle for first segment, in radians.\n   * @param {number} [thetaLength=Math.PI*2] - The central angle, often called theta, of the circular sector, in radians.\n   * The default value results in a complete cone.\n   */\n  constructor() {\n    let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let radialSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 32;\n    let heightSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    let openEnded = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    let thetaStart = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n    let thetaLength = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : Math.PI * 2;\n    super(0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);\n    this.type = 'ConeGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      radius: radius,\n      height: height,\n      radialSegments: radialSegments,\n      heightSegments: heightSegments,\n      openEnded: openEnded,\n      thetaStart: thetaStart,\n      thetaLength: thetaLength\n    };\n  }\n\n  /**\n   * Factory method for creating an instance of this class from the given\n   * JSON object.\n   *\n   * @param {Object} data - A JSON object representing the serialized geometry.\n   * @return {ConeGeometry} A new instance.\n   */\n  static fromJSON(data) {\n    return new ConeGeometry(data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);\n  }\n}\n\n/**\n * A polyhedron is a solid in three dimensions with flat faces. This class\n * will take an array of vertices, project them onto a sphere, and then\n * divide them up to the desired level of detail.\n *\n * @augments BufferGeometry\n */\nclass PolyhedronGeometry extends BufferGeometry {\n  /**\n   * Constructs a new polyhedron geometry.\n   *\n   * @param {Array<number>} [vertices] - A flat array of vertices describing the base shape.\n   * @param {Array<number>} [indices] - A flat array of indices describing the base shape.\n   * @param {number} [radius=1] - The radius of the shape.\n   * @param {number} [detail=0] - How many levels to subdivide the geometry. The more detail, the smoother the shape.\n   */\n  constructor() {\n    let vertices = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let indices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let radius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let detail = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    super();\n    this.type = 'PolyhedronGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      vertices: vertices,\n      indices: indices,\n      radius: radius,\n      detail: detail\n    };\n\n    // default buffer data\n\n    const vertexBuffer = [];\n    const uvBuffer = [];\n\n    // the subdivision creates the vertex buffer data\n\n    subdivide(detail);\n\n    // all vertices should lie on a conceptual sphere with a given radius\n\n    applyRadius(radius);\n\n    // finally, create the uv data\n\n    generateUVs();\n\n    // build non-indexed geometry\n\n    this.setAttribute('position', new Float32BufferAttribute(vertexBuffer, 3));\n    this.setAttribute('normal', new Float32BufferAttribute(vertexBuffer.slice(), 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvBuffer, 2));\n    if (detail === 0) {\n      this.computeVertexNormals(); // flat normals\n    } else {\n      this.normalizeNormals(); // smooth normals\n    }\n\n    // helper functions\n\n    function subdivide(detail) {\n      const a = new Vector3();\n      const b = new Vector3();\n      const c = new Vector3();\n\n      // iterate over all faces and apply a subdivision with the given detail value\n\n      for (let i = 0; i < indices.length; i += 3) {\n        // get the vertices of the face\n\n        getVertexByIndex(indices[i + 0], a);\n        getVertexByIndex(indices[i + 1], b);\n        getVertexByIndex(indices[i + 2], c);\n\n        // perform subdivision\n\n        subdivideFace(a, b, c, detail);\n      }\n    }\n    function subdivideFace(a, b, c, detail) {\n      const cols = detail + 1;\n\n      // we use this multidimensional array as a data structure for creating the subdivision\n\n      const v = [];\n\n      // construct all of the vertices for this subdivision\n\n      for (let i = 0; i <= cols; i++) {\n        v[i] = [];\n        const aj = a.clone().lerp(c, i / cols);\n        const bj = b.clone().lerp(c, i / cols);\n        const rows = cols - i;\n        for (let j = 0; j <= rows; j++) {\n          if (j === 0 && i === cols) {\n            v[i][j] = aj;\n          } else {\n            v[i][j] = aj.clone().lerp(bj, j / rows);\n          }\n        }\n      }\n\n      // construct all of the faces\n\n      for (let i = 0; i < cols; i++) {\n        for (let j = 0; j < 2 * (cols - i) - 1; j++) {\n          const k = Math.floor(j / 2);\n          if (j % 2 === 0) {\n            pushVertex(v[i][k + 1]);\n            pushVertex(v[i + 1][k]);\n            pushVertex(v[i][k]);\n          } else {\n            pushVertex(v[i][k + 1]);\n            pushVertex(v[i + 1][k + 1]);\n            pushVertex(v[i + 1][k]);\n          }\n        }\n      }\n    }\n    function applyRadius(radius) {\n      const vertex = new Vector3();\n\n      // iterate over the entire buffer and apply the radius to each vertex\n\n      for (let i = 0; i < vertexBuffer.length; i += 3) {\n        vertex.x = vertexBuffer[i + 0];\n        vertex.y = vertexBuffer[i + 1];\n        vertex.z = vertexBuffer[i + 2];\n        vertex.normalize().multiplyScalar(radius);\n        vertexBuffer[i + 0] = vertex.x;\n        vertexBuffer[i + 1] = vertex.y;\n        vertexBuffer[i + 2] = vertex.z;\n      }\n    }\n    function generateUVs() {\n      const vertex = new Vector3();\n      for (let i = 0; i < vertexBuffer.length; i += 3) {\n        vertex.x = vertexBuffer[i + 0];\n        vertex.y = vertexBuffer[i + 1];\n        vertex.z = vertexBuffer[i + 2];\n        const u = azimuth(vertex) / 2 / Math.PI + 0.5;\n        const v = inclination(vertex) / Math.PI + 0.5;\n        uvBuffer.push(u, 1 - v);\n      }\n      correctUVs();\n      correctSeam();\n    }\n    function correctSeam() {\n      // handle case when face straddles the seam, see #3269\n\n      for (let i = 0; i < uvBuffer.length; i += 6) {\n        // uv data of a single face\n\n        const x0 = uvBuffer[i + 0];\n        const x1 = uvBuffer[i + 2];\n        const x2 = uvBuffer[i + 4];\n        const max = Math.max(x0, x1, x2);\n        const min = Math.min(x0, x1, x2);\n\n        // 0.9 is somewhat arbitrary\n\n        if (max > 0.9 && min < 0.1) {\n          if (x0 < 0.2) uvBuffer[i + 0] += 1;\n          if (x1 < 0.2) uvBuffer[i + 2] += 1;\n          if (x2 < 0.2) uvBuffer[i + 4] += 1;\n        }\n      }\n    }\n    function pushVertex(vertex) {\n      vertexBuffer.push(vertex.x, vertex.y, vertex.z);\n    }\n    function getVertexByIndex(index, vertex) {\n      const stride = index * 3;\n      vertex.x = vertices[stride + 0];\n      vertex.y = vertices[stride + 1];\n      vertex.z = vertices[stride + 2];\n    }\n    function correctUVs() {\n      const a = new Vector3();\n      const b = new Vector3();\n      const c = new Vector3();\n      const centroid = new Vector3();\n      const uvA = new Vector2();\n      const uvB = new Vector2();\n      const uvC = new Vector2();\n      for (let i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6) {\n        a.set(vertexBuffer[i + 0], vertexBuffer[i + 1], vertexBuffer[i + 2]);\n        b.set(vertexBuffer[i + 3], vertexBuffer[i + 4], vertexBuffer[i + 5]);\n        c.set(vertexBuffer[i + 6], vertexBuffer[i + 7], vertexBuffer[i + 8]);\n        uvA.set(uvBuffer[j + 0], uvBuffer[j + 1]);\n        uvB.set(uvBuffer[j + 2], uvBuffer[j + 3]);\n        uvC.set(uvBuffer[j + 4], uvBuffer[j + 5]);\n        centroid.copy(a).add(b).add(c).divideScalar(3);\n        const azi = azimuth(centroid);\n        correctUV(uvA, j + 0, a, azi);\n        correctUV(uvB, j + 2, b, azi);\n        correctUV(uvC, j + 4, c, azi);\n      }\n    }\n    function correctUV(uv, stride, vector, azimuth) {\n      if (azimuth < 0 && uv.x === 1) {\n        uvBuffer[stride] = uv.x - 1;\n      }\n      if (vector.x === 0 && vector.z === 0) {\n        uvBuffer[stride] = azimuth / 2 / Math.PI + 0.5;\n      }\n    }\n\n    // Angle around the Y axis, counter-clockwise when looking from above.\n\n    function azimuth(vector) {\n      return Math.atan2(vector.z, -vector.x);\n    }\n\n    // Angle above the XZ plane.\n\n    function inclination(vector) {\n      return Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));\n    }\n  }\n  copy(source) {\n    super.copy(source);\n    this.parameters = Object.assign({}, source.parameters);\n    return this;\n  }\n\n  /**\n   * Factory method for creating an instance of this class from the given\n   * JSON object.\n   *\n   * @param {Object} data - A JSON object representing the serialized geometry.\n   * @return {PolyhedronGeometry} A new instance.\n   */\n  static fromJSON(data) {\n    return new PolyhedronGeometry(data.vertices, data.indices, data.radius, data.details);\n  }\n}\n\n/**\n * A geometry class for representing a dodecahedron.\n *\n * ```js\n * const geometry = new THREE.DodecahedronGeometry();\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const dodecahedron = new THREE.Mesh( geometry, material );\n * scene.add( dodecahedron );\n * ```\n *\n * @augments PolyhedronGeometry\n */\nclass DodecahedronGeometry extends PolyhedronGeometry {\n  /**\n   * Constructs a new dodecahedron geometry.\n   *\n   * @param {number} [radius=1] - Radius of the dodecahedron.\n   * @param {number} [detail=0] - Setting this to a value greater than `0` adds vertices making it no longer a dodecahedron.\n   */\n  constructor() {\n    let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const t = (1 + Math.sqrt(5)) / 2;\n    const r = 1 / t;\n    const vertices = [\n    // (±1, ±1, ±1)\n    -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1,\n    // (0, ±1/φ, ±φ)\n    0, -r, -t, 0, -r, t, 0, r, -t, 0, r, t,\n    // (±1/φ, ±φ, 0)\n    -r, -t, 0, -r, t, 0, r, -t, 0, r, t, 0,\n    // (±φ, 0, ±1/φ)\n    -t, 0, -r, t, 0, -r, -t, 0, r, t, 0, r];\n    const indices = [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9];\n    super(vertices, indices, radius, detail);\n    this.type = 'DodecahedronGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      radius: radius,\n      detail: detail\n    };\n  }\n\n  /**\n   * Factory method for creating an instance of this class from the given\n   * JSON object.\n   *\n   * @param {Object} data - A JSON object representing the serialized geometry.\n   * @return {DodecahedronGeometry} A new instance.\n   */\n  static fromJSON(data) {\n    return new DodecahedronGeometry(data.radius, data.detail);\n  }\n}\nconst _v0 = /*@__PURE__*/new Vector3();\nconst _v1$1 = /*@__PURE__*/new Vector3();\nconst _normal = /*@__PURE__*/new Vector3();\nconst _triangle = /*@__PURE__*/new Triangle();\n\n/**\n * Can be used as a helper object to view the edges of a geometry.\n *\n * ```js\n * const geometry = new THREE.BoxGeometry();\n * const edges = new THREE.EdgesGeometry( geometry );\n * const line = new THREE.LineSegments( edges );\n * scene.add( line );\n * ```\n *\n * Note: It is not yet possible to serialize/deserialize instances of this class.\n *\n * @augments BufferGeometry\n */\nclass EdgesGeometry extends BufferGeometry {\n  /**\n   * Constructs a new edges geometry.\n   *\n   * @param {?BufferGeometry} [geometry=null] - The geometry.\n   * @param {number} [thresholdAngle=1] - An edge is only rendered if the angle (in degrees)\n   * between the face normals of the adjoining faces exceeds this value.\n   */\n  constructor() {\n    let geometry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let thresholdAngle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    super();\n    this.type = 'EdgesGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      geometry: geometry,\n      thresholdAngle: thresholdAngle\n    };\n    if (geometry !== null) {\n      const precisionPoints = 4;\n      const precision = Math.pow(10, precisionPoints);\n      const thresholdDot = Math.cos(DEG2RAD * thresholdAngle);\n      const indexAttr = geometry.getIndex();\n      const positionAttr = geometry.getAttribute('position');\n      const indexCount = indexAttr ? indexAttr.count : positionAttr.count;\n      const indexArr = [0, 0, 0];\n      const vertKeys = ['a', 'b', 'c'];\n      const hashes = new Array(3);\n      const edgeData = {};\n      const vertices = [];\n      for (let i = 0; i < indexCount; i += 3) {\n        if (indexAttr) {\n          indexArr[0] = indexAttr.getX(i);\n          indexArr[1] = indexAttr.getX(i + 1);\n          indexArr[2] = indexAttr.getX(i + 2);\n        } else {\n          indexArr[0] = i;\n          indexArr[1] = i + 1;\n          indexArr[2] = i + 2;\n        }\n        const {\n          a,\n          b,\n          c\n        } = _triangle;\n        a.fromBufferAttribute(positionAttr, indexArr[0]);\n        b.fromBufferAttribute(positionAttr, indexArr[1]);\n        c.fromBufferAttribute(positionAttr, indexArr[2]);\n        _triangle.getNormal(_normal);\n\n        // create hashes for the edge from the vertices\n        hashes[0] = `${Math.round(a.x * precision)},${Math.round(a.y * precision)},${Math.round(a.z * precision)}`;\n        hashes[1] = `${Math.round(b.x * precision)},${Math.round(b.y * precision)},${Math.round(b.z * precision)}`;\n        hashes[2] = `${Math.round(c.x * precision)},${Math.round(c.y * precision)},${Math.round(c.z * precision)}`;\n\n        // skip degenerate triangles\n        if (hashes[0] === hashes[1] || hashes[1] === hashes[2] || hashes[2] === hashes[0]) {\n          continue;\n        }\n\n        // iterate over every edge\n        for (let j = 0; j < 3; j++) {\n          // get the first and next vertex making up the edge\n          const jNext = (j + 1) % 3;\n          const vecHash0 = hashes[j];\n          const vecHash1 = hashes[jNext];\n          const v0 = _triangle[vertKeys[j]];\n          const v1 = _triangle[vertKeys[jNext]];\n          const hash = `${vecHash0}_${vecHash1}`;\n          const reverseHash = `${vecHash1}_${vecHash0}`;\n          if (reverseHash in edgeData && edgeData[reverseHash]) {\n            // if we found a sibling edge add it into the vertex array if\n            // it meets the angle threshold and delete the edge from the map.\n            if (_normal.dot(edgeData[reverseHash].normal) <= thresholdDot) {\n              vertices.push(v0.x, v0.y, v0.z);\n              vertices.push(v1.x, v1.y, v1.z);\n            }\n            edgeData[reverseHash] = null;\n          } else if (!(hash in edgeData)) {\n            // if we've already got an edge here then skip adding a new one\n            edgeData[hash] = {\n              index0: indexArr[j],\n              index1: indexArr[jNext],\n              normal: _normal.clone()\n            };\n          }\n        }\n      }\n\n      // iterate over all remaining, unmatched edges and add them to the vertex array\n      for (const key in edgeData) {\n        if (edgeData[key]) {\n          const {\n            index0,\n            index1\n          } = edgeData[key];\n          _v0.fromBufferAttribute(positionAttr, index0);\n          _v1$1.fromBufferAttribute(positionAttr, index1);\n          vertices.push(_v0.x, _v0.y, _v0.z);\n          vertices.push(_v1$1.x, _v1$1.y, _v1$1.z);\n        }\n      }\n      this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    }\n  }\n  copy(source) {\n    super.copy(source);\n    this.parameters = Object.assign({}, source.parameters);\n    return this;\n  }\n}\n\n/**\n * An abstract base class for creating an analytic curve object that contains methods\n * for interpolation.\n *\n * @abstract\n */\nclass Curve {\n  /**\n   * Constructs a new curve.\n   */\n  constructor() {\n    /**\n     * The type property is used for detecting the object type\n     * in context of serialization/deserialization.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.type = 'Curve';\n\n    /**\n     * This value determines the amount of divisions when calculating the\n     * cumulative segment lengths of a curve via {@link Curve#getLengths}. To ensure\n     * precision when using methods like {@link Curve#getSpacedPoints}, it is\n     * recommended to increase the value of this property if the curve is very large.\n     *\n     * @type {number}\n     * @default 200\n     */\n    this.arcLengthDivisions = 200;\n\n    /**\n     * Must be set to `true` if the curve parameters have changed.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.needsUpdate = false;\n\n    /**\n     * An internal cache that holds precomputed curve length values.\n     *\n     * @private\n     * @type {?Array<number>}\n     * @default null\n     */\n    this.cacheArcLengths = null;\n  }\n\n  /**\n   * This method returns a vector in 2D or 3D space (depending on the curve definition)\n   * for the given interpolation factor.\n   *\n   * @abstract\n   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n   * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.\n   * @return {(Vector2|Vector3)} The position on the curve. It can be a 2D or 3D vector depending on the curve definition.\n   */\n  getPoint(/* t, optionalTarget */\n  ) {\n    console.warn('THREE.Curve: .getPoint() not implemented.');\n  }\n\n  /**\n   * This method returns a vector in 2D or 3D space (depending on the curve definition)\n   * for the given interpolation factor. Unlike {@link Curve#getPoint}, this method honors the length\n   * of the curve which equidistant samples.\n   *\n   * @param {number} u - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n   * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.\n   * @return {(Vector2|Vector3)} The position on the curve. It can be a 2D or 3D vector depending on the curve definition.\n   */\n  getPointAt(u, optionalTarget) {\n    const t = this.getUtoTmapping(u);\n    return this.getPoint(t, optionalTarget);\n  }\n\n  /**\n   * This method samples the curve via {@link Curve#getPoint} and returns an array of points representing\n   * the curve shape.\n   *\n   * @param {number} [divisions=5] - The number of divisions.\n   * @return {Array<(Vector2|Vector3)>} An array holding the sampled curve values. The number of points is `divisions + 1`.\n   */\n  getPoints() {\n    let divisions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;\n    const points = [];\n    for (let d = 0; d <= divisions; d++) {\n      points.push(this.getPoint(d / divisions));\n    }\n    return points;\n  }\n\n  // Get sequence of points using getPointAt( u )\n\n  /**\n   * This method samples the curve via {@link Curve#getPointAt} and returns an array of points representing\n   * the curve shape. Unlike {@link Curve#getPoints}, this method returns equi-spaced points across the entire\n   * curve.\n   *\n   * @param {number} [divisions=5] - The number of divisions.\n   * @return {Array<(Vector2|Vector3)>} An array holding the sampled curve values. The number of points is `divisions + 1`.\n   */\n  getSpacedPoints() {\n    let divisions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;\n    const points = [];\n    for (let d = 0; d <= divisions; d++) {\n      points.push(this.getPointAt(d / divisions));\n    }\n    return points;\n  }\n\n  /**\n   * Returns the total arc length of the curve.\n   *\n   * @return {number} The length of the curve.\n   */\n  getLength() {\n    const lengths = this.getLengths();\n    return lengths[lengths.length - 1];\n  }\n\n  /**\n   * Returns an array of cumulative segment lengths of the curve.\n   *\n   * @param {number} [divisions=this.arcLengthDivisions] - The number of divisions.\n   * @return {Array<number>} An array holding the cumulative segment lengths.\n   */\n  getLengths() {\n    let divisions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.arcLengthDivisions;\n    if (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) {\n      return this.cacheArcLengths;\n    }\n    this.needsUpdate = false;\n    const cache = [];\n    let current,\n      last = this.getPoint(0);\n    let sum = 0;\n    cache.push(0);\n    for (let p = 1; p <= divisions; p++) {\n      current = this.getPoint(p / divisions);\n      sum += current.distanceTo(last);\n      cache.push(sum);\n      last = current;\n    }\n    this.cacheArcLengths = cache;\n    return cache; // { sums: cache, sum: sum }; Sum is in the last element.\n  }\n\n  /**\n   * Update the cumulative segment distance cache. The method must be called\n   * every time curve parameters are changed. If an updated curve is part of a\n   * composed curve like {@link CurvePath}, this method must be called on the\n   * composed curve, too.\n   */\n  updateArcLengths() {\n    this.needsUpdate = true;\n    this.getLengths();\n  }\n\n  /**\n   * Given an interpolation factor in the range `[0,1]`, this method returns an updated\n   * interpolation factor in the same range that can be ued to sample equidistant points\n   * from a curve.\n   *\n   * @param {number} u - The interpolation factor.\n   * @param {?number} distance - An optional distance on the curve.\n   * @return {number} The updated interpolation factor.\n   */\n  getUtoTmapping(u) {\n    let distance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const arcLengths = this.getLengths();\n    let i = 0;\n    const il = arcLengths.length;\n    let targetArcLength; // The targeted u distance value to get\n\n    if (distance) {\n      targetArcLength = distance;\n    } else {\n      targetArcLength = u * arcLengths[il - 1];\n    }\n\n    // binary search for the index with largest value smaller than target u distance\n\n    let low = 0,\n      high = il - 1,\n      comparison;\n    while (low <= high) {\n      i = Math.floor(low + (high - low) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n      comparison = arcLengths[i] - targetArcLength;\n      if (comparison < 0) {\n        low = i + 1;\n      } else if (comparison > 0) {\n        high = i - 1;\n      } else {\n        high = i;\n        break;\n\n        // DONE\n      }\n    }\n    i = high;\n    if (arcLengths[i] === targetArcLength) {\n      return i / (il - 1);\n    }\n\n    // we could get finer grain at lengths, or use simple interpolation between two points\n\n    const lengthBefore = arcLengths[i];\n    const lengthAfter = arcLengths[i + 1];\n    const segmentLength = lengthAfter - lengthBefore;\n\n    // determine where we are between the 'before' and 'after' points\n\n    const segmentFraction = (targetArcLength - lengthBefore) / segmentLength;\n\n    // add that fractional amount to t\n\n    const t = (i + segmentFraction) / (il - 1);\n    return t;\n  }\n\n  /**\n   * Returns a unit vector tangent for the given interpolation factor.\n   * If the derived curve does not implement its tangent derivation,\n   * two points a small delta apart will be used to find its gradient\n   * which seems to give a reasonable approximation.\n   *\n   * @param {number} t - The interpolation factor.\n   * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.\n   * @return {(Vector2|Vector3)} The tangent vector.\n   */\n  getTangent(t, optionalTarget) {\n    const delta = 0.0001;\n    let t1 = t - delta;\n    let t2 = t + delta;\n\n    // Capping in case of danger\n\n    if (t1 < 0) t1 = 0;\n    if (t2 > 1) t2 = 1;\n    const pt1 = this.getPoint(t1);\n    const pt2 = this.getPoint(t2);\n    const tangent = optionalTarget || (pt1.isVector2 ? new Vector2() : new Vector3());\n    tangent.copy(pt2).sub(pt1).normalize();\n    return tangent;\n  }\n\n  /**\n   * Same as {@link Curve#getTangent} but with equidistant samples.\n   *\n   * @param {number} u - The interpolation factor.\n   * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.\n   * @return {(Vector2|Vector3)} The tangent vector.\n   * @see {@link Curve#getPointAt}\n   */\n  getTangentAt(u, optionalTarget) {\n    const t = this.getUtoTmapping(u);\n    return this.getTangent(t, optionalTarget);\n  }\n\n  /**\n   * Generates the Frenet Frames. Requires a curve definition in 3D space. Used\n   * in geometries like {@link TubeGeometry} or {@link ExtrudeGeometry}.\n   *\n   * @param {number} segments - The number of segments.\n   * @param {boolean} [closed=false] - Whether the curve is closed or not.\n   * @return {{tangents: Array<Vector3>, normals: Array<Vector3>, binormals: Array<Vector3>}} The Frenet Frames.\n   */\n  computeFrenetFrames(segments) {\n    let closed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    // see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\n    const normal = new Vector3();\n    const tangents = [];\n    const normals = [];\n    const binormals = [];\n    const vec = new Vector3();\n    const mat = new Matrix4();\n\n    // compute the tangent vectors for each segment on the curve\n\n    for (let i = 0; i <= segments; i++) {\n      const u = i / segments;\n      tangents[i] = this.getTangentAt(u, new Vector3());\n    }\n\n    // select an initial normal vector perpendicular to the first tangent vector,\n    // and in the direction of the minimum tangent xyz component\n\n    normals[0] = new Vector3();\n    binormals[0] = new Vector3();\n    let min = Number.MAX_VALUE;\n    const tx = Math.abs(tangents[0].x);\n    const ty = Math.abs(tangents[0].y);\n    const tz = Math.abs(tangents[0].z);\n    if (tx <= min) {\n      min = tx;\n      normal.set(1, 0, 0);\n    }\n    if (ty <= min) {\n      min = ty;\n      normal.set(0, 1, 0);\n    }\n    if (tz <= min) {\n      normal.set(0, 0, 1);\n    }\n    vec.crossVectors(tangents[0], normal).normalize();\n    normals[0].crossVectors(tangents[0], vec);\n    binormals[0].crossVectors(tangents[0], normals[0]);\n\n    // compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n    for (let i = 1; i <= segments; i++) {\n      normals[i] = normals[i - 1].clone();\n      binormals[i] = binormals[i - 1].clone();\n      vec.crossVectors(tangents[i - 1], tangents[i]);\n      if (vec.length() > Number.EPSILON) {\n        vec.normalize();\n        const theta = Math.acos(clamp(tangents[i - 1].dot(tangents[i]), -1, 1)); // clamp for floating pt errors\n\n        normals[i].applyMatrix4(mat.makeRotationAxis(vec, theta));\n      }\n      binormals[i].crossVectors(tangents[i], normals[i]);\n    }\n\n    // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n    if (closed === true) {\n      let theta = Math.acos(clamp(normals[0].dot(normals[segments]), -1, 1));\n      theta /= segments;\n      if (tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0) {\n        theta = -theta;\n      }\n      for (let i = 1; i <= segments; i++) {\n        // twist a little...\n        normals[i].applyMatrix4(mat.makeRotationAxis(tangents[i], theta * i));\n        binormals[i].crossVectors(tangents[i], normals[i]);\n      }\n    }\n    return {\n      tangents: tangents,\n      normals: normals,\n      binormals: binormals\n    };\n  }\n\n  /**\n   * Returns a new curve with copied values from this instance.\n   *\n   * @return {Curve} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  /**\n   * Copies the values of the given curve to this instance.\n   *\n   * @param {Curve} source - The curve to copy.\n   * @return {Curve} A reference to this curve.\n   */\n  copy(source) {\n    this.arcLengthDivisions = source.arcLengthDivisions;\n    return this;\n  }\n\n  /**\n   * Serializes the curve into JSON.\n   *\n   * @return {Object} A JSON object representing the serialized curve.\n   * @see {@link ObjectLoader#parse}\n   */\n  toJSON() {\n    const data = {\n      metadata: {\n        version: 4.6,\n        type: 'Curve',\n        generator: 'Curve.toJSON'\n      }\n    };\n    data.arcLengthDivisions = this.arcLengthDivisions;\n    data.type = this.type;\n    return data;\n  }\n\n  /**\n   * Deserializes the curve from the given JSON.\n   *\n   * @param {Object} json - The JSON holding the serialized curve.\n   * @return {Curve} A reference to this curve.\n   */\n  fromJSON(json) {\n    this.arcLengthDivisions = json.arcLengthDivisions;\n    return this;\n  }\n}\n\n/**\n * A curve representing an ellipse.\n *\n * ```js\n * const curve = new THREE.EllipseCurve(\n * \t0, 0,\n * \t10, 10,\n * \t0, 2 * Math.PI,\n * \tfalse,\n * \t0\n * );\n *\n * const points = curve.getPoints( 50 );\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n *\n * const material = new THREE.LineBasicMaterial( { color: 0xff0000 } );\n *\n * // Create the final object to add to the scene\n * const ellipse = new THREE.Line( geometry, material );\n * ```\n *\n * @augments Curve\n */\nclass EllipseCurve extends Curve {\n  /**\n   * Constructs a new ellipse curve.\n   *\n   * @param {number} [aX=0] - The X center of the ellipse.\n   * @param {number} [aY=0] - The Y center of the ellipse.\n   * @param {number} [xRadius=1] - The radius of the ellipse in the x direction.\n   * @param {number} [yRadius=1] - The radius of the ellipse in the y direction.\n   * @param {number} [aStartAngle=0] - The start angle of the curve in radians starting from the positive X axis.\n   * @param {number} [aEndAngle=Math.PI*2] - The end angle of the curve in radians starting from the positive X axis.\n   * @param {boolean} [aClockwise=false] - Whether the ellipse is drawn clockwise or not.\n   * @param {number} [aRotation=0] - The rotation angle of the ellipse in radians, counterclockwise from the positive X axis.\n   */\n  constructor() {\n    let aX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let aY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let xRadius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let yRadius = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    let aStartAngle = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n    let aEndAngle = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Math.PI * 2;\n    let aClockwise = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    let aRotation = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isEllipseCurve = true;\n    this.type = 'EllipseCurve';\n\n    /**\n     * The X center of the ellipse.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.aX = aX;\n\n    /**\n     * The Y center of the ellipse.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.aY = aY;\n\n    /**\n     * The radius of the ellipse in the x direction.\n     * Setting the this value equal to the {@link EllipseCurve#yRadius} will result in a circle.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.xRadius = xRadius;\n\n    /**\n     * The radius of the ellipse in the y direction.\n     * Setting the this value equal to the {@link EllipseCurve#xRadius} will result in a circle.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.yRadius = yRadius;\n\n    /**\n     * The start angle of the curve in radians starting from the positive X axis.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.aStartAngle = aStartAngle;\n\n    /**\n     * The end angle of the curve in radians starting from the positive X axis.\n     *\n     * @type {number}\n     * @default Math.PI*2\n     */\n    this.aEndAngle = aEndAngle;\n\n    /**\n     * Whether the ellipse is drawn clockwise or not.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.aClockwise = aClockwise;\n\n    /**\n     * The rotation angle of the ellipse in radians, counterclockwise from the positive X axis.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.aRotation = aRotation;\n  }\n\n  /**\n   * Returns a point on the curve.\n   *\n   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n   * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.\n   * @return {Vector2} The position on the curve.\n   */\n  getPoint(t) {\n    let optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2();\n    const point = optionalTarget;\n    const twoPi = Math.PI * 2;\n    let deltaAngle = this.aEndAngle - this.aStartAngle;\n    const samePoints = Math.abs(deltaAngle) < Number.EPSILON;\n\n    // ensures that deltaAngle is 0 .. 2 PI\n    while (deltaAngle < 0) deltaAngle += twoPi;\n    while (deltaAngle > twoPi) deltaAngle -= twoPi;\n    if (deltaAngle < Number.EPSILON) {\n      if (samePoints) {\n        deltaAngle = 0;\n      } else {\n        deltaAngle = twoPi;\n      }\n    }\n    if (this.aClockwise === true && !samePoints) {\n      if (deltaAngle === twoPi) {\n        deltaAngle = -twoPi;\n      } else {\n        deltaAngle = deltaAngle - twoPi;\n      }\n    }\n    const angle = this.aStartAngle + t * deltaAngle;\n    let x = this.aX + this.xRadius * Math.cos(angle);\n    let y = this.aY + this.yRadius * Math.sin(angle);\n    if (this.aRotation !== 0) {\n      const cos = Math.cos(this.aRotation);\n      const sin = Math.sin(this.aRotation);\n      const tx = x - this.aX;\n      const ty = y - this.aY;\n\n      // Rotate the point about the center of the ellipse.\n      x = tx * cos - ty * sin + this.aX;\n      y = tx * sin + ty * cos + this.aY;\n    }\n    return point.set(x, y);\n  }\n  copy(source) {\n    super.copy(source);\n    this.aX = source.aX;\n    this.aY = source.aY;\n    this.xRadius = source.xRadius;\n    this.yRadius = source.yRadius;\n    this.aStartAngle = source.aStartAngle;\n    this.aEndAngle = source.aEndAngle;\n    this.aClockwise = source.aClockwise;\n    this.aRotation = source.aRotation;\n    return this;\n  }\n  toJSON() {\n    const data = super.toJSON();\n    data.aX = this.aX;\n    data.aY = this.aY;\n    data.xRadius = this.xRadius;\n    data.yRadius = this.yRadius;\n    data.aStartAngle = this.aStartAngle;\n    data.aEndAngle = this.aEndAngle;\n    data.aClockwise = this.aClockwise;\n    data.aRotation = this.aRotation;\n    return data;\n  }\n  fromJSON(json) {\n    super.fromJSON(json);\n    this.aX = json.aX;\n    this.aY = json.aY;\n    this.xRadius = json.xRadius;\n    this.yRadius = json.yRadius;\n    this.aStartAngle = json.aStartAngle;\n    this.aEndAngle = json.aEndAngle;\n    this.aClockwise = json.aClockwise;\n    this.aRotation = json.aRotation;\n    return this;\n  }\n}\n\n/**\n * A curve representing an arc.\n *\n * @augments EllipseCurve\n */\nclass ArcCurve extends EllipseCurve {\n  /**\n   * Constructs a new arc curve.\n   *\n   * @param {number} [aX=0] - The X center of the ellipse.\n   * @param {number} [aY=0] - The Y center of the ellipse.\n   * @param {number} [aRadius=1] - The radius of the ellipse in the x direction.\n   * @param {number} [aStartAngle=0] - The start angle of the curve in radians starting from the positive X axis.\n   * @param {number} [aEndAngle=Math.PI*2] - The end angle of the curve in radians starting from the positive X axis.\n   * @param {boolean} [aClockwise=false] - Whether the ellipse is drawn clockwise or not.\n   */\n  constructor(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n    super(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isArcCurve = true;\n    this.type = 'ArcCurve';\n  }\n}\nfunction CubicPoly() {\n  /**\n   * Centripetal CatmullRom Curve - which is useful for avoiding\n  * cusps and self-intersections in non-uniform catmull rom curves.\n  * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n  *\n  * curve.type accepts centripetal(default), chordal and catmullrom\n  * curve.tension is used for catmullrom which defaults to 0.5\n  */\n\n  /*\n  Based on an optimized c++ solution in\n  - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n  - http://ideone.com/NoEbVM\n  \tThis CubicPoly class could be used for reusing some variables and calculations,\n  but for three.js curve use, it could be possible inlined and flatten into a single function call\n  which can be placed in CurveUtils.\n  */\n\n  let c0 = 0,\n    c1 = 0,\n    c2 = 0,\n    c3 = 0;\n\n  /*\n   * Compute coefficients for a cubic polynomial\n   *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n   * such that\n   *   p(0) = x0, p(1) = x1\n   *  and\n   *   p'(0) = t0, p'(1) = t1.\n   */\n  function init(x0, x1, t0, t1) {\n    c0 = x0;\n    c1 = t0;\n    c2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;\n    c3 = 2 * x0 - 2 * x1 + t0 + t1;\n  }\n  return {\n    initCatmullRom: function (x0, x1, x2, x3, tension) {\n      init(x1, x2, tension * (x2 - x0), tension * (x3 - x1));\n    },\n    initNonuniformCatmullRom: function (x0, x1, x2, x3, dt0, dt1, dt2) {\n      // compute tangents when parameterized in [t1,t2]\n      let t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;\n      let t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2;\n\n      // rescale tangents for parametrization in [0,1]\n      t1 *= dt1;\n      t2 *= dt1;\n      init(x1, x2, t1, t2);\n    },\n    calc: function (t) {\n      const t2 = t * t;\n      const t3 = t2 * t;\n      return c0 + c1 * t + c2 * t2 + c3 * t3;\n    }\n  };\n}\n\n//\n\nconst tmp = /*@__PURE__*/new Vector3();\nconst px = /*@__PURE__*/new CubicPoly();\nconst py = /*@__PURE__*/new CubicPoly();\nconst pz = /*@__PURE__*/new CubicPoly();\n\n/**\n * A curve representing a Catmull-Rom spline.\n *\n * ```js\n * //Create a closed wavey loop\n * const curve = new THREE.CatmullRomCurve3( [\n * \tnew THREE.Vector3( -10, 0, 10 ),\n * \tnew THREE.Vector3( -5, 5, 5 ),\n * \tnew THREE.Vector3( 0, 0, 0 ),\n * \tnew THREE.Vector3( 5, -5, 5 ),\n * \tnew THREE.Vector3( 10, 0, 10 )\n * ] );\n *\n * const points = curve.getPoints( 50 );\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n *\n * const material = new THREE.LineBasicMaterial( { color: 0xff0000 } );\n *\n * // Create the final object to add to the scene\n * const curveObject = new THREE.Line( geometry, material );\n * ```\n *\n * @augments Curve\n */\nclass CatmullRomCurve3 extends Curve {\n  /**\n   * Constructs a new Catmull-Rom curve.\n   *\n   * @param {Array<Vector3>} [points] - An array of 3D points defining the curve.\n   * @param {boolean} [closed=false] - Whether the curve is closed or not.\n   * @param {('centripetal'|'chordal'|'catmullrom')} [curveType='centripetal'] - The curve type.\n   * @param {number} [tension=0.5] - Tension of the curve.\n   */\n  constructor() {\n    let points = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let closed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let curveType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'centripetal';\n    let tension = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.5;\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isCatmullRomCurve3 = true;\n    this.type = 'CatmullRomCurve3';\n\n    /**\n     * An array of 3D points defining the curve.\n     *\n     * @type {Array<Vector3>}\n     */\n    this.points = points;\n\n    /**\n     * Whether the curve is closed or not.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.closed = closed;\n\n    /**\n     * The curve type.\n     *\n     * @type {('centripetal'|'chordal'|'catmullrom')}\n     * @default 'centripetal'\n     */\n    this.curveType = curveType;\n\n    /**\n     * Tension of the curve.\n     *\n     * @type {number}\n     * @default 0.5\n     */\n    this.tension = tension;\n  }\n\n  /**\n   * Returns a point on the curve.\n   *\n   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n   * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n   * @return {Vector3} The position on the curve.\n   */\n  getPoint(t) {\n    let optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n    const point = optionalTarget;\n    const points = this.points;\n    const l = points.length;\n    const p = (l - (this.closed ? 0 : 1)) * t;\n    let intPoint = Math.floor(p);\n    let weight = p - intPoint;\n    if (this.closed) {\n      intPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;\n    } else if (weight === 0 && intPoint === l - 1) {\n      intPoint = l - 2;\n      weight = 1;\n    }\n    let p0, p3; // 4 points (p1 & p2 defined below)\n\n    if (this.closed || intPoint > 0) {\n      p0 = points[(intPoint - 1) % l];\n    } else {\n      // extrapolate first point\n      tmp.subVectors(points[0], points[1]).add(points[0]);\n      p0 = tmp;\n    }\n    const p1 = points[intPoint % l];\n    const p2 = points[(intPoint + 1) % l];\n    if (this.closed || intPoint + 2 < l) {\n      p3 = points[(intPoint + 2) % l];\n    } else {\n      // extrapolate last point\n      tmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);\n      p3 = tmp;\n    }\n    if (this.curveType === 'centripetal' || this.curveType === 'chordal') {\n      // init Centripetal / Chordal Catmull-Rom\n      const pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n      let dt0 = Math.pow(p0.distanceToSquared(p1), pow);\n      let dt1 = Math.pow(p1.distanceToSquared(p2), pow);\n      let dt2 = Math.pow(p2.distanceToSquared(p3), pow);\n\n      // safety check for repeated points\n      if (dt1 < 1e-4) dt1 = 1.0;\n      if (dt0 < 1e-4) dt0 = dt1;\n      if (dt2 < 1e-4) dt2 = dt1;\n      px.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);\n      py.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);\n      pz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);\n    } else if (this.curveType === 'catmullrom') {\n      px.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension);\n      py.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);\n      pz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension);\n    }\n    point.set(px.calc(weight), py.calc(weight), pz.calc(weight));\n    return point;\n  }\n  copy(source) {\n    super.copy(source);\n    this.points = [];\n    for (let i = 0, l = source.points.length; i < l; i++) {\n      const point = source.points[i];\n      this.points.push(point.clone());\n    }\n    this.closed = source.closed;\n    this.curveType = source.curveType;\n    this.tension = source.tension;\n    return this;\n  }\n  toJSON() {\n    const data = super.toJSON();\n    data.points = [];\n    for (let i = 0, l = this.points.length; i < l; i++) {\n      const point = this.points[i];\n      data.points.push(point.toArray());\n    }\n    data.closed = this.closed;\n    data.curveType = this.curveType;\n    data.tension = this.tension;\n    return data;\n  }\n  fromJSON(json) {\n    super.fromJSON(json);\n    this.points = [];\n    for (let i = 0, l = json.points.length; i < l; i++) {\n      const point = json.points[i];\n      this.points.push(new Vector3().fromArray(point));\n    }\n    this.closed = json.closed;\n    this.curveType = json.curveType;\n    this.tension = json.tension;\n    return this;\n  }\n}\n\n// Bezier Curves formulas obtained from: https://en.wikipedia.org/wiki/B%C3%A9zier_curve\n\n/**\n * Computes a point on a Catmull-Rom spline.\n *\n * @param {number} t - The interpolation factor.\n * @param {number} p0 - The first control point.\n * @param {number} p1 - The second control point.\n * @param {number} p2 - The third control point.\n * @param {number} p3 - The fourth control point.\n * @return {number} The calculated point on a Catmull-Rom spline.\n */\nfunction CatmullRom(t, p0, p1, p2, p3) {\n  const v0 = (p2 - p0) * 0.5;\n  const v1 = (p3 - p1) * 0.5;\n  const t2 = t * t;\n  const t3 = t * t2;\n  return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n}\n\n//\n\nfunction QuadraticBezierP0(t, p) {\n  const k = 1 - t;\n  return k * k * p;\n}\nfunction QuadraticBezierP1(t, p) {\n  return 2 * (1 - t) * t * p;\n}\nfunction QuadraticBezierP2(t, p) {\n  return t * t * p;\n}\n\n/**\n * Computes a point on a Quadratic Bezier curve.\n *\n * @param {number} t - The interpolation factor.\n * @param {number} p0 - The first control point.\n * @param {number} p1 - The second control point.\n * @param {number} p2 - The third control point.\n * @return {number} The calculated point on a Quadratic Bezier curve.\n */\nfunction QuadraticBezier(t, p0, p1, p2) {\n  return QuadraticBezierP0(t, p0) + QuadraticBezierP1(t, p1) + QuadraticBezierP2(t, p2);\n}\n\n//\n\nfunction CubicBezierP0(t, p) {\n  const k = 1 - t;\n  return k * k * k * p;\n}\nfunction CubicBezierP1(t, p) {\n  const k = 1 - t;\n  return 3 * k * k * t * p;\n}\nfunction CubicBezierP2(t, p) {\n  return 3 * (1 - t) * t * t * p;\n}\nfunction CubicBezierP3(t, p) {\n  return t * t * t * p;\n}\n\n/**\n * Computes a point on a Cubic Bezier curve.\n *\n * @param {number} t - The interpolation factor.\n * @param {number} p0 - The first control point.\n * @param {number} p1 - The second control point.\n * @param {number} p2 - The third control point.\n * @param {number} p3 - The fourth control point.\n * @return {number} The calculated point on a Cubic Bezier curve.\n */\nfunction CubicBezier(t, p0, p1, p2, p3) {\n  return CubicBezierP0(t, p0) + CubicBezierP1(t, p1) + CubicBezierP2(t, p2) + CubicBezierP3(t, p3);\n}\n\n/**\n * A curve representing a 2D Cubic Bezier curve.\n *\n * ```js\n * const curve = new THREE.CubicBezierCurve(\n * \tnew THREE.Vector2( - 0, 0 ),\n * \tnew THREE.Vector2( - 5, 15 ),\n * \tnew THREE.Vector2( 20, 15 ),\n * \tnew THREE.Vector2( 10, 0 )\n * );\n *\n * const points = curve.getPoints( 50 );\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n *\n * const material = new THREE.LineBasicMaterial( { color: 0xff0000 } );\n *\n * // Create the final object to add to the scene\n * const curveObject = new THREE.Line( geometry, material );\n * ```\n *\n * @augments Curve\n */\nclass CubicBezierCurve extends Curve {\n  /**\n   * Constructs a new Cubic Bezier curve.\n   *\n   * @param {Vector2} [v0] - The start point.\n   * @param {Vector2} [v1] - The first control point.\n   * @param {Vector2} [v2] - The second control point.\n   * @param {Vector2} [v3] - The end point.\n   */\n  constructor() {\n    let v0 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector2();\n    let v1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2();\n    let v2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Vector2();\n    let v3 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Vector2();\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isCubicBezierCurve = true;\n    this.type = 'CubicBezierCurve';\n\n    /**\n     * The start point.\n     *\n     * @type {Vector2}\n     */\n    this.v0 = v0;\n\n    /**\n     * The first control point.\n     *\n     * @type {Vector2}\n     */\n    this.v1 = v1;\n\n    /**\n     * The second control point.\n     *\n     * @type {Vector2}\n     */\n    this.v2 = v2;\n\n    /**\n     * The end point.\n     *\n     * @type {Vector2}\n     */\n    this.v3 = v3;\n  }\n\n  /**\n   * Returns a point on the curve.\n   *\n   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n   * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.\n   * @return {Vector2} The position on the curve.\n   */\n  getPoint(t) {\n    let optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2();\n    const point = optionalTarget;\n    const v0 = this.v0,\n      v1 = this.v1,\n      v2 = this.v2,\n      v3 = this.v3;\n    point.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y));\n    return point;\n  }\n  copy(source) {\n    super.copy(source);\n    this.v0.copy(source.v0);\n    this.v1.copy(source.v1);\n    this.v2.copy(source.v2);\n    this.v3.copy(source.v3);\n    return this;\n  }\n  toJSON() {\n    const data = super.toJSON();\n    data.v0 = this.v0.toArray();\n    data.v1 = this.v1.toArray();\n    data.v2 = this.v2.toArray();\n    data.v3 = this.v3.toArray();\n    return data;\n  }\n  fromJSON(json) {\n    super.fromJSON(json);\n    this.v0.fromArray(json.v0);\n    this.v1.fromArray(json.v1);\n    this.v2.fromArray(json.v2);\n    this.v3.fromArray(json.v3);\n    return this;\n  }\n}\n\n/**\n * A curve representing a 3D Cubic Bezier curve.\n *\n * @augments Curve\n */\nclass CubicBezierCurve3 extends Curve {\n  /**\n   * Constructs a new Cubic Bezier curve.\n   *\n   * @param {Vector3} [v0] - The start point.\n   * @param {Vector3} [v1] - The first control point.\n   * @param {Vector3} [v2] - The second control point.\n   * @param {Vector3} [v3] - The end point.\n   */\n  constructor() {\n    let v0 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3();\n    let v1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n    let v2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Vector3();\n    let v3 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Vector3();\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isCubicBezierCurve3 = true;\n    this.type = 'CubicBezierCurve3';\n\n    /**\n     * The start point.\n     *\n     * @type {Vector3}\n     */\n    this.v0 = v0;\n\n    /**\n     * The first control point.\n     *\n     * @type {Vector3}\n     */\n    this.v1 = v1;\n\n    /**\n     * The second control point.\n     *\n     * @type {Vector3}\n     */\n    this.v2 = v2;\n\n    /**\n     * The end point.\n     *\n     * @type {Vector3}\n     */\n    this.v3 = v3;\n  }\n\n  /**\n   * Returns a point on the curve.\n   *\n   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n   * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n   * @return {Vector3} The position on the curve.\n   */\n  getPoint(t) {\n    let optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n    const point = optionalTarget;\n    const v0 = this.v0,\n      v1 = this.v1,\n      v2 = this.v2,\n      v3 = this.v3;\n    point.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y), CubicBezier(t, v0.z, v1.z, v2.z, v3.z));\n    return point;\n  }\n  copy(source) {\n    super.copy(source);\n    this.v0.copy(source.v0);\n    this.v1.copy(source.v1);\n    this.v2.copy(source.v2);\n    this.v3.copy(source.v3);\n    return this;\n  }\n  toJSON() {\n    const data = super.toJSON();\n    data.v0 = this.v0.toArray();\n    data.v1 = this.v1.toArray();\n    data.v2 = this.v2.toArray();\n    data.v3 = this.v3.toArray();\n    return data;\n  }\n  fromJSON(json) {\n    super.fromJSON(json);\n    this.v0.fromArray(json.v0);\n    this.v1.fromArray(json.v1);\n    this.v2.fromArray(json.v2);\n    this.v3.fromArray(json.v3);\n    return this;\n  }\n}\n\n/**\n * A curve representing a 2D line segment.\n *\n * @augments Curve\n */\nclass LineCurve extends Curve {\n  /**\n   * Constructs a new line curve.\n   *\n   * @param {Vector2} [v1] - The start point.\n   * @param {Vector2} [v2] - The end point.\n   */\n  constructor() {\n    let v1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector2();\n    let v2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2();\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isLineCurve = true;\n    this.type = 'LineCurve';\n\n    /**\n     * The start point.\n     *\n     * @type {Vector2}\n     */\n    this.v1 = v1;\n\n    /**\n     * The end point.\n     *\n     * @type {Vector2}\n     */\n    this.v2 = v2;\n  }\n\n  /**\n   * Returns a point on the line.\n   *\n   * @param {number} t - A interpolation factor representing a position on the line. Must be in the range `[0,1]`.\n   * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.\n   * @return {Vector2} The position on the line.\n   */\n  getPoint(t) {\n    let optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2();\n    const point = optionalTarget;\n    if (t === 1) {\n      point.copy(this.v2);\n    } else {\n      point.copy(this.v2).sub(this.v1);\n      point.multiplyScalar(t).add(this.v1);\n    }\n    return point;\n  }\n\n  // Line curve is linear, so we can overwrite default getPointAt\n  getPointAt(u, optionalTarget) {\n    return this.getPoint(u, optionalTarget);\n  }\n  getTangent(t) {\n    let optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2();\n    return optionalTarget.subVectors(this.v2, this.v1).normalize();\n  }\n  getTangentAt(u, optionalTarget) {\n    return this.getTangent(u, optionalTarget);\n  }\n  copy(source) {\n    super.copy(source);\n    this.v1.copy(source.v1);\n    this.v2.copy(source.v2);\n    return this;\n  }\n  toJSON() {\n    const data = super.toJSON();\n    data.v1 = this.v1.toArray();\n    data.v2 = this.v2.toArray();\n    return data;\n  }\n  fromJSON(json) {\n    super.fromJSON(json);\n    this.v1.fromArray(json.v1);\n    this.v2.fromArray(json.v2);\n    return this;\n  }\n}\n\n/**\n * A curve representing a 3D line segment.\n *\n * @augments Curve\n */\nclass LineCurve3 extends Curve {\n  /**\n   * Constructs a new line curve.\n   *\n   * @param {Vector3} [v1] - The start point.\n   * @param {Vector3} [v2] - The end point.\n   */\n  constructor() {\n    let v1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3();\n    let v2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isLineCurve3 = true;\n    this.type = 'LineCurve3';\n\n    /**\n     * The start point.\n     *\n     * @type {Vector3}\n     */\n    this.v1 = v1;\n\n    /**\n     * The end point.\n     *\n     * @type {Vector2}\n     */\n    this.v2 = v2;\n  }\n\n  /**\n   * Returns a point on the line.\n   *\n   * @param {number} t - A interpolation factor representing a position on the line. Must be in the range `[0,1]`.\n   * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n   * @return {Vector3} The position on the line.\n   */\n  getPoint(t) {\n    let optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n    const point = optionalTarget;\n    if (t === 1) {\n      point.copy(this.v2);\n    } else {\n      point.copy(this.v2).sub(this.v1);\n      point.multiplyScalar(t).add(this.v1);\n    }\n    return point;\n  }\n\n  // Line curve is linear, so we can overwrite default getPointAt\n  getPointAt(u, optionalTarget) {\n    return this.getPoint(u, optionalTarget);\n  }\n  getTangent(t) {\n    let optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n    return optionalTarget.subVectors(this.v2, this.v1).normalize();\n  }\n  getTangentAt(u, optionalTarget) {\n    return this.getTangent(u, optionalTarget);\n  }\n  copy(source) {\n    super.copy(source);\n    this.v1.copy(source.v1);\n    this.v2.copy(source.v2);\n    return this;\n  }\n  toJSON() {\n    const data = super.toJSON();\n    data.v1 = this.v1.toArray();\n    data.v2 = this.v2.toArray();\n    return data;\n  }\n  fromJSON(json) {\n    super.fromJSON(json);\n    this.v1.fromArray(json.v1);\n    this.v2.fromArray(json.v2);\n    return this;\n  }\n}\n\n/**\n * A curve representing a 2D Quadratic Bezier curve.\n *\n * ```js\n * const curve = new THREE.QuadraticBezierCurve(\n * \tnew THREE.Vector2( - 10, 0 ),\n * \tnew THREE.Vector2( 20, 15 ),\n * \tnew THREE.Vector2( 10, 0 )\n * )\n *\n * const points = curve.getPoints( 50 );\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n *\n * const material = new THREE.LineBasicMaterial( { color: 0xff0000 } );\n *\n * // Create the final object to add to the scene\n * const curveObject = new THREE.Line( geometry, material );\n * ```\n *\n * @augments Curve\n */\nclass QuadraticBezierCurve extends Curve {\n  /**\n   * Constructs a new Quadratic Bezier curve.\n   *\n   * @param {Vector2} [v0] - The start point.\n   * @param {Vector2} [v1] - The control point.\n   * @param {Vector2} [v2] - The end point.\n   */\n  constructor() {\n    let v0 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector2();\n    let v1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2();\n    let v2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Vector2();\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isQuadraticBezierCurve = true;\n    this.type = 'QuadraticBezierCurve';\n\n    /**\n     * The start point.\n     *\n     * @type {Vector2}\n     */\n    this.v0 = v0;\n\n    /**\n     * The control point.\n     *\n     * @type {Vector2}\n     */\n    this.v1 = v1;\n\n    /**\n     * The end point.\n     *\n     * @type {Vector2}\n     */\n    this.v2 = v2;\n  }\n\n  /**\n   * Returns a point on the curve.\n   *\n   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n   * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.\n   * @return {Vector2} The position on the curve.\n   */\n  getPoint(t) {\n    let optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2();\n    const point = optionalTarget;\n    const v0 = this.v0,\n      v1 = this.v1,\n      v2 = this.v2;\n    point.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y));\n    return point;\n  }\n  copy(source) {\n    super.copy(source);\n    this.v0.copy(source.v0);\n    this.v1.copy(source.v1);\n    this.v2.copy(source.v2);\n    return this;\n  }\n  toJSON() {\n    const data = super.toJSON();\n    data.v0 = this.v0.toArray();\n    data.v1 = this.v1.toArray();\n    data.v2 = this.v2.toArray();\n    return data;\n  }\n  fromJSON(json) {\n    super.fromJSON(json);\n    this.v0.fromArray(json.v0);\n    this.v1.fromArray(json.v1);\n    this.v2.fromArray(json.v2);\n    return this;\n  }\n}\n\n/**\n * A curve representing a 3D Quadratic Bezier curve.\n *\n * @augments Curve\n */\nclass QuadraticBezierCurve3 extends Curve {\n  /**\n   * Constructs a new Quadratic Bezier curve.\n   *\n   * @param {Vector3} [v0] - The start point.\n   * @param {Vector3} [v1] - The control point.\n   * @param {Vector3} [v2] - The end point.\n   */\n  constructor() {\n    let v0 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3();\n    let v1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n    let v2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Vector3();\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isQuadraticBezierCurve3 = true;\n    this.type = 'QuadraticBezierCurve3';\n\n    /**\n     * The start point.\n     *\n     * @type {Vector3}\n     */\n    this.v0 = v0;\n\n    /**\n     * The control point.\n     *\n     * @type {Vector3}\n     */\n    this.v1 = v1;\n\n    /**\n     * The end point.\n     *\n     * @type {Vector3}\n     */\n    this.v2 = v2;\n  }\n\n  /**\n   * Returns a point on the curve.\n   *\n   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n   * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n   * @return {Vector3} The position on the curve.\n   */\n  getPoint(t) {\n    let optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n    const point = optionalTarget;\n    const v0 = this.v0,\n      v1 = this.v1,\n      v2 = this.v2;\n    point.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y), QuadraticBezier(t, v0.z, v1.z, v2.z));\n    return point;\n  }\n  copy(source) {\n    super.copy(source);\n    this.v0.copy(source.v0);\n    this.v1.copy(source.v1);\n    this.v2.copy(source.v2);\n    return this;\n  }\n  toJSON() {\n    const data = super.toJSON();\n    data.v0 = this.v0.toArray();\n    data.v1 = this.v1.toArray();\n    data.v2 = this.v2.toArray();\n    return data;\n  }\n  fromJSON(json) {\n    super.fromJSON(json);\n    this.v0.fromArray(json.v0);\n    this.v1.fromArray(json.v1);\n    this.v2.fromArray(json.v2);\n    return this;\n  }\n}\n\n/**\n * A curve representing a 2D spline curve.\n *\n * ```js\n * // Create a sine-like wave\n * const curve = new THREE.SplineCurve( [\n * \tnew THREE.Vector2( -10, 0 ),\n * \tnew THREE.Vector2( -5, 5 ),\n * \tnew THREE.Vector2( 0, 0 ),\n * \tnew THREE.Vector2( 5, -5 ),\n * \tnew THREE.Vector2( 10, 0 )\n * ] );\n *\n * const points = curve.getPoints( 50 );\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n *\n * const material = new THREE.LineBasicMaterial( { color: 0xff0000 } );\n *\n * // Create the final object to add to the scene\n * const splineObject = new THREE.Line( geometry, material );\n * ```\n *\n * @augments Curve\n */\nclass SplineCurve extends Curve {\n  /**\n   * Constructs a new 2D spline curve.\n   *\n   * @param {Array<Vector2>} [points] -  An array of 2D points defining the curve.\n   */\n  constructor() {\n    let points = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isSplineCurve = true;\n    this.type = 'SplineCurve';\n\n    /**\n     * An array of 2D points defining the curve.\n     *\n     * @type {Array<Vector2>}\n     */\n    this.points = points;\n  }\n\n  /**\n   * Returns a point on the curve.\n   *\n   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n   * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.\n   * @return {Vector2} The position on the curve.\n   */\n  getPoint(t) {\n    let optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2();\n    const point = optionalTarget;\n    const points = this.points;\n    const p = (points.length - 1) * t;\n    const intPoint = Math.floor(p);\n    const weight = p - intPoint;\n    const p0 = points[intPoint === 0 ? intPoint : intPoint - 1];\n    const p1 = points[intPoint];\n    const p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];\n    const p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];\n    point.set(CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));\n    return point;\n  }\n  copy(source) {\n    super.copy(source);\n    this.points = [];\n    for (let i = 0, l = source.points.length; i < l; i++) {\n      const point = source.points[i];\n      this.points.push(point.clone());\n    }\n    return this;\n  }\n  toJSON() {\n    const data = super.toJSON();\n    data.points = [];\n    for (let i = 0, l = this.points.length; i < l; i++) {\n      const point = this.points[i];\n      data.points.push(point.toArray());\n    }\n    return data;\n  }\n  fromJSON(json) {\n    super.fromJSON(json);\n    this.points = [];\n    for (let i = 0, l = json.points.length; i < l; i++) {\n      const point = json.points[i];\n      this.points.push(new Vector2().fromArray(point));\n    }\n    return this;\n  }\n}\nvar Curves = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ArcCurve: ArcCurve,\n  CatmullRomCurve3: CatmullRomCurve3,\n  CubicBezierCurve: CubicBezierCurve,\n  CubicBezierCurve3: CubicBezierCurve3,\n  EllipseCurve: EllipseCurve,\n  LineCurve: LineCurve,\n  LineCurve3: LineCurve3,\n  QuadraticBezierCurve: QuadraticBezierCurve,\n  QuadraticBezierCurve3: QuadraticBezierCurve3,\n  SplineCurve: SplineCurve\n});\n\n/**\n * A base class extending {@link Curve}. `CurvePath` is simply an\n * array of connected curves, but retains the API of a curve.\n *\n * @augments Curve\n */\nclass CurvePath extends Curve {\n  /**\n   * Constructs a new curve path.\n   */\n  constructor() {\n    super();\n    this.type = 'CurvePath';\n\n    /**\n     * An array of curves defining the\n     * path.\n     *\n     * @type {Array<Curve>}\n     */\n    this.curves = [];\n\n    /**\n     * Whether the path should automatically be closed\n     * by a line curve.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.autoClose = false;\n  }\n\n  /**\n   * Adds a curve to this curve path.\n   *\n   * @param {Curve} curve - The curve to add.\n   */\n  add(curve) {\n    this.curves.push(curve);\n  }\n\n  /**\n   * Adds a line curve to close the path.\n   *\n   * @return {CurvePath} A reference to this curve path.\n   */\n  closePath() {\n    // Add a line curve if start and end of lines are not connected\n    const startPoint = this.curves[0].getPoint(0);\n    const endPoint = this.curves[this.curves.length - 1].getPoint(1);\n    if (!startPoint.equals(endPoint)) {\n      const lineType = startPoint.isVector2 === true ? 'LineCurve' : 'LineCurve3';\n      this.curves.push(new Curves[lineType](endPoint, startPoint));\n    }\n    return this;\n  }\n\n  /**\n   * This method returns a vector in 2D or 3D space (depending on the curve definitions)\n   * for the given interpolation factor.\n   *\n   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n   * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.\n   * @return {?(Vector2|Vector3)} The position on the curve. It can be a 2D or 3D vector depending on the curve definition.\n   */\n  getPoint(t, optionalTarget) {\n    // To get accurate point with reference to\n    // entire path distance at time t,\n    // following has to be done:\n\n    // 1. Length of each sub path have to be known\n    // 2. Locate and identify type of curve\n    // 3. Get t for the curve\n    // 4. Return curve.getPointAt(t')\n\n    const d = t * this.getLength();\n    const curveLengths = this.getCurveLengths();\n    let i = 0;\n\n    // To think about boundaries points.\n\n    while (i < curveLengths.length) {\n      if (curveLengths[i] >= d) {\n        const diff = curveLengths[i] - d;\n        const curve = this.curves[i];\n        const segmentLength = curve.getLength();\n        const u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n        return curve.getPointAt(u, optionalTarget);\n      }\n      i++;\n    }\n    return null;\n\n    // loop where sum != 0, sum > d , sum+1 <d\n  }\n  getLength() {\n    // We cannot use the default THREE.Curve getPoint() with getLength() because in\n    // THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n    // getPoint() depends on getLength\n\n    const lens = this.getCurveLengths();\n    return lens[lens.length - 1];\n  }\n  updateArcLengths() {\n    // cacheLengths must be recalculated.\n\n    this.needsUpdate = true;\n    this.cacheLengths = null;\n    this.getCurveLengths();\n  }\n\n  /**\n   * Returns list of cumulative curve lengths of the defined curves.\n   *\n   * @return {Array<number>} The curve lengths.\n   */\n  getCurveLengths() {\n    // Compute lengths and cache them\n    // We cannot overwrite getLengths() because UtoT mapping uses it.\n    // We use cache values if curves and cache array are same length\n\n    if (this.cacheLengths && this.cacheLengths.length === this.curves.length) {\n      return this.cacheLengths;\n    }\n\n    // Get length of sub-curve\n    // Push sums into cached array\n\n    const lengths = [];\n    let sums = 0;\n    for (let i = 0, l = this.curves.length; i < l; i++) {\n      sums += this.curves[i].getLength();\n      lengths.push(sums);\n    }\n    this.cacheLengths = lengths;\n    return lengths;\n  }\n  getSpacedPoints() {\n    let divisions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 40;\n    const points = [];\n    for (let i = 0; i <= divisions; i++) {\n      points.push(this.getPoint(i / divisions));\n    }\n    if (this.autoClose) {\n      points.push(points[0]);\n    }\n    return points;\n  }\n  getPoints() {\n    let divisions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 12;\n    const points = [];\n    let last;\n    for (let i = 0, curves = this.curves; i < curves.length; i++) {\n      const curve = curves[i];\n      const resolution = curve.isEllipseCurve ? divisions * 2 : curve.isLineCurve || curve.isLineCurve3 ? 1 : curve.isSplineCurve ? divisions * curve.points.length : divisions;\n      const pts = curve.getPoints(resolution);\n      for (let j = 0; j < pts.length; j++) {\n        const point = pts[j];\n        if (last && last.equals(point)) continue; // ensures no consecutive points are duplicates\n\n        points.push(point);\n        last = point;\n      }\n    }\n    if (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) {\n      points.push(points[0]);\n    }\n    return points;\n  }\n  copy(source) {\n    super.copy(source);\n    this.curves = [];\n    for (let i = 0, l = source.curves.length; i < l; i++) {\n      const curve = source.curves[i];\n      this.curves.push(curve.clone());\n    }\n    this.autoClose = source.autoClose;\n    return this;\n  }\n  toJSON() {\n    const data = super.toJSON();\n    data.autoClose = this.autoClose;\n    data.curves = [];\n    for (let i = 0, l = this.curves.length; i < l; i++) {\n      const curve = this.curves[i];\n      data.curves.push(curve.toJSON());\n    }\n    return data;\n  }\n  fromJSON(json) {\n    super.fromJSON(json);\n    this.autoClose = json.autoClose;\n    this.curves = [];\n    for (let i = 0, l = json.curves.length; i < l; i++) {\n      const curve = json.curves[i];\n      this.curves.push(new Curves[curve.type]().fromJSON(curve));\n    }\n    return this;\n  }\n}\n\n/**\n * A 2D path representation. The class provides methods for creating paths\n * and contours of 2D shapes similar to the 2D Canvas API.\n *\n * ```js\n * const path = new THREE.Path();\n *\n * path.lineTo( 0, 0.8 );\n * path.quadraticCurveTo( 0, 1, 0.2, 1 );\n * path.lineTo( 1, 1 );\n *\n * const points = path.getPoints();\n *\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n * const material = new THREE.LineBasicMaterial( { color: 0xffffff } );\n *\n * const line = new THREE.Line( geometry, material );\n * scene.add( line );\n * ```\n *\n * @augments CurvePath\n */\nclass Path extends CurvePath {\n  /**\n   * Constructs a new path.\n   *\n   * @param {Array<Vector2>} [points] - An array of 2D points defining the path.\n   */\n  constructor(points) {\n    super();\n    this.type = 'Path';\n\n    /**\n     * The current offset of the path. Any new curve added will start here.\n     *\n     * @type {Vector2}\n     */\n    this.currentPoint = new Vector2();\n    if (points) {\n      this.setFromPoints(points);\n    }\n  }\n\n  /**\n   * Creates a path from the given list of points. The points are added\n   * to the path as instances of {@link LineCurve}.\n   *\n   * @param {Array<Vector2>} points - An array of 2D points.\n   * @return {Path} A reference to this path.\n   */\n  setFromPoints(points) {\n    this.moveTo(points[0].x, points[0].y);\n    for (let i = 1, l = points.length; i < l; i++) {\n      this.lineTo(points[i].x, points[i].y);\n    }\n    return this;\n  }\n\n  /**\n   * Moves {@link Path#currentPoint} to the given point.\n   *\n   * @param {number} x - The x coordinate.\n   * @param {number} y - The y coordinate.\n   * @return {Path} A reference to this path.\n   */\n  moveTo(x, y) {\n    this.currentPoint.set(x, y); // TODO consider referencing vectors instead of copying?\n\n    return this;\n  }\n\n  /**\n   * Adds an instance of {@link LineCurve} to the path by connecting\n   * the current point with the given one.\n   *\n   * @param {number} x - The x coordinate of the end point.\n   * @param {number} y - The y coordinate of the end point.\n   * @return {Path} A reference to this path.\n   */\n  lineTo(x, y) {\n    const curve = new LineCurve(this.currentPoint.clone(), new Vector2(x, y));\n    this.curves.push(curve);\n    this.currentPoint.set(x, y);\n    return this;\n  }\n\n  /**\n   * Adds an instance of {@link QuadraticBezierCurve} to the path by connecting\n   * the current point with the given one.\n   *\n   * @param {number} aCPx - The x coordinate of the control point.\n   * @param {number} aCPy - The y coordinate of the control point.\n   * @param {number} aX - The x coordinate of the end point.\n   * @param {number} aY - The y coordinate of the end point.\n   * @return {Path} A reference to this path.\n   */\n  quadraticCurveTo(aCPx, aCPy, aX, aY) {\n    const curve = new QuadraticBezierCurve(this.currentPoint.clone(), new Vector2(aCPx, aCPy), new Vector2(aX, aY));\n    this.curves.push(curve);\n    this.currentPoint.set(aX, aY);\n    return this;\n  }\n\n  /**\n   * Adds an instance of {@link CubicBezierCurve} to the path by connecting\n   * the current point with the given one.\n   *\n   * @param {number} aCP1x - The x coordinate of the first control point.\n   * @param {number} aCP1y - The y coordinate of the first control point.\n   * @param {number} aCP2x - The x coordinate of the second control point.\n   * @param {number} aCP2y - The y coordinate of the second control point.\n   * @param {number} aX - The x coordinate of the end point.\n   * @param {number} aY - The y coordinate of the end point.\n   * @return {Path} A reference to this path.\n   */\n  bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n    const curve = new CubicBezierCurve(this.currentPoint.clone(), new Vector2(aCP1x, aCP1y), new Vector2(aCP2x, aCP2y), new Vector2(aX, aY));\n    this.curves.push(curve);\n    this.currentPoint.set(aX, aY);\n    return this;\n  }\n\n  /**\n   * Adds an instance of {@link SplineCurve} to the path by connecting\n   * the current point with the given list of points.\n   *\n   * @param {Array<Vector2>} pts - An array of points in 2D space.\n   * @return {Path} A reference to this path.\n   */\n  splineThru(pts) {\n    const npts = [this.currentPoint.clone()].concat(pts);\n    const curve = new SplineCurve(npts);\n    this.curves.push(curve);\n    this.currentPoint.copy(pts[pts.length - 1]);\n    return this;\n  }\n\n  /**\n   * Adds an arc as an instance of {@link EllipseCurve} to the path, positioned relative\n   * to the current point.\n   *\n   * @param {number} aX - The x coordinate of the center of the arc offsetted from the previous curve.\n   * @param {number} aY - The y coordinate of the center of the arc offsetted from the previous curve.\n   * @param {number} aRadius - The radius of the arc.\n   * @param {number} aStartAngle - The start angle in radians.\n   * @param {number} aEndAngle - The end angle in radians.\n   * @param {boolean} [aClockwise=false] - Whether to sweep the arc clockwise or not.\n   * @return {Path} A reference to this path.\n   */\n  arc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n    const x0 = this.currentPoint.x;\n    const y0 = this.currentPoint.y;\n    this.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);\n    return this;\n  }\n\n  /**\n   * Adds an absolutely positioned arc as an instance of {@link EllipseCurve} to the path.\n   *\n   * @param {number} aX - The x coordinate of the center of the arc.\n   * @param {number} aY - The y coordinate of the center of the arc.\n   * @param {number} aRadius - The radius of the arc.\n   * @param {number} aStartAngle - The start angle in radians.\n   * @param {number} aEndAngle - The end angle in radians.\n   * @param {boolean} [aClockwise=false] - Whether to sweep the arc clockwise or not.\n   * @return {Path} A reference to this path.\n   */\n  absarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n    this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n    return this;\n  }\n\n  /**\n   * Adds an ellipse as an instance of {@link EllipseCurve} to the path, positioned relative\n   * to the current point\n   *\n   * @param {number} aX - The x coordinate of the center of the ellipse offsetted from the previous curve.\n   * @param {number} aY - The y coordinate of the center of the ellipse offsetted from the previous curve.\n   * @param {number} xRadius - The radius of the ellipse in the x axis.\n   * @param {number} yRadius - The radius of the ellipse in the y axis.\n   * @param {number} aStartAngle - The start angle in radians.\n   * @param {number} aEndAngle - The end angle in radians.\n   * @param {boolean} [aClockwise=false] - Whether to sweep the ellipse clockwise or not.\n   * @param {number} [aRotation=0] - The rotation angle of the ellipse in radians, counterclockwise from the positive X axis.\n   * @return {Path} A reference to this path.\n   */\n  ellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n    const x0 = this.currentPoint.x;\n    const y0 = this.currentPoint.y;\n    this.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n    return this;\n  }\n\n  /**\n   * Adds an absolutely positioned ellipse as an instance of {@link EllipseCurve} to the path.\n   *\n   * @param {number} aX - The x coordinate of the absolute center of the ellipse.\n   * @param {number} aY - The y coordinate of the absolute center of the ellipse.\n   * @param {number} xRadius - The radius of the ellipse in the x axis.\n   * @param {number} yRadius - The radius of the ellipse in the y axis.\n   * @param {number} aStartAngle - The start angle in radians.\n   * @param {number} aEndAngle - The end angle in radians.\n   * @param {boolean} [aClockwise=false] - Whether to sweep the ellipse clockwise or not.\n   * @param {number} [aRotation=0] - The rotation angle of the ellipse in radians, counterclockwise from the positive X axis.\n   * @return {Path} A reference to this path.\n   */\n  absellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n    const curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n    if (this.curves.length > 0) {\n      // if a previous curve is present, attempt to join\n      const firstPoint = curve.getPoint(0);\n      if (!firstPoint.equals(this.currentPoint)) {\n        this.lineTo(firstPoint.x, firstPoint.y);\n      }\n    }\n    this.curves.push(curve);\n    const lastPoint = curve.getPoint(1);\n    this.currentPoint.copy(lastPoint);\n    return this;\n  }\n  copy(source) {\n    super.copy(source);\n    this.currentPoint.copy(source.currentPoint);\n    return this;\n  }\n  toJSON() {\n    const data = super.toJSON();\n    data.currentPoint = this.currentPoint.toArray();\n    return data;\n  }\n  fromJSON(json) {\n    super.fromJSON(json);\n    this.currentPoint.fromArray(json.currentPoint);\n    return this;\n  }\n}\n\n/**\n * Defines an arbitrary 2d shape plane using paths with optional holes. It\n * can be used with {@link ExtrudeGeometry}, {@link ShapeGeometry}, to get\n * points, or to get triangulated faces.\n *\n * ```js\n * const heartShape = new THREE.Shape();\n *\n * heartShape.moveTo( 25, 25 );\n * heartShape.bezierCurveTo( 25, 25, 20, 0, 0, 0 );\n * heartShape.bezierCurveTo( - 30, 0, - 30, 35, - 30, 35 );\n * heartShape.bezierCurveTo( - 30, 55, - 10, 77, 25, 95 );\n * heartShape.bezierCurveTo( 60, 77, 80, 55, 80, 35 );\n * heartShape.bezierCurveTo( 80, 35, 80, 0, 50, 0 );\n * heartShape.bezierCurveTo( 35, 0, 25, 25, 25, 25 );\n *\n * const extrudeSettings = {\n * \tdepth: 8,\n * \tbevelEnabled: true,\n * \tbevelSegments: 2,\n * \tsteps: 2,\n * \tbevelSize: 1,\n * \tbevelThickness: 1\n * };\n *\n * const geometry = new THREE.ExtrudeGeometry( heartShape, extrudeSettings );\n * const mesh = new THREE.Mesh( geometry, new THREE.MeshBasicMaterial() );\n * ```\n *\n * @augments Path\n */\nclass Shape extends Path {\n  /**\n   * Constructs a new shape.\n   *\n   * @param {Array<Vector2>} [points] - An array of 2D points defining the shape.\n   */\n  constructor(points) {\n    super(points);\n\n    /**\n     * The UUID of the shape.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.uuid = generateUUID();\n    this.type = 'Shape';\n\n    /**\n     * Defines the holes in the shape. Hole definitions must use the\n     * opposite winding order (CW/CCW) than the outer shape.\n     *\n     * @type {Array<Path>}\n     * @readonly\n     */\n    this.holes = [];\n  }\n\n  /**\n   * Returns an array representing each contour of the holes\n   * as a list of 2D points.\n   *\n   * @param {number} divisions - The fineness of the result.\n   * @return {Array<Array<Vector2>>} The holes as a series of 2D points.\n   */\n  getPointsHoles(divisions) {\n    const holesPts = [];\n    for (let i = 0, l = this.holes.length; i < l; i++) {\n      holesPts[i] = this.holes[i].getPoints(divisions);\n    }\n    return holesPts;\n  }\n\n  // get points of shape and holes (keypoints based on segments parameter)\n\n  /**\n   * Returns an object that holds contour data for the shape and its holes as\n   * arrays of 2D points.\n   *\n   * @param {number} divisions - The fineness of the result.\n   * @return {{shape:Array<Vector2>,holes:Array<Array<Vector2>>}} An object with contour data.\n   */\n  extractPoints(divisions) {\n    return {\n      shape: this.getPoints(divisions),\n      holes: this.getPointsHoles(divisions)\n    };\n  }\n  copy(source) {\n    super.copy(source);\n    this.holes = [];\n    for (let i = 0, l = source.holes.length; i < l; i++) {\n      const hole = source.holes[i];\n      this.holes.push(hole.clone());\n    }\n    return this;\n  }\n  toJSON() {\n    const data = super.toJSON();\n    data.uuid = this.uuid;\n    data.holes = [];\n    for (let i = 0, l = this.holes.length; i < l; i++) {\n      const hole = this.holes[i];\n      data.holes.push(hole.toJSON());\n    }\n    return data;\n  }\n  fromJSON(json) {\n    super.fromJSON(json);\n    this.uuid = json.uuid;\n    this.holes = [];\n    for (let i = 0, l = json.holes.length; i < l; i++) {\n      const hole = json.holes[i];\n      this.holes.push(new Path().fromJSON(hole));\n    }\n    return this;\n  }\n}\n\n/* eslint-disable */\n// copy of mapbox/earcut version 3.0.1\n// https://github.com/mapbox/earcut/tree/v3.0.1\n\nfunction earcut(data, holeIndices) {\n  let dim = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;\n  const hasHoles = holeIndices && holeIndices.length;\n  const outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n  let outerNode = linkedList(data, 0, outerLen, dim, true);\n  const triangles = [];\n  if (!outerNode || outerNode.next === outerNode.prev) return triangles;\n  let minX, minY, invSize;\n  if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\n\n  // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n  if (data.length > 80 * dim) {\n    minX = Infinity;\n    minY = Infinity;\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n    for (let i = dim; i < outerLen; i += dim) {\n      const x = data[i];\n      const y = data[i + 1];\n      if (x < minX) minX = x;\n      if (y < minY) minY = y;\n      if (x > maxX) maxX = x;\n      if (y > maxY) maxY = y;\n    }\n\n    // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n    invSize = Math.max(maxX - minX, maxY - minY);\n    invSize = invSize !== 0 ? 32767 / invSize : 0;\n  }\n  earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);\n  return triangles;\n}\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList(data, start, end, dim, clockwise) {\n  let last;\n  if (clockwise === signedArea(data, start, end, dim) > 0) {\n    for (let i = start; i < end; i += dim) last = insertNode(i / dim | 0, data[i], data[i + 1], last);\n  } else {\n    for (let i = end - dim; i >= start; i -= dim) last = insertNode(i / dim | 0, data[i], data[i + 1], last);\n  }\n  if (last && equals(last, last.next)) {\n    removeNode(last);\n    last = last.next;\n  }\n  return last;\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints(start, end) {\n  if (!start) return start;\n  if (!end) end = start;\n  let p = start,\n    again;\n  do {\n    again = false;\n    if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n      removeNode(p);\n      p = end = p.prev;\n      if (p === p.next) break;\n      again = true;\n    } else {\n      p = p.next;\n    }\n  } while (again || p !== end);\n  return end;\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n  if (!ear) return;\n\n  // interlink polygon nodes in z-order\n  if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n  let stop = ear;\n\n  // iterate through ears, slicing them one by one\n  while (ear.prev !== ear.next) {\n    const prev = ear.prev;\n    const next = ear.next;\n    if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n      triangles.push(prev.i, ear.i, next.i); // cut off the triangle\n\n      removeNode(ear);\n\n      // skipping the next vertex leads to less sliver triangles\n      ear = next.next;\n      stop = next.next;\n      continue;\n    }\n    ear = next;\n\n    // if we looped through the whole remaining polygon and can't find any more ears\n    if (ear === stop) {\n      // try filtering points and slicing again\n      if (!pass) {\n        earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\n\n        // if this didn't work, try curing all small self-intersections locally\n      } else if (pass === 1) {\n        ear = cureLocalIntersections(filterPoints(ear), triangles);\n        earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\n\n        // as a last resort, try splitting the remaining polygon into two\n      } else if (pass === 2) {\n        splitEarcut(ear, triangles, dim, minX, minY, invSize);\n      }\n      break;\n    }\n  }\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar(ear) {\n  const a = ear.prev,\n    b = ear,\n    c = ear.next;\n  if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n  // now make sure we don't have other points inside the potential ear\n  const ax = a.x,\n    bx = b.x,\n    cx = c.x,\n    ay = a.y,\n    by = b.y,\n    cy = c.y;\n\n  // triangle bbox\n  const x0 = Math.min(ax, bx, cx),\n    y0 = Math.min(ay, by, cy),\n    x1 = Math.max(ax, bx, cx),\n    y1 = Math.max(ay, by, cy);\n  let p = c.next;\n  while (p !== a) {\n    if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n    p = p.next;\n  }\n  return true;\n}\nfunction isEarHashed(ear, minX, minY, invSize) {\n  const a = ear.prev,\n    b = ear,\n    c = ear.next;\n  if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n  const ax = a.x,\n    bx = b.x,\n    cx = c.x,\n    ay = a.y,\n    by = b.y,\n    cy = c.y;\n\n  // triangle bbox\n  const x0 = Math.min(ax, bx, cx),\n    y0 = Math.min(ay, by, cy),\n    x1 = Math.max(ax, bx, cx),\n    y1 = Math.max(ay, by, cy);\n\n  // z-order range for the current triangle bbox;\n  const minZ = zOrder(x0, y0, minX, minY, invSize),\n    maxZ = zOrder(x1, y1, minX, minY, invSize);\n  let p = ear.prevZ,\n    n = ear.nextZ;\n\n  // look for points inside the triangle in both directions\n  while (p && p.z >= minZ && n && n.z <= maxZ) {\n    if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c && pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n    p = p.prevZ;\n    if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c && pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n    n = n.nextZ;\n  }\n\n  // look for remaining points in decreasing z-order\n  while (p && p.z >= minZ) {\n    if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c && pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n    p = p.prevZ;\n  }\n\n  // look for remaining points in increasing z-order\n  while (n && n.z <= maxZ) {\n    if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c && pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n    n = n.nextZ;\n  }\n  return true;\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections(start, triangles) {\n  let p = start;\n  do {\n    const a = p.prev,\n      b = p.next.next;\n    if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n      triangles.push(a.i, p.i, b.i);\n\n      // remove two nodes involved\n      removeNode(p);\n      removeNode(p.next);\n      p = start = b;\n    }\n    p = p.next;\n  } while (p !== start);\n  return filterPoints(p);\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n  // look for a valid diagonal that divides the polygon into two\n  let a = start;\n  do {\n    let b = a.next.next;\n    while (b !== a.prev) {\n      if (a.i !== b.i && isValidDiagonal(a, b)) {\n        // split the polygon in two by the diagonal\n        let c = splitPolygon(a, b);\n\n        // filter colinear points around the cuts\n        a = filterPoints(a, a.next);\n        c = filterPoints(c, c.next);\n\n        // run earcut on each half\n        earcutLinked(a, triangles, dim, minX, minY, invSize, 0);\n        earcutLinked(c, triangles, dim, minX, minY, invSize, 0);\n        return;\n      }\n      b = b.next;\n    }\n    a = a.next;\n  } while (a !== start);\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n  const queue = [];\n  for (let i = 0, len = holeIndices.length; i < len; i++) {\n    const start = holeIndices[i] * dim;\n    const end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n    const list = linkedList(data, start, end, dim, false);\n    if (list === list.next) list.steiner = true;\n    queue.push(getLeftmost(list));\n  }\n  queue.sort(compareXYSlope);\n\n  // process holes from left to right\n  for (let i = 0; i < queue.length; i++) {\n    outerNode = eliminateHole(queue[i], outerNode);\n  }\n  return outerNode;\n}\nfunction compareXYSlope(a, b) {\n  let result = a.x - b.x;\n  // when the left-most point of 2 holes meet at a vertex, sort the holes counterclockwise so that when we find\n  // the bridge to the outer shell is always the point that they meet at.\n  if (result === 0) {\n    result = a.y - b.y;\n    if (result === 0) {\n      const aSlope = (a.next.y - a.y) / (a.next.x - a.x);\n      const bSlope = (b.next.y - b.y) / (b.next.x - b.x);\n      result = aSlope - bSlope;\n    }\n  }\n  return result;\n}\n\n// find a bridge between vertices that connects hole with an outer ring and and link it\nfunction eliminateHole(hole, outerNode) {\n  const bridge = findHoleBridge(hole, outerNode);\n  if (!bridge) {\n    return outerNode;\n  }\n  const bridgeReverse = splitPolygon(bridge, hole);\n\n  // filter collinear points around the cuts\n  filterPoints(bridgeReverse, bridgeReverse.next);\n  return filterPoints(bridge, bridge.next);\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge(hole, outerNode) {\n  let p = outerNode;\n  const hx = hole.x;\n  const hy = hole.y;\n  let qx = -Infinity;\n  let m;\n\n  // find a segment intersected by a ray from the hole's leftmost point to the left;\n  // segment's endpoint with lesser x will be potential connection point\n  // unless they intersect at a vertex, then choose the vertex\n  if (equals(hole, p)) return p;\n  do {\n    if (equals(hole, p.next)) return p.next;else if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n      const x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n      if (x <= hx && x > qx) {\n        qx = x;\n        m = p.x < p.next.x ? p : p.next;\n        if (x === hx) return m; // hole touches outer segment; pick leftmost endpoint\n      }\n    }\n    p = p.next;\n  } while (p !== outerNode);\n  if (!m) return null;\n\n  // look for points inside the triangle of hole point, segment intersection and endpoint;\n  // if there are no points found, we have a valid connection;\n  // otherwise choose the point of the minimum angle with the ray as connection point\n\n  const stop = m;\n  const mx = m.x;\n  const my = m.y;\n  let tanMin = Infinity;\n  p = m;\n  do {\n    if (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n      const tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n      if (locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {\n        m = p;\n        tanMin = tan;\n      }\n    }\n    p = p.next;\n  } while (p !== stop);\n  return m;\n}\n\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector(m, p) {\n  return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve(start, minX, minY, invSize) {\n  let p = start;\n  do {\n    if (p.z === 0) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n    p.prevZ = p.prev;\n    p.nextZ = p.next;\n    p = p.next;\n  } while (p !== start);\n  p.prevZ.nextZ = null;\n  p.prevZ = null;\n  sortLinked(p);\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked(list) {\n  let numMerges;\n  let inSize = 1;\n  do {\n    let p = list;\n    let e;\n    list = null;\n    let tail = null;\n    numMerges = 0;\n    while (p) {\n      numMerges++;\n      let q = p;\n      let pSize = 0;\n      for (let i = 0; i < inSize; i++) {\n        pSize++;\n        q = q.nextZ;\n        if (!q) break;\n      }\n      let qSize = inSize;\n      while (pSize > 0 || qSize > 0 && q) {\n        if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n          e = p;\n          p = p.nextZ;\n          pSize--;\n        } else {\n          e = q;\n          q = q.nextZ;\n          qSize--;\n        }\n        if (tail) tail.nextZ = e;else list = e;\n        e.prevZ = tail;\n        tail = e;\n      }\n      p = q;\n    }\n    tail.nextZ = null;\n    inSize *= 2;\n  } while (numMerges > 1);\n  return list;\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder(x, y, minX, minY, invSize) {\n  // coords are transformed into non-negative 15-bit integer range\n  x = (x - minX) * invSize | 0;\n  y = (y - minY) * invSize | 0;\n  x = (x | x << 8) & 0x00FF00FF;\n  x = (x | x << 4) & 0x0F0F0F0F;\n  x = (x | x << 2) & 0x33333333;\n  x = (x | x << 1) & 0x55555555;\n  y = (y | y << 8) & 0x00FF00FF;\n  y = (y | y << 4) & 0x0F0F0F0F;\n  y = (y | y << 2) & 0x33333333;\n  y = (y | y << 1) & 0x55555555;\n  return x | y << 1;\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost(start) {\n  let p = start,\n    leftmost = start;\n  do {\n    if (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y) leftmost = p;\n    p = p.next;\n  } while (p !== start);\n  return leftmost;\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n  return (cx - px) * (ay - py) >= (ax - px) * (cy - py) && (ax - px) * (by - py) >= (bx - px) * (ay - py) && (bx - px) * (cy - py) >= (cx - px) * (by - py);\n}\n\n// check if a point lies within a convex triangle but false if its equal to the first point of the triangle\nfunction pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, px, py) {\n  return !(ax === px && ay === py) && pointInTriangle(ax, ay, bx, by, cx, cy, px, py);\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal(a, b) {\n  return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && (\n  // dones't intersect other edges\n  locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && (\n  // locally visible\n  area(a.prev, a, b.prev) || area(a, b.prev, b)) ||\n  // does not create opposite-facing sectors\n  equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n}\n\n// signed area of a triangle\nfunction area(p, q, r) {\n  return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n}\n\n// check if two points are equal\nfunction equals(p1, p2) {\n  return p1.x === p2.x && p1.y === p2.y;\n}\n\n// check if two segments intersect\nfunction intersects(p1, q1, p2, q2) {\n  const o1 = sign(area(p1, q1, p2));\n  const o2 = sign(area(p1, q1, q2));\n  const o3 = sign(area(p2, q2, p1));\n  const o4 = sign(area(p2, q2, q1));\n  if (o1 !== o2 && o3 !== o4) return true; // general case\n\n  if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n  if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n  if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n  if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n  return false;\n}\n\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment(p, q, r) {\n  return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n}\nfunction sign(num) {\n  return num > 0 ? 1 : num < 0 ? -1 : 0;\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon(a, b) {\n  let p = a;\n  do {\n    if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) return true;\n    p = p.next;\n  } while (p !== a);\n  return false;\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside(a, b) {\n  return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside(a, b) {\n  let p = a;\n  let inside = false;\n  const px = (a.x + b.x) / 2;\n  const py = (a.y + b.y) / 2;\n  do {\n    if (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) inside = !inside;\n    p = p.next;\n  } while (p !== a);\n  return inside;\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon(a, b) {\n  const a2 = createNode(a.i, a.x, a.y),\n    b2 = createNode(b.i, b.x, b.y),\n    an = a.next,\n    bp = b.prev;\n  a.next = b;\n  b.prev = a;\n  a2.next = an;\n  an.prev = a2;\n  b2.next = a2;\n  a2.prev = b2;\n  bp.next = b2;\n  b2.prev = bp;\n  return b2;\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode(i, x, y, last) {\n  const p = createNode(i, x, y);\n  if (!last) {\n    p.prev = p;\n    p.next = p;\n  } else {\n    p.next = last.next;\n    p.prev = last;\n    last.next.prev = p;\n    last.next = p;\n  }\n  return p;\n}\nfunction removeNode(p) {\n  p.next.prev = p.prev;\n  p.prev.next = p.next;\n  if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n  if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n}\nfunction createNode(i, x, y) {\n  return {\n    i,\n    // vertex index in coordinates array\n    x,\n    y,\n    // vertex coordinates\n    prev: null,\n    // previous and next vertex nodes in a polygon ring\n    next: null,\n    z: 0,\n    // z-order curve value\n    prevZ: null,\n    // previous and next nodes in z-order\n    nextZ: null,\n    steiner: false // indicates whether this is a steiner point\n  };\n}\nfunction signedArea(data, start, end, dim) {\n  let sum = 0;\n  for (let i = start, j = end - dim; i < end; i += dim) {\n    sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n    j = i;\n  }\n  return sum;\n}\nclass Earcut {\n  /**\n   * Triangulates the given shape definition by returning an array of triangles.\n   *\n   * @param {Array<number>} data - An array with 2D points.\n   * @param {Array<number>} holeIndices - An array with indices defining holes.\n   * @param {number} [dim=2] - The number of coordinates per vertex in the input array.\n   * @return {Array<number>} An array representing the triangulated faces. Each face is defined by three consecutive numbers\n   * representing vertex indices.\n   */\n  static triangulate(data, holeIndices) {\n    let dim = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;\n    return earcut(data, holeIndices, dim);\n  }\n}\n\n/**\n * A class containing utility functions for shapes.\n *\n * @hideconstructor\n */\nclass ShapeUtils {\n  /**\n   * Calculate area of a ( 2D ) contour polygon.\n   *\n   * @param {Array<Vector2>} contour - An array of 2D points.\n   * @return {number} The area.\n   */\n  static area(contour) {\n    const n = contour.length;\n    let a = 0.0;\n    for (let p = n - 1, q = 0; q < n; p = q++) {\n      a += contour[p].x * contour[q].y - contour[q].x * contour[p].y;\n    }\n    return a * 0.5;\n  }\n\n  /**\n   * Returns `true` if the given contour uses a clockwise winding order.\n   *\n   * @param {Array<Vector2>} pts - An array of 2D points defining a polygon.\n   * @return {boolean} Whether the given contour uses a clockwise winding order or not.\n   */\n  static isClockWise(pts) {\n    return ShapeUtils.area(pts) < 0;\n  }\n\n  /**\n   * Triangulates the given shape definition.\n   *\n   * @param {Array<Vector2>} contour - An array of 2D points defining the contour.\n   * @param {Array<Array<Vector2>>} holes - An array that holds arrays of 2D points defining the holes.\n   * @return {Array<Array<number>>} An array that holds for each face definition an array with three indices.\n   */\n  static triangulateShape(contour, holes) {\n    const vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n    const holeIndices = []; // array of hole indices\n    const faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n    removeDupEndPts(contour);\n    addContour(vertices, contour);\n\n    //\n\n    let holeIndex = contour.length;\n    holes.forEach(removeDupEndPts);\n    for (let i = 0; i < holes.length; i++) {\n      holeIndices.push(holeIndex);\n      holeIndex += holes[i].length;\n      addContour(vertices, holes[i]);\n    }\n\n    //\n\n    const triangles = Earcut.triangulate(vertices, holeIndices);\n\n    //\n\n    for (let i = 0; i < triangles.length; i += 3) {\n      faces.push(triangles.slice(i, i + 3));\n    }\n    return faces;\n  }\n}\nfunction removeDupEndPts(points) {\n  const l = points.length;\n  if (l > 2 && points[l - 1].equals(points[0])) {\n    points.pop();\n  }\n}\nfunction addContour(vertices, contour) {\n  for (let i = 0; i < contour.length; i++) {\n    vertices.push(contour[i].x);\n    vertices.push(contour[i].y);\n  }\n}\n\n/**\n * Creates extruded geometry from a path shape.\n *\n * ```js\n * const length = 12, width = 8;\n *\n * const shape = new THREE.Shape();\n * shape.moveTo( 0,0 );\n * shape.lineTo( 0, width );\n * shape.lineTo( length, width );\n * shape.lineTo( length, 0 );\n * shape.lineTo( 0, 0 );\n *\n * const geometry = new THREE.ExtrudeGeometry( shape );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n * const mesh = new THREE.Mesh( geometry, material ) ;\n * scene.add( mesh );\n * ```\n *\n * @augments BufferGeometry\n */\nclass ExtrudeGeometry extends BufferGeometry {\n  /**\n   * Constructs a new extrude geometry.\n   *\n   * @param {Shape|Array<Shape>} [shapes] - A shape or an array of shapes.\n   * @param {ExtrudeGeometry~Options} [options] - The extrude settings.\n   */\n  constructor() {\n    let shapes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Shape([new Vector2(0.5, 0.5), new Vector2(-0.5, 0.5), new Vector2(-0.5, -0.5), new Vector2(0.5, -0.5)]);\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super();\n    this.type = 'ExtrudeGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      shapes: shapes,\n      options: options\n    };\n    shapes = Array.isArray(shapes) ? shapes : [shapes];\n    const scope = this;\n    const verticesArray = [];\n    const uvArray = [];\n    for (let i = 0, l = shapes.length; i < l; i++) {\n      const shape = shapes[i];\n      addShape(shape);\n    }\n\n    // build geometry\n\n    this.setAttribute('position', new Float32BufferAttribute(verticesArray, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvArray, 2));\n    this.computeVertexNormals();\n\n    // functions\n\n    function addShape(shape) {\n      const placeholder = [];\n\n      // options\n\n      const curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n      const steps = options.steps !== undefined ? options.steps : 1;\n      const depth = options.depth !== undefined ? options.depth : 1;\n      let bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n      let bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 0.2;\n      let bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 0.1;\n      let bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\n      let bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n      const extrudePath = options.extrudePath;\n      const uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;\n\n      //\n\n      let extrudePts,\n        extrudeByPath = false;\n      let splineTube, binormal, normal, position2;\n      if (extrudePath) {\n        extrudePts = extrudePath.getSpacedPoints(steps);\n        extrudeByPath = true;\n        bevelEnabled = false; // bevels not supported for path extrusion\n\n        // SETUP TNB variables\n\n        // TODO1 - have a .isClosed in spline?\n\n        splineTube = extrudePath.computeFrenetFrames(steps, false);\n\n        // console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n        binormal = new Vector3();\n        normal = new Vector3();\n        position2 = new Vector3();\n      }\n\n      // Safeguards if bevels are not enabled\n\n      if (!bevelEnabled) {\n        bevelSegments = 0;\n        bevelThickness = 0;\n        bevelSize = 0;\n        bevelOffset = 0;\n      }\n\n      // Variables initialization\n\n      const shapePoints = shape.extractPoints(curveSegments);\n      let vertices = shapePoints.shape;\n      const holes = shapePoints.holes;\n      const reverse = !ShapeUtils.isClockWise(vertices);\n      if (reverse) {\n        vertices = vertices.reverse();\n\n        // Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n        for (let h = 0, hl = holes.length; h < hl; h++) {\n          const ahole = holes[h];\n          if (ShapeUtils.isClockWise(ahole)) {\n            holes[h] = ahole.reverse();\n          }\n        }\n      }\n\n      /**Merges index-adjacent points that are within a threshold distance of each other. Array is modified in-place. Threshold distance is empirical, and scaled based on the magnitude of point coordinates.\n       * @param {Array<Vector2>} points\n      */\n      function mergeOverlappingPoints(points) {\n        const THRESHOLD = 1e-10;\n        const THRESHOLD_SQ = THRESHOLD * THRESHOLD;\n        let prevPos = points[0];\n        for (let i = 1; i <= points.length; i++) {\n          const currentIndex = i % points.length;\n          const currentPos = points[currentIndex];\n          const dx = currentPos.x - prevPos.x;\n          const dy = currentPos.y - prevPos.y;\n          const distSq = dx * dx + dy * dy;\n          const scalingFactorSqrt = Math.max(Math.abs(currentPos.x), Math.abs(currentPos.y), Math.abs(prevPos.x), Math.abs(prevPos.y));\n          const thresholdSqScaled = THRESHOLD_SQ * scalingFactorSqrt * scalingFactorSqrt;\n          if (distSq <= thresholdSqScaled) {\n            points.splice(currentIndex, 1);\n            i--;\n            continue;\n          }\n          prevPos = currentPos;\n        }\n      }\n      mergeOverlappingPoints(vertices);\n      holes.forEach(mergeOverlappingPoints);\n      const numHoles = holes.length;\n\n      /* Vertices */\n\n      const contour = vertices; // vertices has all points but contour has only points of circumference\n\n      for (let h = 0; h < numHoles; h++) {\n        const ahole = holes[h];\n        vertices = vertices.concat(ahole);\n      }\n      function scalePt2(pt, vec, size) {\n        if (!vec) console.error('THREE.ExtrudeGeometry: vec does not exist');\n        return pt.clone().addScaledVector(vec, size);\n      }\n      const vlen = vertices.length;\n\n      // Find directions for point movement\n\n      function getBevelVec(inPt, inPrev, inNext) {\n        // computes for inPt the corresponding point inPt' on a new contour\n        //   shifted by 1 unit (length of normalized vector) to the left\n        // if we walk along contour clockwise, this new contour is outside the old one\n        //\n        // inPt' is the intersection of the two lines parallel to the two\n        //  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n        let v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\n        // good reading for geometry algorithms (here: line-line intersection)\n        // http://geomalgorithms.com/a05-_intersect-1.html\n\n        const v_prev_x = inPt.x - inPrev.x,\n          v_prev_y = inPt.y - inPrev.y;\n        const v_next_x = inNext.x - inPt.x,\n          v_next_y = inNext.y - inPt.y;\n        const v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y;\n\n        // check for collinear edges\n        const collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;\n        if (Math.abs(collinear0) > Number.EPSILON) {\n          // not collinear\n\n          // length of vectors for normalizing\n\n          const v_prev_len = Math.sqrt(v_prev_lensq);\n          const v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y);\n\n          // shift adjacent points by unit vectors to the left\n\n          const ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;\n          const ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;\n          const ptNextShift_x = inNext.x - v_next_y / v_next_len;\n          const ptNextShift_y = inNext.y + v_next_x / v_next_len;\n\n          // scaling factor for v_prev to intersection point\n\n          const sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x);\n\n          // vector from inPt to intersection point\n\n          v_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;\n          v_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y;\n\n          // Don't normalize!, otherwise sharp corners become ugly\n          //  but prevent crazy spikes\n          const v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;\n          if (v_trans_lensq <= 2) {\n            return new Vector2(v_trans_x, v_trans_y);\n          } else {\n            shrink_by = Math.sqrt(v_trans_lensq / 2);\n          }\n        } else {\n          // handle special case of collinear edges\n\n          let direction_eq = false; // assumes: opposite\n\n          if (v_prev_x > Number.EPSILON) {\n            if (v_next_x > Number.EPSILON) {\n              direction_eq = true;\n            }\n          } else {\n            if (v_prev_x < -Number.EPSILON) {\n              if (v_next_x < -Number.EPSILON) {\n                direction_eq = true;\n              }\n            } else {\n              if (Math.sign(v_prev_y) === Math.sign(v_next_y)) {\n                direction_eq = true;\n              }\n            }\n          }\n          if (direction_eq) {\n            // console.log(\"Warning: lines are a straight sequence\");\n            v_trans_x = -v_prev_y;\n            v_trans_y = v_prev_x;\n            shrink_by = Math.sqrt(v_prev_lensq);\n          } else {\n            // console.log(\"Warning: lines are a straight spike\");\n            v_trans_x = v_prev_x;\n            v_trans_y = v_prev_y;\n            shrink_by = Math.sqrt(v_prev_lensq / 2);\n          }\n        }\n        return new Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);\n      }\n      const contourMovements = [];\n      for (let i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {\n        if (j === il) j = 0;\n        if (k === il) k = 0;\n\n        //  (j)---(i)---(k)\n        // console.log('i,j,k', i, j , k)\n\n        contourMovements[i] = getBevelVec(contour[i], contour[j], contour[k]);\n      }\n      const holesMovements = [];\n      let oneHoleMovements,\n        verticesMovements = contourMovements.concat();\n      for (let h = 0, hl = numHoles; h < hl; h++) {\n        const ahole = holes[h];\n        oneHoleMovements = [];\n        for (let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {\n          if (j === il) j = 0;\n          if (k === il) k = 0;\n\n          //  (j)---(i)---(k)\n          oneHoleMovements[i] = getBevelVec(ahole[i], ahole[j], ahole[k]);\n        }\n        holesMovements.push(oneHoleMovements);\n        verticesMovements = verticesMovements.concat(oneHoleMovements);\n      }\n      let faces;\n      if (bevelSegments === 0) {\n        faces = ShapeUtils.triangulateShape(contour, holes);\n      } else {\n        const contractedContourVertices = [];\n        const expandedHoleVertices = [];\n\n        // Loop bevelSegments, 1 for the front, 1 for the back\n\n        for (let b = 0; b < bevelSegments; b++) {\n          //for ( b = bevelSegments; b > 0; b -- ) {\n\n          const t = b / bevelSegments;\n          const z = bevelThickness * Math.cos(t * Math.PI / 2);\n          const bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset;\n\n          // contract shape\n\n          for (let i = 0, il = contour.length; i < il; i++) {\n            const vert = scalePt2(contour[i], contourMovements[i], bs);\n            v(vert.x, vert.y, -z);\n            if (t === 0) contractedContourVertices.push(vert);\n          }\n\n          // expand holes\n\n          for (let h = 0, hl = numHoles; h < hl; h++) {\n            const ahole = holes[h];\n            oneHoleMovements = holesMovements[h];\n            const oneHoleVertices = [];\n            for (let i = 0, il = ahole.length; i < il; i++) {\n              const vert = scalePt2(ahole[i], oneHoleMovements[i], bs);\n              v(vert.x, vert.y, -z);\n              if (t === 0) oneHoleVertices.push(vert);\n            }\n            if (t === 0) expandedHoleVertices.push(oneHoleVertices);\n          }\n        }\n        faces = ShapeUtils.triangulateShape(contractedContourVertices, expandedHoleVertices);\n      }\n      const flen = faces.length;\n      const bs = bevelSize + bevelOffset;\n\n      // Back facing vertices\n\n      for (let i = 0; i < vlen; i++) {\n        const vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];\n        if (!extrudeByPath) {\n          v(vert.x, vert.y, 0);\n        } else {\n          // v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n          normal.copy(splineTube.normals[0]).multiplyScalar(vert.x);\n          binormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);\n          position2.copy(extrudePts[0]).add(normal).add(binormal);\n          v(position2.x, position2.y, position2.z);\n        }\n      }\n\n      // Add stepped vertices...\n      // Including front facing vertices\n\n      for (let s = 1; s <= steps; s++) {\n        for (let i = 0; i < vlen; i++) {\n          const vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];\n          if (!extrudeByPath) {\n            v(vert.x, vert.y, depth / steps * s);\n          } else {\n            // v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n            normal.copy(splineTube.normals[s]).multiplyScalar(vert.x);\n            binormal.copy(splineTube.binormals[s]).multiplyScalar(vert.y);\n            position2.copy(extrudePts[s]).add(normal).add(binormal);\n            v(position2.x, position2.y, position2.z);\n          }\n        }\n      }\n\n      // Add bevel segments planes\n\n      //for ( b = 1; b <= bevelSegments; b ++ ) {\n      for (let b = bevelSegments - 1; b >= 0; b--) {\n        const t = b / bevelSegments;\n        const z = bevelThickness * Math.cos(t * Math.PI / 2);\n        const bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset;\n\n        // contract shape\n\n        for (let i = 0, il = contour.length; i < il; i++) {\n          const vert = scalePt2(contour[i], contourMovements[i], bs);\n          v(vert.x, vert.y, depth + z);\n        }\n\n        // expand holes\n\n        for (let h = 0, hl = holes.length; h < hl; h++) {\n          const ahole = holes[h];\n          oneHoleMovements = holesMovements[h];\n          for (let i = 0, il = ahole.length; i < il; i++) {\n            const vert = scalePt2(ahole[i], oneHoleMovements[i], bs);\n            if (!extrudeByPath) {\n              v(vert.x, vert.y, depth + z);\n            } else {\n              v(vert.x, vert.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + z);\n            }\n          }\n        }\n      }\n\n      /* Faces */\n\n      // Top and bottom faces\n\n      buildLidFaces();\n\n      // Sides faces\n\n      buildSideFaces();\n\n      /////  Internal functions\n\n      function buildLidFaces() {\n        const start = verticesArray.length / 3;\n        if (bevelEnabled) {\n          let layer = 0; // steps + 1\n          let offset = vlen * layer;\n\n          // Bottom faces\n\n          for (let i = 0; i < flen; i++) {\n            const face = faces[i];\n            f3(face[2] + offset, face[1] + offset, face[0] + offset);\n          }\n          layer = steps + bevelSegments * 2;\n          offset = vlen * layer;\n\n          // Top faces\n\n          for (let i = 0; i < flen; i++) {\n            const face = faces[i];\n            f3(face[0] + offset, face[1] + offset, face[2] + offset);\n          }\n        } else {\n          // Bottom faces\n\n          for (let i = 0; i < flen; i++) {\n            const face = faces[i];\n            f3(face[2], face[1], face[0]);\n          }\n\n          // Top faces\n\n          for (let i = 0; i < flen; i++) {\n            const face = faces[i];\n            f3(face[0] + vlen * steps, face[1] + vlen * steps, face[2] + vlen * steps);\n          }\n        }\n        scope.addGroup(start, verticesArray.length / 3 - start, 0);\n      }\n\n      // Create faces for the z-sides of the shape\n\n      function buildSideFaces() {\n        const start = verticesArray.length / 3;\n        let layeroffset = 0;\n        sidewalls(contour, layeroffset);\n        layeroffset += contour.length;\n        for (let h = 0, hl = holes.length; h < hl; h++) {\n          const ahole = holes[h];\n          sidewalls(ahole, layeroffset);\n\n          //, true\n          layeroffset += ahole.length;\n        }\n        scope.addGroup(start, verticesArray.length / 3 - start, 1);\n      }\n      function sidewalls(contour, layeroffset) {\n        let i = contour.length;\n        while (--i >= 0) {\n          const j = i;\n          let k = i - 1;\n          if (k < 0) k = contour.length - 1;\n\n          //console.log('b', i,j, i-1, k,vertices.length);\n\n          for (let s = 0, sl = steps + bevelSegments * 2; s < sl; s++) {\n            const slen1 = vlen * s;\n            const slen2 = vlen * (s + 1);\n            const a = layeroffset + j + slen1,\n              b = layeroffset + k + slen1,\n              c = layeroffset + k + slen2,\n              d = layeroffset + j + slen2;\n            f4(a, b, c, d);\n          }\n        }\n      }\n      function v(x, y, z) {\n        placeholder.push(x);\n        placeholder.push(y);\n        placeholder.push(z);\n      }\n      function f3(a, b, c) {\n        addVertex(a);\n        addVertex(b);\n        addVertex(c);\n        const nextIndex = verticesArray.length / 3;\n        const uvs = uvgen.generateTopUV(scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1);\n        addUV(uvs[0]);\n        addUV(uvs[1]);\n        addUV(uvs[2]);\n      }\n      function f4(a, b, c, d) {\n        addVertex(a);\n        addVertex(b);\n        addVertex(d);\n        addVertex(b);\n        addVertex(c);\n        addVertex(d);\n        const nextIndex = verticesArray.length / 3;\n        const uvs = uvgen.generateSideWallUV(scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1);\n        addUV(uvs[0]);\n        addUV(uvs[1]);\n        addUV(uvs[3]);\n        addUV(uvs[1]);\n        addUV(uvs[2]);\n        addUV(uvs[3]);\n      }\n      function addVertex(index) {\n        verticesArray.push(placeholder[index * 3 + 0]);\n        verticesArray.push(placeholder[index * 3 + 1]);\n        verticesArray.push(placeholder[index * 3 + 2]);\n      }\n      function addUV(vector2) {\n        uvArray.push(vector2.x);\n        uvArray.push(vector2.y);\n      }\n    }\n  }\n  copy(source) {\n    super.copy(source);\n    this.parameters = Object.assign({}, source.parameters);\n    return this;\n  }\n  toJSON() {\n    const data = super.toJSON();\n    const shapes = this.parameters.shapes;\n    const options = this.parameters.options;\n    return toJSON$1(shapes, options, data);\n  }\n\n  /**\n   * Factory method for creating an instance of this class from the given\n   * JSON object.\n   *\n   * @param {Object} data - A JSON object representing the serialized geometry.\n   * @param {Array<Shape>} shapes - An array of shapes.\n   * @return {ExtrudeGeometry} A new instance.\n   */\n  static fromJSON(data, shapes) {\n    const geometryShapes = [];\n    for (let j = 0, jl = data.shapes.length; j < jl; j++) {\n      const shape = shapes[data.shapes[j]];\n      geometryShapes.push(shape);\n    }\n    const extrudePath = data.options.extrudePath;\n    if (extrudePath !== undefined) {\n      data.options.extrudePath = new Curves[extrudePath.type]().fromJSON(extrudePath);\n    }\n    return new ExtrudeGeometry(geometryShapes, data.options);\n  }\n}\nconst WorldUVGenerator = {\n  generateTopUV: function (geometry, vertices, indexA, indexB, indexC) {\n    const a_x = vertices[indexA * 3];\n    const a_y = vertices[indexA * 3 + 1];\n    const b_x = vertices[indexB * 3];\n    const b_y = vertices[indexB * 3 + 1];\n    const c_x = vertices[indexC * 3];\n    const c_y = vertices[indexC * 3 + 1];\n    return [new Vector2(a_x, a_y), new Vector2(b_x, b_y), new Vector2(c_x, c_y)];\n  },\n  generateSideWallUV: function (geometry, vertices, indexA, indexB, indexC, indexD) {\n    const a_x = vertices[indexA * 3];\n    const a_y = vertices[indexA * 3 + 1];\n    const a_z = vertices[indexA * 3 + 2];\n    const b_x = vertices[indexB * 3];\n    const b_y = vertices[indexB * 3 + 1];\n    const b_z = vertices[indexB * 3 + 2];\n    const c_x = vertices[indexC * 3];\n    const c_y = vertices[indexC * 3 + 1];\n    const c_z = vertices[indexC * 3 + 2];\n    const d_x = vertices[indexD * 3];\n    const d_y = vertices[indexD * 3 + 1];\n    const d_z = vertices[indexD * 3 + 2];\n    if (Math.abs(a_y - b_y) < Math.abs(a_x - b_x)) {\n      return [new Vector2(a_x, 1 - a_z), new Vector2(b_x, 1 - b_z), new Vector2(c_x, 1 - c_z), new Vector2(d_x, 1 - d_z)];\n    } else {\n      return [new Vector2(a_y, 1 - a_z), new Vector2(b_y, 1 - b_z), new Vector2(c_y, 1 - c_z), new Vector2(d_y, 1 - d_z)];\n    }\n  }\n};\nfunction toJSON$1(shapes, options, data) {\n  data.shapes = [];\n  if (Array.isArray(shapes)) {\n    for (let i = 0, l = shapes.length; i < l; i++) {\n      const shape = shapes[i];\n      data.shapes.push(shape.uuid);\n    }\n  } else {\n    data.shapes.push(shapes.uuid);\n  }\n  data.options = Object.assign({}, options);\n  if (options.extrudePath !== undefined) data.options.extrudePath = options.extrudePath.toJSON();\n  return data;\n}\n\n/**\n * A geometry class for representing an icosahedron.\n *\n * ```js\n * const geometry = new THREE.IcosahedronGeometry();\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const icosahedron = new THREE.Mesh( geometry, material );\n * scene.add( icosahedron );\n * ```\n *\n * @augments PolyhedronGeometry\n */\nclass IcosahedronGeometry extends PolyhedronGeometry {\n  /**\n   * Constructs a new icosahedron geometry.\n   *\n   * @param {number} [radius=1] - Radius of the icosahedron.\n   * @param {number} [detail=0] - Setting this to a value greater than `0` adds vertices making it no longer a icosahedron.\n   */\n  constructor() {\n    let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const t = (1 + Math.sqrt(5)) / 2;\n    const vertices = [-1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, 0, 0, -1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, t, 0, -1, t, 0, 1, -t, 0, -1, -t, 0, 1];\n    const indices = [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1];\n    super(vertices, indices, radius, detail);\n    this.type = 'IcosahedronGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      radius: radius,\n      detail: detail\n    };\n  }\n\n  /**\n   * Factory method for creating an instance of this class from the given\n   * JSON object.\n   *\n   * @param {Object} data - A JSON object representing the serialized geometry.\n   * @return {IcosahedronGeometry} A new instance.\n   */\n  static fromJSON(data) {\n    return new IcosahedronGeometry(data.radius, data.detail);\n  }\n}\n\n/**\n * Creates meshes with axial symmetry like vases. The lathe rotates around the Y axis.\n *\n * ```js\n * const points = [];\n * for ( let i = 0; i < 10; i ++ ) {\n * \tpoints.push( new THREE.Vector2( Math.sin( i * 0.2 ) * 10 + 5, ( i - 5 ) * 2 ) );\n * }\n * const geometry = new THREE.LatheGeometry( points );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const lathe = new THREE.Mesh( geometry, material );\n * scene.add( lathe );\n * ```\n *\n * @augments BufferGeometry\n */\nclass LatheGeometry extends BufferGeometry {\n  /**\n   * Constructs a new lathe geometry.\n   *\n   * @param {Array<Vector2|Vector3>} [points] - An array of points in 2D space. The x-coordinate of each point\n   * must be greater than zero.\n   * @param {number} [segments=12] - The number of circumference segments to generate.\n   * @param {number} [phiStart=0] - The starting angle in radians.\n   * @param {number} [phiLength=Math.PI*2] - The radian (0 to 2PI) range of the lathed section 2PI is a\n   * closed lathe, less than 2PI is a portion.\n   */\n  constructor() {\n    let points = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [new Vector2(0, -0.5), new Vector2(0.5, 0), new Vector2(0, 0.5)];\n    let segments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 12;\n    let phiStart = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let phiLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Math.PI * 2;\n    super();\n    this.type = 'LatheGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      points: points,\n      segments: segments,\n      phiStart: phiStart,\n      phiLength: phiLength\n    };\n    segments = Math.floor(segments);\n\n    // clamp phiLength so it's in range of [ 0, 2PI ]\n\n    phiLength = clamp(phiLength, 0, Math.PI * 2);\n\n    // buffers\n\n    const indices = [];\n    const vertices = [];\n    const uvs = [];\n    const initNormals = [];\n    const normals = [];\n\n    // helper variables\n\n    const inverseSegments = 1.0 / segments;\n    const vertex = new Vector3();\n    const uv = new Vector2();\n    const normal = new Vector3();\n    const curNormal = new Vector3();\n    const prevNormal = new Vector3();\n    let dx = 0;\n    let dy = 0;\n\n    // pre-compute normals for initial \"meridian\"\n\n    for (let j = 0; j <= points.length - 1; j++) {\n      switch (j) {\n        case 0:\n          // special handling for 1st vertex on path\n\n          dx = points[j + 1].x - points[j].x;\n          dy = points[j + 1].y - points[j].y;\n          normal.x = dy * 1.0;\n          normal.y = -dx;\n          normal.z = dy * 0.0;\n          prevNormal.copy(normal);\n          normal.normalize();\n          initNormals.push(normal.x, normal.y, normal.z);\n          break;\n        case points.length - 1:\n          // special handling for last Vertex on path\n\n          initNormals.push(prevNormal.x, prevNormal.y, prevNormal.z);\n          break;\n        default:\n          // default handling for all vertices in between\n\n          dx = points[j + 1].x - points[j].x;\n          dy = points[j + 1].y - points[j].y;\n          normal.x = dy * 1.0;\n          normal.y = -dx;\n          normal.z = dy * 0.0;\n          curNormal.copy(normal);\n          normal.x += prevNormal.x;\n          normal.y += prevNormal.y;\n          normal.z += prevNormal.z;\n          normal.normalize();\n          initNormals.push(normal.x, normal.y, normal.z);\n          prevNormal.copy(curNormal);\n      }\n    }\n\n    // generate vertices, uvs and normals\n\n    for (let i = 0; i <= segments; i++) {\n      const phi = phiStart + i * inverseSegments * phiLength;\n      const sin = Math.sin(phi);\n      const cos = Math.cos(phi);\n      for (let j = 0; j <= points.length - 1; j++) {\n        // vertex\n\n        vertex.x = points[j].x * sin;\n        vertex.y = points[j].y;\n        vertex.z = points[j].x * cos;\n        vertices.push(vertex.x, vertex.y, vertex.z);\n\n        // uv\n\n        uv.x = i / segments;\n        uv.y = j / (points.length - 1);\n        uvs.push(uv.x, uv.y);\n\n        // normal\n\n        const x = initNormals[3 * j + 0] * sin;\n        const y = initNormals[3 * j + 1];\n        const z = initNormals[3 * j + 0] * cos;\n        normals.push(x, y, z);\n      }\n    }\n\n    // indices\n\n    for (let i = 0; i < segments; i++) {\n      for (let j = 0; j < points.length - 1; j++) {\n        const base = j + i * points.length;\n        const a = base;\n        const b = base + points.length;\n        const c = base + points.length + 1;\n        const d = base + 1;\n\n        // faces\n\n        indices.push(a, b, d);\n        indices.push(c, d, b);\n      }\n    }\n\n    // build geometry\n\n    this.setIndex(indices);\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n  }\n  copy(source) {\n    super.copy(source);\n    this.parameters = Object.assign({}, source.parameters);\n    return this;\n  }\n\n  /**\n   * Factory method for creating an instance of this class from the given\n   * JSON object.\n   *\n   * @param {Object} data - A JSON object representing the serialized geometry.\n   * @return {LatheGeometry} A new instance.\n   */\n  static fromJSON(data) {\n    return new LatheGeometry(data.points, data.segments, data.phiStart, data.phiLength);\n  }\n}\n\n/**\n * A geometry class for representing an octahedron.\n *\n * ```js\n * const geometry = new THREE.OctahedronGeometry();\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const octahedron = new THREE.Mesh( geometry, material );\n * scene.add( octahedron );\n * ```\n *\n * @augments PolyhedronGeometry\n */\nclass OctahedronGeometry extends PolyhedronGeometry {\n  /**\n   * Constructs a new octahedron geometry.\n   *\n   * @param {number} [radius=1] - Radius of the octahedron.\n   * @param {number} [detail=0] - Setting this to a value greater than `0` adds vertices making it no longer a octahedron.\n   */\n  constructor() {\n    let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const vertices = [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1];\n    const indices = [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2];\n    super(vertices, indices, radius, detail);\n    this.type = 'OctahedronGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      radius: radius,\n      detail: detail\n    };\n  }\n\n  /**\n   * Factory method for creating an instance of this class from the given\n   * JSON object.\n   *\n   * @param {Object} data - A JSON object representing the serialized geometry.\n   * @return {OctahedronGeometry} A new instance.\n   */\n  static fromJSON(data) {\n    return new OctahedronGeometry(data.radius, data.detail);\n  }\n}\n\n/**\n * A geometry class for representing a plane.\n *\n * ```js\n * const geometry = new THREE.PlaneGeometry( 1, 1 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00, side: THREE.DoubleSide } );\n * const plane = new THREE.Mesh( geometry, material );\n * scene.add( plane );\n * ```\n *\n * @augments BufferGeometry\n */\nclass PlaneGeometry extends BufferGeometry {\n  /**\n   * Constructs a new plane geometry.\n   *\n   * @param {number} [width=1] - The width along the X axis.\n   * @param {number} [height=1] - The height along the Y axis\n   * @param {number} [widthSegments=1] - The number of segments along the X axis.\n   * @param {number} [heightSegments=1] - The number of segments along the Y axis.\n   */\n  constructor() {\n    let width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let widthSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let heightSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    super();\n    this.type = 'PlaneGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      width: width,\n      height: height,\n      widthSegments: widthSegments,\n      heightSegments: heightSegments\n    };\n    const width_half = width / 2;\n    const height_half = height / 2;\n    const gridX = Math.floor(widthSegments);\n    const gridY = Math.floor(heightSegments);\n    const gridX1 = gridX + 1;\n    const gridY1 = gridY + 1;\n    const segment_width = width / gridX;\n    const segment_height = height / gridY;\n\n    //\n\n    const indices = [];\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n    for (let iy = 0; iy < gridY1; iy++) {\n      const y = iy * segment_height - height_half;\n      for (let ix = 0; ix < gridX1; ix++) {\n        const x = ix * segment_width - width_half;\n        vertices.push(x, -y, 0);\n        normals.push(0, 0, 1);\n        uvs.push(ix / gridX);\n        uvs.push(1 - iy / gridY);\n      }\n    }\n    for (let iy = 0; iy < gridY; iy++) {\n      for (let ix = 0; ix < gridX; ix++) {\n        const a = ix + gridX1 * iy;\n        const b = ix + gridX1 * (iy + 1);\n        const c = ix + 1 + gridX1 * (iy + 1);\n        const d = ix + 1 + gridX1 * iy;\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    }\n    this.setIndex(indices);\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n  }\n  copy(source) {\n    super.copy(source);\n    this.parameters = Object.assign({}, source.parameters);\n    return this;\n  }\n\n  /**\n   * Factory method for creating an instance of this class from the given\n   * JSON object.\n   *\n   * @param {Object} data - A JSON object representing the serialized geometry.\n   * @return {PlaneGeometry} A new instance.\n   */\n  static fromJSON(data) {\n    return new PlaneGeometry(data.width, data.height, data.widthSegments, data.heightSegments);\n  }\n}\n\n/**\n * A class for generating a two-dimensional ring geometry.\n *\n * ```js\n * const geometry = new THREE.RingGeometry( 1, 5, 32 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00, side: THREE.DoubleSide } );\n * const mesh = new THREE.Mesh( geometry, material );\n * scene.add( mesh );\n * ```\n *\n * @augments BufferGeometry\n */\nclass RingGeometry extends BufferGeometry {\n  /**\n   * Constructs a new ring geometry.\n   *\n   * @param {number} [innerRadius=0.5] - The inner radius of the ring.\n   * @param {number} [outerRadius=1] - The outer radius of the ring.\n   * @param {number} [thetaSegments=32] - Number of segments. A higher number means the ring will be more round. Minimum is `3`.\n   * @param {number} [phiSegments=1] - Number of segments per ring segment. Minimum is `1`.\n   * @param {number} [thetaStart=0] - Starting angle in radians.\n   * @param {number} [thetaLength=Math.PI*2] - Central angle in radians.\n   */\n  constructor() {\n    let innerRadius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.5;\n    let outerRadius = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let thetaSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 32;\n    let phiSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    let thetaStart = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n    let thetaLength = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Math.PI * 2;\n    super();\n    this.type = 'RingGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      innerRadius: innerRadius,\n      outerRadius: outerRadius,\n      thetaSegments: thetaSegments,\n      phiSegments: phiSegments,\n      thetaStart: thetaStart,\n      thetaLength: thetaLength\n    };\n    thetaSegments = Math.max(3, thetaSegments);\n    phiSegments = Math.max(1, phiSegments);\n\n    // buffers\n\n    const indices = [];\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n\n    // some helper variables\n\n    let radius = innerRadius;\n    const radiusStep = (outerRadius - innerRadius) / phiSegments;\n    const vertex = new Vector3();\n    const uv = new Vector2();\n\n    // generate vertices, normals and uvs\n\n    for (let j = 0; j <= phiSegments; j++) {\n      for (let i = 0; i <= thetaSegments; i++) {\n        // values are generate from the inside of the ring to the outside\n\n        const segment = thetaStart + i / thetaSegments * thetaLength;\n\n        // vertex\n\n        vertex.x = radius * Math.cos(segment);\n        vertex.y = radius * Math.sin(segment);\n        vertices.push(vertex.x, vertex.y, vertex.z);\n\n        // normal\n\n        normals.push(0, 0, 1);\n\n        // uv\n\n        uv.x = (vertex.x / outerRadius + 1) / 2;\n        uv.y = (vertex.y / outerRadius + 1) / 2;\n        uvs.push(uv.x, uv.y);\n      }\n\n      // increase the radius for next row of vertices\n\n      radius += radiusStep;\n    }\n\n    // indices\n\n    for (let j = 0; j < phiSegments; j++) {\n      const thetaSegmentLevel = j * (thetaSegments + 1);\n      for (let i = 0; i < thetaSegments; i++) {\n        const segment = i + thetaSegmentLevel;\n        const a = segment;\n        const b = segment + thetaSegments + 1;\n        const c = segment + thetaSegments + 2;\n        const d = segment + 1;\n\n        // faces\n\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    }\n\n    // build geometry\n\n    this.setIndex(indices);\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n  }\n  copy(source) {\n    super.copy(source);\n    this.parameters = Object.assign({}, source.parameters);\n    return this;\n  }\n\n  /**\n   * Factory method for creating an instance of this class from the given\n   * JSON object.\n   *\n   * @param {Object} data - A JSON object representing the serialized geometry.\n   * @return {RingGeometry} A new instance.\n   */\n  static fromJSON(data) {\n    return new RingGeometry(data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength);\n  }\n}\n\n/**\n * Creates an one-sided polygonal geometry from one or more path shapes.\n *\n * ```js\n * const arcShape = new THREE.Shape()\n *\t.moveTo( 5, 1 )\n *\t.absarc( 1, 1, 4, 0, Math.PI * 2, false );\n *\n * const geometry = new THREE.ShapeGeometry( arcShape );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00, side: THREE.DoubleSide } );\n * const mesh = new THREE.Mesh( geometry, material ) ;\n * scene.add( mesh );\n * ```\n *\n * @augments BufferGeometry\n */\nclass ShapeGeometry extends BufferGeometry {\n  /**\n   * Constructs a new shape geometry.\n   *\n   * @param {Shape|Array<Shape>} [shapes] - A shape or an array of shapes.\n   * @param {number} [curveSegments=12] - Number of segments per shape.\n   */\n  constructor() {\n    let shapes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Shape([new Vector2(0, 0.5), new Vector2(-0.5, -0.5), new Vector2(0.5, -0.5)]);\n    let curveSegments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 12;\n    super();\n    this.type = 'ShapeGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      shapes: shapes,\n      curveSegments: curveSegments\n    };\n\n    // buffers\n\n    const indices = [];\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n\n    // helper variables\n\n    let groupStart = 0;\n    let groupCount = 0;\n\n    // allow single and array values for \"shapes\" parameter\n\n    if (Array.isArray(shapes) === false) {\n      addShape(shapes);\n    } else {\n      for (let i = 0; i < shapes.length; i++) {\n        addShape(shapes[i]);\n        this.addGroup(groupStart, groupCount, i); // enables MultiMaterial support\n\n        groupStart += groupCount;\n        groupCount = 0;\n      }\n    }\n\n    // build geometry\n\n    this.setIndex(indices);\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n    // helper functions\n\n    function addShape(shape) {\n      const indexOffset = vertices.length / 3;\n      const points = shape.extractPoints(curveSegments);\n      let shapeVertices = points.shape;\n      const shapeHoles = points.holes;\n\n      // check direction of vertices\n\n      if (ShapeUtils.isClockWise(shapeVertices) === false) {\n        shapeVertices = shapeVertices.reverse();\n      }\n      for (let i = 0, l = shapeHoles.length; i < l; i++) {\n        const shapeHole = shapeHoles[i];\n        if (ShapeUtils.isClockWise(shapeHole) === true) {\n          shapeHoles[i] = shapeHole.reverse();\n        }\n      }\n      const faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles);\n\n      // join vertices of inner and outer paths to a single array\n\n      for (let i = 0, l = shapeHoles.length; i < l; i++) {\n        const shapeHole = shapeHoles[i];\n        shapeVertices = shapeVertices.concat(shapeHole);\n      }\n\n      // vertices, normals, uvs\n\n      for (let i = 0, l = shapeVertices.length; i < l; i++) {\n        const vertex = shapeVertices[i];\n        vertices.push(vertex.x, vertex.y, 0);\n        normals.push(0, 0, 1);\n        uvs.push(vertex.x, vertex.y); // world uvs\n      }\n\n      // indices\n\n      for (let i = 0, l = faces.length; i < l; i++) {\n        const face = faces[i];\n        const a = face[0] + indexOffset;\n        const b = face[1] + indexOffset;\n        const c = face[2] + indexOffset;\n        indices.push(a, b, c);\n        groupCount += 3;\n      }\n    }\n  }\n  copy(source) {\n    super.copy(source);\n    this.parameters = Object.assign({}, source.parameters);\n    return this;\n  }\n  toJSON() {\n    const data = super.toJSON();\n    const shapes = this.parameters.shapes;\n    return toJSON(shapes, data);\n  }\n\n  /**\n   * Factory method for creating an instance of this class from the given\n   * JSON object.\n   *\n   * @param {Object} data - A JSON object representing the serialized geometry.\n   * @param {Array<Shape>} shapes - An array of shapes.\n   * @return {ShapeGeometry} A new instance.\n   */\n  static fromJSON(data, shapes) {\n    const geometryShapes = [];\n    for (let j = 0, jl = data.shapes.length; j < jl; j++) {\n      const shape = shapes[data.shapes[j]];\n      geometryShapes.push(shape);\n    }\n    return new ShapeGeometry(geometryShapes, data.curveSegments);\n  }\n}\nfunction toJSON(shapes, data) {\n  data.shapes = [];\n  if (Array.isArray(shapes)) {\n    for (let i = 0, l = shapes.length; i < l; i++) {\n      const shape = shapes[i];\n      data.shapes.push(shape.uuid);\n    }\n  } else {\n    data.shapes.push(shapes.uuid);\n  }\n  return data;\n}\n\n/**\n * A class for generating a sphere geometry.\n *\n * ```js\n * const geometry = new THREE.SphereGeometry( 15, 32, 16 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const sphere = new THREE.Mesh( geometry, material );\n * scene.add( sphere );\n * ```\n *\n * @augments BufferGeometry\n */\nclass SphereGeometry extends BufferGeometry {\n  /**\n   * Constructs a new sphere geometry.\n   *\n   * @param {number} [radius=1] - The sphere radius.\n   * @param {number} [widthSegments=32] - The number of horizontal segments. Minimum value is `3`.\n   * @param {number} [heightSegments=16] - The number of vertical segments. Minimum value is `2`.\n   * @param {number} [phiStart=0] - The horizontal starting angle in radians.\n   * @param {number} [phiLength=Math.PI*2] - The horizontal sweep angle size.\n   * @param {number} [thetaStart=0] - The vertical starting angle in radians.\n   * @param {number} [thetaLength=Math.PI] - The vertical sweep angle size.\n   */\n  constructor() {\n    let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let widthSegments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 32;\n    let heightSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 16;\n    let phiStart = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    let phiLength = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Math.PI * 2;\n    let thetaStart = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n    let thetaLength = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : Math.PI;\n    super();\n    this.type = 'SphereGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      radius: radius,\n      widthSegments: widthSegments,\n      heightSegments: heightSegments,\n      phiStart: phiStart,\n      phiLength: phiLength,\n      thetaStart: thetaStart,\n      thetaLength: thetaLength\n    };\n    widthSegments = Math.max(3, Math.floor(widthSegments));\n    heightSegments = Math.max(2, Math.floor(heightSegments));\n    const thetaEnd = Math.min(thetaStart + thetaLength, Math.PI);\n    let index = 0;\n    const grid = [];\n    const vertex = new Vector3();\n    const normal = new Vector3();\n\n    // buffers\n\n    const indices = [];\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n\n    // generate vertices, normals and uvs\n\n    for (let iy = 0; iy <= heightSegments; iy++) {\n      const verticesRow = [];\n      const v = iy / heightSegments;\n\n      // special case for the poles\n\n      let uOffset = 0;\n      if (iy === 0 && thetaStart === 0) {\n        uOffset = 0.5 / widthSegments;\n      } else if (iy === heightSegments && thetaEnd === Math.PI) {\n        uOffset = -0.5 / widthSegments;\n      }\n      for (let ix = 0; ix <= widthSegments; ix++) {\n        const u = ix / widthSegments;\n\n        // vertex\n\n        vertex.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n        vertex.y = radius * Math.cos(thetaStart + v * thetaLength);\n        vertex.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n        vertices.push(vertex.x, vertex.y, vertex.z);\n\n        // normal\n\n        normal.copy(vertex).normalize();\n        normals.push(normal.x, normal.y, normal.z);\n\n        // uv\n\n        uvs.push(u + uOffset, 1 - v);\n        verticesRow.push(index++);\n      }\n      grid.push(verticesRow);\n    }\n\n    // indices\n\n    for (let iy = 0; iy < heightSegments; iy++) {\n      for (let ix = 0; ix < widthSegments; ix++) {\n        const a = grid[iy][ix + 1];\n        const b = grid[iy][ix];\n        const c = grid[iy + 1][ix];\n        const d = grid[iy + 1][ix + 1];\n        if (iy !== 0 || thetaStart > 0) indices.push(a, b, d);\n        if (iy !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d);\n      }\n    }\n\n    // build geometry\n\n    this.setIndex(indices);\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n  }\n  copy(source) {\n    super.copy(source);\n    this.parameters = Object.assign({}, source.parameters);\n    return this;\n  }\n\n  /**\n   * Factory method for creating an instance of this class from the given\n   * JSON object.\n   *\n   * @param {Object} data - A JSON object representing the serialized geometry.\n   * @return {SphereGeometry} A new instance.\n   */\n  static fromJSON(data) {\n    return new SphereGeometry(data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);\n  }\n}\n\n/**\n * A geometry class for representing an tetrahedron.\n *\n * ```js\n * const geometry = new THREE.TetrahedronGeometry();\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const tetrahedron = new THREE.Mesh( geometry, material );\n * scene.add( tetrahedron );\n * ```\n *\n * @augments PolyhedronGeometry\n */\nclass TetrahedronGeometry extends PolyhedronGeometry {\n  /**\n   * Constructs a new tetrahedron geometry.\n   *\n   * @param {number} [radius=1] - Radius of the tetrahedron.\n   * @param {number} [detail=0] - Setting this to a value greater than `0` adds vertices making it no longer a tetrahedron.\n   */\n  constructor() {\n    let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const vertices = [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1];\n    const indices = [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1];\n    super(vertices, indices, radius, detail);\n    this.type = 'TetrahedronGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      radius: radius,\n      detail: detail\n    };\n  }\n\n  /**\n   * Factory method for creating an instance of this class from the given\n   * JSON object.\n   *\n   * @param {Object} data - A JSON object representing the serialized geometry.\n   * @return {TetrahedronGeometry} A new instance.\n   */\n  static fromJSON(data) {\n    return new TetrahedronGeometry(data.radius, data.detail);\n  }\n}\n\n/**\n * A geometry class for representing an torus.\n *\n * ```js\n * const geometry = new THREE.TorusGeometry( 10, 3, 16, 100 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const torus = new THREE.Mesh( geometry, material );\n * scene.add( torus );\n * ```\n *\n * @augments BufferGeometry\n */\nclass TorusGeometry extends BufferGeometry {\n  /**\n   * Constructs a new torus geometry.\n   *\n   * @param {number} [radius=1] - Radius of the torus, from the center of the torus to the center of the tube.\n   * @param {number} [tube=0.4] - Radius of the tube. Must be smaller than `radius`.\n   * @param {number} [radialSegments=12] - The number of radial segments.\n   * @param {number} [tubularSegments=48] - The number of tubular segments.\n   * @param {number} [arc=Math.PI*2] - Central angle in radians.\n   */\n  constructor() {\n    let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let tube = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.4;\n    let radialSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 12;\n    let tubularSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 48;\n    let arc = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Math.PI * 2;\n    super();\n    this.type = 'TorusGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      radius: radius,\n      tube: tube,\n      radialSegments: radialSegments,\n      tubularSegments: tubularSegments,\n      arc: arc\n    };\n    radialSegments = Math.floor(radialSegments);\n    tubularSegments = Math.floor(tubularSegments);\n\n    // buffers\n\n    const indices = [];\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n\n    // helper variables\n\n    const center = new Vector3();\n    const vertex = new Vector3();\n    const normal = new Vector3();\n\n    // generate vertices, normals and uvs\n\n    for (let j = 0; j <= radialSegments; j++) {\n      for (let i = 0; i <= tubularSegments; i++) {\n        const u = i / tubularSegments * arc;\n        const v = j / radialSegments * Math.PI * 2;\n\n        // vertex\n\n        vertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);\n        vertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);\n        vertex.z = tube * Math.sin(v);\n        vertices.push(vertex.x, vertex.y, vertex.z);\n\n        // normal\n\n        center.x = radius * Math.cos(u);\n        center.y = radius * Math.sin(u);\n        normal.subVectors(vertex, center).normalize();\n        normals.push(normal.x, normal.y, normal.z);\n\n        // uv\n\n        uvs.push(i / tubularSegments);\n        uvs.push(j / radialSegments);\n      }\n    }\n\n    // generate indices\n\n    for (let j = 1; j <= radialSegments; j++) {\n      for (let i = 1; i <= tubularSegments; i++) {\n        // indices\n\n        const a = (tubularSegments + 1) * j + i - 1;\n        const b = (tubularSegments + 1) * (j - 1) + i - 1;\n        const c = (tubularSegments + 1) * (j - 1) + i;\n        const d = (tubularSegments + 1) * j + i;\n\n        // faces\n\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    }\n\n    // build geometry\n\n    this.setIndex(indices);\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n  }\n  copy(source) {\n    super.copy(source);\n    this.parameters = Object.assign({}, source.parameters);\n    return this;\n  }\n\n  /**\n   * Factory method for creating an instance of this class from the given\n   * JSON object.\n   *\n   * @param {Object} data - A JSON object representing the serialized geometry.\n   * @return {TorusGeometry} A new instance.\n   */\n  static fromJSON(data) {\n    return new TorusGeometry(data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);\n  }\n}\n\n/**\n * Creates a torus knot, the particular shape of which is defined by a pair\n * of coprime integers, p and q. If p and q are not coprime, the result will\n * be a torus link.\n *\n * ```js\n * const geometry = new THREE.TorusKnotGeometry( 10, 3, 100, 16 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const torusKnot = new THREE.Mesh( geometry, material );\n * scene.add( torusKnot );\n * ```\n *\n * @augments BufferGeometry\n */\nclass TorusKnotGeometry extends BufferGeometry {\n  /**\n   * Constructs a new torus knot geometry.\n   *\n   * @param {number} [radius=1] - Radius of the torus knot.\n   * @param {number} [tube=0.4] - Radius of the tube.\n   * @param {number} [tubularSegments=64] - The number of tubular segments.\n   * @param {number} [radialSegments=8] - The number of radial segments.\n   * @param {number} [p=2] - This value determines, how many times the geometry winds around its axis of rotational symmetry.\n   * @param {number} [q=3] - This value determines, how many times the geometry winds around a circle in the interior of the torus.\n   */\n  constructor() {\n    let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let tube = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.4;\n    let tubularSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 64;\n    let radialSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 8;\n    let p = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 2;\n    let q = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 3;\n    super();\n    this.type = 'TorusKnotGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      radius: radius,\n      tube: tube,\n      tubularSegments: tubularSegments,\n      radialSegments: radialSegments,\n      p: p,\n      q: q\n    };\n    tubularSegments = Math.floor(tubularSegments);\n    radialSegments = Math.floor(radialSegments);\n\n    // buffers\n\n    const indices = [];\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n\n    // helper variables\n\n    const vertex = new Vector3();\n    const normal = new Vector3();\n    const P1 = new Vector3();\n    const P2 = new Vector3();\n    const B = new Vector3();\n    const T = new Vector3();\n    const N = new Vector3();\n\n    // generate vertices, normals and uvs\n\n    for (let i = 0; i <= tubularSegments; ++i) {\n      // the radian \"u\" is used to calculate the position on the torus curve of the current tubular segment\n\n      const u = i / tubularSegments * p * Math.PI * 2;\n\n      // now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n      // these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n      calculatePositionOnCurve(u, p, q, radius, P1);\n      calculatePositionOnCurve(u + 0.01, p, q, radius, P2);\n\n      // calculate orthonormal basis\n\n      T.subVectors(P2, P1);\n      N.addVectors(P2, P1);\n      B.crossVectors(T, N);\n      N.crossVectors(B, T);\n\n      // normalize B, N. T can be ignored, we don't use it\n\n      B.normalize();\n      N.normalize();\n      for (let j = 0; j <= radialSegments; ++j) {\n        // now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n        // because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n        const v = j / radialSegments * Math.PI * 2;\n        const cx = -tube * Math.cos(v);\n        const cy = tube * Math.sin(v);\n\n        // now calculate the final vertex position.\n        // first we orient the extrusion with our basis vectors, then we add it to the current position on the curve\n\n        vertex.x = P1.x + (cx * N.x + cy * B.x);\n        vertex.y = P1.y + (cx * N.y + cy * B.y);\n        vertex.z = P1.z + (cx * N.z + cy * B.z);\n        vertices.push(vertex.x, vertex.y, vertex.z);\n\n        // normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n        normal.subVectors(vertex, P1).normalize();\n        normals.push(normal.x, normal.y, normal.z);\n\n        // uv\n\n        uvs.push(i / tubularSegments);\n        uvs.push(j / radialSegments);\n      }\n    }\n\n    // generate indices\n\n    for (let j = 1; j <= tubularSegments; j++) {\n      for (let i = 1; i <= radialSegments; i++) {\n        // indices\n\n        const a = (radialSegments + 1) * (j - 1) + (i - 1);\n        const b = (radialSegments + 1) * j + (i - 1);\n        const c = (radialSegments + 1) * j + i;\n        const d = (radialSegments + 1) * (j - 1) + i;\n\n        // faces\n\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    }\n\n    // build geometry\n\n    this.setIndex(indices);\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n    // this function calculates the current position on the torus curve\n\n    function calculatePositionOnCurve(u, p, q, radius, position) {\n      const cu = Math.cos(u);\n      const su = Math.sin(u);\n      const quOverP = q / p * u;\n      const cs = Math.cos(quOverP);\n      position.x = radius * (2 + cs) * 0.5 * cu;\n      position.y = radius * (2 + cs) * su * 0.5;\n      position.z = radius * Math.sin(quOverP) * 0.5;\n    }\n  }\n  copy(source) {\n    super.copy(source);\n    this.parameters = Object.assign({}, source.parameters);\n    return this;\n  }\n\n  /**\n   * Factory method for creating an instance of this class from the given\n   * JSON object.\n   *\n   * @param {Object} data - A JSON object representing the serialized geometry.\n   * @return {TorusKnotGeometry} A new instance.\n   */\n  static fromJSON(data) {\n    return new TorusKnotGeometry(data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q);\n  }\n}\n\n/**\n * Creates a tube that extrudes along a 3D curve.\n *\n * ```js\n * class CustomSinCurve extends THREE.Curve {\n *\n * \tgetPoint( t, optionalTarget = new THREE.Vector3() ) {\n *\n * \t\tconst tx = t * 3 - 1.5;\n * \t\tconst ty = Math.sin( 2 * Math.PI * t );\n * \t\tconst tz = 0;\n *\n * \t\treturn optionalTarget.set( tx, ty, tz );\n * \t}\n *\n * }\n *\n * const path = new CustomSinCurve( 10 );\n * const geometry = new THREE.TubeGeometry( path, 20, 2, 8, false );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n * const mesh = new THREE.Mesh( geometry, material );\n * scene.add( mesh );\n * ```\n *\n * @augments BufferGeometry\n */\nclass TubeGeometry extends BufferGeometry {\n  /**\n   * Constructs a new tube geometry.\n   *\n   * @param {Curve} [path=QuadraticBezierCurve3] - A 3D curve defining the path of the tube.\n   * @param {number} [tubularSegments=64] - The number of segments that make up the tube.\n   * @param {number} [radius=1] -The radius of the tube.\n   * @param {number} [radialSegments=8] - The number of segments that make up the cross-section.\n   * @param {boolean} [closed=false] - Whether the tube is closed or not.\n   */\n  constructor() {\n    let path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new QuadraticBezierCurve3(new Vector3(-1, -1, 0), new Vector3(-1, 1, 0), new Vector3(1, 1, 0));\n    let tubularSegments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 64;\n    let radius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let radialSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 8;\n    let closed = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    super();\n    this.type = 'TubeGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      path: path,\n      tubularSegments: tubularSegments,\n      radius: radius,\n      radialSegments: radialSegments,\n      closed: closed\n    };\n    const frames = path.computeFrenetFrames(tubularSegments, closed);\n\n    // expose internals\n\n    this.tangents = frames.tangents;\n    this.normals = frames.normals;\n    this.binormals = frames.binormals;\n\n    // helper variables\n\n    const vertex = new Vector3();\n    const normal = new Vector3();\n    const uv = new Vector2();\n    let P = new Vector3();\n\n    // buffer\n\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n    const indices = [];\n\n    // create buffer data\n\n    generateBufferData();\n\n    // build geometry\n\n    this.setIndex(indices);\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n    // functions\n\n    function generateBufferData() {\n      for (let i = 0; i < tubularSegments; i++) {\n        generateSegment(i);\n      }\n\n      // if the geometry is not closed, generate the last row of vertices and normals\n      // at the regular position on the given path\n      //\n      // if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n      generateSegment(closed === false ? tubularSegments : 0);\n\n      // uvs are generated in a separate function.\n      // this makes it easy compute correct values for closed geometries\n\n      generateUVs();\n\n      // finally create faces\n\n      generateIndices();\n    }\n    function generateSegment(i) {\n      // we use getPointAt to sample evenly distributed points from the given path\n\n      P = path.getPointAt(i / tubularSegments, P);\n\n      // retrieve corresponding normal and binormal\n\n      const N = frames.normals[i];\n      const B = frames.binormals[i];\n\n      // generate normals and vertices for the current segment\n\n      for (let j = 0; j <= radialSegments; j++) {\n        const v = j / radialSegments * Math.PI * 2;\n        const sin = Math.sin(v);\n        const cos = -Math.cos(v);\n\n        // normal\n\n        normal.x = cos * N.x + sin * B.x;\n        normal.y = cos * N.y + sin * B.y;\n        normal.z = cos * N.z + sin * B.z;\n        normal.normalize();\n        normals.push(normal.x, normal.y, normal.z);\n\n        // vertex\n\n        vertex.x = P.x + radius * normal.x;\n        vertex.y = P.y + radius * normal.y;\n        vertex.z = P.z + radius * normal.z;\n        vertices.push(vertex.x, vertex.y, vertex.z);\n      }\n    }\n    function generateIndices() {\n      for (let j = 1; j <= tubularSegments; j++) {\n        for (let i = 1; i <= radialSegments; i++) {\n          const a = (radialSegments + 1) * (j - 1) + (i - 1);\n          const b = (radialSegments + 1) * j + (i - 1);\n          const c = (radialSegments + 1) * j + i;\n          const d = (radialSegments + 1) * (j - 1) + i;\n\n          // faces\n\n          indices.push(a, b, d);\n          indices.push(b, c, d);\n        }\n      }\n    }\n    function generateUVs() {\n      for (let i = 0; i <= tubularSegments; i++) {\n        for (let j = 0; j <= radialSegments; j++) {\n          uv.x = i / tubularSegments;\n          uv.y = j / radialSegments;\n          uvs.push(uv.x, uv.y);\n        }\n      }\n    }\n  }\n  copy(source) {\n    super.copy(source);\n    this.parameters = Object.assign({}, source.parameters);\n    return this;\n  }\n  toJSON() {\n    const data = super.toJSON();\n    data.path = this.parameters.path.toJSON();\n    return data;\n  }\n\n  /**\n   * Factory method for creating an instance of this class from the given\n   * JSON object.\n   *\n   * @param {Object} data - A JSON object representing the serialized geometry.\n   * @return {TubeGeometry} A new instance.\n   */\n  static fromJSON(data) {\n    // This only works for built-in curves (e.g. CatmullRomCurve3).\n    // User defined curves or instances of CurvePath will not be deserialized.\n    return new TubeGeometry(new Curves[data.path.type]().fromJSON(data.path), data.tubularSegments, data.radius, data.radialSegments, data.closed);\n  }\n}\n\n/**\n * Can be used as a helper object to visualize a geometry as a wireframe.\n *\n * ```js\n * const geometry = new THREE.SphereGeometry();\n *\n * const wireframe = new THREE.WireframeGeometry( geometry );\n *\n * const line = new THREE.LineSegments( wireframe );\n * line.material.depthWrite = false;\n * line.material.opacity = 0.25;\n * line.material.transparent = true;\n *\n * scene.add( line );\n * ```\n *\n * Note: It is not yet possible to serialize/deserialize instances of this class.\n *\n * @augments BufferGeometry\n */\nclass WireframeGeometry extends BufferGeometry {\n  /**\n   * Constructs a new wireframe geometry.\n   *\n   * @param {?BufferGeometry} [geometry=null] - The geometry.\n   */\n  constructor() {\n    let geometry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    super();\n    this.type = 'WireframeGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      geometry: geometry\n    };\n    if (geometry !== null) {\n      // buffer\n\n      const vertices = [];\n      const edges = new Set();\n\n      // helper variables\n\n      const start = new Vector3();\n      const end = new Vector3();\n      if (geometry.index !== null) {\n        // indexed BufferGeometry\n\n        const position = geometry.attributes.position;\n        const indices = geometry.index;\n        let groups = geometry.groups;\n        if (groups.length === 0) {\n          groups = [{\n            start: 0,\n            count: indices.count,\n            materialIndex: 0\n          }];\n        }\n\n        // create a data structure that contains all edges without duplicates\n\n        for (let o = 0, ol = groups.length; o < ol; ++o) {\n          const group = groups[o];\n          const groupStart = group.start;\n          const groupCount = group.count;\n          for (let i = groupStart, l = groupStart + groupCount; i < l; i += 3) {\n            for (let j = 0; j < 3; j++) {\n              const index1 = indices.getX(i + j);\n              const index2 = indices.getX(i + (j + 1) % 3);\n              start.fromBufferAttribute(position, index1);\n              end.fromBufferAttribute(position, index2);\n              if (isUniqueEdge(start, end, edges) === true) {\n                vertices.push(start.x, start.y, start.z);\n                vertices.push(end.x, end.y, end.z);\n              }\n            }\n          }\n        }\n      } else {\n        // non-indexed BufferGeometry\n\n        const position = geometry.attributes.position;\n        for (let i = 0, l = position.count / 3; i < l; i++) {\n          for (let j = 0; j < 3; j++) {\n            // three edges per triangle, an edge is represented as (index1, index2)\n            // e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\n            const index1 = 3 * i + j;\n            const index2 = 3 * i + (j + 1) % 3;\n            start.fromBufferAttribute(position, index1);\n            end.fromBufferAttribute(position, index2);\n            if (isUniqueEdge(start, end, edges) === true) {\n              vertices.push(start.x, start.y, start.z);\n              vertices.push(end.x, end.y, end.z);\n            }\n          }\n        }\n      }\n\n      // build geometry\n\n      this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    }\n  }\n  copy(source) {\n    super.copy(source);\n    this.parameters = Object.assign({}, source.parameters);\n    return this;\n  }\n}\nfunction isUniqueEdge(start, end, edges) {\n  const hash1 = `${start.x},${start.y},${start.z}-${end.x},${end.y},${end.z}`;\n  const hash2 = `${end.x},${end.y},${end.z}-${start.x},${start.y},${start.z}`; // coincident edge\n\n  if (edges.has(hash1) === true || edges.has(hash2) === true) {\n    return false;\n  } else {\n    edges.add(hash1);\n    edges.add(hash2);\n    return true;\n  }\n}\nvar Geometries = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  BoxGeometry: BoxGeometry,\n  CapsuleGeometry: CapsuleGeometry,\n  CircleGeometry: CircleGeometry,\n  ConeGeometry: ConeGeometry,\n  CylinderGeometry: CylinderGeometry,\n  DodecahedronGeometry: DodecahedronGeometry,\n  EdgesGeometry: EdgesGeometry,\n  ExtrudeGeometry: ExtrudeGeometry,\n  IcosahedronGeometry: IcosahedronGeometry,\n  LatheGeometry: LatheGeometry,\n  OctahedronGeometry: OctahedronGeometry,\n  PlaneGeometry: PlaneGeometry,\n  PolyhedronGeometry: PolyhedronGeometry,\n  RingGeometry: RingGeometry,\n  ShapeGeometry: ShapeGeometry,\n  SphereGeometry: SphereGeometry,\n  TetrahedronGeometry: TetrahedronGeometry,\n  TorusGeometry: TorusGeometry,\n  TorusKnotGeometry: TorusKnotGeometry,\n  TubeGeometry: TubeGeometry,\n  WireframeGeometry: WireframeGeometry\n});\n\n/**\n * This material can receive shadows, but otherwise is completely transparent.\n *\n * ```js\n * const geometry = new THREE.PlaneGeometry( 2000, 2000 );\n * geometry.rotateX( - Math.PI / 2 );\n *\n * const material = new THREE.ShadowMaterial();\n * material.opacity = 0.2;\n *\n * const plane = new THREE.Mesh( geometry, material );\n * plane.position.y = -200;\n * plane.receiveShadow = true;\n * scene.add( plane );\n * ```\n *\n * @augments Material\n */\nclass ShadowMaterial extends Material {\n  /**\n   * Constructs a new shadow material.\n   *\n   * @param {Object} [parameters] - An object with one or more properties\n   * defining the material's appearance. Any property of the material\n   * (including any property from inherited materials) can be passed\n   * in here. Color values can be passed any type of value accepted\n   * by {@link Color#set}.\n   */\n  constructor(parameters) {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isShadowMaterial = true;\n    this.type = 'ShadowMaterial';\n\n    /**\n     * Color of the material.\n     *\n     * @type {Color}\n     * @default (0,0,0)\n     */\n    this.color = new Color(0x000000);\n\n    /**\n     * Overwritten since shadow materials are transparent\n     * by default.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.transparent = true;\n\n    /**\n     * Whether the material is affected by fog or not.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.fog = true;\n    this.setValues(parameters);\n  }\n  copy(source) {\n    super.copy(source);\n    this.color.copy(source.color);\n    this.fog = source.fog;\n    return this;\n  }\n}\n\n/**\n * This class works just like {@link ShaderMaterial}, except that definitions\n * of built-in uniforms and attributes are not automatically prepended to the\n * GLSL shader code.\n *\n * `RawShaderMaterial` can only be used with {@link WebGLRenderer}.\n *\n * @augments ShaderMaterial\n */\nclass RawShaderMaterial extends ShaderMaterial {\n  /**\n   * Constructs a new raw shader material.\n   *\n   * @param {Object} [parameters] - An object with one or more properties\n   * defining the material's appearance. Any property of the material\n   * (including any property from inherited materials) can be passed\n   * in here. Color values can be passed any type of value accepted\n   * by {@link Color#set}.\n   */\n  constructor(parameters) {\n    super(parameters);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isRawShaderMaterial = true;\n    this.type = 'RawShaderMaterial';\n  }\n}\n\n/**\n * A standard physically based material, using Metallic-Roughness workflow.\n *\n * Physically based rendering (PBR) has recently become the standard in many\n * 3D applications, such as [Unity]{@link https://blogs.unity3d.com/2014/10/29/physically-based-shading-in-unity-5-a-primer/},\n * [Unreal]{@link https://docs.unrealengine.com/latest/INT/Engine/Rendering/Materials/PhysicallyBased/} and\n * [3D Studio Max]{@link http://area.autodesk.com/blogs/the-3ds-max-blog/what039s-new-for-rendering-in-3ds-max-2017}.\n *\n * This approach differs from older approaches in that instead of using\n * approximations for the way in which light interacts with a surface, a\n * physically correct model is used. The idea is that, instead of tweaking\n * materials to look good under specific lighting, a material can be created\n * that will react 'correctly' under all lighting scenarios.\n *\n * In practice this gives a more accurate and realistic looking result than\n * the {@link MeshLambertMaterial} or {@link MeshPhongMaterial}, at the cost of\n * being somewhat more computationally expensive. `MeshStandardMaterial` uses per-fragment\n * shading.\n *\n * Note that for best results you should always specify an environment map when using this material.\n *\n * For a non-technical introduction to the concept of PBR and how to set up a\n * PBR material, check out these articles by the people at [marmoset]{@link https://www.marmoset.co}:\n *\n * - [Basic Theory of Physically Based Rendering]{@link https://www.marmoset.co/posts/basic-theory-of-physically-based-rendering/}\n * - [Physically Based Rendering and You Can Too]{@link https://www.marmoset.co/posts/physically-based-rendering-and-you-can-too/}\n *\n * Technical details of the approach used in three.js (and most other PBR systems) can be found is this\n * [paper from Disney]{@link https://media.disneyanimation.com/uploads/production/publication_asset/48/asset/s2012_pbs_disney_brdf_notes_v3.pdf}\n * (pdf), by Brent Burley.\n *\n * @augments Material\n */\nclass MeshStandardMaterial extends Material {\n  /**\n   * Constructs a new mesh standard material.\n   *\n   * @param {Object} [parameters] - An object with one or more properties\n   * defining the material's appearance. Any property of the material\n   * (including any property from inherited materials) can be passed\n   * in here. Color values can be passed any type of value accepted\n   * by {@link Color#set}.\n   */\n  constructor(parameters) {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isMeshStandardMaterial = true;\n    this.type = 'MeshStandardMaterial';\n    this.defines = {\n      'STANDARD': ''\n    };\n\n    /**\n     * Color of the material.\n     *\n     * @type {Color}\n     * @default (1,1,1)\n     */\n    this.color = new Color(0xffffff); // diffuse\n\n    /**\n     * How rough the material appears. `0.0` means a smooth mirror reflection, `1.0`\n     * means fully diffuse. If `roughnessMap` is also provided,\n     * both values are multiplied.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.roughness = 1.0;\n\n    /**\n     * How much the material is like a metal. Non-metallic materials such as wood\n     * or stone use `0.0`, metallic use `1.0`, with nothing (usually) in between.\n     * A value between `0.0` and `1.0` could be used for a rusty metal look.\n     * If `metalnessMap` is also provided, both values are multiplied.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.metalness = 0.0;\n\n    /**\n     * The color map. May optionally include an alpha channel, typically combined\n     * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\n     * color is modulated by the diffuse `color`.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.map = null;\n\n    /**\n     * The light map. Requires a second set of UVs.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.lightMap = null;\n\n    /**\n     * Intensity of the baked light.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.lightMapIntensity = 1.0;\n\n    /**\n     * The red channel of this texture is used as the ambient occlusion map.\n     * Requires a second set of UVs.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.aoMap = null;\n\n    /**\n     * Intensity of the ambient occlusion effect. Range is `[0,1]`, where `0`\n     * disables ambient occlusion. Where intensity is `1` and the AO map's\n     * red channel is also `1`, ambient light is fully occluded on a surface.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.aoMapIntensity = 1.0;\n\n    /**\n     * Emissive (light) color of the material, essentially a solid color\n     * unaffected by other lighting.\n     *\n     * @type {Color}\n     * @default (0,0,0)\n     */\n    this.emissive = new Color(0x000000);\n\n    /**\n     * Intensity of the emissive light. Modulates the emissive color.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.emissiveIntensity = 1.0;\n\n    /**\n     * Set emissive (glow) map. The emissive map color is modulated by the\n     * emissive color and the emissive intensity. If you have an emissive map,\n     * be sure to set the emissive color to something other than black.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.emissiveMap = null;\n\n    /**\n     * The texture to create a bump map. The black and white values map to the\n     * perceived depth in relation to the lights. Bump doesn't actually affect\n     * the geometry of the object, only the lighting. If a normal map is defined\n     * this will be ignored.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.bumpMap = null;\n\n    /**\n     * How much the bump map affects the material. Typical range is `[0,1]`.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.bumpScale = 1;\n\n    /**\n     * The texture to create a normal map. The RGB values affect the surface\n     * normal for each pixel fragment and change the way the color is lit. Normal\n     * maps do not change the actual shape of the surface, only the lighting. In\n     * case the material has a normal map authored using the left handed\n     * convention, the `y` component of `normalScale` should be negated to compensate\n     * for the different handedness.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.normalMap = null;\n\n    /**\n     * The type of normal map.\n     *\n     * @type {(TangentSpaceNormalMap|ObjectSpaceNormalMap)}\n     * @default TangentSpaceNormalMap\n     */\n    this.normalMapType = TangentSpaceNormalMap;\n\n    /**\n     * How much the normal map affects the material. Typical value range is `[0,1]`.\n     *\n     * @type {Vector2}\n     * @default (1,1)\n     */\n    this.normalScale = new Vector2(1, 1);\n\n    /**\n     * The displacement map affects the position of the mesh's vertices. Unlike\n     * other maps which only affect the light and shade of the material the\n     * displaced vertices can cast shadows, block other objects, and otherwise\n     * act as real geometry. The displacement texture is an image where the value\n     * of each pixel (white being the highest) is mapped against, and\n     * repositions, the vertices of the mesh.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.displacementMap = null;\n\n    /**\n     * How much the displacement map affects the mesh (where black is no\n     * displacement, and white is maximum displacement). Without a displacement\n     * map set, this value is not applied.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.displacementScale = 1;\n\n    /**\n     * The offset of the displacement map's values on the mesh's vertices.\n     * The bias is added to the scaled sample of the displacement map.\n     * Without a displacement map set, this value is not applied.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.displacementBias = 0;\n\n    /**\n     * The green channel of this texture is used to alter the roughness of the\n     * material.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.roughnessMap = null;\n\n    /**\n     * The blue channel of this texture is used to alter the metalness of the\n     * material.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.metalnessMap = null;\n\n    /**\n     * The alpha map is a grayscale texture that controls the opacity across the\n     * surface (black: fully transparent; white: fully opaque).\n     *\n     * Only the color of the texture is used, ignoring the alpha channel if one\n     * exists. For RGB and RGBA textures, the renderer will use the green channel\n     * when sampling this texture due to the extra bit of precision provided for\n     * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n     * luminance/alpha textures will also still work as expected.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.alphaMap = null;\n\n    /**\n     * The environment map. To ensure a physically correct rendering, environment maps\n     * are internally pre-processed with {@link PMREMGenerator}.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.envMap = null;\n\n    /**\n     * The rotation of the environment map in radians.\n     *\n     * @type {Euler}\n     * @default (0,0,0)\n     */\n    this.envMapRotation = new Euler();\n\n    /**\n     * Scales the effect of the environment map by multiplying its color.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.envMapIntensity = 1.0;\n\n    /**\n     * Renders the geometry as a wireframe.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.wireframe = false;\n\n    /**\n     * Controls the thickness of the wireframe.\n     *\n     * Can only be used with {@link SVGRenderer}.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.wireframeLinewidth = 1;\n\n    /**\n     * Defines appearance of wireframe ends.\n     *\n     * Can only be used with {@link SVGRenderer}.\n     *\n     * @type {('round'|'bevel'|'miter')}\n     * @default 'round'\n     */\n    this.wireframeLinecap = 'round';\n\n    /**\n     * Defines appearance of wireframe joints.\n     *\n     * Can only be used with {@link SVGRenderer}.\n     *\n     * @type {('round'|'bevel'|'miter')}\n     * @default 'round'\n     */\n    this.wireframeLinejoin = 'round';\n\n    /**\n     * Whether the material is rendered with flat shading or not.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.flatShading = false;\n\n    /**\n     * Whether the material is affected by fog or not.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.fog = true;\n    this.setValues(parameters);\n  }\n  copy(source) {\n    super.copy(source);\n    this.defines = {\n      'STANDARD': ''\n    };\n    this.color.copy(source.color);\n    this.roughness = source.roughness;\n    this.metalness = source.metalness;\n    this.map = source.map;\n    this.lightMap = source.lightMap;\n    this.lightMapIntensity = source.lightMapIntensity;\n    this.aoMap = source.aoMap;\n    this.aoMapIntensity = source.aoMapIntensity;\n    this.emissive.copy(source.emissive);\n    this.emissiveMap = source.emissiveMap;\n    this.emissiveIntensity = source.emissiveIntensity;\n    this.bumpMap = source.bumpMap;\n    this.bumpScale = source.bumpScale;\n    this.normalMap = source.normalMap;\n    this.normalMapType = source.normalMapType;\n    this.normalScale.copy(source.normalScale);\n    this.displacementMap = source.displacementMap;\n    this.displacementScale = source.displacementScale;\n    this.displacementBias = source.displacementBias;\n    this.roughnessMap = source.roughnessMap;\n    this.metalnessMap = source.metalnessMap;\n    this.alphaMap = source.alphaMap;\n    this.envMap = source.envMap;\n    this.envMapRotation.copy(source.envMapRotation);\n    this.envMapIntensity = source.envMapIntensity;\n    this.wireframe = source.wireframe;\n    this.wireframeLinewidth = source.wireframeLinewidth;\n    this.wireframeLinecap = source.wireframeLinecap;\n    this.wireframeLinejoin = source.wireframeLinejoin;\n    this.flatShading = source.flatShading;\n    this.fog = source.fog;\n    return this;\n  }\n}\n\n/**\n * An extension of the {@link MeshStandardMaterial}, providing more advanced\n * physically-based rendering properties:\n *\n * - Anisotropy: Ability to represent the anisotropic property of materials\n * as observable with brushed metals.\n * - Clearcoat: Some materials — like car paints, carbon fiber, and wet surfaces — require\n * a clear, reflective layer on top of another layer that may be irregular or rough.\n * Clearcoat approximates this effect, without the need for a separate transparent surface.\n * - Iridescence: Allows to render the effect where hue varies  depending on the viewing\n * angle and illumination angle. This can be seen on soap bubbles, oil films, or on the\n * wings of many insects.\n * - Physically-based transparency: One limitation of {@link Material#opacity} is that highly\n * transparent materials are less reflective. Physically-based transmission provides a more\n * realistic option for thin, transparent surfaces like glass.\n * - Advanced reflectivity: More flexible reflectivity for non-metallic materials.\n * - Sheen: Can be used for representing cloth and fabric materials.\n *\n * As a result of these complex shading features, `MeshPhysicalMaterial` has a\n * higher performance cost, per pixel, than other three.js materials. Most\n * effects are disabled by default, and add cost as they are enabled. For\n * best results, always specify an environment map when using this material.\n *\n * @augments MeshStandardMaterial\n */\nclass MeshPhysicalMaterial extends MeshStandardMaterial {\n  /**\n   * Constructs a new mesh physical material.\n   *\n   * @param {Object} [parameters] - An object with one or more properties\n   * defining the material's appearance. Any property of the material\n   * (including any property from inherited materials) can be passed\n   * in here. Color values can be passed any type of value accepted\n   * by {@link Color#set}.\n   */\n  constructor(parameters) {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isMeshPhysicalMaterial = true;\n    this.defines = {\n      'STANDARD': '',\n      'PHYSICAL': ''\n    };\n    this.type = 'MeshPhysicalMaterial';\n\n    /**\n     * The rotation of the anisotropy in tangent, bitangent space, measured in radians\n     * counter-clockwise from the tangent. When `anisotropyMap` is present, this\n     * property provides additional rotation to the vectors in the texture.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.anisotropyRotation = 0;\n\n    /**\n     * Red and green channels represent the anisotropy direction in `[-1, 1]` tangent,\n     * bitangent space, to be rotated by `anisotropyRotation`. The blue channel\n     * contains strength as `[0, 1]` to be multiplied by `anisotropy`.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.anisotropyMap = null;\n\n    /**\n     * The red channel of this texture is multiplied against `clearcoat`,\n     * for per-pixel control over a coating's intensity.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.clearcoatMap = null;\n\n    /**\n     * Roughness of the clear coat layer, from `0.0` to `1.0`.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.clearcoatRoughness = 0.0;\n\n    /**\n     * The green channel of this texture is multiplied against\n     * `clearcoatRoughness`, for per-pixel control over a coating's roughness.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.clearcoatRoughnessMap = null;\n\n    /**\n     * How much `clearcoatNormalMap` affects the clear coat layer, from\n     * `(0,0)` to `(1,1)`.\n     *\n     * @type {Vector2}\n     * @default (1,1)\n     */\n    this.clearcoatNormalScale = new Vector2(1, 1);\n\n    /**\n     * Can be used to enable independent normals for the clear coat layer.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.clearcoatNormalMap = null;\n\n    /**\n     * Index-of-refraction for non-metallic materials, from `1.0` to `2.333`.\n     *\n     * @type {number}\n     * @default 1.5\n     */\n    this.ior = 1.5;\n\n    /**\n     * Degree of reflectivity, from `0.0` to `1.0`. Default is `0.5`, which\n     * corresponds to an index-of-refraction of `1.5`.\n     *\n     * This models the reflectivity of non-metallic materials. It has no effect\n     * when `metalness` is `1.0`\n     *\n     * @name MeshPhysicalMaterial#reflectivity\n     * @type {number}\n     * @default 0.5\n     */\n    Object.defineProperty(this, 'reflectivity', {\n      get: function () {\n        return clamp(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1);\n      },\n      set: function (reflectivity) {\n        this.ior = (1 + 0.4 * reflectivity) / (1 - 0.4 * reflectivity);\n      }\n    });\n\n    /**\n     * The red channel of this texture is multiplied against `iridescence`, for per-pixel\n     * control over iridescence.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.iridescenceMap = null;\n\n    /**\n     * Strength of the iridescence RGB color shift effect, represented by an index-of-refraction.\n     * Between `1.0` to `2.333`.\n     *\n     * @type {number}\n     * @default 1.3\n     */\n    this.iridescenceIOR = 1.3;\n\n    /**\n     *Array of exactly 2 elements, specifying minimum and maximum thickness of the iridescence layer.\n     Thickness of iridescence layer has an equivalent effect of the one `thickness` has on `ior`.\n     *\n     * @type {Array<number,number>}\n     * @default [100,400]\n     */\n    this.iridescenceThicknessRange = [100, 400];\n\n    /**\n     * A texture that defines the thickness of the iridescence layer, stored in the green channel.\n     * Minimum and maximum values of thickness are defined by `iridescenceThicknessRange` array:\n     * - `0.0` in the green channel will result in thickness equal to first element of the array.\n     * - `1.0` in the green channel will result in thickness equal to second element of the array.\n     * - Values in-between will linearly interpolate between the elements of the array.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.iridescenceThicknessMap = null;\n\n    /**\n     * The sheen tint.\n     *\n     * @type {Color}\n     * @default (0,0,0)\n     */\n    this.sheenColor = new Color(0x000000);\n\n    /**\n     * The RGB channels of this texture are multiplied against  `sheenColor`, for per-pixel control\n     * over sheen tint.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.sheenColorMap = null;\n\n    /**\n     * Roughness of the sheen layer, from `0.0` to `1.0`.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.sheenRoughness = 1.0;\n\n    /**\n     * The alpha channel of this texture is multiplied against `sheenRoughness`, for per-pixel control\n     * over sheen roughness.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.sheenRoughnessMap = null;\n\n    /**\n     * The red channel of this texture is multiplied against `transmission`, for per-pixel control over\n     * optical transparency.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.transmissionMap = null;\n\n    /**\n     * The thickness of the volume beneath the surface. The value is given in the\n     * coordinate space of the mesh. If the value is `0` the material is\n     * thin-walled. Otherwise the material is a volume boundary.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.thickness = 0;\n\n    /**\n     * A texture that defines the thickness, stored in the green channel. This will\n     * be multiplied by `thickness`.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.thicknessMap = null;\n\n    /**\n     * Density of the medium given as the average distance that light travels in\n     * the medium before interacting with a particle. The value is given in world\n     * space units, and must be greater than zero.\n     *\n     * @type {number}\n     * @default Infinity\n     */\n    this.attenuationDistance = Infinity;\n\n    /**\n     * The color that white light turns into due to absorption when reaching the\n     * attenuation distance.\n     *\n     * @type {Color}\n     * @default (1,1,1)\n     */\n    this.attenuationColor = new Color(1, 1, 1);\n\n    /**\n     * A float that scales the amount of specular reflection for non-metals only.\n     * When set to zero, the model is effectively Lambertian. From `0.0` to `1.0`.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.specularIntensity = 1.0;\n\n    /**\n     * The alpha channel of this texture is multiplied against `specularIntensity`,\n     * for per-pixel control over specular intensity.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.specularIntensityMap = null;\n\n    /**\n     * Tints the specular reflection at normal incidence for non-metals only.\n     *\n     * @type {Color}\n     * @default (1,1,1)\n     */\n    this.specularColor = new Color(1, 1, 1);\n\n    /**\n     * The RGB channels of this texture are multiplied against `specularColor`,\n     * for per-pixel control over specular color.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.specularColorMap = null;\n    this._anisotropy = 0;\n    this._clearcoat = 0;\n    this._dispersion = 0;\n    this._iridescence = 0;\n    this._sheen = 0.0;\n    this._transmission = 0;\n    this.setValues(parameters);\n  }\n\n  /**\n   * The anisotropy strength.\n   *\n   * @type {number}\n   * @default 0\n   */\n  get anisotropy() {\n    return this._anisotropy;\n  }\n  set anisotropy(value) {\n    if (this._anisotropy > 0 !== value > 0) {\n      this.version++;\n    }\n    this._anisotropy = value;\n  }\n\n  /**\n   * Represents the intensity of the clear coat layer, from `0.0` to `1.0`. Use\n   * clear coat related properties to enable multilayer materials that have a\n   * thin translucent layer over the base layer.\n   *\n   * @type {number}\n   * @default 0\n   */\n  get clearcoat() {\n    return this._clearcoat;\n  }\n  set clearcoat(value) {\n    if (this._clearcoat > 0 !== value > 0) {\n      this.version++;\n    }\n    this._clearcoat = value;\n  }\n  /**\n   * The intensity of the iridescence layer, simulating RGB color shift based on the angle between\n   * the surface and the viewer, from `0.0` to `1.0`.\n   *\n   * @type {number}\n   * @default 0\n   */\n  get iridescence() {\n    return this._iridescence;\n  }\n  set iridescence(value) {\n    if (this._iridescence > 0 !== value > 0) {\n      this.version++;\n    }\n    this._iridescence = value;\n  }\n\n  /**\n   * Defines the strength of the angular separation of colors (chromatic aberration) transmitting\n   * through a relatively clear volume. Any value zero or larger is valid, the typical range of\n   * realistic values is `[0, 1]`. This property can be only be used with transmissive objects.\n   *\n   * @type {number}\n   * @default 0\n   */\n  get dispersion() {\n    return this._dispersion;\n  }\n  set dispersion(value) {\n    if (this._dispersion > 0 !== value > 0) {\n      this.version++;\n    }\n    this._dispersion = value;\n  }\n\n  /**\n   * The intensity of the sheen layer, from `0.0` to `1.0`.\n   *\n   * @type {number}\n   * @default 0\n   */\n  get sheen() {\n    return this._sheen;\n  }\n  set sheen(value) {\n    if (this._sheen > 0 !== value > 0) {\n      this.version++;\n    }\n    this._sheen = value;\n  }\n\n  /**\n   * Degree of transmission (or optical transparency), from `0.0` to `1.0`.\n   *\n   * Thin, transparent or semitransparent, plastic or glass materials remain\n   * largely reflective even if they are fully transmissive. The transmission\n   * property can be used to model these materials.\n   *\n   * When transmission is non-zero, `opacity` should be  set to `1`.\n   *\n   * @type {number}\n   * @default 0\n   */\n  get transmission() {\n    return this._transmission;\n  }\n  set transmission(value) {\n    if (this._transmission > 0 !== value > 0) {\n      this.version++;\n    }\n    this._transmission = value;\n  }\n  copy(source) {\n    super.copy(source);\n    this.defines = {\n      'STANDARD': '',\n      'PHYSICAL': ''\n    };\n    this.anisotropy = source.anisotropy;\n    this.anisotropyRotation = source.anisotropyRotation;\n    this.anisotropyMap = source.anisotropyMap;\n    this.clearcoat = source.clearcoat;\n    this.clearcoatMap = source.clearcoatMap;\n    this.clearcoatRoughness = source.clearcoatRoughness;\n    this.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n    this.clearcoatNormalMap = source.clearcoatNormalMap;\n    this.clearcoatNormalScale.copy(source.clearcoatNormalScale);\n    this.dispersion = source.dispersion;\n    this.ior = source.ior;\n    this.iridescence = source.iridescence;\n    this.iridescenceMap = source.iridescenceMap;\n    this.iridescenceIOR = source.iridescenceIOR;\n    this.iridescenceThicknessRange = [...source.iridescenceThicknessRange];\n    this.iridescenceThicknessMap = source.iridescenceThicknessMap;\n    this.sheen = source.sheen;\n    this.sheenColor.copy(source.sheenColor);\n    this.sheenColorMap = source.sheenColorMap;\n    this.sheenRoughness = source.sheenRoughness;\n    this.sheenRoughnessMap = source.sheenRoughnessMap;\n    this.transmission = source.transmission;\n    this.transmissionMap = source.transmissionMap;\n    this.thickness = source.thickness;\n    this.thicknessMap = source.thicknessMap;\n    this.attenuationDistance = source.attenuationDistance;\n    this.attenuationColor.copy(source.attenuationColor);\n    this.specularIntensity = source.specularIntensity;\n    this.specularIntensityMap = source.specularIntensityMap;\n    this.specularColor.copy(source.specularColor);\n    this.specularColorMap = source.specularColorMap;\n    return this;\n  }\n}\n\n/**\n * A material for shiny surfaces with specular highlights.\n *\n * The material uses a non-physically based [Blinn-Phong]{@link https://en.wikipedia.org/wiki/Blinn-Phong_shading_model}\n * model for calculating reflectance. Unlike the Lambertian model used in the\n * {@link MeshLambertMaterial} this can simulate shiny surfaces with specular\n * highlights (such as varnished wood). `MeshPhongMaterial` uses per-fragment shading.\n *\n * Performance will generally be greater when using this material over the\n * {@link MeshStandardMaterial} or {@link MeshPhysicalMaterial}, at the cost of\n * some graphical accuracy.\n *\n * @augments Material\n */\nclass MeshPhongMaterial extends Material {\n  /**\n   * Constructs a new mesh phong material.\n   *\n   * @param {Object} [parameters] - An object with one or more properties\n   * defining the material's appearance. Any property of the material\n   * (including any property from inherited materials) can be passed\n   * in here. Color values can be passed any type of value accepted\n   * by {@link Color#set}.\n   */\n  constructor(parameters) {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isMeshPhongMaterial = true;\n    this.type = 'MeshPhongMaterial';\n\n    /**\n     * Color of the material.\n     *\n     * @type {Color}\n     * @default (1,1,1)\n     */\n    this.color = new Color(0xffffff); // diffuse\n\n    /**\n     * Specular color of the material. The default color is set to `0x111111` (very dark grey)\n     *\n     * This defines how shiny the material is and the color of its shine.\n     *\n     * @type {Color}\n     */\n    this.specular = new Color(0x111111);\n\n    /**\n     * How shiny the specular highlight is; a higher value gives a sharper highlight.\n     *\n     * @type {number}\n     * @default 30\n     */\n    this.shininess = 30;\n\n    /**\n     * The color map. May optionally include an alpha channel, typically combined\n     * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\n     * color is modulated by the diffuse `color`.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.map = null;\n\n    /**\n     * The light map. Requires a second set of UVs.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.lightMap = null;\n\n    /**\n     * Intensity of the baked light.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.lightMapIntensity = 1.0;\n\n    /**\n     * The red channel of this texture is used as the ambient occlusion map.\n     * Requires a second set of UVs.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.aoMap = null;\n\n    /**\n     * Intensity of the ambient occlusion effect. Range is `[0,1]`, where `0`\n     * disables ambient occlusion. Where intensity is `1` and the AO map's\n     * red channel is also `1`, ambient light is fully occluded on a surface.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.aoMapIntensity = 1.0;\n\n    /**\n     * Emissive (light) color of the material, essentially a solid color\n     * unaffected by other lighting.\n     *\n     * @type {Color}\n     * @default (0,0,0)\n     */\n    this.emissive = new Color(0x000000);\n\n    /**\n     * Intensity of the emissive light. Modulates the emissive color.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.emissiveIntensity = 1.0;\n\n    /**\n     * Set emissive (glow) map. The emissive map color is modulated by the\n     * emissive color and the emissive intensity. If you have an emissive map,\n     * be sure to set the emissive color to something other than black.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.emissiveMap = null;\n\n    /**\n     * The texture to create a bump map. The black and white values map to the\n     * perceived depth in relation to the lights. Bump doesn't actually affect\n     * the geometry of the object, only the lighting. If a normal map is defined\n     * this will be ignored.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.bumpMap = null;\n\n    /**\n     * How much the bump map affects the material. Typical range is `[0,1]`.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.bumpScale = 1;\n\n    /**\n     * The texture to create a normal map. The RGB values affect the surface\n     * normal for each pixel fragment and change the way the color is lit. Normal\n     * maps do not change the actual shape of the surface, only the lighting. In\n     * case the material has a normal map authored using the left handed\n     * convention, the `y` component of `normalScale` should be negated to compensate\n     * for the different handedness.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.normalMap = null;\n\n    /**\n     * The type of normal map.\n     *\n     * @type {(TangentSpaceNormalMap|ObjectSpaceNormalMap)}\n     * @default TangentSpaceNormalMap\n     */\n    this.normalMapType = TangentSpaceNormalMap;\n\n    /**\n     * How much the normal map affects the material. Typical value range is `[0,1]`.\n     *\n     * @type {Vector2}\n     * @default (1,1)\n     */\n    this.normalScale = new Vector2(1, 1);\n\n    /**\n     * The displacement map affects the position of the mesh's vertices. Unlike\n     * other maps which only affect the light and shade of the material the\n     * displaced vertices can cast shadows, block other objects, and otherwise\n     * act as real geometry. The displacement texture is an image where the value\n     * of each pixel (white being the highest) is mapped against, and\n     * repositions, the vertices of the mesh.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.displacementMap = null;\n\n    /**\n     * How much the displacement map affects the mesh (where black is no\n     * displacement, and white is maximum displacement). Without a displacement\n     * map set, this value is not applied.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.displacementScale = 1;\n\n    /**\n     * The offset of the displacement map's values on the mesh's vertices.\n     * The bias is added to the scaled sample of the displacement map.\n     * Without a displacement map set, this value is not applied.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.displacementBias = 0;\n\n    /**\n     * The specular map value affects both how much the specular surface\n     * highlight contributes and how much of the environment map affects the\n     * surface.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.specularMap = null;\n\n    /**\n     * The alpha map is a grayscale texture that controls the opacity across the\n     * surface (black: fully transparent; white: fully opaque).\n     *\n     * Only the color of the texture is used, ignoring the alpha channel if one\n     * exists. For RGB and RGBA textures, the renderer will use the green channel\n     * when sampling this texture due to the extra bit of precision provided for\n     * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n     * luminance/alpha textures will also still work as expected.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.alphaMap = null;\n\n    /**\n     * The environment map.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.envMap = null;\n\n    /**\n     * The rotation of the environment map in radians.\n     *\n     * @type {Euler}\n     * @default (0,0,0)\n     */\n    this.envMapRotation = new Euler();\n\n    /**\n     * How to combine the result of the surface's color with the environment map, if any.\n     *\n     * When set to `MixOperation`, the {@link MeshBasicMaterial#reflectivity} is used to\n     * blend between the two colors.\n     *\n     * @type {(MultiplyOperation|MixOperation|AddOperation)}\n     * @default MultiplyOperation\n     */\n    this.combine = MultiplyOperation;\n\n    /**\n     * How much the environment map affects the surface.\n     * The valid range is between `0` (no reflections) and `1` (full reflections).\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.reflectivity = 1;\n\n    /**\n     * The index of refraction (IOR) of air (approximately 1) divided by the\n     * index of refraction of the material. It is used with environment mapping\n     * modes {@link CubeRefractionMapping} and {@link EquirectangularRefractionMapping}.\n     * The refraction ratio should not exceed `1`.\n     *\n     * @type {number}\n     * @default 0.98\n     */\n    this.refractionRatio = 0.98;\n\n    /**\n     * Renders the geometry as a wireframe.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.wireframe = false;\n\n    /**\n     * Controls the thickness of the wireframe.\n     *\n     * Can only be used with {@link SVGRenderer}.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.wireframeLinewidth = 1;\n\n    /**\n     * Defines appearance of wireframe ends.\n     *\n     * Can only be used with {@link SVGRenderer}.\n     *\n     * @type {('round'|'bevel'|'miter')}\n     * @default 'round'\n     */\n    this.wireframeLinecap = 'round';\n\n    /**\n     * Defines appearance of wireframe joints.\n     *\n     * Can only be used with {@link SVGRenderer}.\n     *\n     * @type {('round'|'bevel'|'miter')}\n     * @default 'round'\n     */\n    this.wireframeLinejoin = 'round';\n\n    /**\n     * Whether the material is rendered with flat shading or not.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.flatShading = false;\n\n    /**\n     * Whether the material is affected by fog or not.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.fog = true;\n    this.setValues(parameters);\n  }\n  copy(source) {\n    super.copy(source);\n    this.color.copy(source.color);\n    this.specular.copy(source.specular);\n    this.shininess = source.shininess;\n    this.map = source.map;\n    this.lightMap = source.lightMap;\n    this.lightMapIntensity = source.lightMapIntensity;\n    this.aoMap = source.aoMap;\n    this.aoMapIntensity = source.aoMapIntensity;\n    this.emissive.copy(source.emissive);\n    this.emissiveMap = source.emissiveMap;\n    this.emissiveIntensity = source.emissiveIntensity;\n    this.bumpMap = source.bumpMap;\n    this.bumpScale = source.bumpScale;\n    this.normalMap = source.normalMap;\n    this.normalMapType = source.normalMapType;\n    this.normalScale.copy(source.normalScale);\n    this.displacementMap = source.displacementMap;\n    this.displacementScale = source.displacementScale;\n    this.displacementBias = source.displacementBias;\n    this.specularMap = source.specularMap;\n    this.alphaMap = source.alphaMap;\n    this.envMap = source.envMap;\n    this.envMapRotation.copy(source.envMapRotation);\n    this.combine = source.combine;\n    this.reflectivity = source.reflectivity;\n    this.refractionRatio = source.refractionRatio;\n    this.wireframe = source.wireframe;\n    this.wireframeLinewidth = source.wireframeLinewidth;\n    this.wireframeLinecap = source.wireframeLinecap;\n    this.wireframeLinejoin = source.wireframeLinejoin;\n    this.flatShading = source.flatShading;\n    this.fog = source.fog;\n    return this;\n  }\n}\n\n/**\n * A material implementing toon shading.\n *\n * @augments Material\n */\nclass MeshToonMaterial extends Material {\n  /**\n   * Constructs a new mesh toon material.\n   *\n   * @param {Object} [parameters] - An object with one or more properties\n   * defining the material's appearance. Any property of the material\n   * (including any property from inherited materials) can be passed\n   * in here. Color values can be passed any type of value accepted\n   * by {@link Color#set}.\n   */\n  constructor(parameters) {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isMeshToonMaterial = true;\n    this.defines = {\n      'TOON': ''\n    };\n    this.type = 'MeshToonMaterial';\n\n    /**\n     * Color of the material.\n     *\n     * @type {Color}\n     * @default (1,1,1)\n     */\n    this.color = new Color(0xffffff);\n\n    /**\n     * The color map. May optionally include an alpha channel, typically combined\n     * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\n     * color is modulated by the diffuse `color`.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.map = null;\n\n    /**\n     * Gradient map for toon shading. It's required to set\n     * {@link Texture#minFilter} and {@link Texture#magFilter} to {@linkNearestFilter}\n     * when using this type of texture.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.gradientMap = null;\n\n    /**\n     * The light map. Requires a second set of UVs.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.lightMap = null;\n\n    /**\n     * Intensity of the baked light.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.lightMapIntensity = 1.0;\n\n    /**\n     * The red channel of this texture is used as the ambient occlusion map.\n     * Requires a second set of UVs.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.aoMap = null;\n\n    /**\n     * Intensity of the ambient occlusion effect. Range is `[0,1]`, where `0`\n     * disables ambient occlusion. Where intensity is `1` and the AO map's\n     * red channel is also `1`, ambient light is fully occluded on a surface.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.aoMapIntensity = 1.0;\n\n    /**\n     * Emissive (light) color of the material, essentially a solid color\n     * unaffected by other lighting.\n     *\n     * @type {Color}\n     * @default (0,0,0)\n     */\n    this.emissive = new Color(0x000000);\n\n    /**\n     * Intensity of the emissive light. Modulates the emissive color.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.emissiveIntensity = 1.0;\n\n    /**\n     * Set emissive (glow) map. The emissive map color is modulated by the\n     * emissive color and the emissive intensity. If you have an emissive map,\n     * be sure to set the emissive color to something other than black.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.emissiveMap = null;\n\n    /**\n     * The texture to create a bump map. The black and white values map to the\n     * perceived depth in relation to the lights. Bump doesn't actually affect\n     * the geometry of the object, only the lighting. If a normal map is defined\n     * this will be ignored.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.bumpMap = null;\n\n    /**\n     * How much the bump map affects the material. Typical range is `[0,1]`.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.bumpScale = 1;\n\n    /**\n     * The texture to create a normal map. The RGB values affect the surface\n     * normal for each pixel fragment and change the way the color is lit. Normal\n     * maps do not change the actual shape of the surface, only the lighting. In\n     * case the material has a normal map authored using the left handed\n     * convention, the `y` component of `normalScale` should be negated to compensate\n     * for the different handedness.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.normalMap = null;\n\n    /**\n     * The type of normal map.\n     *\n     * @type {(TangentSpaceNormalMap|ObjectSpaceNormalMap)}\n     * @default TangentSpaceNormalMap\n     */\n    this.normalMapType = TangentSpaceNormalMap;\n\n    /**\n     * How much the normal map affects the material. Typical value range is `[0,1]`.\n     *\n     * @type {Vector2}\n     * @default (1,1)\n     */\n    this.normalScale = new Vector2(1, 1);\n\n    /**\n     * The displacement map affects the position of the mesh's vertices. Unlike\n     * other maps which only affect the light and shade of the material the\n     * displaced vertices can cast shadows, block other objects, and otherwise\n     * act as real geometry. The displacement texture is an image where the value\n     * of each pixel (white being the highest) is mapped against, and\n     * repositions, the vertices of the mesh.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.displacementMap = null;\n\n    /**\n     * How much the displacement map affects the mesh (where black is no\n     * displacement, and white is maximum displacement). Without a displacement\n     * map set, this value is not applied.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.displacementScale = 1;\n\n    /**\n     * The offset of the displacement map's values on the mesh's vertices.\n     * The bias is added to the scaled sample of the displacement map.\n     * Without a displacement map set, this value is not applied.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.displacementBias = 0;\n\n    /**\n     * The alpha map is a grayscale texture that controls the opacity across the\n     * surface (black: fully transparent; white: fully opaque).\n     *\n     * Only the color of the texture is used, ignoring the alpha channel if one\n     * exists. For RGB and RGBA textures, the renderer will use the green channel\n     * when sampling this texture due to the extra bit of precision provided for\n     * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n     * luminance/alpha textures will also still work as expected.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.alphaMap = null;\n\n    /**\n     * Renders the geometry as a wireframe.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.wireframe = false;\n\n    /**\n     * Controls the thickness of the wireframe.\n     *\n     * Can only be used with {@link SVGRenderer}.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.wireframeLinewidth = 1;\n\n    /**\n     * Defines appearance of wireframe ends.\n     *\n     * Can only be used with {@link SVGRenderer}.\n     *\n     * @type {('round'|'bevel'|'miter')}\n     * @default 'round'\n     */\n    this.wireframeLinecap = 'round';\n\n    /**\n     * Defines appearance of wireframe joints.\n     *\n     * Can only be used with {@link SVGRenderer}.\n     *\n     * @type {('round'|'bevel'|'miter')}\n     * @default 'round'\n     */\n    this.wireframeLinejoin = 'round';\n\n    /**\n     * Whether the material is affected by fog or not.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.fog = true;\n    this.setValues(parameters);\n  }\n  copy(source) {\n    super.copy(source);\n    this.color.copy(source.color);\n    this.map = source.map;\n    this.gradientMap = source.gradientMap;\n    this.lightMap = source.lightMap;\n    this.lightMapIntensity = source.lightMapIntensity;\n    this.aoMap = source.aoMap;\n    this.aoMapIntensity = source.aoMapIntensity;\n    this.emissive.copy(source.emissive);\n    this.emissiveMap = source.emissiveMap;\n    this.emissiveIntensity = source.emissiveIntensity;\n    this.bumpMap = source.bumpMap;\n    this.bumpScale = source.bumpScale;\n    this.normalMap = source.normalMap;\n    this.normalMapType = source.normalMapType;\n    this.normalScale.copy(source.normalScale);\n    this.displacementMap = source.displacementMap;\n    this.displacementScale = source.displacementScale;\n    this.displacementBias = source.displacementBias;\n    this.alphaMap = source.alphaMap;\n    this.wireframe = source.wireframe;\n    this.wireframeLinewidth = source.wireframeLinewidth;\n    this.wireframeLinecap = source.wireframeLinecap;\n    this.wireframeLinejoin = source.wireframeLinejoin;\n    this.fog = source.fog;\n    return this;\n  }\n}\n\n/**\n * A material that maps the normal vectors to RGB colors.\n *\n * @augments Material\n */\nclass MeshNormalMaterial extends Material {\n  /**\n   * Constructs a new mesh normal material.\n   *\n   * @param {Object} [parameters] - An object with one or more properties\n   * defining the material's appearance. Any property of the material\n   * (including any property from inherited materials) can be passed\n   * in here. Color values can be passed any type of value accepted\n   * by {@link Color#set}.\n   */\n  constructor(parameters) {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isMeshNormalMaterial = true;\n    this.type = 'MeshNormalMaterial';\n\n    /**\n     * The texture to create a bump map. The black and white values map to the\n     * perceived depth in relation to the lights. Bump doesn't actually affect\n     * the geometry of the object, only the lighting. If a normal map is defined\n     * this will be ignored.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.bumpMap = null;\n\n    /**\n     * How much the bump map affects the material. Typical range is `[0,1]`.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.bumpScale = 1;\n\n    /**\n     * The texture to create a normal map. The RGB values affect the surface\n     * normal for each pixel fragment and change the way the color is lit. Normal\n     * maps do not change the actual shape of the surface, only the lighting. In\n     * case the material has a normal map authored using the left handed\n     * convention, the `y` component of `normalScale` should be negated to compensate\n     * for the different handedness.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.normalMap = null;\n\n    /**\n     * The type of normal map.\n     *\n     * @type {(TangentSpaceNormalMap|ObjectSpaceNormalMap)}\n     * @default TangentSpaceNormalMap\n     */\n    this.normalMapType = TangentSpaceNormalMap;\n\n    /**\n     * How much the normal map affects the material. Typical value range is `[0,1]`.\n     *\n     * @type {Vector2}\n     * @default (1,1)\n     */\n    this.normalScale = new Vector2(1, 1);\n\n    /**\n     * The displacement map affects the position of the mesh's vertices. Unlike\n     * other maps which only affect the light and shade of the material the\n     * displaced vertices can cast shadows, block other objects, and otherwise\n     * act as real geometry. The displacement texture is an image where the value\n     * of each pixel (white being the highest) is mapped against, and\n     * repositions, the vertices of the mesh.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.displacementMap = null;\n\n    /**\n     * How much the displacement map affects the mesh (where black is no\n     * displacement, and white is maximum displacement). Without a displacement\n     * map set, this value is not applied.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.displacementScale = 1;\n\n    /**\n     * The offset of the displacement map's values on the mesh's vertices.\n     * The bias is added to the scaled sample of the displacement map.\n     * Without a displacement map set, this value is not applied.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.displacementBias = 0;\n\n    /**\n     * Renders the geometry as a wireframe.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.wireframe = false;\n\n    /**\n     * Controls the thickness of the wireframe.\n     *\n     * WebGL and WebGPU ignore this property and always render\n     * 1 pixel wide lines.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.wireframeLinewidth = 1;\n\n    /**\n     * Whether the material is rendered with flat shading or not.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.flatShading = false;\n    this.setValues(parameters);\n  }\n  copy(source) {\n    super.copy(source);\n    this.bumpMap = source.bumpMap;\n    this.bumpScale = source.bumpScale;\n    this.normalMap = source.normalMap;\n    this.normalMapType = source.normalMapType;\n    this.normalScale.copy(source.normalScale);\n    this.displacementMap = source.displacementMap;\n    this.displacementScale = source.displacementScale;\n    this.displacementBias = source.displacementBias;\n    this.wireframe = source.wireframe;\n    this.wireframeLinewidth = source.wireframeLinewidth;\n    this.flatShading = source.flatShading;\n    return this;\n  }\n}\n\n/**\n * A material for non-shiny surfaces, without specular highlights.\n *\n * The material uses a non-physically based [Lambertian]{@link https://en.wikipedia.org/wiki/Lambertian_reflectance}\n * model for calculating reflectance. This can simulate some surfaces (such\n * as untreated wood or stone) well, but cannot simulate shiny surfaces with\n * specular highlights (such as varnished wood). `MeshLambertMaterial` uses per-fragment\n * shading.\n *\n * Due to the simplicity of the reflectance and illumination models,\n * performance will be greater when using this material over the\n * {@link MeshPhongMaterial}, {@link MeshStandardMaterial} or\n * {@link MeshPhysicalMaterial}, at the cost of some graphical accuracy.\n *\n * @augments Material\n */\nclass MeshLambertMaterial extends Material {\n  /**\n   * Constructs a new mesh lambert material.\n   *\n   * @param {Object} [parameters] - An object with one or more properties\n   * defining the material's appearance. Any property of the material\n   * (including any property from inherited materials) can be passed\n   * in here. Color values can be passed any type of value accepted\n   * by {@link Color#set}.\n   */\n  constructor(parameters) {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isMeshLambertMaterial = true;\n    this.type = 'MeshLambertMaterial';\n\n    /**\n     * Color of the material.\n     *\n     * @type {Color}\n     * @default (1,1,1)\n     */\n    this.color = new Color(0xffffff); // diffuse\n\n    /**\n     * The color map. May optionally include an alpha channel, typically combined\n     * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\n     * color is modulated by the diffuse `color`.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.map = null;\n\n    /**\n     * The light map. Requires a second set of UVs.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.lightMap = null;\n\n    /**\n     * Intensity of the baked light.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.lightMapIntensity = 1.0;\n\n    /**\n     * The red channel of this texture is used as the ambient occlusion map.\n     * Requires a second set of UVs.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.aoMap = null;\n\n    /**\n     * Intensity of the ambient occlusion effect. Range is `[0,1]`, where `0`\n     * disables ambient occlusion. Where intensity is `1` and the AO map's\n     * red channel is also `1`, ambient light is fully occluded on a surface.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.aoMapIntensity = 1.0;\n\n    /**\n     * Emissive (light) color of the material, essentially a solid color\n     * unaffected by other lighting.\n     *\n     * @type {Color}\n     * @default (0,0,0)\n     */\n    this.emissive = new Color(0x000000);\n\n    /**\n     * Intensity of the emissive light. Modulates the emissive color.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.emissiveIntensity = 1.0;\n\n    /**\n     * Set emissive (glow) map. The emissive map color is modulated by the\n     * emissive color and the emissive intensity. If you have an emissive map,\n     * be sure to set the emissive color to something other than black.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.emissiveMap = null;\n\n    /**\n     * The texture to create a bump map. The black and white values map to the\n     * perceived depth in relation to the lights. Bump doesn't actually affect\n     * the geometry of the object, only the lighting. If a normal map is defined\n     * this will be ignored.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.bumpMap = null;\n\n    /**\n     * How much the bump map affects the material. Typical range is `[0,1]`.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.bumpScale = 1;\n\n    /**\n     * The texture to create a normal map. The RGB values affect the surface\n     * normal for each pixel fragment and change the way the color is lit. Normal\n     * maps do not change the actual shape of the surface, only the lighting. In\n     * case the material has a normal map authored using the left handed\n     * convention, the `y` component of `normalScale` should be negated to compensate\n     * for the different handedness.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.normalMap = null;\n\n    /**\n     * The type of normal map.\n     *\n     * @type {(TangentSpaceNormalMap|ObjectSpaceNormalMap)}\n     * @default TangentSpaceNormalMap\n     */\n    this.normalMapType = TangentSpaceNormalMap;\n\n    /**\n     * How much the normal map affects the material. Typical value range is `[0,1]`.\n     *\n     * @type {Vector2}\n     * @default (1,1)\n     */\n    this.normalScale = new Vector2(1, 1);\n\n    /**\n     * The displacement map affects the position of the mesh's vertices. Unlike\n     * other maps which only affect the light and shade of the material the\n     * displaced vertices can cast shadows, block other objects, and otherwise\n     * act as real geometry. The displacement texture is an image where the value\n     * of each pixel (white being the highest) is mapped against, and\n     * repositions, the vertices of the mesh.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.displacementMap = null;\n\n    /**\n     * How much the displacement map affects the mesh (where black is no\n     * displacement, and white is maximum displacement). Without a displacement\n     * map set, this value is not applied.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.displacementScale = 1;\n\n    /**\n     * The offset of the displacement map's values on the mesh's vertices.\n     * The bias is added to the scaled sample of the displacement map.\n     * Without a displacement map set, this value is not applied.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.displacementBias = 0;\n\n    /**\n     * Specular map used by the material.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.specularMap = null;\n\n    /**\n     * The alpha map is a grayscale texture that controls the opacity across the\n     * surface (black: fully transparent; white: fully opaque).\n     *\n     * Only the color of the texture is used, ignoring the alpha channel if one\n     * exists. For RGB and RGBA textures, the renderer will use the green channel\n     * when sampling this texture due to the extra bit of precision provided for\n     * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n     * luminance/alpha textures will also still work as expected.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.alphaMap = null;\n\n    /**\n     * The environment map.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.envMap = null;\n\n    /**\n     * The rotation of the environment map in radians.\n     *\n     * @type {Euler}\n     * @default (0,0,0)\n     */\n    this.envMapRotation = new Euler();\n\n    /**\n     * How to combine the result of the surface's color with the environment map, if any.\n     *\n     * When set to `MixOperation`, the {@link MeshBasicMaterial#reflectivity} is used to\n     * blend between the two colors.\n     *\n     * @type {(MultiplyOperation|MixOperation|AddOperation)}\n     * @default MultiplyOperation\n     */\n    this.combine = MultiplyOperation;\n\n    /**\n     * How much the environment map affects the surface.\n     * The valid range is between `0` (no reflections) and `1` (full reflections).\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.reflectivity = 1;\n\n    /**\n     * The index of refraction (IOR) of air (approximately 1) divided by the\n     * index of refraction of the material. It is used with environment mapping\n     * modes {@link CubeRefractionMapping} and {@link EquirectangularRefractionMapping}.\n     * The refraction ratio should not exceed `1`.\n     *\n     * @type {number}\n     * @default 0.98\n     */\n    this.refractionRatio = 0.98;\n\n    /**\n     * Renders the geometry as a wireframe.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.wireframe = false;\n\n    /**\n     * Controls the thickness of the wireframe.\n     *\n     * Can only be used with {@link SVGRenderer}.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.wireframeLinewidth = 1;\n\n    /**\n     * Defines appearance of wireframe ends.\n     *\n     * Can only be used with {@link SVGRenderer}.\n     *\n     * @type {('round'|'bevel'|'miter')}\n     * @default 'round'\n     */\n    this.wireframeLinecap = 'round';\n\n    /**\n     * Defines appearance of wireframe joints.\n     *\n     * Can only be used with {@link SVGRenderer}.\n     *\n     * @type {('round'|'bevel'|'miter')}\n     * @default 'round'\n     */\n    this.wireframeLinejoin = 'round';\n\n    /**\n     * Whether the material is rendered with flat shading or not.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.flatShading = false;\n\n    /**\n     * Whether the material is affected by fog or not.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.fog = true;\n    this.setValues(parameters);\n  }\n  copy(source) {\n    super.copy(source);\n    this.color.copy(source.color);\n    this.map = source.map;\n    this.lightMap = source.lightMap;\n    this.lightMapIntensity = source.lightMapIntensity;\n    this.aoMap = source.aoMap;\n    this.aoMapIntensity = source.aoMapIntensity;\n    this.emissive.copy(source.emissive);\n    this.emissiveMap = source.emissiveMap;\n    this.emissiveIntensity = source.emissiveIntensity;\n    this.bumpMap = source.bumpMap;\n    this.bumpScale = source.bumpScale;\n    this.normalMap = source.normalMap;\n    this.normalMapType = source.normalMapType;\n    this.normalScale.copy(source.normalScale);\n    this.displacementMap = source.displacementMap;\n    this.displacementScale = source.displacementScale;\n    this.displacementBias = source.displacementBias;\n    this.specularMap = source.specularMap;\n    this.alphaMap = source.alphaMap;\n    this.envMap = source.envMap;\n    this.envMapRotation.copy(source.envMapRotation);\n    this.combine = source.combine;\n    this.reflectivity = source.reflectivity;\n    this.refractionRatio = source.refractionRatio;\n    this.wireframe = source.wireframe;\n    this.wireframeLinewidth = source.wireframeLinewidth;\n    this.wireframeLinecap = source.wireframeLinecap;\n    this.wireframeLinejoin = source.wireframeLinejoin;\n    this.flatShading = source.flatShading;\n    this.fog = source.fog;\n    return this;\n  }\n}\n\n/**\n * A material for drawing geometry by depth. Depth is based off of the camera\n * near and far plane. White is nearest, black is farthest.\n *\n * @augments Material\n */\nclass MeshDepthMaterial extends Material {\n  /**\n   * Constructs a new mesh depth material.\n   *\n   * @param {Object} [parameters] - An object with one or more properties\n   * defining the material's appearance. Any property of the material\n   * (including any property from inherited materials) can be passed\n   * in here. Color values can be passed any type of value accepted\n   * by {@link Color#set}.\n   */\n  constructor(parameters) {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isMeshDepthMaterial = true;\n    this.type = 'MeshDepthMaterial';\n\n    /**\n     * Type for depth packing.\n     *\n     * @type {(BasicDepthPacking|RGBADepthPacking|RGBDepthPacking|RGDepthPacking)}\n     * @default BasicDepthPacking\n     */\n    this.depthPacking = BasicDepthPacking;\n\n    /**\n     * The color map. May optionally include an alpha channel, typically combined\n     * with {@link Material#transparent} or {@link Material#alphaTest}.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.map = null;\n\n    /**\n     * The alpha map is a grayscale texture that controls the opacity across the\n     * surface (black: fully transparent; white: fully opaque).\n     *\n     * Only the color of the texture is used, ignoring the alpha channel if one\n     * exists. For RGB and RGBA textures, the renderer will use the green channel\n     * when sampling this texture due to the extra bit of precision provided for\n     * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n     * luminance/alpha textures will also still work as expected.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.alphaMap = null;\n\n    /**\n     * The displacement map affects the position of the mesh's vertices. Unlike\n     * other maps which only affect the light and shade of the material the\n     * displaced vertices can cast shadows, block other objects, and otherwise\n     * act as real geometry. The displacement texture is an image where the value\n     * of each pixel (white being the highest) is mapped against, and\n     * repositions, the vertices of the mesh.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.displacementMap = null;\n\n    /**\n     * How much the displacement map affects the mesh (where black is no\n     * displacement, and white is maximum displacement). Without a displacement\n     * map set, this value is not applied.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.displacementScale = 1;\n\n    /**\n     * The offset of the displacement map's values on the mesh's vertices.\n     * The bias is added to the scaled sample of the displacement map.\n     * Without a displacement map set, this value is not applied.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.displacementBias = 0;\n\n    /**\n     * Renders the geometry as a wireframe.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.wireframe = false;\n\n    /**\n     * Controls the thickness of the wireframe.\n     *\n     * WebGL and WebGPU ignore this property and always render\n     * 1 pixel wide lines.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.wireframeLinewidth = 1;\n    this.setValues(parameters);\n  }\n  copy(source) {\n    super.copy(source);\n    this.depthPacking = source.depthPacking;\n    this.map = source.map;\n    this.alphaMap = source.alphaMap;\n    this.displacementMap = source.displacementMap;\n    this.displacementScale = source.displacementScale;\n    this.displacementBias = source.displacementBias;\n    this.wireframe = source.wireframe;\n    this.wireframeLinewidth = source.wireframeLinewidth;\n    return this;\n  }\n}\n\n/**\n * A material used internally for implementing shadow mapping with\n * point lights.\n *\n * Can also be used to customize the shadow casting of an object by assigning\n * an instance of `MeshDistanceMaterial` to {@link Object3D#customDistanceMaterial}.\n * The following examples demonstrates this approach in order to ensure\n * transparent parts of objects do no cast shadows.\n *\n * @augments Material\n */\nclass MeshDistanceMaterial extends Material {\n  /**\n   * Constructs a new mesh distance material.\n   *\n   * @param {Object} [parameters] - An object with one or more properties\n   * defining the material's appearance. Any property of the material\n   * (including any property from inherited materials) can be passed\n   * in here. Color values can be passed any type of value accepted\n   * by {@link Color#set}.\n   */\n  constructor(parameters) {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isMeshDistanceMaterial = true;\n    this.type = 'MeshDistanceMaterial';\n\n    /**\n     * The color map. May optionally include an alpha channel, typically combined\n     * with {@link Material#transparent} or {@link Material#alphaTest}.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.map = null;\n\n    /**\n     * The alpha map is a grayscale texture that controls the opacity across the\n     * surface (black: fully transparent; white: fully opaque).\n     *\n     * Only the color of the texture is used, ignoring the alpha channel if one\n     * exists. For RGB and RGBA textures, the renderer will use the green channel\n     * when sampling this texture due to the extra bit of precision provided for\n     * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n     * luminance/alpha textures will also still work as expected.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.alphaMap = null;\n\n    /**\n     * The displacement map affects the position of the mesh's vertices. Unlike\n     * other maps which only affect the light and shade of the material the\n     * displaced vertices can cast shadows, block other objects, and otherwise\n     * act as real geometry. The displacement texture is an image where the value\n     * of each pixel (white being the highest) is mapped against, and\n     * repositions, the vertices of the mesh.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.displacementMap = null;\n\n    /**\n     * How much the displacement map affects the mesh (where black is no\n     * displacement, and white is maximum displacement). Without a displacement\n     * map set, this value is not applied.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.displacementScale = 1;\n\n    /**\n     * The offset of the displacement map's values on the mesh's vertices.\n     * The bias is added to the scaled sample of the displacement map.\n     * Without a displacement map set, this value is not applied.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.displacementBias = 0;\n    this.setValues(parameters);\n  }\n  copy(source) {\n    super.copy(source);\n    this.map = source.map;\n    this.alphaMap = source.alphaMap;\n    this.displacementMap = source.displacementMap;\n    this.displacementScale = source.displacementScale;\n    this.displacementBias = source.displacementBias;\n    return this;\n  }\n}\n\n/**\n * This material is defined by a MatCap (or Lit Sphere) texture, which encodes the\n * material color and shading.\n *\n * `MeshMatcapMaterial` does not respond to lights since the matcap image file encodes\n * baked lighting. It will cast a shadow onto an object that receives shadows\n * (and shadow clipping works), but it will not self-shadow or receive\n * shadows.\n *\n * @augments Material\n */\nclass MeshMatcapMaterial extends Material {\n  /**\n   * Constructs a new mesh matcap material.\n   *\n   * @param {Object} [parameters] - An object with one or more properties\n   * defining the material's appearance. Any property of the material\n   * (including any property from inherited materials) can be passed\n   * in here. Color values can be passed any type of value accepted\n   * by {@link Color#set}.\n   */\n  constructor(parameters) {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isMeshMatcapMaterial = true;\n    this.defines = {\n      'MATCAP': ''\n    };\n    this.type = 'MeshMatcapMaterial';\n\n    /**\n     * Color of the material.\n     *\n     * @type {Color}\n     * @default (1,1,1)\n     */\n    this.color = new Color(0xffffff); // diffuse\n\n    /**\n     * The matcap map.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.matcap = null;\n\n    /**\n     * The color map. May optionally include an alpha channel, typically combined\n     * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\n     * color is modulated by the diffuse `color`.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.map = null;\n\n    /**\n     * The texture to create a bump map. The black and white values map to the\n     * perceived depth in relation to the lights. Bump doesn't actually affect\n     * the geometry of the object, only the lighting. If a normal map is defined\n     * this will be ignored.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.bumpMap = null;\n\n    /**\n     * How much the bump map affects the material. Typical range is `[0,1]`.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.bumpScale = 1;\n\n    /**\n     * The texture to create a normal map. The RGB values affect the surface\n     * normal for each pixel fragment and change the way the color is lit. Normal\n     * maps do not change the actual shape of the surface, only the lighting. In\n     * case the material has a normal map authored using the left handed\n     * convention, the `y` component of `normalScale` should be negated to compensate\n     * for the different handedness.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.normalMap = null;\n\n    /**\n     * The type of normal map.\n     *\n     * @type {(TangentSpaceNormalMap|ObjectSpaceNormalMap)}\n     * @default TangentSpaceNormalMap\n     */\n    this.normalMapType = TangentSpaceNormalMap;\n\n    /**\n     * How much the normal map affects the material. Typical value range is `[0,1]`.\n     *\n     * @type {Vector2}\n     * @default (1,1)\n     */\n    this.normalScale = new Vector2(1, 1);\n\n    /**\n     * The displacement map affects the position of the mesh's vertices. Unlike\n     * other maps which only affect the light and shade of the material the\n     * displaced vertices can cast shadows, block other objects, and otherwise\n     * act as real geometry. The displacement texture is an image where the value\n     * of each pixel (white being the highest) is mapped against, and\n     * repositions, the vertices of the mesh.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.displacementMap = null;\n\n    /**\n     * How much the displacement map affects the mesh (where black is no\n     * displacement, and white is maximum displacement). Without a displacement\n     * map set, this value is not applied.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.displacementScale = 1;\n\n    /**\n     * The offset of the displacement map's values on the mesh's vertices.\n     * The bias is added to the scaled sample of the displacement map.\n     * Without a displacement map set, this value is not applied.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.displacementBias = 0;\n\n    /**\n     * The alpha map is a grayscale texture that controls the opacity across the\n     * surface (black: fully transparent; white: fully opaque).\n     *\n     * Only the color of the texture is used, ignoring the alpha channel if one\n     * exists. For RGB and RGBA textures, the renderer will use the green channel\n     * when sampling this texture due to the extra bit of precision provided for\n     * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n     * luminance/alpha textures will also still work as expected.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.alphaMap = null;\n\n    /**\n     * Whether the material is rendered with flat shading or not.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.flatShading = false;\n\n    /**\n     * Whether the material is affected by fog or not.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.fog = true;\n    this.setValues(parameters);\n  }\n  copy(source) {\n    super.copy(source);\n    this.defines = {\n      'MATCAP': ''\n    };\n    this.color.copy(source.color);\n    this.matcap = source.matcap;\n    this.map = source.map;\n    this.bumpMap = source.bumpMap;\n    this.bumpScale = source.bumpScale;\n    this.normalMap = source.normalMap;\n    this.normalMapType = source.normalMapType;\n    this.normalScale.copy(source.normalScale);\n    this.displacementMap = source.displacementMap;\n    this.displacementScale = source.displacementScale;\n    this.displacementBias = source.displacementBias;\n    this.alphaMap = source.alphaMap;\n    this.flatShading = source.flatShading;\n    this.fog = source.fog;\n    return this;\n  }\n}\n\n/**\n * A material for rendering line primitives.\n *\n * Materials define the appearance of renderable 3D objects.\n *\n * ```js\n * const material = new THREE.LineDashedMaterial( {\n * \tcolor: 0xffffff,\n * \tscale: 1,\n * \tdashSize: 3,\n * \tgapSize: 1,\n * } );\n * ```\n *\n * @augments LineBasicMaterial\n */\nclass LineDashedMaterial extends LineBasicMaterial {\n  /**\n   * Constructs a new line dashed material.\n   *\n   * @param {Object} [parameters] - An object with one or more properties\n   * defining the material's appearance. Any property of the material\n   * (including any property from inherited materials) can be passed\n   * in here. Color values can be passed any type of value accepted\n   * by {@link Color#set}.\n   */\n  constructor(parameters) {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isLineDashedMaterial = true;\n    this.type = 'LineDashedMaterial';\n\n    /**\n     * The scale of the dashed part of a line.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.scale = 1;\n\n    /**\n     * The size of the dash. This is both the gap with the stroke.\n     *\n     * @type {number}\n     * @default 3\n     */\n    this.dashSize = 3;\n\n    /**\n     * The size of the gap.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.gapSize = 1;\n    this.setValues(parameters);\n  }\n  copy(source) {\n    super.copy(source);\n    this.scale = source.scale;\n    this.dashSize = source.dashSize;\n    this.gapSize = source.gapSize;\n    return this;\n  }\n}\n\n/**\n * Converts an array to a specific type.\n *\n * @param {TypedArray|Array} array - The array to convert.\n * @param {TypedArray.constructor} type - The constructor of a typed array that defines the new type.\n * @return {TypedArray} The converted array.\n */\nfunction convertArray(array, type) {\n  if (!array || array.constructor === type) return array;\n  if (typeof type.BYTES_PER_ELEMENT === 'number') {\n    return new type(array); // create typed array\n  }\n  return Array.prototype.slice.call(array); // create Array\n}\n\n/**\n * Returns `true` if the given object is a typed array.\n *\n * @param {any} object - The object to check.\n * @return {boolean} Whether the given object is a typed array.\n */\nfunction isTypedArray(object) {\n  return ArrayBuffer.isView(object) && !(object instanceof DataView);\n}\n\n/**\n * Returns an array by which times and values can be sorted.\n *\n * @param {Array<number>} times - The keyframe time values.\n * @return {Array<number>} The array.\n */\nfunction getKeyframeOrder(times) {\n  function compareTime(i, j) {\n    return times[i] - times[j];\n  }\n  const n = times.length;\n  const result = new Array(n);\n  for (let i = 0; i !== n; ++i) result[i] = i;\n  result.sort(compareTime);\n  return result;\n}\n\n/**\n * Sorts the given array by the previously computed order via `getKeyframeOrder()`.\n *\n * @param {Array<number>} values - The values to sort.\n * @param {number} stride - The stride.\n * @param {Array<number>} order - The sort order.\n * @return {Array<number>} The sorted values.\n */\nfunction sortedArray(values, stride, order) {\n  const nValues = values.length;\n  const result = new values.constructor(nValues);\n  for (let i = 0, dstOffset = 0; dstOffset !== nValues; ++i) {\n    const srcOffset = order[i] * stride;\n    for (let j = 0; j !== stride; ++j) {\n      result[dstOffset++] = values[srcOffset + j];\n    }\n  }\n  return result;\n}\n\n/**\n * Used for parsing AOS keyframe formats.\n *\n * @param {Array<number>} jsonKeys - A list of JSON keyframes.\n * @param {Array<number>} times - This array will be filled with keyframe times by this function.\n * @param {Array<number>} values - This array will be filled with keyframe values by this function.\n * @param {string} valuePropertyName - The name of the property to use.\n */\nfunction flattenJSON(jsonKeys, times, values, valuePropertyName) {\n  let i = 1,\n    key = jsonKeys[0];\n  while (key !== undefined && key[valuePropertyName] === undefined) {\n    key = jsonKeys[i++];\n  }\n  if (key === undefined) return; // no data\n\n  let value = key[valuePropertyName];\n  if (value === undefined) return; // no data\n\n  if (Array.isArray(value)) {\n    do {\n      value = key[valuePropertyName];\n      if (value !== undefined) {\n        times.push(key.time);\n        values.push(...value); // push all elements\n      }\n      key = jsonKeys[i++];\n    } while (key !== undefined);\n  } else if (value.toArray !== undefined) {\n    // ...assume THREE.Math-ish\n\n    do {\n      value = key[valuePropertyName];\n      if (value !== undefined) {\n        times.push(key.time);\n        value.toArray(values, values.length);\n      }\n      key = jsonKeys[i++];\n    } while (key !== undefined);\n  } else {\n    // otherwise push as-is\n\n    do {\n      value = key[valuePropertyName];\n      if (value !== undefined) {\n        times.push(key.time);\n        values.push(value);\n      }\n      key = jsonKeys[i++];\n    } while (key !== undefined);\n  }\n}\n\n/**\n * Creates a new clip, containing only the segment of the original clip between the given frames.\n *\n * @param {AnimationClip} sourceClip - The values to sort.\n * @param {string} name - The name of the clip.\n * @param {number} startFrame - The start frame.\n * @param {number} endFrame - The end frame.\n * @param {number} [fps=30] - The FPS.\n * @return {AnimationClip} The new sub clip.\n */\nfunction subclip(sourceClip, name, startFrame, endFrame) {\n  let fps = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 30;\n  const clip = sourceClip.clone();\n  clip.name = name;\n  const tracks = [];\n  for (let i = 0; i < clip.tracks.length; ++i) {\n    const track = clip.tracks[i];\n    const valueSize = track.getValueSize();\n    const times = [];\n    const values = [];\n    for (let j = 0; j < track.times.length; ++j) {\n      const frame = track.times[j] * fps;\n      if (frame < startFrame || frame >= endFrame) continue;\n      times.push(track.times[j]);\n      for (let k = 0; k < valueSize; ++k) {\n        values.push(track.values[j * valueSize + k]);\n      }\n    }\n    if (times.length === 0) continue;\n    track.times = convertArray(times, track.times.constructor);\n    track.values = convertArray(values, track.values.constructor);\n    tracks.push(track);\n  }\n  clip.tracks = tracks;\n\n  // find minimum .times value across all tracks in the trimmed clip\n\n  let minStartTime = Infinity;\n  for (let i = 0; i < clip.tracks.length; ++i) {\n    if (minStartTime > clip.tracks[i].times[0]) {\n      minStartTime = clip.tracks[i].times[0];\n    }\n  }\n\n  // shift all tracks such that clip begins at t=0\n\n  for (let i = 0; i < clip.tracks.length; ++i) {\n    clip.tracks[i].shift(-1 * minStartTime);\n  }\n  clip.resetDuration();\n  return clip;\n}\n\n/**\n * Converts the keyframes of the given animation clip to an additive format.\n *\n * @param {AnimationClip} targetClip - The clip to make additive.\n * @param {number} [referenceFrame=0] - The reference frame.\n * @param {AnimationClip} [referenceClip=targetClip] - The reference clip.\n * @param {number} [fps=30] - The FPS.\n * @return {AnimationClip} The updated clip which is now additive.\n */\nfunction makeClipAdditive(targetClip) {\n  let referenceFrame = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let referenceClip = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : targetClip;\n  let fps = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 30;\n  if (fps <= 0) fps = 30;\n  const numTracks = referenceClip.tracks.length;\n  const referenceTime = referenceFrame / fps;\n\n  // Make each track's values relative to the values at the reference frame\n  for (let i = 0; i < numTracks; ++i) {\n    const referenceTrack = referenceClip.tracks[i];\n    const referenceTrackType = referenceTrack.ValueTypeName;\n\n    // Skip this track if it's non-numeric\n    if (referenceTrackType === 'bool' || referenceTrackType === 'string') continue;\n\n    // Find the track in the target clip whose name and type matches the reference track\n    const targetTrack = targetClip.tracks.find(function (track) {\n      return track.name === referenceTrack.name && track.ValueTypeName === referenceTrackType;\n    });\n    if (targetTrack === undefined) continue;\n    let referenceOffset = 0;\n    const referenceValueSize = referenceTrack.getValueSize();\n    if (referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n      referenceOffset = referenceValueSize / 3;\n    }\n    let targetOffset = 0;\n    const targetValueSize = targetTrack.getValueSize();\n    if (targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n      targetOffset = targetValueSize / 3;\n    }\n    const lastIndex = referenceTrack.times.length - 1;\n    let referenceValue;\n\n    // Find the value to subtract out of the track\n    if (referenceTime <= referenceTrack.times[0]) {\n      // Reference frame is earlier than the first keyframe, so just use the first keyframe\n      const startIndex = referenceOffset;\n      const endIndex = referenceValueSize - referenceOffset;\n      referenceValue = referenceTrack.values.slice(startIndex, endIndex);\n    } else if (referenceTime >= referenceTrack.times[lastIndex]) {\n      // Reference frame is after the last keyframe, so just use the last keyframe\n      const startIndex = lastIndex * referenceValueSize + referenceOffset;\n      const endIndex = startIndex + referenceValueSize - referenceOffset;\n      referenceValue = referenceTrack.values.slice(startIndex, endIndex);\n    } else {\n      // Interpolate to the reference value\n      const interpolant = referenceTrack.createInterpolant();\n      const startIndex = referenceOffset;\n      const endIndex = referenceValueSize - referenceOffset;\n      interpolant.evaluate(referenceTime);\n      referenceValue = interpolant.resultBuffer.slice(startIndex, endIndex);\n    }\n\n    // Conjugate the quaternion\n    if (referenceTrackType === 'quaternion') {\n      const referenceQuat = new Quaternion().fromArray(referenceValue).normalize().conjugate();\n      referenceQuat.toArray(referenceValue);\n    }\n\n    // Subtract the reference value from all of the track values\n\n    const numTimes = targetTrack.times.length;\n    for (let j = 0; j < numTimes; ++j) {\n      const valueStart = j * targetValueSize + targetOffset;\n      if (referenceTrackType === 'quaternion') {\n        // Multiply the conjugate for quaternion track types\n        Quaternion.multiplyQuaternionsFlat(targetTrack.values, valueStart, referenceValue, 0, targetTrack.values, valueStart);\n      } else {\n        const valueEnd = targetValueSize - targetOffset * 2;\n\n        // Subtract each value for all other numeric track types\n        for (let k = 0; k < valueEnd; ++k) {\n          targetTrack.values[valueStart + k] -= referenceValue[k];\n        }\n      }\n    }\n  }\n  targetClip.blendMode = AdditiveAnimationBlendMode;\n  return targetClip;\n}\n\n/**\n * A class with various methods to assist with animations.\n *\n * @hideconstructor\n */\nclass AnimationUtils {\n  /**\n   * Converts an array to a specific type\n   *\n   * @static\n   * @param {TypedArray|Array} array - The array to convert.\n   * @param {TypedArray.constructor} type - The constructor of a type array.\n   * @return {TypedArray} The converted array\n   */\n  static convertArray(array, type) {\n    return convertArray(array, type);\n  }\n\n  /**\n   * Returns `true` if the given object is a typed array.\n   *\n   * @static\n   * @param {any} object - The object to check.\n   * @return {boolean} Whether the given object is a typed array.\n   */\n  static isTypedArray(object) {\n    return isTypedArray(object);\n  }\n\n  /**\n   * Returns an array by which times and values can be sorted.\n   *\n   * @static\n   * @param {Array<number>} times - The keyframe time values.\n   * @return {Array<number>} The array.\n   */\n  static getKeyframeOrder(times) {\n    return getKeyframeOrder(times);\n  }\n\n  /**\n   * Sorts the given array by the previously computed order via `getKeyframeOrder()`.\n   *\n   * @static\n   * @param {Array<number>} values - The values to sort.\n   * @param {number} stride - The stride.\n   * @param {Array<number>} order - The sort order.\n   * @return {Array<number>} The sorted values.\n   */\n  static sortedArray(values, stride, order) {\n    return sortedArray(values, stride, order);\n  }\n\n  /**\n   * Used for parsing AOS keyframe formats.\n   *\n   * @static\n   * @param {Array<number>} jsonKeys - A list of JSON keyframes.\n   * @param {Array<number>} times - This array will be filled with keyframe times by this method.\n   * @param {Array<number>} values - This array will be filled with keyframe values by this method.\n   * @param {string} valuePropertyName - The name of the property to use.\n   */\n  static flattenJSON(jsonKeys, times, values, valuePropertyName) {\n    flattenJSON(jsonKeys, times, values, valuePropertyName);\n  }\n\n  /**\n   * Creates a new clip, containing only the segment of the original clip between the given frames.\n   *\n   * @static\n   * @param {AnimationClip} sourceClip - The values to sort.\n   * @param {string} name - The name of the clip.\n   * @param {number} startFrame - The start frame.\n   * @param {number} endFrame - The end frame.\n   * @param {number} [fps=30] - The FPS.\n   * @return {AnimationClip} The new sub clip.\n   */\n  static subclip(sourceClip, name, startFrame, endFrame) {\n    let fps = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 30;\n    return subclip(sourceClip, name, startFrame, endFrame, fps);\n  }\n\n  /**\n   * Converts the keyframes of the given animation clip to an additive format.\n   *\n   * @static\n   * @param {AnimationClip} targetClip - The clip to make additive.\n   * @param {number} [referenceFrame=0] - The reference frame.\n   * @param {AnimationClip} [referenceClip=targetClip] - The reference clip.\n   * @param {number} [fps=30] - The FPS.\n   * @return {AnimationClip} The updated clip which is now additive.\n   */\n  static makeClipAdditive(targetClip) {\n    let referenceFrame = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let referenceClip = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : targetClip;\n    let fps = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 30;\n    return makeClipAdditive(targetClip, referenceFrame, referenceClip, fps);\n  }\n}\n\n/**\n * Abstract base class of interpolants over parametric samples.\n *\n * The parameter domain is one dimensional, typically the time or a path\n * along a curve defined by the data.\n *\n * The sample values can have any dimensionality and derived classes may\n * apply special interpretations to the data.\n *\n * This class provides the interval seek in a Template Method, deferring\n * the actual interpolation to derived classes.\n *\n * Time complexity is O(1) for linear access crossing at most two points\n * and O(log N) for random access, where N is the number of positions.\n *\n * References: {@link http://www.oodesign.com/template-method-pattern.html}\n *\n * @abstract\n */\nclass Interpolant {\n  /**\n   * Constructs a new interpolant.\n   *\n   * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.\n   * @param {TypedArray} sampleValues - The sample values.\n   * @param {number} sampleSize - The sample size\n   * @param {TypedArray} [resultBuffer] - The result buffer.\n   */\n  constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n    /**\n     * The parameter positions.\n     *\n     * @type {TypedArray}\n     */\n    this.parameterPositions = parameterPositions;\n\n    /**\n     * A cache index.\n     *\n     * @private\n     * @type {number}\n     * @default 0\n     */\n    this._cachedIndex = 0;\n\n    /**\n     * The result buffer.\n     *\n     * @type {TypedArray}\n     */\n    this.resultBuffer = resultBuffer !== undefined ? resultBuffer : new sampleValues.constructor(sampleSize);\n\n    /**\n     * The sample values.\n     *\n     * @type {TypedArray}\n     */\n    this.sampleValues = sampleValues;\n\n    /**\n     * The value size.\n     *\n     * @type {TypedArray}\n     */\n    this.valueSize = sampleSize;\n\n    /**\n     * The interpolation settings.\n     *\n     * @type {?Object}\n     * @default null\n     */\n    this.settings = null;\n\n    /**\n     * The default settings object.\n     *\n     * @type {Object}\n     */\n    this.DefaultSettings_ = {};\n  }\n\n  /**\n   * Evaluate the interpolant at position `t`.\n   *\n   * @param {number} t - The interpolation factor.\n   * @return {TypedArray} The result buffer.\n   */\n  evaluate(t) {\n    const pp = this.parameterPositions;\n    let i1 = this._cachedIndex,\n      t1 = pp[i1],\n      t0 = pp[i1 - 1];\n    validate_interval: {\n      seek: {\n        let right;\n        linear_scan: {\n          //- See http://jsperf.com/comparison-to-undefined/3\n          //- slower code:\n          //-\n          //- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n          forward_scan: if (!(t < t1)) {\n            for (let giveUpAt = i1 + 2;;) {\n              if (t1 === undefined) {\n                if (t < t0) break forward_scan;\n\n                // after end\n\n                i1 = pp.length;\n                this._cachedIndex = i1;\n                return this.copySampleValue_(i1 - 1);\n              }\n              if (i1 === giveUpAt) break; // this loop\n\n              t0 = t1;\n              t1 = pp[++i1];\n              if (t < t1) {\n                // we have arrived at the sought interval\n                break seek;\n              }\n            }\n\n            // prepare binary search on the right side of the index\n            right = pp.length;\n            break linear_scan;\n          }\n\n          //- slower code:\n          //-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n          if (!(t >= t0)) {\n            // looping?\n\n            const t1global = pp[1];\n            if (t < t1global) {\n              i1 = 2; // + 1, using the scan for the details\n              t0 = t1global;\n            }\n\n            // linear reverse scan\n\n            for (let giveUpAt = i1 - 2;;) {\n              if (t0 === undefined) {\n                // before start\n\n                this._cachedIndex = 0;\n                return this.copySampleValue_(0);\n              }\n              if (i1 === giveUpAt) break; // this loop\n\n              t1 = t0;\n              t0 = pp[--i1 - 1];\n              if (t >= t0) {\n                // we have arrived at the sought interval\n                break seek;\n              }\n            }\n\n            // prepare binary search on the left side of the index\n            right = i1;\n            i1 = 0;\n            break linear_scan;\n          }\n\n          // the interval is valid\n\n          break validate_interval;\n        } // linear scan\n\n        // binary search\n\n        while (i1 < right) {\n          const mid = i1 + right >>> 1;\n          if (t < pp[mid]) {\n            right = mid;\n          } else {\n            i1 = mid + 1;\n          }\n        }\n        t1 = pp[i1];\n        t0 = pp[i1 - 1];\n\n        // check boundary cases, again\n\n        if (t0 === undefined) {\n          this._cachedIndex = 0;\n          return this.copySampleValue_(0);\n        }\n        if (t1 === undefined) {\n          i1 = pp.length;\n          this._cachedIndex = i1;\n          return this.copySampleValue_(i1 - 1);\n        }\n      } // seek\n\n      this._cachedIndex = i1;\n      this.intervalChanged_(i1, t0, t1);\n    } // validate_interval\n\n    return this.interpolate_(i1, t0, t, t1);\n  }\n\n  /**\n   * Returns the interpolation settings.\n   *\n   * @return {Object} The interpolation settings.\n   */\n  getSettings_() {\n    return this.settings || this.DefaultSettings_;\n  }\n\n  /**\n   * Copies a sample value to the result buffer.\n   *\n   * @param {number} index - An index into the sample value buffer.\n   * @return {TypedArray} The result buffer.\n   */\n  copySampleValue_(index) {\n    // copies a sample value to the result buffer\n\n    const result = this.resultBuffer,\n      values = this.sampleValues,\n      stride = this.valueSize,\n      offset = index * stride;\n    for (let i = 0; i !== stride; ++i) {\n      result[i] = values[offset + i];\n    }\n    return result;\n  }\n\n  /**\n   * Copies a sample value to the result buffer.\n   *\n   * @abstract\n   * @param {number} i1 - An index into the sample value buffer.\n   * @param {number} t0 - The previous interpolation factor.\n   * @param {number} t - The current interpolation factor.\n   * @param {number} t1 - The next interpolation factor.\n   * @return {TypedArray} The result buffer.\n   */\n  interpolate_(/* i1, t0, t, t1 */\n  ) {\n    throw new Error('call to abstract method');\n    // implementations shall return this.resultBuffer\n  }\n\n  /**\n   * Optional method that is executed when the interval has changed.\n   *\n   * @param {number} i1 - An index into the sample value buffer.\n   * @param {number} t0 - The previous interpolation factor.\n   * @param {number} t - The current interpolation factor.\n   */\n  intervalChanged_(/* i1, t0, t1 */\n  ) {\n\n    // empty\n  }\n}\n\n/**\n * Fast and simple cubic spline interpolant.\n *\n * It was derived from a Hermitian construction setting the first derivative\n * at each sample position to the linear slope between neighboring positions\n * over their parameter interval.\n *\n * @augments Interpolant\n */\nclass CubicInterpolant extends Interpolant {\n  /**\n   * Constructs a new cubic interpolant.\n   *\n   * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.\n   * @param {TypedArray} sampleValues - The sample values.\n   * @param {number} sampleSize - The sample size\n   * @param {TypedArray} [resultBuffer] - The result buffer.\n   */\n  constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n    super(parameterPositions, sampleValues, sampleSize, resultBuffer);\n    this._weightPrev = -0;\n    this._offsetPrev = -0;\n    this._weightNext = -0;\n    this._offsetNext = -0;\n    this.DefaultSettings_ = {\n      endingStart: ZeroCurvatureEnding,\n      endingEnd: ZeroCurvatureEnding\n    };\n  }\n  intervalChanged_(i1, t0, t1) {\n    const pp = this.parameterPositions;\n    let iPrev = i1 - 2,\n      iNext = i1 + 1,\n      tPrev = pp[iPrev],\n      tNext = pp[iNext];\n    if (tPrev === undefined) {\n      switch (this.getSettings_().endingStart) {\n        case ZeroSlopeEnding:\n          // f'(t0) = 0\n          iPrev = i1;\n          tPrev = 2 * t0 - t1;\n          break;\n        case WrapAroundEnding:\n          // use the other end of the curve\n          iPrev = pp.length - 2;\n          tPrev = t0 + pp[iPrev] - pp[iPrev + 1];\n          break;\n        default:\n          // ZeroCurvatureEnding\n\n          // f''(t0) = 0 a.k.a. Natural Spline\n          iPrev = i1;\n          tPrev = t1;\n      }\n    }\n    if (tNext === undefined) {\n      switch (this.getSettings_().endingEnd) {\n        case ZeroSlopeEnding:\n          // f'(tN) = 0\n          iNext = i1;\n          tNext = 2 * t1 - t0;\n          break;\n        case WrapAroundEnding:\n          // use the other end of the curve\n          iNext = 1;\n          tNext = t1 + pp[1] - pp[0];\n          break;\n        default:\n          // ZeroCurvatureEnding\n\n          // f''(tN) = 0, a.k.a. Natural Spline\n          iNext = i1 - 1;\n          tNext = t0;\n      }\n    }\n    const halfDt = (t1 - t0) * 0.5,\n      stride = this.valueSize;\n    this._weightPrev = halfDt / (t0 - tPrev);\n    this._weightNext = halfDt / (tNext - t1);\n    this._offsetPrev = iPrev * stride;\n    this._offsetNext = iNext * stride;\n  }\n  interpolate_(i1, t0, t, t1) {\n    const result = this.resultBuffer,\n      values = this.sampleValues,\n      stride = this.valueSize,\n      o1 = i1 * stride,\n      o0 = o1 - stride,\n      oP = this._offsetPrev,\n      oN = this._offsetNext,\n      wP = this._weightPrev,\n      wN = this._weightNext,\n      p = (t - t0) / (t1 - t0),\n      pp = p * p,\n      ppp = pp * p;\n\n    // evaluate polynomials\n\n    const sP = -wP * ppp + 2 * wP * pp - wP * p;\n    const s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;\n    const s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;\n    const sN = wN * ppp - wN * pp;\n\n    // combine data linearly\n\n    for (let i = 0; i !== stride; ++i) {\n      result[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];\n    }\n    return result;\n  }\n}\n\n/**\n * A basic linear interpolant.\n *\n * @augments Interpolant\n */\nclass LinearInterpolant extends Interpolant {\n  /**\n   * Constructs a new linear interpolant.\n   *\n   * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.\n   * @param {TypedArray} sampleValues - The sample values.\n   * @param {number} sampleSize - The sample size\n   * @param {TypedArray} [resultBuffer] - The result buffer.\n   */\n  constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n    super(parameterPositions, sampleValues, sampleSize, resultBuffer);\n  }\n  interpolate_(i1, t0, t, t1) {\n    const result = this.resultBuffer,\n      values = this.sampleValues,\n      stride = this.valueSize,\n      offset1 = i1 * stride,\n      offset0 = offset1 - stride,\n      weight1 = (t - t0) / (t1 - t0),\n      weight0 = 1 - weight1;\n    for (let i = 0; i !== stride; ++i) {\n      result[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;\n    }\n    return result;\n  }\n}\n\n/**\n * Interpolant that evaluates to the sample value at the position preceding\n * the parameter.\n *\n * @augments Interpolant\n */\nclass DiscreteInterpolant extends Interpolant {\n  /**\n   * Constructs a new discrete interpolant.\n   *\n   * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.\n   * @param {TypedArray} sampleValues - The sample values.\n   * @param {number} sampleSize - The sample size\n   * @param {TypedArray} [resultBuffer] - The result buffer.\n   */\n  constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n    super(parameterPositions, sampleValues, sampleSize, resultBuffer);\n  }\n  interpolate_(i1 /*, t0, t, t1 */) {\n    return this.copySampleValue_(i1 - 1);\n  }\n}\n\n/**\n * Represents s a timed sequence of keyframes, which are composed of lists of\n * times and related values, and which are used to animate a specific property\n * of an object.\n */\nclass KeyframeTrack {\n  /**\n   * Constructs a new keyframe track.\n   *\n   * @param {string} name - The keyframe track's name.\n   * @param {Array<number>} times - A list of keyframe times.\n   * @param {Array<number>} values - A list of keyframe values.\n   * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.\n   */\n  constructor(name, times, values, interpolation) {\n    if (name === undefined) throw new Error('THREE.KeyframeTrack: track name is undefined');\n    if (times === undefined || times.length === 0) throw new Error('THREE.KeyframeTrack: no keyframes in track named ' + name);\n\n    /**\n     * The track's name can refer to morph targets or bones or\n     * possibly other values within an animated object. See {@link PropertyBinding#parseTrackName}\n     * for the forms of strings that can be parsed for property binding.\n     *\n     * @type {string}\n     */\n    this.name = name;\n\n    /**\n     * The keyframe times.\n     *\n     * @type {Float32Array}\n     */\n    this.times = convertArray(times, this.TimeBufferType);\n\n    /**\n     * The keyframe values.\n     *\n     * @type {Float32Array}\n     */\n    this.values = convertArray(values, this.ValueBufferType);\n    this.setInterpolation(interpolation || this.DefaultInterpolation);\n  }\n\n  /**\n   * Converts the keyframe track to JSON.\n   *\n   * @static\n   * @param {KeyframeTrack} track - The keyframe track to serialize.\n   * @return {Object} The serialized keyframe track as JSON.\n   */\n  static toJSON(track) {\n    const trackType = track.constructor;\n    let json;\n\n    // derived classes can define a static toJSON method\n    if (trackType.toJSON !== this.toJSON) {\n      json = trackType.toJSON(track);\n    } else {\n      // by default, we assume the data can be serialized as-is\n      json = {\n        'name': track.name,\n        'times': convertArray(track.times, Array),\n        'values': convertArray(track.values, Array)\n      };\n      const interpolation = track.getInterpolation();\n      if (interpolation !== track.DefaultInterpolation) {\n        json.interpolation = interpolation;\n      }\n    }\n    json.type = track.ValueTypeName; // mandatory\n\n    return json;\n  }\n\n  /**\n   * Factory method for creating a new discrete interpolant.\n   *\n   * @static\n   * @param {TypedArray} [result] - The result buffer.\n   * @return {DiscreteInterpolant} The new interpolant.\n   */\n  InterpolantFactoryMethodDiscrete(result) {\n    return new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);\n  }\n\n  /**\n   * Factory method for creating a new linear interpolant.\n   *\n   * @static\n   * @param {TypedArray} [result] - The result buffer.\n   * @return {LinearInterpolant} The new interpolant.\n   */\n  InterpolantFactoryMethodLinear(result) {\n    return new LinearInterpolant(this.times, this.values, this.getValueSize(), result);\n  }\n\n  /**\n   * Factory method for creating a new smooth interpolant.\n   *\n   * @static\n   * @param {TypedArray} [result] - The result buffer.\n   * @return {CubicInterpolant} The new interpolant.\n   */\n  InterpolantFactoryMethodSmooth(result) {\n    return new CubicInterpolant(this.times, this.values, this.getValueSize(), result);\n  }\n\n  /**\n   * Defines the interpolation factor method for this keyframe track.\n   *\n   * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} interpolation - The interpolation type.\n   * @return {KeyframeTrack} A reference to this keyframe track.\n   */\n  setInterpolation(interpolation) {\n    let factoryMethod;\n    switch (interpolation) {\n      case InterpolateDiscrete:\n        factoryMethod = this.InterpolantFactoryMethodDiscrete;\n        break;\n      case InterpolateLinear:\n        factoryMethod = this.InterpolantFactoryMethodLinear;\n        break;\n      case InterpolateSmooth:\n        factoryMethod = this.InterpolantFactoryMethodSmooth;\n        break;\n    }\n    if (factoryMethod === undefined) {\n      const message = 'unsupported interpolation for ' + this.ValueTypeName + ' keyframe track named ' + this.name;\n      if (this.createInterpolant === undefined) {\n        // fall back to default, unless the default itself is messed up\n        if (interpolation !== this.DefaultInterpolation) {\n          this.setInterpolation(this.DefaultInterpolation);\n        } else {\n          throw new Error(message); // fatal, in this case\n        }\n      }\n      console.warn('THREE.KeyframeTrack:', message);\n      return this;\n    }\n    this.createInterpolant = factoryMethod;\n    return this;\n  }\n\n  /**\n   * Returns the current interpolation type.\n   *\n   * @return {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} The interpolation type.\n   */\n  getInterpolation() {\n    switch (this.createInterpolant) {\n      case this.InterpolantFactoryMethodDiscrete:\n        return InterpolateDiscrete;\n      case this.InterpolantFactoryMethodLinear:\n        return InterpolateLinear;\n      case this.InterpolantFactoryMethodSmooth:\n        return InterpolateSmooth;\n    }\n  }\n\n  /**\n   * Returns the value size.\n   *\n   * @return {number} The value size.\n   */\n  getValueSize() {\n    return this.values.length / this.times.length;\n  }\n\n  /**\n   * Moves all keyframes either forward or backward in time.\n   *\n   * @param {number} timeOffset - The offset to move the time values.\n   * @return {KeyframeTrack} A reference to this keyframe track.\n   */\n  shift(timeOffset) {\n    if (timeOffset !== 0.0) {\n      const times = this.times;\n      for (let i = 0, n = times.length; i !== n; ++i) {\n        times[i] += timeOffset;\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Scale all keyframe times by a factor (useful for frame - seconds conversions).\n   *\n   * @param {number} timeScale - The time scale.\n   * @return {KeyframeTrack} A reference to this keyframe track.\n   */\n  scale(timeScale) {\n    if (timeScale !== 1.0) {\n      const times = this.times;\n      for (let i = 0, n = times.length; i !== n; ++i) {\n        times[i] *= timeScale;\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Removes keyframes before and after animation without changing any values within the defined time range.\n   *\n   * Note: The method does not shift around keys to the start of the track time, because for interpolated\n   * keys this will change their values\n   *\n   * @param {number} startTime - The start time.\n   * @param {number} endTime - The end time.\n   * @return {KeyframeTrack} A reference to this keyframe track.\n   */\n  trim(startTime, endTime) {\n    const times = this.times,\n      nKeys = times.length;\n    let from = 0,\n      to = nKeys - 1;\n    while (from !== nKeys && times[from] < startTime) {\n      ++from;\n    }\n    while (to !== -1 && times[to] > endTime) {\n      --to;\n    }\n    ++to; // inclusive -> exclusive bound\n\n    if (from !== 0 || to !== nKeys) {\n      // empty tracks are forbidden, so keep at least one keyframe\n      if (from >= to) {\n        to = Math.max(to, 1);\n        from = to - 1;\n      }\n      const stride = this.getValueSize();\n      this.times = times.slice(from, to);\n      this.values = this.values.slice(from * stride, to * stride);\n    }\n    return this;\n  }\n\n  /**\n   * Performs minimal validation on the keyframe track. Returns `true` if the values\n   * are valid.\n   *\n   * @return {boolean} Whether the keyframes are valid or not.\n   */\n  validate() {\n    let valid = true;\n    const valueSize = this.getValueSize();\n    if (valueSize - Math.floor(valueSize) !== 0) {\n      console.error('THREE.KeyframeTrack: Invalid value size in track.', this);\n      valid = false;\n    }\n    const times = this.times,\n      values = this.values,\n      nKeys = times.length;\n    if (nKeys === 0) {\n      console.error('THREE.KeyframeTrack: Track is empty.', this);\n      valid = false;\n    }\n    let prevTime = null;\n    for (let i = 0; i !== nKeys; i++) {\n      const currTime = times[i];\n      if (typeof currTime === 'number' && isNaN(currTime)) {\n        console.error('THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime);\n        valid = false;\n        break;\n      }\n      if (prevTime !== null && prevTime > currTime) {\n        console.error('THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime);\n        valid = false;\n        break;\n      }\n      prevTime = currTime;\n    }\n    if (values !== undefined) {\n      if (isTypedArray(values)) {\n        for (let i = 0, n = values.length; i !== n; ++i) {\n          const value = values[i];\n          if (isNaN(value)) {\n            console.error('THREE.KeyframeTrack: Value is not a valid number.', this, i, value);\n            valid = false;\n            break;\n          }\n        }\n      }\n    }\n    return valid;\n  }\n\n  /**\n   * Optimizes this keyframe track by removing equivalent sequential keys (which are\n   * common in morph target sequences).\n   *\n   * @return {AnimationClip} A reference to this animation clip.\n   */\n  optimize() {\n    // (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\n    // times or values may be shared with other tracks, so overwriting is unsafe\n    const times = this.times.slice(),\n      values = this.values.slice(),\n      stride = this.getValueSize(),\n      smoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n      lastIndex = times.length - 1;\n    let writeIndex = 1;\n    for (let i = 1; i < lastIndex; ++i) {\n      let keep = false;\n      const time = times[i];\n      const timeNext = times[i + 1];\n\n      // remove adjacent keyframes scheduled at the same time\n\n      if (time !== timeNext && (i !== 1 || time !== times[0])) {\n        if (!smoothInterpolation) {\n          // remove unnecessary keyframes same as their neighbors\n\n          const offset = i * stride,\n            offsetP = offset - stride,\n            offsetN = offset + stride;\n          for (let j = 0; j !== stride; ++j) {\n            const value = values[offset + j];\n            if (value !== values[offsetP + j] || value !== values[offsetN + j]) {\n              keep = true;\n              break;\n            }\n          }\n        } else {\n          keep = true;\n        }\n      }\n\n      // in-place compaction\n\n      if (keep) {\n        if (i !== writeIndex) {\n          times[writeIndex] = times[i];\n          const readOffset = i * stride,\n            writeOffset = writeIndex * stride;\n          for (let j = 0; j !== stride; ++j) {\n            values[writeOffset + j] = values[readOffset + j];\n          }\n        }\n        ++writeIndex;\n      }\n    }\n\n    // flush last keyframe (compaction looks ahead)\n\n    if (lastIndex > 0) {\n      times[writeIndex] = times[lastIndex];\n      for (let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++j) {\n        values[writeOffset + j] = values[readOffset + j];\n      }\n      ++writeIndex;\n    }\n    if (writeIndex !== times.length) {\n      this.times = times.slice(0, writeIndex);\n      this.values = values.slice(0, writeIndex * stride);\n    } else {\n      this.times = times;\n      this.values = values;\n    }\n    return this;\n  }\n\n  /**\n   * Returns a new keyframe track with copied values from this instance.\n   *\n   * @return {KeyframeTrack} A clone of this instance.\n   */\n  clone() {\n    const times = this.times.slice();\n    const values = this.values.slice();\n    const TypedKeyframeTrack = this.constructor;\n    const track = new TypedKeyframeTrack(this.name, times, values);\n\n    // Interpolant argument to constructor is not saved, so copy the factory method directly.\n    track.createInterpolant = this.createInterpolant;\n    return track;\n  }\n}\n\n/**\n * The value type name.\n *\n * @type {String}\n * @default ''\n */\nKeyframeTrack.prototype.ValueTypeName = '';\n\n/**\n * The time buffer type of this keyframe track.\n *\n * @type {TypedArray|Array}\n * @default Float32Array.constructor\n */\nKeyframeTrack.prototype.TimeBufferType = Float32Array;\n\n/**\n * The value buffer type of this keyframe track.\n *\n * @type {TypedArray|Array}\n * @default Float32Array.constructor\n */\nKeyframeTrack.prototype.ValueBufferType = Float32Array;\n\n/**\n * The default interpolation type of this keyframe track.\n *\n * @type {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)}\n * @default InterpolateLinear\n */\nKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\n\n/**\n * A track for boolean keyframe values.\n *\n * @augments KeyframeTrack\n */\nclass BooleanKeyframeTrack extends KeyframeTrack {\n  /**\n   * Constructs a new boolean keyframe track.\n   *\n   * This keyframe track type has no `interpolation` parameter because the\n   * interpolation is always discrete.\n   *\n   * @param {string} name - The keyframe track's name.\n   * @param {Array<number>} times - A list of keyframe times.\n   * @param {Array<number>} values - A list of keyframe values.\n   */\n  constructor(name, times, values) {\n    super(name, times, values);\n  }\n}\n\n/**\n * The value type name.\n *\n * @type {String}\n * @default 'bool'\n */\nBooleanKeyframeTrack.prototype.ValueTypeName = 'bool';\n\n/**\n * The value buffer type of this keyframe track.\n *\n * @type {TypedArray|Array}\n * @default Array.constructor\n */\nBooleanKeyframeTrack.prototype.ValueBufferType = Array;\n\n/**\n * The default interpolation type of this keyframe track.\n *\n * @type {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)}\n * @default InterpolateDiscrete\n */\nBooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\nBooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\nBooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n/**\n * A track for color keyframe values.\n *\n * @augments KeyframeTrack\n */\nclass ColorKeyframeTrack extends KeyframeTrack {\n  /**\n   * Constructs a new color keyframe track.\n   *\n   * @param {string} name - The keyframe track's name.\n   * @param {Array<number>} times - A list of keyframe times.\n   * @param {Array<number>} values - A list of keyframe values.\n   * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.\n   */\n  constructor(name, times, values, interpolation) {\n    super(name, times, values, interpolation);\n  }\n}\n\n/**\n * The value type name.\n *\n * @type {String}\n * @default 'color'\n */\nColorKeyframeTrack.prototype.ValueTypeName = 'color';\n\n/**\n * A track for numeric keyframe values.\n *\n * @augments KeyframeTrack\n */\nclass NumberKeyframeTrack extends KeyframeTrack {\n  /**\n   * Constructs a new number keyframe track.\n   *\n   * @param {string} name - The keyframe track's name.\n   * @param {Array<number>} times - A list of keyframe times.\n   * @param {Array<number>} values - A list of keyframe values.\n   * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.\n   */\n  constructor(name, times, values, interpolation) {\n    super(name, times, values, interpolation);\n  }\n}\n\n/**\n * The value type name.\n *\n * @type {String}\n * @default 'number'\n */\nNumberKeyframeTrack.prototype.ValueTypeName = 'number';\n\n/**\n * Spherical linear unit quaternion interpolant.\n *\n * @augments Interpolant\n */\nclass QuaternionLinearInterpolant extends Interpolant {\n  /**\n   * Constructs a new SLERP interpolant.\n   *\n   * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.\n   * @param {TypedArray} sampleValues - The sample values.\n   * @param {number} sampleSize - The sample size\n   * @param {TypedArray} [resultBuffer] - The result buffer.\n   */\n  constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n    super(parameterPositions, sampleValues, sampleSize, resultBuffer);\n  }\n  interpolate_(i1, t0, t, t1) {\n    const result = this.resultBuffer,\n      values = this.sampleValues,\n      stride = this.valueSize,\n      alpha = (t - t0) / (t1 - t0);\n    let offset = i1 * stride;\n    for (let end = offset + stride; offset !== end; offset += 4) {\n      Quaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);\n    }\n    return result;\n  }\n}\n\n/**\n * A track for Quaternion keyframe values.\n *\n * @augments KeyframeTrack\n */\nclass QuaternionKeyframeTrack extends KeyframeTrack {\n  /**\n   * Constructs a new Quaternion keyframe track.\n   *\n   * @param {string} name - The keyframe track's name.\n   * @param {Array<number>} times - A list of keyframe times.\n   * @param {Array<number>} values - A list of keyframe values.\n   * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.\n   */\n  constructor(name, times, values, interpolation) {\n    super(name, times, values, interpolation);\n  }\n\n  /**\n   * Overwritten so the method returns Quaternion based interpolant.\n   *\n   * @static\n   * @param {TypedArray} [result] - The result buffer.\n   * @return {QuaternionLinearInterpolant} The new interpolant.\n   */\n  InterpolantFactoryMethodLinear(result) {\n    return new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);\n  }\n}\n\n/**\n * The value type name.\n *\n * @type {String}\n * @default 'quaternion'\n */\nQuaternionKeyframeTrack.prototype.ValueTypeName = 'quaternion';\n// ValueBufferType is inherited\n// DefaultInterpolation is inherited;\nQuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n/**\n * A track for string keyframe values.\n *\n * @augments KeyframeTrack\n */\nclass StringKeyframeTrack extends KeyframeTrack {\n  /**\n   * Constructs a new string keyframe track.\n   *\n   * This keyframe track type has no `interpolation` parameter because the\n   * interpolation is always discrete.\n   *\n   * @param {string} name - The keyframe track's name.\n   * @param {Array<number>} times - A list of keyframe times.\n   * @param {Array<number>} values - A list of keyframe values.\n   */\n  constructor(name, times, values) {\n    super(name, times, values);\n  }\n}\n\n/**\n * The value type name.\n *\n * @type {String}\n * @default 'string'\n */\nStringKeyframeTrack.prototype.ValueTypeName = 'string';\n\n/**\n * The value buffer type of this keyframe track.\n *\n * @type {TypedArray|Array}\n * @default Array.constructor\n */\nStringKeyframeTrack.prototype.ValueBufferType = Array;\n\n/**\n * The default interpolation type of this keyframe track.\n *\n * @type {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)}\n * @default InterpolateDiscrete\n */\nStringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\nStringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\nStringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n/**\n * A track for vector keyframe values.\n *\n * @augments KeyframeTrack\n */\nclass VectorKeyframeTrack extends KeyframeTrack {\n  /**\n   * Constructs a new vector keyframe track.\n   *\n   * @param {string} name - The keyframe track's name.\n   * @param {Array<number>} times - A list of keyframe times.\n   * @param {Array<number>} values - A list of keyframe values.\n   * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.\n   */\n  constructor(name, times, values, interpolation) {\n    super(name, times, values, interpolation);\n  }\n}\n\n/**\n * The value type name.\n *\n * @type {String}\n * @default 'vector'\n */\nVectorKeyframeTrack.prototype.ValueTypeName = 'vector';\n\n/**\n * A reusable set of keyframe tracks which represent an animation.\n */\nclass AnimationClip {\n  /**\n   * Constructs a new animation clip.\n   *\n   * Note: Instead of instantiating an AnimationClip directly with the constructor, you can\n   * use the static interface of this class for creating clips. In most cases though, animation clips\n   * will automatically be created by loaders when importing animated 3D assets.\n   *\n   * @param {string} [name=''] - The clip's name.\n   * @param {number} [duration=-1] - The clip's duration in seconds. If a negative value is passed,\n   * the duration will be calculated from the passed keyframes.\n   * @param {Array<KeyframeTrack>} tracks - An array of keyframe tracks.\n   * @param {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)} [blendMode=NormalAnimationBlendMode] - Defines how the animation\n   * is blended/combined when two or more animations are simultaneously played.\n   */\n  constructor() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n    let tracks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    let blendMode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : NormalAnimationBlendMode;\n    /**\n     * The clip's name.\n     *\n     * @type {string}\n     */\n    this.name = name;\n\n    /**\n     *  An array of keyframe tracks.\n     *\n     * @type {Array<KeyframeTrack>}\n     */\n    this.tracks = tracks;\n\n    /**\n     * The clip's duration in seconds.\n     *\n     * @type {number}\n     */\n    this.duration = duration;\n\n    /**\n     * Defines how the animation is blended/combined when two or more animations\n     * are simultaneously played.\n     *\n     * @type {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)}\n     */\n    this.blendMode = blendMode;\n\n    /**\n     * The UUID of the animation clip.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.uuid = generateUUID();\n\n    // this means it should figure out its duration by scanning the tracks\n    if (this.duration < 0) {\n      this.resetDuration();\n    }\n  }\n\n  /**\n   * Factory method for creating an animation clip from the given JSON.\n   *\n   * @static\n   * @param {Object} json - The serialized animation clip.\n   * @return {AnimationClip} The new animation clip.\n   */\n  static parse(json) {\n    const tracks = [],\n      jsonTracks = json.tracks,\n      frameTime = 1.0 / (json.fps || 1.0);\n    for (let i = 0, n = jsonTracks.length; i !== n; ++i) {\n      tracks.push(parseKeyframeTrack(jsonTracks[i]).scale(frameTime));\n    }\n    const clip = new this(json.name, json.duration, tracks, json.blendMode);\n    clip.uuid = json.uuid;\n    return clip;\n  }\n\n  /**\n   * Serializes the given animation clip into JSON.\n   *\n   * @static\n   * @param {AnimationClip} clip - The animation clip to serialize.\n   * @return {Object} The JSON object.\n   */\n  static toJSON(clip) {\n    const tracks = [],\n      clipTracks = clip.tracks;\n    const json = {\n      'name': clip.name,\n      'duration': clip.duration,\n      'tracks': tracks,\n      'uuid': clip.uuid,\n      'blendMode': clip.blendMode\n    };\n    for (let i = 0, n = clipTracks.length; i !== n; ++i) {\n      tracks.push(KeyframeTrack.toJSON(clipTracks[i]));\n    }\n    return json;\n  }\n\n  /**\n   * Returns a new animation clip from the passed morph targets array of a\n   * geometry, taking a name and the number of frames per second.\n   *\n   * Note: The fps parameter is required, but the animation speed can be\n   * overridden via {@link AnimationAction#setDuration}.\n   *\n   * @static\n   * @param {string} name - The name of the animation clip.\n   * @param {Array<Object>} morphTargetSequence - A sequence of morph targets.\n   * @param {number} fps - The Frames-Per-Second value.\n   * @param {boolean} noLoop - Whether the clip should be no loop or not.\n   * @return {AnimationClip} The new animation clip.\n   */\n  static CreateFromMorphTargetSequence(name, morphTargetSequence, fps, noLoop) {\n    const numMorphTargets = morphTargetSequence.length;\n    const tracks = [];\n    for (let i = 0; i < numMorphTargets; i++) {\n      let times = [];\n      let values = [];\n      times.push((i + numMorphTargets - 1) % numMorphTargets, i, (i + 1) % numMorphTargets);\n      values.push(0, 1, 0);\n      const order = getKeyframeOrder(times);\n      times = sortedArray(times, 1, order);\n      values = sortedArray(values, 1, order);\n\n      // if there is a key at the first frame, duplicate it as the\n      // last frame as well for perfect loop.\n      if (!noLoop && times[0] === 0) {\n        times.push(numMorphTargets);\n        values.push(values[0]);\n      }\n      tracks.push(new NumberKeyframeTrack('.morphTargetInfluences[' + morphTargetSequence[i].name + ']', times, values).scale(1.0 / fps));\n    }\n    return new this(name, -1, tracks);\n  }\n\n  /**\n   * Searches for an animation clip by name, taking as its first parameter\n   * either an array of clips, or a mesh or geometry that contains an\n   * array named \"animations\" property.\n   *\n   * @static\n   * @param {(Array<AnimationClip>|Object3D)} objectOrClipArray - The array or object to search through.\n   * @param {string} name - The name to search for.\n   * @return {?AnimationClip} The found animation clip. Returns `null` if no clip has been found.\n   */\n  static findByName(objectOrClipArray, name) {\n    let clipArray = objectOrClipArray;\n    if (!Array.isArray(objectOrClipArray)) {\n      const o = objectOrClipArray;\n      clipArray = o.geometry && o.geometry.animations || o.animations;\n    }\n    for (let i = 0; i < clipArray.length; i++) {\n      if (clipArray[i].name === name) {\n        return clipArray[i];\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns an array of new AnimationClips created from the morph target\n   * sequences of a geometry, trying to sort morph target names into\n   * animation-group-based patterns like \"Walk_001, Walk_002, Run_001, Run_002...\".\n   *\n   * See {@link MD2Loader#parse} as an example for how the method should be used.\n   *\n   * @static\n   * @param {Array<Object>} morphTargets - A sequence of morph targets.\n   * @param {number} fps - The Frames-Per-Second value.\n   * @param {boolean} noLoop - Whether the clip should be no loop or not.\n   * @return {Array<AnimationClip>} An array of new animation clips.\n   */\n  static CreateClipsFromMorphTargetSequences(morphTargets, fps, noLoop) {\n    const animationToMorphTargets = {};\n\n    // tested with https://regex101.com/ on trick sequences\n    // such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n    const pattern = /^([\\w-]*?)([\\d]+)$/;\n\n    // sort morph target names into animation groups based\n    // patterns like Walk_001, Walk_002, Run_001, Run_002\n    for (let i = 0, il = morphTargets.length; i < il; i++) {\n      const morphTarget = morphTargets[i];\n      const parts = morphTarget.name.match(pattern);\n      if (parts && parts.length > 1) {\n        const name = parts[1];\n        let animationMorphTargets = animationToMorphTargets[name];\n        if (!animationMorphTargets) {\n          animationToMorphTargets[name] = animationMorphTargets = [];\n        }\n        animationMorphTargets.push(morphTarget);\n      }\n    }\n    const clips = [];\n    for (const name in animationToMorphTargets) {\n      clips.push(this.CreateFromMorphTargetSequence(name, animationToMorphTargets[name], fps, noLoop));\n    }\n    return clips;\n  }\n\n  /**\n   * Parses the `animation.hierarchy` format and returns a new animation clip.\n   *\n   * @static\n   * @deprecated since r175.\n   * @param {Object} animation - A serialized animation clip as JSON.\n   * @param {Array<Bones>} bones - An array of bones.\n   * @return {?AnimationClip} The new animation clip.\n   */\n  static parseAnimation(animation, bones) {\n    console.warn('THREE.AnimationClip: parseAnimation() is deprecated and will be removed with r185');\n    if (!animation) {\n      console.error('THREE.AnimationClip: No animation in JSONLoader data.');\n      return null;\n    }\n    const addNonemptyTrack = function (trackType, trackName, animationKeys, propertyName, destTracks) {\n      // only return track if there are actually keys.\n      if (animationKeys.length !== 0) {\n        const times = [];\n        const values = [];\n        flattenJSON(animationKeys, times, values, propertyName);\n\n        // empty keys are filtered out, so check again\n        if (times.length !== 0) {\n          destTracks.push(new trackType(trackName, times, values));\n        }\n      }\n    };\n    const tracks = [];\n    const clipName = animation.name || 'default';\n    const fps = animation.fps || 30;\n    const blendMode = animation.blendMode;\n\n    // automatic length determination in AnimationClip.\n    let duration = animation.length || -1;\n    const hierarchyTracks = animation.hierarchy || [];\n    for (let h = 0; h < hierarchyTracks.length; h++) {\n      const animationKeys = hierarchyTracks[h].keys;\n\n      // skip empty tracks\n      if (!animationKeys || animationKeys.length === 0) continue;\n\n      // process morph targets\n      if (animationKeys[0].morphTargets) {\n        // figure out all morph targets used in this track\n        const morphTargetNames = {};\n        let k;\n        for (k = 0; k < animationKeys.length; k++) {\n          if (animationKeys[k].morphTargets) {\n            for (let m = 0; m < animationKeys[k].morphTargets.length; m++) {\n              morphTargetNames[animationKeys[k].morphTargets[m]] = -1;\n            }\n          }\n        }\n\n        // create a track for each morph target with all zero\n        // morphTargetInfluences except for the keys in which\n        // the morphTarget is named.\n        for (const morphTargetName in morphTargetNames) {\n          const times = [];\n          const values = [];\n          for (let m = 0; m !== animationKeys[k].morphTargets.length; ++m) {\n            const animationKey = animationKeys[k];\n            times.push(animationKey.time);\n            values.push(animationKey.morphTarget === morphTargetName ? 1 : 0);\n          }\n          tracks.push(new NumberKeyframeTrack('.morphTargetInfluence[' + morphTargetName + ']', times, values));\n        }\n        duration = morphTargetNames.length * fps;\n      } else {\n        // ...assume skeletal animation\n\n        const boneName = '.bones[' + bones[h].name + ']';\n        addNonemptyTrack(VectorKeyframeTrack, boneName + '.position', animationKeys, 'pos', tracks);\n        addNonemptyTrack(QuaternionKeyframeTrack, boneName + '.quaternion', animationKeys, 'rot', tracks);\n        addNonemptyTrack(VectorKeyframeTrack, boneName + '.scale', animationKeys, 'scl', tracks);\n      }\n    }\n    if (tracks.length === 0) {\n      return null;\n    }\n    const clip = new this(clipName, duration, tracks, blendMode);\n    return clip;\n  }\n\n  /**\n   * Sets the duration of this clip to the duration of its longest keyframe track.\n   *\n   * @return {AnimationClip} A reference to this animation clip.\n   */\n  resetDuration() {\n    const tracks = this.tracks;\n    let duration = 0;\n    for (let i = 0, n = tracks.length; i !== n; ++i) {\n      const track = this.tracks[i];\n      duration = Math.max(duration, track.times[track.times.length - 1]);\n    }\n    this.duration = duration;\n    return this;\n  }\n\n  /**\n   * Trims all tracks to the clip's duration.\n   *\n   * @return {AnimationClip} A reference to this animation clip.\n   */\n  trim() {\n    for (let i = 0; i < this.tracks.length; i++) {\n      this.tracks[i].trim(0, this.duration);\n    }\n    return this;\n  }\n\n  /**\n   * Performs minimal validation on each track in the clip. Returns `true` if all\n   * tracks are valid.\n   *\n   * @return {boolean} Whether the clip's keyframes are valid or not.\n   */\n  validate() {\n    let valid = true;\n    for (let i = 0; i < this.tracks.length; i++) {\n      valid = valid && this.tracks[i].validate();\n    }\n    return valid;\n  }\n\n  /**\n   * Optimizes each track by removing equivalent sequential keys (which are\n   * common in morph target sequences).\n   *\n   * @return {AnimationClip} A reference to this animation clip.\n   */\n  optimize() {\n    for (let i = 0; i < this.tracks.length; i++) {\n      this.tracks[i].optimize();\n    }\n    return this;\n  }\n\n  /**\n   * Returns a new animation clip with copied values from this instance.\n   *\n   * @return {AnimationClip} A clone of this instance.\n   */\n  clone() {\n    const tracks = [];\n    for (let i = 0; i < this.tracks.length; i++) {\n      tracks.push(this.tracks[i].clone());\n    }\n    return new this.constructor(this.name, this.duration, tracks, this.blendMode);\n  }\n\n  /**\n   * Serializes this animation clip into JSON.\n   *\n   * @return {Object} The JSON object.\n   */\n  toJSON() {\n    return this.constructor.toJSON(this);\n  }\n}\nfunction getTrackTypeForValueTypeName(typeName) {\n  switch (typeName.toLowerCase()) {\n    case 'scalar':\n    case 'double':\n    case 'float':\n    case 'number':\n    case 'integer':\n      return NumberKeyframeTrack;\n    case 'vector':\n    case 'vector2':\n    case 'vector3':\n    case 'vector4':\n      return VectorKeyframeTrack;\n    case 'color':\n      return ColorKeyframeTrack;\n    case 'quaternion':\n      return QuaternionKeyframeTrack;\n    case 'bool':\n    case 'boolean':\n      return BooleanKeyframeTrack;\n    case 'string':\n      return StringKeyframeTrack;\n  }\n  throw new Error('THREE.KeyframeTrack: Unsupported typeName: ' + typeName);\n}\nfunction parseKeyframeTrack(json) {\n  if (json.type === undefined) {\n    throw new Error('THREE.KeyframeTrack: track type undefined, can not parse');\n  }\n  const trackType = getTrackTypeForValueTypeName(json.type);\n  if (json.times === undefined) {\n    const times = [],\n      values = [];\n    flattenJSON(json.keys, times, values, 'value');\n    json.times = times;\n    json.values = values;\n  }\n\n  // derived classes can define a static parse method\n  if (trackType.parse !== undefined) {\n    return trackType.parse(json);\n  } else {\n    // by default, we assume a constructor compatible with the base\n    return new trackType(json.name, json.times, json.values, json.interpolation);\n  }\n}\n\n/**\n * @class\n * @classdesc A simple caching system, used internally by {@link FileLoader}.\n * To enable caching across all loaders that use {@link FileLoader}, add `THREE.Cache.enabled = true.` once in your app.\n * @hideconstructor\n */\nconst Cache = {\n  /**\n   * Whether caching is enabled or not.\n   *\n   * @static\n   * @type {boolean}\n   * @default false\n   */\n  enabled: false,\n  /**\n   * A dictionary that holds cached files.\n   *\n   * @static\n   * @type {Object<string,Object>}\n   */\n  files: {},\n  /**\n   * Adds a cache entry with a key to reference the file. If this key already\n   * holds a file, it is overwritten.\n   *\n   * @static\n   * @param {string} key - The key to reference the cached file.\n   * @param {Object} file -  The file to be cached.\n   */\n  add: function (key, file) {\n    if (this.enabled === false) return;\n\n    // console.log( 'THREE.Cache', 'Adding key:', key );\n\n    this.files[key] = file;\n  },\n  /**\n   * Gets the cached value for the given key.\n   *\n   * @static\n   * @param {string} key - The key to reference the cached file.\n   * @return {Object|undefined} The cached file. If the key does not exist `undefined` is returned.\n   */\n  get: function (key) {\n    if (this.enabled === false) return;\n\n    // console.log( 'THREE.Cache', 'Checking key:', key );\n\n    return this.files[key];\n  },\n  /**\n   * Removes the cached file associated with the given key.\n   *\n   * @static\n   * @param {string} key - The key to reference the cached file.\n   */\n  remove: function (key) {\n    delete this.files[key];\n  },\n  /**\n   * Remove all values from the cache.\n   *\n   * @static\n   */\n  clear: function () {\n    this.files = {};\n  }\n};\n\n/**\n * Handles and keeps track of loaded and pending data. A default global\n * instance of this class is created and used by loaders if not supplied\n * manually.\n *\n * In general that should be sufficient, however there are times when it can\n * be useful to have separate loaders - for example if you want to show\n * separate loading bars for objects and textures.\n *\n * ```js\n * const manager = new THREE.LoadingManager();\n * manager.onLoad = () => console.log( 'Loading complete!' );\n *\n * const loader1 = new OBJLoader( manager );\n * const loader2 = new ColladaLoader( manager );\n * ```\n */\nclass LoadingManager {\n  /**\n   * Constructs a new loading manager.\n   *\n   * @param {Function} [onLoad] - Executes when all items have been loaded.\n   * @param {Function} [onProgress] - Executes when single items have been loaded.\n   * @param {Function} [onError] - Executes when an error occurs.\n   */\n  constructor(onLoad, onProgress, onError) {\n    const scope = this;\n    let isLoading = false;\n    let itemsLoaded = 0;\n    let itemsTotal = 0;\n    let urlModifier = undefined;\n    const handlers = [];\n\n    // Refer to #5689 for the reason why we don't set .onStart\n    // in the constructor\n\n    /**\n     * Executes when an item starts loading.\n     *\n     * @type {Function|undefined}\n     * @default undefined\n     */\n    this.onStart = undefined;\n\n    /**\n     * Executes when all items have been loaded.\n     *\n     * @type {Function|undefined}\n     * @default undefined\n     */\n    this.onLoad = onLoad;\n\n    /**\n     * Executes when single items have been loaded.\n     *\n     * @type {Function|undefined}\n     * @default undefined\n     */\n    this.onProgress = onProgress;\n\n    /**\n     * Executes when an error occurs.\n     *\n     * @type {Function|undefined}\n     * @default undefined\n     */\n    this.onError = onError;\n\n    /**\n     * This should be called by any loader using the manager when the loader\n     * starts loading an item.\n     *\n     * @param {string} url - The URL to load.\n     */\n    this.itemStart = function (url) {\n      itemsTotal++;\n      if (isLoading === false) {\n        if (scope.onStart !== undefined) {\n          scope.onStart(url, itemsLoaded, itemsTotal);\n        }\n      }\n      isLoading = true;\n    };\n\n    /**\n     * This should be called by any loader using the manager when the loader\n     * ended loading an item.\n     *\n     * @param {string} url - The URL of the loaded item.\n     */\n    this.itemEnd = function (url) {\n      itemsLoaded++;\n      if (scope.onProgress !== undefined) {\n        scope.onProgress(url, itemsLoaded, itemsTotal);\n      }\n      if (itemsLoaded === itemsTotal) {\n        isLoading = false;\n        if (scope.onLoad !== undefined) {\n          scope.onLoad();\n        }\n      }\n    };\n\n    /**\n     * This should be called by any loader using the manager when the loader\n     * encounters an error when loading an item.\n     *\n     * @param {string} url - The URL of the item that produces an error.\n     */\n    this.itemError = function (url) {\n      if (scope.onError !== undefined) {\n        scope.onError(url);\n      }\n    };\n\n    /**\n     * Given a URL, uses the URL modifier callback (if any) and returns a\n     * resolved URL. If no URL modifier is set, returns the original URL.\n     *\n     * @param {string} url - The URL to load.\n     * @return {string} The resolved URL.\n     */\n    this.resolveURL = function (url) {\n      if (urlModifier) {\n        return urlModifier(url);\n      }\n      return url;\n    };\n\n    /**\n     * If provided, the callback will be passed each resource URL before a\n     * request is sent. The callback may return the original URL, or a new URL to\n     * override loading behavior. This behavior can be used to load assets from\n     * .ZIP files, drag-and-drop APIs, and Data URIs.\n     *\n     * ```js\n     * const blobs = {'fish.gltf': blob1, 'diffuse.png': blob2, 'normal.png': blob3};\n     *\n     * const manager = new THREE.LoadingManager();\n     *\n     * // Initialize loading manager with URL callback.\n     * const objectURLs = [];\n     * manager.setURLModifier( ( url ) => {\n     *\n     * \turl = URL.createObjectURL( blobs[ url ] );\n     * \tobjectURLs.push( url );\n     * \treturn url;\n     *\n     * } );\n     *\n     * // Load as usual, then revoke the blob URLs.\n     * const loader = new GLTFLoader( manager );\n     * loader.load( 'fish.gltf', (gltf) => {\n     *\n     * \tscene.add( gltf.scene );\n     * \tobjectURLs.forEach( ( url ) => URL.revokeObjectURL( url ) );\n     *\n     * } );\n     * ```\n     *\n     * @param {function(string):string} transform - URL modifier callback. Called with an URL and must return a resolved URL.\n     * @return {LoadingManager} A reference to this loading manager.\n     */\n    this.setURLModifier = function (transform) {\n      urlModifier = transform;\n      return this;\n    };\n\n    /**\n     * Registers a loader with the given regular expression. Can be used to\n     * define what loader should be used in order to load specific files. A\n     * typical use case is to overwrite the default loader for textures.\n     *\n     * ```js\n     * // add handler for TGA textures\n     * manager.addHandler( /\\.tga$/i, new TGALoader() );\n     * ```\n     *\n     * @param {string} regex - A regular expression.\n     * @param {Loader} loader - A loader that should handle matched cases.\n     * @return {LoadingManager} A reference to this loading manager.\n     */\n    this.addHandler = function (regex, loader) {\n      handlers.push(regex, loader);\n      return this;\n    };\n\n    /**\n     * Removes the loader for the given regular expression.\n     *\n     * @param {string} regex - A regular expression.\n     * @return {LoadingManager} A reference to this loading manager.\n     */\n    this.removeHandler = function (regex) {\n      const index = handlers.indexOf(regex);\n      if (index !== -1) {\n        handlers.splice(index, 2);\n      }\n      return this;\n    };\n\n    /**\n     * Can be used to retrieve the registered loader for the given file path.\n     *\n     * @param {string} file - The file path.\n     * @return {?Loader} The registered loader. Returns `null` if no loader was found.\n     */\n    this.getHandler = function (file) {\n      for (let i = 0, l = handlers.length; i < l; i += 2) {\n        const regex = handlers[i];\n        const loader = handlers[i + 1];\n        if (regex.global) regex.lastIndex = 0; // see #17920\n\n        if (regex.test(file)) {\n          return loader;\n        }\n      }\n      return null;\n    };\n  }\n}\n\n/**\n * The global default loading manager.\n *\n * @constant\n * @type {LoadingManager}\n */\nconst DefaultLoadingManager = /*@__PURE__*/new LoadingManager();\n\n/**\n * Abstract base class for loaders.\n *\n * @abstract\n */\nclass Loader {\n  /**\n   * Constructs a new loader.\n   *\n   * @param {LoadingManager} [manager] - The loading manager.\n   */\n  constructor(manager) {\n    /**\n     * The loading manager.\n     *\n     * @type {LoadingManager}\n     * @default DefaultLoadingManager\n     */\n    this.manager = manager !== undefined ? manager : DefaultLoadingManager;\n\n    /**\n     * The crossOrigin string to implement CORS for loading the url from a\n     * different domain that allows CORS.\n     *\n     * @type {string}\n     * @default 'anonymous'\n     */\n    this.crossOrigin = 'anonymous';\n\n    /**\n     * Whether the XMLHttpRequest uses credentials.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.withCredentials = false;\n\n    /**\n     * The base path from which the asset will be loaded.\n     *\n     * @type {string}\n     */\n    this.path = '';\n\n    /**\n     * The base path from which additional resources like textures will be loaded.\n     *\n     * @type {string}\n     */\n    this.resourcePath = '';\n\n    /**\n     * The [request header]{@link https://developer.mozilla.org/en-US/docs/Glossary/Request_header}\n     * used in HTTP request.\n     *\n     * @type {Object<string, any>}\n     */\n    this.requestHeader = {};\n  }\n\n  /**\n   * This method needs to be implemented by all concrete loaders. It holds the\n   * logic for loading assets from the backend.\n   *\n   * @param {string} url - The path/URL of the file to be loaded.\n   * @param {Function} onLoad - Executed when the loading process has been finished.\n   * @param {onProgressCallback} [onProgress] - Executed while the loading is in progress.\n   * @param {onErrorCallback} [onError] - Executed when errors occur.\n   */\n  load(/* url, onLoad, onProgress, onError */) {}\n\n  /**\n   * A async version of {@link Loader#load}.\n   *\n   * @param {string} url - The path/URL of the file to be loaded.\n   * @param {onProgressCallback} [onProgress] - Executed while the loading is in progress.\n   * @return {Promise} A Promise that resolves when the asset has been loaded.\n   */\n  loadAsync(url, onProgress) {\n    const scope = this;\n    return new Promise(function (resolve, reject) {\n      scope.load(url, resolve, onProgress, reject);\n    });\n  }\n\n  /**\n   * This method needs to be implemented by all concrete loaders. It holds the\n   * logic for parsing the asset into three.js entities.\n   *\n   * @param {any} data - The data to parse.\n   */\n  parse(/* data */) {}\n\n  /**\n   * Sets the `crossOrigin` String to implement CORS for loading the URL\n   * from a different domain that allows CORS.\n   *\n   * @param {string} crossOrigin - The `crossOrigin` value.\n   * @return {Loader} A reference to this instance.\n   */\n  setCrossOrigin(crossOrigin) {\n    this.crossOrigin = crossOrigin;\n    return this;\n  }\n\n  /**\n   * Whether the XMLHttpRequest uses credentials such as cookies, authorization\n   * headers or TLS client certificates, see [XMLHttpRequest.withCredentials]{@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials}.\n   *\n   * Note: This setting has no effect if you are loading files locally or from the same domain.\n   *\n   * @param {boolean} value - The `withCredentials` value.\n   * @return {Loader} A reference to this instance.\n   */\n  setWithCredentials(value) {\n    this.withCredentials = value;\n    return this;\n  }\n\n  /**\n   * Sets the base path for the asset.\n   *\n   * @param {string} path - The base path.\n   * @return {Loader} A reference to this instance.\n   */\n  setPath(path) {\n    this.path = path;\n    return this;\n  }\n\n  /**\n   * Sets the base path for dependent resources like textures.\n   *\n   * @param {string} resourcePath - The resource path.\n   * @return {Loader} A reference to this instance.\n   */\n  setResourcePath(resourcePath) {\n    this.resourcePath = resourcePath;\n    return this;\n  }\n\n  /**\n   * Sets the given request header.\n   *\n   * @param {Object} requestHeader - A [request header]{@link https://developer.mozilla.org/en-US/docs/Glossary/Request_header}\n   * for configuring the HTTP request.\n   * @return {Loader} A reference to this instance.\n   */\n  setRequestHeader(requestHeader) {\n    this.requestHeader = requestHeader;\n    return this;\n  }\n}\n\n/**\n * Callback for onProgress in loaders.\n *\n * @callback onProgressCallback\n * @param {ProgressEvent} event - An instance of `ProgressEvent` that represents the current loading status.\n */\n\n/**\n * Callback for onError in loaders.\n *\n * @callback onErrorCallback\n * @param {Error} error - The error which occurred during the loading process.\n */\n\n/**\n * The default material name that is used by loaders\n * when creating materials for loaded 3D objects.\n *\n * Note: Not all loaders might honor this setting.\n *\n * @static\n * @type {string}\n * @default '__DEFAULT'\n */\nLoader.DEFAULT_MATERIAL_NAME = '__DEFAULT';\nconst loading = {};\nclass HttpError extends Error {\n  constructor(message, response) {\n    super(message);\n    this.response = response;\n  }\n}\n\n/**\n * A low level class for loading resources with the Fetch API, used internally by\n * most loaders. It can also be used directly to load any file type that does\n * not have a loader.\n *\n * This loader supports caching. If you want to use it, add `THREE.Cache.enabled = true;`\n * once to your application.\n *\n * ```js\n * const loader = new THREE.FileLoader();\n * const data = await loader.loadAsync( 'example.txt' );\n * ```\n *\n * @augments Loader\n */\nclass FileLoader extends Loader {\n  /**\n   * Constructs a new file loader.\n   *\n   * @param {LoadingManager} [manager] - The loading manager.\n   */\n  constructor(manager) {\n    super(manager);\n\n    /**\n     * The expected mime type.\n     *\n     * @type {string}\n     */\n    this.mimeType = '';\n\n    /**\n     * The expected response type.\n     *\n     * @type {('arraybuffer'|'blob'|'document'|'json'|'')}\n     * @default ''\n     */\n    this.responseType = '';\n  }\n\n  /**\n   * Starts loading from the given URL and pass the loaded response to the `onLoad()` callback.\n   *\n   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n   * @param {function(any)} onLoad - Executed when the loading process has been finished.\n   * @param {onProgressCallback} [onProgress] - Executed while the loading is in progress.\n   * @param {onErrorCallback} [onError] - Executed when errors occur.\n   * @return {any|undefined} The cached resource if available.\n   */\n  load(url, onLoad, onProgress, onError) {\n    if (url === undefined) url = '';\n    if (this.path !== undefined) url = this.path + url;\n    url = this.manager.resolveURL(url);\n    const cached = Cache.get(url);\n    if (cached !== undefined) {\n      this.manager.itemStart(url);\n      setTimeout(() => {\n        if (onLoad) onLoad(cached);\n        this.manager.itemEnd(url);\n      }, 0);\n      return cached;\n    }\n\n    // Check if request is duplicate\n\n    if (loading[url] !== undefined) {\n      loading[url].push({\n        onLoad: onLoad,\n        onProgress: onProgress,\n        onError: onError\n      });\n      return;\n    }\n\n    // Initialise array for duplicate requests\n    loading[url] = [];\n    loading[url].push({\n      onLoad: onLoad,\n      onProgress: onProgress,\n      onError: onError\n    });\n\n    // create request\n    const req = new Request(url, {\n      headers: new Headers(this.requestHeader),\n      credentials: this.withCredentials ? 'include' : 'same-origin'\n      // An abort controller could be added within a future PR\n    });\n\n    // record states ( avoid data race )\n    const mimeType = this.mimeType;\n    const responseType = this.responseType;\n\n    // start the fetch\n    fetch(req).then(response => {\n      if (response.status === 200 || response.status === 0) {\n        // Some browsers return HTTP Status 0 when using non-http protocol\n        // e.g. 'file://' or 'data://'. Handle as success.\n\n        if (response.status === 0) {\n          console.warn('THREE.FileLoader: HTTP Status 0 received.');\n        }\n\n        // Workaround: Checking if response.body === undefined for Alipay browser #23548\n\n        if (typeof ReadableStream === 'undefined' || response.body === undefined || response.body.getReader === undefined) {\n          return response;\n        }\n        const callbacks = loading[url];\n        const reader = response.body.getReader();\n\n        // Nginx needs X-File-Size check\n        // https://serverfault.com/questions/482875/why-does-nginx-remove-content-length-header-for-chunked-content\n        const contentLength = response.headers.get('X-File-Size') || response.headers.get('Content-Length');\n        const total = contentLength ? parseInt(contentLength) : 0;\n        const lengthComputable = total !== 0;\n        let loaded = 0;\n\n        // periodically read data into the new stream tracking while download progress\n        const stream = new ReadableStream({\n          start(controller) {\n            readData();\n            function readData() {\n              reader.read().then(_ref => {\n                let {\n                  done,\n                  value\n                } = _ref;\n                if (done) {\n                  controller.close();\n                } else {\n                  loaded += value.byteLength;\n                  const event = new ProgressEvent('progress', {\n                    lengthComputable,\n                    loaded,\n                    total\n                  });\n                  for (let i = 0, il = callbacks.length; i < il; i++) {\n                    const callback = callbacks[i];\n                    if (callback.onProgress) callback.onProgress(event);\n                  }\n                  controller.enqueue(value);\n                  readData();\n                }\n              }, e => {\n                controller.error(e);\n              });\n            }\n          }\n        });\n        return new Response(stream);\n      } else {\n        throw new HttpError(`fetch for \"${response.url}\" responded with ${response.status}: ${response.statusText}`, response);\n      }\n    }).then(response => {\n      switch (responseType) {\n        case 'arraybuffer':\n          return response.arrayBuffer();\n        case 'blob':\n          return response.blob();\n        case 'document':\n          return response.text().then(text => {\n            const parser = new DOMParser();\n            return parser.parseFromString(text, mimeType);\n          });\n        case 'json':\n          return response.json();\n        default:\n          if (mimeType === '') {\n            return response.text();\n          } else {\n            // sniff encoding\n            const re = /charset=\"?([^;\"\\s]*)\"?/i;\n            const exec = re.exec(mimeType);\n            const label = exec && exec[1] ? exec[1].toLowerCase() : undefined;\n            const decoder = new TextDecoder(label);\n            return response.arrayBuffer().then(ab => decoder.decode(ab));\n          }\n      }\n    }).then(data => {\n      // Add to cache only on HTTP success, so that we do not cache\n      // error response bodies as proper responses to requests.\n      Cache.add(url, data);\n      const callbacks = loading[url];\n      delete loading[url];\n      for (let i = 0, il = callbacks.length; i < il; i++) {\n        const callback = callbacks[i];\n        if (callback.onLoad) callback.onLoad(data);\n      }\n    }).catch(err => {\n      // Abort errors and other errors are handled the same\n\n      const callbacks = loading[url];\n      if (callbacks === undefined) {\n        // When onLoad was called and url was deleted in `loading`\n        this.manager.itemError(url);\n        throw err;\n      }\n      delete loading[url];\n      for (let i = 0, il = callbacks.length; i < il; i++) {\n        const callback = callbacks[i];\n        if (callback.onError) callback.onError(err);\n      }\n      this.manager.itemError(url);\n    }).finally(() => {\n      this.manager.itemEnd(url);\n    });\n    this.manager.itemStart(url);\n  }\n\n  /**\n   * Sets the expected response type.\n   *\n   * @param {('arraybuffer'|'blob'|'document'|'json'|'')} value - The response type.\n   * @return {FileLoader} A reference to this file loader.\n   */\n  setResponseType(value) {\n    this.responseType = value;\n    return this;\n  }\n\n  /**\n   * Sets the expected mime type of the loaded file.\n   *\n   * @param {string} value - The mime type.\n   * @return {FileLoader} A reference to this file loader.\n   */\n  setMimeType(value) {\n    this.mimeType = value;\n    return this;\n  }\n}\n\n/**\n * Class for loading animation clips in the JSON format. The files are internally\n * loaded via {@link FileLoader}.\n *\n * ```js\n * const loader = new THREE.AnimationLoader();\n * const animations = await loader.loadAsync( 'animations/animation.js' );\n * ```\n *\n * @augments Loader\n */\nclass AnimationLoader extends Loader {\n  /**\n   * Constructs a new animation loader.\n   *\n   * @param {LoadingManager} [manager] - The loading manager.\n   */\n  constructor(manager) {\n    super(manager);\n  }\n\n  /**\n   * Starts loading from the given URL and pass the loaded animations as an array\n   * holding instances of {@link AnimationClip} to the `onLoad()` callback.\n   *\n   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n   * @param {function(Array<AnimationClip>)} onLoad - Executed when the loading process has been finished.\n   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n   * @param {onErrorCallback} onError - Executed when errors occur.\n   */\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(JSON.parse(text)));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  /**\n   * Parses the given JSON object and returns an array of animation clips.\n   *\n   * @param {Object} json - The serialized animation clips.\n   * @return {Array<AnimationClip>} The parsed animation clips.\n   */\n  parse(json) {\n    const animations = [];\n    for (let i = 0; i < json.length; i++) {\n      const clip = AnimationClip.parse(json[i]);\n      animations.push(clip);\n    }\n    return animations;\n  }\n}\n\n/**\n * Abstract base class for loading compressed texture formats S3TC, ASTC or ETC.\n * Textures are internally loaded via {@link FileLoader}.\n *\n * Derived classes have to implement the `parse()` method which holds the parsing\n * for the respective format.\n *\n * @abstract\n * @augments Loader\n */\nclass CompressedTextureLoader extends Loader {\n  /**\n   * Constructs a new compressed texture loader.\n   *\n   * @param {LoadingManager} [manager] - The loading manager.\n   */\n  constructor(manager) {\n    super(manager);\n  }\n\n  /**\n   * Starts loading from the given URL and passes the loaded compressed texture\n   * to the `onLoad()` callback. The method also returns a new texture object which can\n   * directly be used for material creation. If you do it this way, the texture\n   * may pop up in your scene once the respective loading process is finished.\n   *\n   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n   * @param {function(CompressedTexture)} onLoad - Executed when the loading process has been finished.\n   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n   * @param {onErrorCallback} onError - Executed when errors occur.\n   * @return {CompressedTexture} The compressed texture.\n   */\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const images = [];\n    const texture = new CompressedTexture();\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    let loaded = 0;\n    function loadTexture(i) {\n      loader.load(url[i], function (buffer) {\n        const texDatas = scope.parse(buffer, true);\n        images[i] = {\n          width: texDatas.width,\n          height: texDatas.height,\n          format: texDatas.format,\n          mipmaps: texDatas.mipmaps\n        };\n        loaded += 1;\n        if (loaded === 6) {\n          if (texDatas.mipmapCount === 1) texture.minFilter = LinearFilter;\n          texture.image = images;\n          texture.format = texDatas.format;\n          texture.needsUpdate = true;\n          if (onLoad) onLoad(texture);\n        }\n      }, onProgress, onError);\n    }\n    if (Array.isArray(url)) {\n      for (let i = 0, il = url.length; i < il; ++i) {\n        loadTexture(i);\n      }\n    } else {\n      // compressed cubemap texture stored in a single DDS file\n\n      loader.load(url, function (buffer) {\n        const texDatas = scope.parse(buffer, true);\n        if (texDatas.isCubemap) {\n          const faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n          for (let f = 0; f < faces; f++) {\n            images[f] = {\n              mipmaps: []\n            };\n            for (let i = 0; i < texDatas.mipmapCount; i++) {\n              images[f].mipmaps.push(texDatas.mipmaps[f * texDatas.mipmapCount + i]);\n              images[f].format = texDatas.format;\n              images[f].width = texDatas.width;\n              images[f].height = texDatas.height;\n            }\n          }\n          texture.image = images;\n        } else {\n          texture.image.width = texDatas.width;\n          texture.image.height = texDatas.height;\n          texture.mipmaps = texDatas.mipmaps;\n        }\n        if (texDatas.mipmapCount === 1) {\n          texture.minFilter = LinearFilter;\n        }\n        texture.format = texDatas.format;\n        texture.needsUpdate = true;\n        if (onLoad) onLoad(texture);\n      }, onProgress, onError);\n    }\n    return texture;\n  }\n}\n\n/**\n * A loader for loading images. The class loads images with the HTML `Image` API.\n *\n * ```js\n * const loader = new THREE.ImageLoader();\n * const image = await loader.loadAsync( 'image.png' );\n * ```\n * Please note that `ImageLoader` has dropped support for progress\n * events in `r84`. For an `ImageLoader` that supports progress events, see\n * [this thread]{@link https://github.com/mrdoob/three.js/issues/10439#issuecomment-275785639}.\n *\n * @augments Loader\n */\nclass ImageLoader extends Loader {\n  /**\n   * Constructs a new image loader.\n   *\n   * @param {LoadingManager} [manager] - The loading manager.\n   */\n  constructor(manager) {\n    super(manager);\n  }\n\n  /**\n   * Starts loading from the given URL and passes the loaded image\n   * to the `onLoad()` callback. The method also returns a new `Image` object which can\n   * directly be used for texture creation. If you do it this way, the texture\n   * may pop up in your scene once the respective loading process is finished.\n   *\n   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n   * @param {function(Image)} onLoad - Executed when the loading process has been finished.\n   * @param {onProgressCallback} onProgress - Unsupported in this loader.\n   * @param {onErrorCallback} onError - Executed when errors occur.\n   * @return {Image} The image.\n   */\n  load(url, onLoad, onProgress, onError) {\n    if (this.path !== undefined) url = this.path + url;\n    url = this.manager.resolveURL(url);\n    const scope = this;\n    const cached = Cache.get(url);\n    if (cached !== undefined) {\n      scope.manager.itemStart(url);\n      setTimeout(function () {\n        if (onLoad) onLoad(cached);\n        scope.manager.itemEnd(url);\n      }, 0);\n      return cached;\n    }\n    const image = createElementNS('img');\n    function onImageLoad() {\n      removeEventListeners();\n      Cache.add(url, this);\n      if (onLoad) onLoad(this);\n      scope.manager.itemEnd(url);\n    }\n    function onImageError(event) {\n      removeEventListeners();\n      if (onError) onError(event);\n      scope.manager.itemError(url);\n      scope.manager.itemEnd(url);\n    }\n    function removeEventListeners() {\n      image.removeEventListener('load', onImageLoad, false);\n      image.removeEventListener('error', onImageError, false);\n    }\n    image.addEventListener('load', onImageLoad, false);\n    image.addEventListener('error', onImageError, false);\n    if (url.slice(0, 5) !== 'data:') {\n      if (this.crossOrigin !== undefined) image.crossOrigin = this.crossOrigin;\n    }\n    scope.manager.itemStart(url);\n    image.src = url;\n    return image;\n  }\n}\n\n/**\n * Class for loading cube textures. Images are internally loaded via {@link ImageLoader}.\n *\n * The loader returns an instance of {@link CubeTexture} and expects the cube map to\n * be defined as six separate images representing the sides of a cube. Other cube map definitions\n * like vertical and horizontal cross, column and row layouts are not supported.\n *\n * Note that, by convention, cube maps are specified in a coordinate system\n * in which positive-x is to the right when looking up the positive-z axis --\n * in other words, using a left-handed coordinate system. Since three.js uses\n * a right-handed coordinate system, environment maps used in three.js will\n * have pos-x and neg-x swapped.\n *\n * The loaded cube texture is in sRGB color space. Meaning {@link Texture#colorSpace}\n * is set to `SRGBColorSpace` by default.\n *\n * ```js\n * const loader = new THREE.CubeTextureLoader().setPath( 'textures/cubeMaps/' );\n * const cubeTexture = await loader.loadAsync( [\n * \t'px.png', 'nx.png', 'py.png', 'ny.png', 'pz.png', 'nz.png'\n * ] );\n * scene.background = cubeTexture;\n * ```\n *\n * @augments Loader\n */\nclass CubeTextureLoader extends Loader {\n  /**\n   * Constructs a new cube texture loader.\n   *\n   * @param {LoadingManager} [manager] - The loading manager.\n   */\n  constructor(manager) {\n    super(manager);\n  }\n\n  /**\n   * Starts loading from the given URL and pass the fully loaded cube texture\n   * to the `onLoad()` callback. The method also returns a new cube texture object which can\n   * directly be used for material creation. If you do it this way, the cube texture\n   * may pop up in your scene once the respective loading process is finished.\n   *\n   * @param {Array<string>} urls - Array of 6 URLs to images, one for each side of the\n   * cube texture. The urls should be specified in the following order: pos-x,\n   * neg-x, pos-y, neg-y, pos-z, neg-z. An array of data URIs are allowed as well.\n   * @param {function(CubeTexture)} onLoad - Executed when the loading process has been finished.\n   * @param {onProgressCallback} onProgress - Unsupported in this loader.\n   * @param {onErrorCallback} onError - Executed when errors occur.\n   * @return {CubeTexture} The cube texture.\n   */\n  load(urls, onLoad, onProgress, onError) {\n    const texture = new CubeTexture();\n    texture.colorSpace = SRGBColorSpace;\n    const loader = new ImageLoader(this.manager);\n    loader.setCrossOrigin(this.crossOrigin);\n    loader.setPath(this.path);\n    let loaded = 0;\n    function loadTexture(i) {\n      loader.load(urls[i], function (image) {\n        texture.images[i] = image;\n        loaded++;\n        if (loaded === 6) {\n          texture.needsUpdate = true;\n          if (onLoad) onLoad(texture);\n        }\n      }, undefined, onError);\n    }\n    for (let i = 0; i < urls.length; ++i) {\n      loadTexture(i);\n    }\n    return texture;\n  }\n}\n\n/**\n * Abstract base class for loading binary texture formats RGBE, EXR or TGA.\n * Textures are internally loaded via {@link FileLoader}.\n *\n * Derived classes have to implement the `parse()` method which holds the parsing\n * for the respective format.\n *\n * @abstract\n * @augments Loader\n */\nclass DataTextureLoader extends Loader {\n  /**\n   * Constructs a new data texture loader.\n   *\n   * @param {LoadingManager} [manager] - The loading manager.\n   */\n  constructor(manager) {\n    super(manager);\n  }\n\n  /**\n   * Starts loading from the given URL and passes the loaded data texture\n   * to the `onLoad()` callback. The method also returns a new texture object which can\n   * directly be used for material creation. If you do it this way, the texture\n   * may pop up in your scene once the respective loading process is finished.\n   *\n   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n   * @param {function(DataTexture)} onLoad - Executed when the loading process has been finished.\n   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n   * @param {onErrorCallback} onError - Executed when errors occur.\n   * @return {DataTexture} The data texture.\n   */\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const texture = new DataTexture();\n    const loader = new FileLoader(this.manager);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(this.requestHeader);\n    loader.setPath(this.path);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (buffer) {\n      let texData;\n      try {\n        texData = scope.parse(buffer);\n      } catch (error) {\n        if (onError !== undefined) {\n          onError(error);\n        } else {\n          console.error(error);\n          return;\n        }\n      }\n      if (texData.image !== undefined) {\n        texture.image = texData.image;\n      } else if (texData.data !== undefined) {\n        texture.image.width = texData.width;\n        texture.image.height = texData.height;\n        texture.image.data = texData.data;\n      }\n      texture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n      texture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n      texture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n      texture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n      texture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n      if (texData.colorSpace !== undefined) {\n        texture.colorSpace = texData.colorSpace;\n      }\n      if (texData.flipY !== undefined) {\n        texture.flipY = texData.flipY;\n      }\n      if (texData.format !== undefined) {\n        texture.format = texData.format;\n      }\n      if (texData.type !== undefined) {\n        texture.type = texData.type;\n      }\n      if (texData.mipmaps !== undefined) {\n        texture.mipmaps = texData.mipmaps;\n        texture.minFilter = LinearMipmapLinearFilter; // presumably...\n      }\n      if (texData.mipmapCount === 1) {\n        texture.minFilter = LinearFilter;\n      }\n      if (texData.generateMipmaps !== undefined) {\n        texture.generateMipmaps = texData.generateMipmaps;\n      }\n      texture.needsUpdate = true;\n      if (onLoad) onLoad(texture, texData);\n    }, onProgress, onError);\n    return texture;\n  }\n}\n\n/**\n * Class for loading textures. Images are internally\n * loaded via {@link ImageLoader}.\n *\n * ```js\n * const loader = new THREE.TextureLoader();\n * const texture = await loader.loadAsync( 'textures/land_ocean_ice_cloud_2048.jpg' );\n *\n * const material = new THREE.MeshBasicMaterial( { map:texture } );\n * ```\n * Please note that `TextureLoader` has dropped support for progress\n * events in `r84`. For a `TextureLoader` that supports progress events, see\n * [this thread]{@link https://github.com/mrdoob/three.js/issues/10439#issuecomment-293260145}.\n *\n * @augments Loader\n */\nclass TextureLoader extends Loader {\n  /**\n   * Constructs a new texture loader.\n   *\n   * @param {LoadingManager} [manager] - The loading manager.\n   */\n  constructor(manager) {\n    super(manager);\n  }\n\n  /**\n   * Starts loading from the given URL and pass the fully loaded texture\n   * to the `onLoad()` callback. The method also returns a new texture object which can\n   * directly be used for material creation. If you do it this way, the texture\n   * may pop up in your scene once the respective loading process is finished.\n   *\n   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n   * @param {function(Texture)} onLoad - Executed when the loading process has been finished.\n   * @param {onProgressCallback} onProgress - Unsupported in this loader.\n   * @param {onErrorCallback} onError - Executed when errors occur.\n   * @return {Texture} The texture.\n   */\n  load(url, onLoad, onProgress, onError) {\n    const texture = new Texture();\n    const loader = new ImageLoader(this.manager);\n    loader.setCrossOrigin(this.crossOrigin);\n    loader.setPath(this.path);\n    loader.load(url, function (image) {\n      texture.image = image;\n      texture.needsUpdate = true;\n      if (onLoad !== undefined) {\n        onLoad(texture);\n      }\n    }, onProgress, onError);\n    return texture;\n  }\n}\n\n/**\n * Abstract base class for lights - all other light types inherit the\n * properties and methods described here.\n *\n * @abstract\n * @augments Object3D\n */\nclass Light extends Object3D {\n  /**\n   * Constructs a new light.\n   *\n   * @param {(number|Color|string)} [color=0xffffff] - The light's color.\n   * @param {number} [intensity=1] - The light's strength/intensity.\n   */\n  constructor(color) {\n    let intensity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isLight = true;\n    this.type = 'Light';\n\n    /**\n     * The light's color.\n     *\n     * @type {Color}\n     */\n    this.color = new Color(color);\n\n    /**\n     * The light's intensity.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.intensity = intensity;\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n\n    // Empty here in base class; some subclasses override.\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.color.copy(source.color);\n    this.intensity = source.intensity;\n    return this;\n  }\n  toJSON(meta) {\n    const data = super.toJSON(meta);\n    data.object.color = this.color.getHex();\n    data.object.intensity = this.intensity;\n    if (this.groundColor !== undefined) data.object.groundColor = this.groundColor.getHex();\n    if (this.distance !== undefined) data.object.distance = this.distance;\n    if (this.angle !== undefined) data.object.angle = this.angle;\n    if (this.decay !== undefined) data.object.decay = this.decay;\n    if (this.penumbra !== undefined) data.object.penumbra = this.penumbra;\n    if (this.shadow !== undefined) data.object.shadow = this.shadow.toJSON();\n    if (this.target !== undefined) data.object.target = this.target.uuid;\n    return data;\n  }\n}\n\n/**\n * A light source positioned directly above the scene, with color fading from\n * the sky color to the ground color.\n *\n * This light cannot be used to cast shadows.\n *\n * ```js\n * const light = new THREE.HemisphereLight( 0xffffbb, 0x080820, 1 );\n * scene.add( light );\n * ```\n *\n * @augments Light\n */\nclass HemisphereLight extends Light {\n  /**\n   * Constructs a new hemisphere light.\n   *\n   * @param {(number|Color|string)} [skyColor=0xffffff] - The light's sky color.\n   * @param {(number|Color|string)} [groundColor=0xffffff] - The light's ground color.\n   * @param {number} [intensity=1] - The light's strength/intensity.\n   */\n  constructor(skyColor, groundColor, intensity) {\n    super(skyColor, intensity);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isHemisphereLight = true;\n    this.type = 'HemisphereLight';\n    this.position.copy(Object3D.DEFAULT_UP);\n    this.updateMatrix();\n\n    /**\n     * The light's ground color.\n     *\n     * @type {Color}\n     */\n    this.groundColor = new Color(groundColor);\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.groundColor.copy(source.groundColor);\n    return this;\n  }\n}\nconst _projScreenMatrix$1 = /*@__PURE__*/new Matrix4();\nconst _lightPositionWorld$1 = /*@__PURE__*/new Vector3();\nconst _lookTarget$1 = /*@__PURE__*/new Vector3();\n\n/**\n * Abstract base class for light shadow classes. These classes\n * represent the shadow configuration for different light types.\n *\n * @abstract\n */\nclass LightShadow {\n  /**\n   * Constructs a new light shadow.\n   *\n   * @param {Camera} camera - The light's view of the world.\n   */\n  constructor(camera) {\n    /**\n     * The light's view of the world.\n     *\n     * @type {Camera}\n     */\n    this.camera = camera;\n\n    /**\n     * The intensity of the shadow. The default is `1`.\n     * Valid values are in the range `[0, 1]`.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.intensity = 1;\n\n    /**\n     * Shadow map bias, how much to add or subtract from the normalized depth\n     * when deciding whether a surface is in shadow.\n     *\n     * The default is `0`. Very tiny adjustments here (in the order of `0.0001`)\n     * may help reduce artifacts in shadows.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.bias = 0;\n\n    /**\n     * Defines how much the position used to query the shadow map is offset along\n     * the object normal. The default is `0`. Increasing this value can be used to\n     * reduce shadow acne especially in large scenes where light shines onto\n     * geometry at a shallow angle. The cost is that shadows may appear distorted.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.normalBias = 0;\n\n    /**\n     * Setting this to values greater than 1 will blur the edges of the shadow.\n     * High values will cause unwanted banding effects in the shadows - a greater\n     * map size will allow for a higher value to be used here before these effects\n     * become visible.\n     *\n     * The property has no effect when the shadow map type is `PCFSoftShadowMap` and\n     * and it is recommended to increase softness by decreasing the shadow map size instead.\n     *\n     * The property has no effect when the shadow map type is `BasicShadowMap`.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.radius = 1;\n\n    /**\n     * The amount of samples to use when blurring a VSM shadow map.\n     *\n     * @type {number}\n     * @default 8\n     */\n    this.blurSamples = 8;\n\n    /**\n     * Defines the width and height of the shadow map. Higher values give better quality\n     * shadows at the cost of computation time. Values must be powers of two.\n     *\n     * @type {Vector2}\n     * @default (512,512)\n     */\n    this.mapSize = new Vector2(512, 512);\n\n    /**\n     * The type of shadow texture. The default is `UnsignedByteType`.\n     *\n     * @type {number}\n     * @default UnsignedByteType\n     */\n    this.mapType = UnsignedByteType;\n\n    /**\n     * The depth map generated using the internal camera; a location beyond a\n     * pixel's depth is in shadow. Computed internally during rendering.\n     *\n     * @type {?RenderTarget}\n     * @default null\n     */\n    this.map = null;\n\n    /**\n     * The distribution map generated using the internal camera; an occlusion is\n     * calculated based on the distribution of depths. Computed internally during\n     * rendering.\n     *\n     * @type {?RenderTarget}\n     * @default null\n     */\n    this.mapPass = null;\n\n    /**\n     * Model to shadow camera space, to compute location and depth in shadow map.\n     * This is computed internally during rendering.\n     *\n     * @type {Matrix4}\n     */\n    this.matrix = new Matrix4();\n\n    /**\n     * Enables automatic updates of the light's shadow. If you do not require dynamic\n     * lighting / shadows, you may set this to `false`.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.autoUpdate = true;\n\n    /**\n     * When set to `true`, shadow maps will be updated in the next `render` call.\n     * If you have set {@link LightShadow#autoUpdate} to `false`, you will need to\n     * set this property to `true` and then make a render call to update the light's shadow.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.needsUpdate = false;\n    this._frustum = new Frustum();\n    this._frameExtents = new Vector2(1, 1);\n    this._viewportCount = 1;\n    this._viewports = [new Vector4(0, 0, 1, 1)];\n  }\n\n  /**\n   * Used internally by the renderer to get the number of viewports that need\n   * to be rendered for this shadow.\n   *\n   * @return {number} The viewport count.\n   */\n  getViewportCount() {\n    return this._viewportCount;\n  }\n\n  /**\n   * Gets the shadow cameras frustum. Used internally by the renderer to cull objects.\n   *\n   * @return {Frustum} The shadow camera frustum.\n   */\n  getFrustum() {\n    return this._frustum;\n  }\n\n  /**\n   * Update the matrices for the camera and shadow, used internally by the renderer.\n   *\n   * @param {Light} light - The light for which the shadow is being rendered.\n   */\n  updateMatrices(light) {\n    const shadowCamera = this.camera;\n    const shadowMatrix = this.matrix;\n    _lightPositionWorld$1.setFromMatrixPosition(light.matrixWorld);\n    shadowCamera.position.copy(_lightPositionWorld$1);\n    _lookTarget$1.setFromMatrixPosition(light.target.matrixWorld);\n    shadowCamera.lookAt(_lookTarget$1);\n    shadowCamera.updateMatrixWorld();\n    _projScreenMatrix$1.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);\n    this._frustum.setFromProjectionMatrix(_projScreenMatrix$1);\n    shadowMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n    shadowMatrix.multiply(_projScreenMatrix$1);\n  }\n\n  /**\n   * Returns a viewport definition for the given viewport index.\n   *\n   * @param {number} viewportIndex - The viewport index.\n   * @return {Vector4} The viewport.\n   */\n  getViewport(viewportIndex) {\n    return this._viewports[viewportIndex];\n  }\n\n  /**\n   * Returns the frame extends.\n   *\n   * @return {Vector2} The frame extends.\n   */\n  getFrameExtents() {\n    return this._frameExtents;\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    if (this.map) {\n      this.map.dispose();\n    }\n    if (this.mapPass) {\n      this.mapPass.dispose();\n    }\n  }\n\n  /**\n   * Copies the values of the given light shadow instance to this instance.\n   *\n   * @param {LightShadow} source - The light shadow to copy.\n   * @return {LightShadow} A reference to this light shadow instance.\n   */\n  copy(source) {\n    this.camera = source.camera.clone();\n    this.intensity = source.intensity;\n    this.bias = source.bias;\n    this.radius = source.radius;\n    this.autoUpdate = source.autoUpdate;\n    this.needsUpdate = source.needsUpdate;\n    this.normalBias = source.normalBias;\n    this.blurSamples = source.blurSamples;\n    this.mapSize.copy(source.mapSize);\n    return this;\n  }\n\n  /**\n   * Returns a new light shadow instance with copied values from this instance.\n   *\n   * @return {LightShadow} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  /**\n   * Serializes the light shadow into JSON.\n   *\n   * @return {Object} A JSON object representing the serialized light shadow.\n   * @see {@link ObjectLoader#parse}\n   */\n  toJSON() {\n    const object = {};\n    if (this.intensity !== 1) object.intensity = this.intensity;\n    if (this.bias !== 0) object.bias = this.bias;\n    if (this.normalBias !== 0) object.normalBias = this.normalBias;\n    if (this.radius !== 1) object.radius = this.radius;\n    if (this.mapSize.x !== 512 || this.mapSize.y !== 512) object.mapSize = this.mapSize.toArray();\n    object.camera = this.camera.toJSON(false).object;\n    delete object.camera.matrix;\n    return object;\n  }\n}\n\n/**\n * Represents the shadow configuration of directional lights.\n *\n * @augments LightShadow\n */\nclass SpotLightShadow extends LightShadow {\n  /**\n   * Constructs a new spot light shadow.\n   */\n  constructor() {\n    super(new PerspectiveCamera(50, 1, 0.5, 500));\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isSpotLightShadow = true;\n\n    /**\n     * Used to focus the shadow camera. The camera's field of view is set as a\n     * percentage of the spotlight's field-of-view. Range is `[0, 1]`.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.focus = 1;\n  }\n  updateMatrices(light) {\n    const camera = this.camera;\n    const fov = RAD2DEG * 2 * light.angle * this.focus;\n    const aspect = this.mapSize.width / this.mapSize.height;\n    const far = light.distance || camera.far;\n    if (fov !== camera.fov || aspect !== camera.aspect || far !== camera.far) {\n      camera.fov = fov;\n      camera.aspect = aspect;\n      camera.far = far;\n      camera.updateProjectionMatrix();\n    }\n    super.updateMatrices(light);\n  }\n  copy(source) {\n    super.copy(source);\n    this.focus = source.focus;\n    return this;\n  }\n}\n\n/**\n * This light gets emitted from a single point in one direction, along a cone\n * that increases in size the further from the light it gets.\n *\n * This light can cast shadows - see the {@link SpotLightShadow} for details.\n *\n * ```js\n * // white spotlight shining from the side, modulated by a texture\n * const spotLight = new THREE.SpotLight( 0xffffff );\n * spotLight.position.set( 100, 1000, 100 );\n * spotLight.map = new THREE.TextureLoader().load( url );\n *\n * spotLight.castShadow = true;\n * spotLight.shadow.mapSize.width = 1024;\n * spotLight.shadow.mapSize.height = 1024;\n * spotLight.shadow.camera.near = 500;\n * spotLight.shadow.camera.far = 4000;\n * spotLight.shadow.camera.fov = 30;s\n * ```\n *\n * @augments Light\n */\nclass SpotLight extends Light {\n  /**\n   * Constructs a new spot light.\n   *\n   * @param {(number|Color|string)} [color=0xffffff] - The light's color.\n   * @param {number} [intensity=1] - The light's strength/intensity measured in candela (cd).\n   * @param {number} [distance=0] - Maximum range of the light. `0` means no limit.\n   * @param {number} [angle=Math.PI/3] - Maximum angle of light dispersion from its direction whose upper bound is `Math.PI/2`.\n   * @param {number} [penumbra=0] - Percent of the spotlight cone that is attenuated due to penumbra. Value range is `[0,1]`.\n   * @param {number} [decay=2] - The amount the light dims along the distance of the light.\n   */\n  constructor(color, intensity) {\n    let distance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let angle = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Math.PI / 3;\n    let penumbra = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n    let decay = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 2;\n    super(color, intensity);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isSpotLight = true;\n    this.type = 'SpotLight';\n    this.position.copy(Object3D.DEFAULT_UP);\n    this.updateMatrix();\n\n    /**\n     * The spot light points from its position to the\n     * target's position.\n     *\n     * For the target's position to be changed to anything other\n     * than the default, it must be added to the scene.\n     *\n     * It is also possible to set the target to be another 3D object\n     * in the scene. The light will now track the target object.\n     *\n     * @type {Object3D}\n     */\n    this.target = new Object3D();\n\n    /**\n     * Maximum range of the light. `0` means no limit.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.distance = distance;\n\n    /**\n     * Maximum angle of light dispersion from its direction whose upper bound is `Math.PI/2`.\n     *\n     * @type {number}\n     * @default Math.PI/3\n     */\n    this.angle = angle;\n\n    /**\n     * Percent of the spotlight cone that is attenuated due to penumbra.\n     * Value range is `[0,1]`.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.penumbra = penumbra;\n\n    /**\n     * The amount the light dims along the distance of the light. In context of\n     * physically-correct rendering the default value should not be changed.\n     *\n     * @type {number}\n     * @default 2\n     */\n    this.decay = decay;\n\n    /**\n     * A texture used to modulate the color of the light. The spot light\n     * color is mixed with the RGB value of this texture, with a ratio\n     * corresponding to its alpha value. The cookie-like masking effect is\n     * reproduced using pixel values (0, 0, 0, 1-cookie_value).\n     *\n     * *Warning*: This property is disabled if {@link Object3D#castShadow} is set to `false`.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.map = null;\n\n    /**\n     * This property holds the light's shadow configuration.\n     *\n     * @type {SpotLightShadow}\n     */\n    this.shadow = new SpotLightShadow();\n  }\n\n  /**\n   * The light's power. Power is the luminous power of the light measured in lumens (lm).\n   *  Changing the power will also change the light's intensity.\n   *\n   * @type {number}\n   */\n  get power() {\n    // compute the light's luminous power (in lumens) from its intensity (in candela)\n    // by convention for a spotlight, luminous power (lm) = π * luminous intensity (cd)\n    return this.intensity * Math.PI;\n  }\n  set power(power) {\n    // set the light's intensity (in candela) from the desired luminous power (in lumens)\n    this.intensity = power / Math.PI;\n  }\n  dispose() {\n    this.shadow.dispose();\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.distance = source.distance;\n    this.angle = source.angle;\n    this.penumbra = source.penumbra;\n    this.decay = source.decay;\n    this.target = source.target.clone();\n    this.shadow = source.shadow.clone();\n    return this;\n  }\n}\nconst _projScreenMatrix = /*@__PURE__*/new Matrix4();\nconst _lightPositionWorld = /*@__PURE__*/new Vector3();\nconst _lookTarget = /*@__PURE__*/new Vector3();\n\n/**\n * Represents the shadow configuration of point lights.\n *\n * @augments LightShadow\n */\nclass PointLightShadow extends LightShadow {\n  /**\n   * Constructs a new point light shadow.\n   */\n  constructor() {\n    super(new PerspectiveCamera(90, 1, 0.5, 500));\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isPointLightShadow = true;\n    this._frameExtents = new Vector2(4, 2);\n    this._viewportCount = 6;\n    this._viewports = [\n    // These viewports map a cube-map onto a 2D texture with the\n    // following orientation:\n    //\n    //  xzXZ\n    //   y Y\n    //\n    // X - Positive x direction\n    // x - Negative x direction\n    // Y - Positive y direction\n    // y - Negative y direction\n    // Z - Positive z direction\n    // z - Negative z direction\n\n    // positive X\n    new Vector4(2, 1, 1, 1),\n    // negative X\n    new Vector4(0, 1, 1, 1),\n    // positive Z\n    new Vector4(3, 1, 1, 1),\n    // negative Z\n    new Vector4(1, 1, 1, 1),\n    // positive Y\n    new Vector4(3, 0, 1, 1),\n    // negative Y\n    new Vector4(1, 0, 1, 1)];\n    this._cubeDirections = [new Vector3(1, 0, 0), new Vector3(-1, 0, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1), new Vector3(0, 1, 0), new Vector3(0, -1, 0)];\n    this._cubeUps = [new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1)];\n  }\n\n  /**\n   * Update the matrices for the camera and shadow, used internally by the renderer.\n   *\n   * @param {Light} light - The light for which the shadow is being rendered.\n   * @param {number} [viewportIndex=0] - The viewport index.\n   */\n  updateMatrices(light) {\n    let viewportIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const camera = this.camera;\n    const shadowMatrix = this.matrix;\n    const far = light.distance || camera.far;\n    if (far !== camera.far) {\n      camera.far = far;\n      camera.updateProjectionMatrix();\n    }\n    _lightPositionWorld.setFromMatrixPosition(light.matrixWorld);\n    camera.position.copy(_lightPositionWorld);\n    _lookTarget.copy(camera.position);\n    _lookTarget.add(this._cubeDirections[viewportIndex]);\n    camera.up.copy(this._cubeUps[viewportIndex]);\n    camera.lookAt(_lookTarget);\n    camera.updateMatrixWorld();\n    shadowMatrix.makeTranslation(-_lightPositionWorld.x, -_lightPositionWorld.y, -_lightPositionWorld.z);\n    _projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n    this._frustum.setFromProjectionMatrix(_projScreenMatrix);\n  }\n}\n\n/**\n * A light that gets emitted from a single point in all directions. A common\n * use case for this is to replicate the light emitted from a bare\n * lightbulb.\n *\n * This light can cast shadows - see the {@link PointLightShadow} for details.\n *\n * ```js\n * const light = new THREE.PointLight( 0xff0000, 1, 100 );\n * light.position.set( 50, 50, 50 );\n * scene.add( light );\n * ```\n *\n * @augments Light\n */\nclass PointLight extends Light {\n  /**\n   * Constructs a new point light.\n   *\n   * @param {(number|Color|string)} [color=0xffffff] - The light's color.\n   * @param {number} [intensity=1] - The light's strength/intensity measured in candela (cd).\n   * @param {number} [distance=0] - Maximum range of the light. `0` means no limit.\n   * @param {number} [decay=2] - The amount the light dims along the distance of the light.\n   */\n  constructor(color, intensity) {\n    let distance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let decay = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2;\n    super(color, intensity);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isPointLight = true;\n    this.type = 'PointLight';\n\n    /**\n     * When distance is zero, light will attenuate according to inverse-square\n     * law to infinite distance. When distance is non-zero, light will attenuate\n     * according to inverse-square law until near the distance cutoff, where it\n     * will then attenuate quickly and smoothly to 0. Inherently, cutoffs are not\n     * physically correct.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.distance = distance;\n\n    /**\n     * The amount the light dims along the distance of the light. In context of\n     * physically-correct rendering the default value should not be changed.\n     *\n     * @type {number}\n     * @default 2\n     */\n    this.decay = decay;\n\n    /**\n     * This property holds the light's shadow configuration.\n     *\n     * @type {PointLightShadow}\n     */\n    this.shadow = new PointLightShadow();\n  }\n\n  /**\n   * The light's power. Power is the luminous power of the light measured in lumens (lm).\n   * Changing the power will also change the light's intensity.\n   *\n   * @type {number}\n   */\n  get power() {\n    // compute the light's luminous power (in lumens) from its intensity (in candela)\n    // for an isotropic light source, luminous power (lm) = 4 π luminous intensity (cd)\n    return this.intensity * 4 * Math.PI;\n  }\n  set power(power) {\n    // set the light's intensity (in candela) from the desired luminous power (in lumens)\n    this.intensity = power / (4 * Math.PI);\n  }\n  dispose() {\n    this.shadow.dispose();\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.distance = source.distance;\n    this.decay = source.decay;\n    this.shadow = source.shadow.clone();\n    return this;\n  }\n}\n\n/**\n * Camera that uses [orthographic projection]{@link https://en.wikipedia.org/wiki/Orthographic_projection}.\n *\n * In this projection mode, an object's size in the rendered image stays\n * constant regardless of its distance from the camera. This can be useful\n * for rendering 2D scenes and UI elements, amongst other things.\n *\n * ```js\n * const camera = new THREE.OrthographicCamera( width / - 2, width / 2, height / 2, height / - 2, 1, 1000 );\n * scene.add( camera );\n * ```\n *\n * @augments Camera\n */\nclass OrthographicCamera extends Camera {\n  /**\n   * Constructs a new orthographic camera.\n   *\n   * @param {number} [left=-1] - The left plane of the camera's frustum.\n   * @param {number} [right=1] - The right plane of the camera's frustum.\n   * @param {number} [top=1] - The top plane of the camera's frustum.\n   * @param {number} [bottom=-1] - The bottom plane of the camera's frustum.\n   * @param {number} [near=0.1] - The camera's near plane.\n   * @param {number} [far=2000] - The camera's far plane.\n   */\n  constructor() {\n    let left = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n    let right = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let top = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let bottom = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;\n    let near = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0.1;\n    let far = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 2000;\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isOrthographicCamera = true;\n    this.type = 'OrthographicCamera';\n\n    /**\n     * The zoom factor of the camera.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.zoom = 1;\n\n    /**\n     * Represents the frustum window specification. This property should not be edited\n     * directly but via {@link PerspectiveCamera#setViewOffset} and {@link PerspectiveCamera#clearViewOffset}.\n     *\n     * @type {?Object}\n     * @default null\n     */\n    this.view = null;\n\n    /**\n     * The left plane of the camera's frustum.\n     *\n     * @type {number}\n     * @default -1\n     */\n    this.left = left;\n\n    /**\n     * The right plane of the camera's frustum.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.right = right;\n\n    /**\n     * The top plane of the camera's frustum.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.top = top;\n\n    /**\n     * The bottom plane of the camera's frustum.\n     *\n     * @type {number}\n     * @default -1\n     */\n    this.bottom = bottom;\n\n    /**\n     * The camera's near plane. The valid range is greater than `0`\n     * and less than the current value of {@link OrthographicCamera#far}.\n     *\n     * Note that, unlike for the {@link PerspectiveCamera}, `0` is a\n     * valid value for an orthographic camera's near plane.\n     *\n     * @type {number}\n     * @default 0.1\n     */\n    this.near = near;\n\n    /**\n     * The camera's far plane. Must be greater than the\n     * current value of {@link OrthographicCamera#near}.\n     *\n     * @type {number}\n     * @default 2000\n     */\n    this.far = far;\n    this.updateProjectionMatrix();\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.left = source.left;\n    this.right = source.right;\n    this.top = source.top;\n    this.bottom = source.bottom;\n    this.near = source.near;\n    this.far = source.far;\n    this.zoom = source.zoom;\n    this.view = source.view === null ? null : Object.assign({}, source.view);\n    return this;\n  }\n\n  /**\n   * Sets an offset in a larger frustum. This is useful for multi-window or\n   * multi-monitor/multi-machine setups.\n   *\n   * @param {number} fullWidth - The full width of multiview setup.\n   * @param {number} fullHeight - The full height of multiview setup.\n   * @param {number} x - The horizontal offset of the subcamera.\n   * @param {number} y - The vertical offset of the subcamera.\n   * @param {number} width - The width of subcamera.\n   * @param {number} height - The height of subcamera.\n   * @see {@link PerspectiveCamera#setViewOffset}\n   */\n  setViewOffset(fullWidth, fullHeight, x, y, width, height) {\n    if (this.view === null) {\n      this.view = {\n        enabled: true,\n        fullWidth: 1,\n        fullHeight: 1,\n        offsetX: 0,\n        offsetY: 0,\n        width: 1,\n        height: 1\n      };\n    }\n    this.view.enabled = true;\n    this.view.fullWidth = fullWidth;\n    this.view.fullHeight = fullHeight;\n    this.view.offsetX = x;\n    this.view.offsetY = y;\n    this.view.width = width;\n    this.view.height = height;\n    this.updateProjectionMatrix();\n  }\n\n  /**\n   * Removes the view offset from the projection matrix.\n   */\n  clearViewOffset() {\n    if (this.view !== null) {\n      this.view.enabled = false;\n    }\n    this.updateProjectionMatrix();\n  }\n\n  /**\n   * Updates the camera's projection matrix. Must be called after any change of\n   * camera properties.\n   */\n  updateProjectionMatrix() {\n    const dx = (this.right - this.left) / (2 * this.zoom);\n    const dy = (this.top - this.bottom) / (2 * this.zoom);\n    const cx = (this.right + this.left) / 2;\n    const cy = (this.top + this.bottom) / 2;\n    let left = cx - dx;\n    let right = cx + dx;\n    let top = cy + dy;\n    let bottom = cy - dy;\n    if (this.view !== null && this.view.enabled) {\n      const scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;\n      const scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;\n      left += scaleW * this.view.offsetX;\n      right = left + scaleW * this.view.width;\n      top -= scaleH * this.view.offsetY;\n      bottom = top - scaleH * this.view.height;\n    }\n    this.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far, this.coordinateSystem);\n    this.projectionMatrixInverse.copy(this.projectionMatrix).invert();\n  }\n  toJSON(meta) {\n    const data = super.toJSON(meta);\n    data.object.zoom = this.zoom;\n    data.object.left = this.left;\n    data.object.right = this.right;\n    data.object.top = this.top;\n    data.object.bottom = this.bottom;\n    data.object.near = this.near;\n    data.object.far = this.far;\n    if (this.view !== null) data.object.view = Object.assign({}, this.view);\n    return data;\n  }\n}\n\n/**\n * Represents the shadow configuration of directional lights.\n *\n * @augments LightShadow\n */\nclass DirectionalLightShadow extends LightShadow {\n  /**\n   * Constructs a new directional light shadow.\n   */\n  constructor() {\n    super(new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isDirectionalLightShadow = true;\n  }\n}\n\n/**\n * A light that gets emitted in a specific direction. This light will behave\n * as though it is infinitely far away and the rays produced from it are all\n * parallel. The common use case for this is to simulate daylight; the sun is\n * far enough away that its position can be considered to be infinite, and\n * all light rays coming from it are parallel.\n *\n * A common point of confusion for directional lights is that setting the\n * rotation has no effect. This is because three.js's DirectionalLight is the\n * equivalent to what is often called a 'Target Direct Light' in other\n * applications.\n *\n * This means that its direction is calculated as pointing from the light's\n * {@link Object3D#position} to the {@link DirectionalLight#target} position\n * (as opposed to a 'Free Direct Light' that just has a rotation\n * component).\n *\n * This light can cast shadows - see the {@link DirectionalLightShadow} for details.\n *\n * ```js\n * // White directional light at half intensity shining from the top.\n * const directionalLight = new THREE.DirectionalLight( 0xffffff, 0.5 );\n * scene.add( directionalLight );\n * ```\n *\n * @augments Light\n */\nclass DirectionalLight extends Light {\n  /**\n   * Constructs a new directional light.\n   *\n   * @param {(number|Color|string)} [color=0xffffff] - The light's color.\n   * @param {number} [intensity=1] - The light's strength/intensity.\n   */\n  constructor(color, intensity) {\n    super(color, intensity);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isDirectionalLight = true;\n    this.type = 'DirectionalLight';\n    this.position.copy(Object3D.DEFAULT_UP);\n    this.updateMatrix();\n\n    /**\n     * The directional light points from its position to the\n     * target's position.\n     *\n     * For the target's position to be changed to anything other\n     * than the default, it must be added to the scene.\n     *\n     * It is also possible to set the target to be another 3D object\n     * in the scene. The light will now track the target object.\n     *\n     * @type {Object3D}\n     */\n    this.target = new Object3D();\n\n    /**\n     * This property holds the light's shadow configuration.\n     *\n     * @type {DirectionalLightShadow}\n     */\n    this.shadow = new DirectionalLightShadow();\n  }\n  dispose() {\n    this.shadow.dispose();\n  }\n  copy(source) {\n    super.copy(source);\n    this.target = source.target.clone();\n    this.shadow = source.shadow.clone();\n    return this;\n  }\n}\n\n/**\n * This light globally illuminates all objects in the scene equally.\n *\n * It cannot be used to cast shadows as it does not have a direction.\n *\n * ```js\n * const light = new THREE.AmbientLight( 0x404040 ); // soft white light\n * scene.add( light );\n * ```\n *\n * @augments Light\n */\nclass AmbientLight extends Light {\n  /**\n   * Constructs a new ambient light.\n   *\n   * @param {(number|Color|string)} [color=0xffffff] - The light's color.\n   * @param {number} [intensity=1] - The light's strength/intensity.\n   */\n  constructor(color, intensity) {\n    super(color, intensity);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isAmbientLight = true;\n    this.type = 'AmbientLight';\n  }\n}\n\n/**\n * This class emits light uniformly across the face a rectangular plane.\n * This light type can be used to simulate light sources such as bright\n * windows or strip lighting.\n *\n * Important Notes:\n *\n * - There is no shadow support.\n * - Only PBR materials are supported.\n * - You have to include `RectAreaLightUniformsLib` (`WebGLRenderer`) or `RectAreaLightTexturesLib` (`WebGPURenderer`)\n * into your app and init the uniforms/textures.\n *\n * ```js\n * RectAreaLightUniformsLib.init(); // only relevant for WebGLRenderer\n * THREE.RectAreaLightNode.setLTC( RectAreaLightTexturesLib.init() ); //  only relevant for WebGPURenderer\n *\n * const intensity = 1; const width = 10; const height = 10;\n * const rectLight = new THREE.RectAreaLight( 0xffffff, intensity, width, height );\n * rectLight.position.set( 5, 5, 0 );\n * rectLight.lookAt( 0, 0, 0 );\n * scene.add( rectLight )\n * ```\n *\n * @augments Light\n */\nclass RectAreaLight extends Light {\n  /**\n   * Constructs a new area light.\n   *\n   * @param {(number|Color|string)} [color=0xffffff] - The light's color.\n   * @param {number} [intensity=1] - The light's strength/intensity.\n   * @param {number} [width=10] - The width of the light.\n   * @param {number} [height=10] - The height of the light.\n   */\n  constructor(color, intensity) {\n    let width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\n    let height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 10;\n    super(color, intensity);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isRectAreaLight = true;\n    this.type = 'RectAreaLight';\n\n    /**\n     * The width of the light.\n     *\n     * @type {number}\n     * @default 10\n     */\n    this.width = width;\n\n    /**\n     * The height of the light.\n     *\n     * @type {number}\n     * @default 10\n     */\n    this.height = height;\n  }\n\n  /**\n   * The light's power. Power is the luminous power of the light measured in lumens (lm).\n   * Changing the power will also change the light's intensity.\n   *\n   * @type {number}\n   */\n  get power() {\n    // compute the light's luminous power (in lumens) from its intensity (in nits)\n    return this.intensity * this.width * this.height * Math.PI;\n  }\n  set power(power) {\n    // set the light's intensity (in nits) from the desired luminous power (in lumens)\n    this.intensity = power / (this.width * this.height * Math.PI);\n  }\n  copy(source) {\n    super.copy(source);\n    this.width = source.width;\n    this.height = source.height;\n    return this;\n  }\n  toJSON(meta) {\n    const data = super.toJSON(meta);\n    data.object.width = this.width;\n    data.object.height = this.height;\n    return data;\n  }\n}\n\n/**\n * Represents a third-order spherical harmonics (SH). Light probes use this class\n * to encode lighting information.\n *\n * - Primary reference: {@link https://graphics.stanford.edu/papers/envmap/envmap.pdf}\n * - Secondary reference: {@link https://www.ppsloan.org/publications/StupidSH36.pdf}\n */\nclass SphericalHarmonics3 {\n  /**\n   * Constructs a new spherical harmonics.\n   */\n  constructor() {\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isSphericalHarmonics3 = true;\n\n    /**\n     * An array holding the (9) SH coefficients.\n     *\n     * @type {Array<Vector3>}\n     */\n    this.coefficients = [];\n    for (let i = 0; i < 9; i++) {\n      this.coefficients.push(new Vector3());\n    }\n  }\n\n  /**\n   * Sets the given SH coefficients to this instance by copying\n   * the values.\n   *\n   * @param {Array<Vector3>} coefficients - The SH coefficients.\n   * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n   */\n  set(coefficients) {\n    for (let i = 0; i < 9; i++) {\n      this.coefficients[i].copy(coefficients[i]);\n    }\n    return this;\n  }\n\n  /**\n   * Sets all SH coefficients to `0`.\n   *\n   * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n   */\n  zero() {\n    for (let i = 0; i < 9; i++) {\n      this.coefficients[i].set(0, 0, 0);\n    }\n    return this;\n  }\n\n  /**\n   * Returns the radiance in the direction of the given normal.\n   *\n   * @param {Vector3} normal - The normal vector (assumed to be unit length)\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {Vector3} The radiance.\n   */\n  getAt(normal, target) {\n    // normal is assumed to be unit length\n\n    const x = normal.x,\n      y = normal.y,\n      z = normal.z;\n    const coeff = this.coefficients;\n\n    // band 0\n    target.copy(coeff[0]).multiplyScalar(0.282095);\n\n    // band 1\n    target.addScaledVector(coeff[1], 0.488603 * y);\n    target.addScaledVector(coeff[2], 0.488603 * z);\n    target.addScaledVector(coeff[3], 0.488603 * x);\n\n    // band 2\n    target.addScaledVector(coeff[4], 1.092548 * (x * y));\n    target.addScaledVector(coeff[5], 1.092548 * (y * z));\n    target.addScaledVector(coeff[6], 0.315392 * (3.0 * z * z - 1.0));\n    target.addScaledVector(coeff[7], 1.092548 * (x * z));\n    target.addScaledVector(coeff[8], 0.546274 * (x * x - y * y));\n    return target;\n  }\n\n  /**\n   * Returns the irradiance (radiance convolved with cosine lobe) in the\n   * direction of the given normal.\n   *\n   * @param {Vector3} normal - The normal vector (assumed to be unit length)\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {Vector3} The irradiance.\n   */\n  getIrradianceAt(normal, target) {\n    // normal is assumed to be unit length\n\n    const x = normal.x,\n      y = normal.y,\n      z = normal.z;\n    const coeff = this.coefficients;\n\n    // band 0\n    target.copy(coeff[0]).multiplyScalar(0.886227); // π * 0.282095\n\n    // band 1\n    target.addScaledVector(coeff[1], 2.0 * 0.511664 * y); // ( 2 * π / 3 ) * 0.488603\n    target.addScaledVector(coeff[2], 2.0 * 0.511664 * z);\n    target.addScaledVector(coeff[3], 2.0 * 0.511664 * x);\n\n    // band 2\n    target.addScaledVector(coeff[4], 2.0 * 0.429043 * x * y); // ( π / 4 ) * 1.092548\n    target.addScaledVector(coeff[5], 2.0 * 0.429043 * y * z);\n    target.addScaledVector(coeff[6], 0.743125 * z * z - 0.247708); // ( π / 4 ) * 0.315392 * 3\n    target.addScaledVector(coeff[7], 2.0 * 0.429043 * x * z);\n    target.addScaledVector(coeff[8], 0.429043 * (x * x - y * y)); // ( π / 4 ) * 0.546274\n\n    return target;\n  }\n\n  /**\n   * Adds the given SH to this instance.\n   *\n   * @param {SphericalHarmonics3} sh - The SH to add.\n   * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n   */\n  add(sh) {\n    for (let i = 0; i < 9; i++) {\n      this.coefficients[i].add(sh.coefficients[i]);\n    }\n    return this;\n  }\n\n  /**\n   * A convenience method for performing {@link SphericalHarmonics3#add} and\n   * {@link SphericalHarmonics3#scale} at once.\n   *\n   * @param {SphericalHarmonics3} sh - The SH to add.\n   * @param {number} s - The scale factor.\n   * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n   */\n  addScaledSH(sh, s) {\n    for (let i = 0; i < 9; i++) {\n      this.coefficients[i].addScaledVector(sh.coefficients[i], s);\n    }\n    return this;\n  }\n\n  /**\n   * Scales this SH by the given scale factor.\n   *\n   * @param {number} s - The scale factor.\n   * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n   */\n  scale(s) {\n    for (let i = 0; i < 9; i++) {\n      this.coefficients[i].multiplyScalar(s);\n    }\n    return this;\n  }\n\n  /**\n   * Linear interpolates between the given SH and this instance by the given\n   * alpha factor.\n   *\n   * @param {SphericalHarmonics3} sh - The SH to interpolate with.\n   * @param {number} alpha - The alpha factor.\n   * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n   */\n  lerp(sh, alpha) {\n    for (let i = 0; i < 9; i++) {\n      this.coefficients[i].lerp(sh.coefficients[i], alpha);\n    }\n    return this;\n  }\n\n  /**\n   * Returns `true` if this spherical harmonics is equal with the given one.\n   *\n   * @param {SphericalHarmonics3} sh - The spherical harmonics to test for equality.\n   * @return {boolean} Whether this spherical harmonics is equal with the given one.\n   */\n  equals(sh) {\n    for (let i = 0; i < 9; i++) {\n      if (!this.coefficients[i].equals(sh.coefficients[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Copies the values of the given spherical harmonics to this instance.\n   *\n   * @param {SphericalHarmonics3} sh - The spherical harmonics to copy.\n   * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n   */\n  copy(sh) {\n    return this.set(sh.coefficients);\n  }\n\n  /**\n   * Returns a new spherical harmonics with copied values from this instance.\n   *\n   * @return {SphericalHarmonics3} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  /**\n   * Sets the SH coefficients of this instance from the given array.\n   *\n   * @param {Array<number>} array - An array holding the SH coefficients.\n   * @param {number} [offset=0] - The array offset where to start copying.\n   * @return {SphericalHarmonics3} A clone of this instance.\n   */\n  fromArray(array) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const coefficients = this.coefficients;\n    for (let i = 0; i < 9; i++) {\n      coefficients[i].fromArray(array, offset + i * 3);\n    }\n    return this;\n  }\n\n  /**\n   * Returns an array with the SH coefficients, or copies them into the provided\n   * array. The coefficients are represented as numbers.\n   *\n   * @param {Array<number>} [array=[]] - The target array.\n   * @param {number} [offset=0] - The array offset where to start copying.\n   * @return {Array<number>} An array with flat SH coefficients.\n   */\n  toArray() {\n    let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const coefficients = this.coefficients;\n    for (let i = 0; i < 9; i++) {\n      coefficients[i].toArray(array, offset + i * 3);\n    }\n    return array;\n  }\n\n  /**\n   * Computes the SH basis for the given normal vector.\n   *\n   * @param {Vector3} normal - The normal.\n   * @param {Array<number>} shBasis - The target array holding the SH basis.\n   */\n  static getBasisAt(normal, shBasis) {\n    // normal is assumed to be unit length\n\n    const x = normal.x,\n      y = normal.y,\n      z = normal.z;\n\n    // band 0\n    shBasis[0] = 0.282095;\n\n    // band 1\n    shBasis[1] = 0.488603 * y;\n    shBasis[2] = 0.488603 * z;\n    shBasis[3] = 0.488603 * x;\n\n    // band 2\n    shBasis[4] = 1.092548 * x * y;\n    shBasis[5] = 1.092548 * y * z;\n    shBasis[6] = 0.315392 * (3 * z * z - 1);\n    shBasis[7] = 1.092548 * x * z;\n    shBasis[8] = 0.546274 * (x * x - y * y);\n  }\n}\n\n/**\n * Light probes are an alternative way of adding light to a 3D scene. Unlike\n * classical light sources (e.g. directional, point or spot lights), light\n * probes do not emit light. Instead they store information about light\n * passing through 3D space. During rendering, the light that hits a 3D\n * object is approximated by using the data from the light probe.\n *\n * Light probes are usually created from (radiance) environment maps. The\n * class {@link LightProbeGenerator} can be used to create light probes from\n * cube textures or render targets. However, light estimation data could also\n * be provided in other forms e.g. by WebXR. This enables the rendering of\n * augmented reality content that reacts to real world lighting.\n *\n * The current probe implementation in three.js supports so-called diffuse\n * light probes. This type of light probe is functionally equivalent to an\n * irradiance environment map.\n *\n * @augments Light\n */\nclass LightProbe extends Light {\n  /**\n   * Constructs a new light probe.\n   *\n   * @param {SphericalHarmonics3} sh - The spherical harmonics which represents encoded lighting information.\n   * @param {number} [intensity=1] - The light's strength/intensity.\n   */\n  constructor() {\n    let sh = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new SphericalHarmonics3();\n    let intensity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    super(undefined, intensity);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isLightProbe = true;\n\n    /**\n     * A light probe uses spherical harmonics to encode lighting information.\n     *\n     * @type {SphericalHarmonics3}\n     */\n    this.sh = sh;\n  }\n  copy(source) {\n    super.copy(source);\n    this.sh.copy(source.sh);\n    return this;\n  }\n\n  /**\n   * Deserializes the light prove from the given JSON.\n   *\n   * @param {Object} json - The JSON holding the serialized light probe.\n   * @return {LightProbe} A reference to this light probe.\n   */\n  fromJSON(json) {\n    this.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();\n    this.sh.fromArray(json.sh);\n    return this;\n  }\n  toJSON(meta) {\n    const data = super.toJSON(meta);\n    data.object.sh = this.sh.toArray();\n    return data;\n  }\n}\n\n/**\n * Class for loading geometries. The files are internally\n * loaded via {@link FileLoader}.\n *\n * ```js\n * const loader = new THREE.MaterialLoader();\n * const material = await loader.loadAsync( 'material.json' );\n * ```\n * This loader does not support node materials. Use {@link NodeMaterialLoader} instead.\n *\n * @augments Loader\n */\nclass MaterialLoader extends Loader {\n  /**\n   * Constructs a new material loader.\n   *\n   * @param {LoadingManager} [manager] - The loading manager.\n   */\n  constructor(manager) {\n    super(manager);\n\n    /**\n     * A dictionary holding textures used by the material.\n     *\n     * @type {Object<string,Texture>}\n     */\n    this.textures = {};\n  }\n\n  /**\n   * Starts loading from the given URL and pass the loaded material to the `onLoad()` callback.\n   *\n   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n   * @param {function(Material)} onLoad - Executed when the loading process has been finished.\n   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n   * @param {onErrorCallback} onError - Executed when errors occur.\n   */\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(JSON.parse(text)));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  /**\n   * Parses the given JSON object and returns a material.\n   *\n   * @param {Object} json - The serialized material.\n   * @return {Material} The parsed material.\n   */\n  parse(json) {\n    const textures = this.textures;\n    function getTexture(name) {\n      if (textures[name] === undefined) {\n        console.warn('THREE.MaterialLoader: Undefined texture', name);\n      }\n      return textures[name];\n    }\n    const material = this.createMaterialFromType(json.type);\n    if (json.uuid !== undefined) material.uuid = json.uuid;\n    if (json.name !== undefined) material.name = json.name;\n    if (json.color !== undefined && material.color !== undefined) material.color.setHex(json.color);\n    if (json.roughness !== undefined) material.roughness = json.roughness;\n    if (json.metalness !== undefined) material.metalness = json.metalness;\n    if (json.sheen !== undefined) material.sheen = json.sheen;\n    if (json.sheenColor !== undefined) material.sheenColor = new Color().setHex(json.sheenColor);\n    if (json.sheenRoughness !== undefined) material.sheenRoughness = json.sheenRoughness;\n    if (json.emissive !== undefined && material.emissive !== undefined) material.emissive.setHex(json.emissive);\n    if (json.specular !== undefined && material.specular !== undefined) material.specular.setHex(json.specular);\n    if (json.specularIntensity !== undefined) material.specularIntensity = json.specularIntensity;\n    if (json.specularColor !== undefined && material.specularColor !== undefined) material.specularColor.setHex(json.specularColor);\n    if (json.shininess !== undefined) material.shininess = json.shininess;\n    if (json.clearcoat !== undefined) material.clearcoat = json.clearcoat;\n    if (json.clearcoatRoughness !== undefined) material.clearcoatRoughness = json.clearcoatRoughness;\n    if (json.dispersion !== undefined) material.dispersion = json.dispersion;\n    if (json.iridescence !== undefined) material.iridescence = json.iridescence;\n    if (json.iridescenceIOR !== undefined) material.iridescenceIOR = json.iridescenceIOR;\n    if (json.iridescenceThicknessRange !== undefined) material.iridescenceThicknessRange = json.iridescenceThicknessRange;\n    if (json.transmission !== undefined) material.transmission = json.transmission;\n    if (json.thickness !== undefined) material.thickness = json.thickness;\n    if (json.attenuationDistance !== undefined) material.attenuationDistance = json.attenuationDistance;\n    if (json.attenuationColor !== undefined && material.attenuationColor !== undefined) material.attenuationColor.setHex(json.attenuationColor);\n    if (json.anisotropy !== undefined) material.anisotropy = json.anisotropy;\n    if (json.anisotropyRotation !== undefined) material.anisotropyRotation = json.anisotropyRotation;\n    if (json.fog !== undefined) material.fog = json.fog;\n    if (json.flatShading !== undefined) material.flatShading = json.flatShading;\n    if (json.blending !== undefined) material.blending = json.blending;\n    if (json.combine !== undefined) material.combine = json.combine;\n    if (json.side !== undefined) material.side = json.side;\n    if (json.shadowSide !== undefined) material.shadowSide = json.shadowSide;\n    if (json.opacity !== undefined) material.opacity = json.opacity;\n    if (json.transparent !== undefined) material.transparent = json.transparent;\n    if (json.alphaTest !== undefined) material.alphaTest = json.alphaTest;\n    if (json.alphaHash !== undefined) material.alphaHash = json.alphaHash;\n    if (json.depthFunc !== undefined) material.depthFunc = json.depthFunc;\n    if (json.depthTest !== undefined) material.depthTest = json.depthTest;\n    if (json.depthWrite !== undefined) material.depthWrite = json.depthWrite;\n    if (json.colorWrite !== undefined) material.colorWrite = json.colorWrite;\n    if (json.blendSrc !== undefined) material.blendSrc = json.blendSrc;\n    if (json.blendDst !== undefined) material.blendDst = json.blendDst;\n    if (json.blendEquation !== undefined) material.blendEquation = json.blendEquation;\n    if (json.blendSrcAlpha !== undefined) material.blendSrcAlpha = json.blendSrcAlpha;\n    if (json.blendDstAlpha !== undefined) material.blendDstAlpha = json.blendDstAlpha;\n    if (json.blendEquationAlpha !== undefined) material.blendEquationAlpha = json.blendEquationAlpha;\n    if (json.blendColor !== undefined && material.blendColor !== undefined) material.blendColor.setHex(json.blendColor);\n    if (json.blendAlpha !== undefined) material.blendAlpha = json.blendAlpha;\n    if (json.stencilWriteMask !== undefined) material.stencilWriteMask = json.stencilWriteMask;\n    if (json.stencilFunc !== undefined) material.stencilFunc = json.stencilFunc;\n    if (json.stencilRef !== undefined) material.stencilRef = json.stencilRef;\n    if (json.stencilFuncMask !== undefined) material.stencilFuncMask = json.stencilFuncMask;\n    if (json.stencilFail !== undefined) material.stencilFail = json.stencilFail;\n    if (json.stencilZFail !== undefined) material.stencilZFail = json.stencilZFail;\n    if (json.stencilZPass !== undefined) material.stencilZPass = json.stencilZPass;\n    if (json.stencilWrite !== undefined) material.stencilWrite = json.stencilWrite;\n    if (json.wireframe !== undefined) material.wireframe = json.wireframe;\n    if (json.wireframeLinewidth !== undefined) material.wireframeLinewidth = json.wireframeLinewidth;\n    if (json.wireframeLinecap !== undefined) material.wireframeLinecap = json.wireframeLinecap;\n    if (json.wireframeLinejoin !== undefined) material.wireframeLinejoin = json.wireframeLinejoin;\n    if (json.rotation !== undefined) material.rotation = json.rotation;\n    if (json.linewidth !== undefined) material.linewidth = json.linewidth;\n    if (json.dashSize !== undefined) material.dashSize = json.dashSize;\n    if (json.gapSize !== undefined) material.gapSize = json.gapSize;\n    if (json.scale !== undefined) material.scale = json.scale;\n    if (json.polygonOffset !== undefined) material.polygonOffset = json.polygonOffset;\n    if (json.polygonOffsetFactor !== undefined) material.polygonOffsetFactor = json.polygonOffsetFactor;\n    if (json.polygonOffsetUnits !== undefined) material.polygonOffsetUnits = json.polygonOffsetUnits;\n    if (json.dithering !== undefined) material.dithering = json.dithering;\n    if (json.alphaToCoverage !== undefined) material.alphaToCoverage = json.alphaToCoverage;\n    if (json.premultipliedAlpha !== undefined) material.premultipliedAlpha = json.premultipliedAlpha;\n    if (json.forceSinglePass !== undefined) material.forceSinglePass = json.forceSinglePass;\n    if (json.visible !== undefined) material.visible = json.visible;\n    if (json.toneMapped !== undefined) material.toneMapped = json.toneMapped;\n    if (json.userData !== undefined) material.userData = json.userData;\n    if (json.vertexColors !== undefined) {\n      if (typeof json.vertexColors === 'number') {\n        material.vertexColors = json.vertexColors > 0 ? true : false;\n      } else {\n        material.vertexColors = json.vertexColors;\n      }\n    }\n\n    // Shader Material\n\n    if (json.uniforms !== undefined) {\n      for (const name in json.uniforms) {\n        const uniform = json.uniforms[name];\n        material.uniforms[name] = {};\n        switch (uniform.type) {\n          case 't':\n            material.uniforms[name].value = getTexture(uniform.value);\n            break;\n          case 'c':\n            material.uniforms[name].value = new Color().setHex(uniform.value);\n            break;\n          case 'v2':\n            material.uniforms[name].value = new Vector2().fromArray(uniform.value);\n            break;\n          case 'v3':\n            material.uniforms[name].value = new Vector3().fromArray(uniform.value);\n            break;\n          case 'v4':\n            material.uniforms[name].value = new Vector4().fromArray(uniform.value);\n            break;\n          case 'm3':\n            material.uniforms[name].value = new Matrix3().fromArray(uniform.value);\n            break;\n          case 'm4':\n            material.uniforms[name].value = new Matrix4().fromArray(uniform.value);\n            break;\n          default:\n            material.uniforms[name].value = uniform.value;\n        }\n      }\n    }\n    if (json.defines !== undefined) material.defines = json.defines;\n    if (json.vertexShader !== undefined) material.vertexShader = json.vertexShader;\n    if (json.fragmentShader !== undefined) material.fragmentShader = json.fragmentShader;\n    if (json.glslVersion !== undefined) material.glslVersion = json.glslVersion;\n    if (json.extensions !== undefined) {\n      for (const key in json.extensions) {\n        material.extensions[key] = json.extensions[key];\n      }\n    }\n    if (json.lights !== undefined) material.lights = json.lights;\n    if (json.clipping !== undefined) material.clipping = json.clipping;\n\n    // for PointsMaterial\n\n    if (json.size !== undefined) material.size = json.size;\n    if (json.sizeAttenuation !== undefined) material.sizeAttenuation = json.sizeAttenuation;\n\n    // maps\n\n    if (json.map !== undefined) material.map = getTexture(json.map);\n    if (json.matcap !== undefined) material.matcap = getTexture(json.matcap);\n    if (json.alphaMap !== undefined) material.alphaMap = getTexture(json.alphaMap);\n    if (json.bumpMap !== undefined) material.bumpMap = getTexture(json.bumpMap);\n    if (json.bumpScale !== undefined) material.bumpScale = json.bumpScale;\n    if (json.normalMap !== undefined) material.normalMap = getTexture(json.normalMap);\n    if (json.normalMapType !== undefined) material.normalMapType = json.normalMapType;\n    if (json.normalScale !== undefined) {\n      let normalScale = json.normalScale;\n      if (Array.isArray(normalScale) === false) {\n        // Blender exporter used to export a scalar. See #7459\n\n        normalScale = [normalScale, normalScale];\n      }\n      material.normalScale = new Vector2().fromArray(normalScale);\n    }\n    if (json.displacementMap !== undefined) material.displacementMap = getTexture(json.displacementMap);\n    if (json.displacementScale !== undefined) material.displacementScale = json.displacementScale;\n    if (json.displacementBias !== undefined) material.displacementBias = json.displacementBias;\n    if (json.roughnessMap !== undefined) material.roughnessMap = getTexture(json.roughnessMap);\n    if (json.metalnessMap !== undefined) material.metalnessMap = getTexture(json.metalnessMap);\n    if (json.emissiveMap !== undefined) material.emissiveMap = getTexture(json.emissiveMap);\n    if (json.emissiveIntensity !== undefined) material.emissiveIntensity = json.emissiveIntensity;\n    if (json.specularMap !== undefined) material.specularMap = getTexture(json.specularMap);\n    if (json.specularIntensityMap !== undefined) material.specularIntensityMap = getTexture(json.specularIntensityMap);\n    if (json.specularColorMap !== undefined) material.specularColorMap = getTexture(json.specularColorMap);\n    if (json.envMap !== undefined) material.envMap = getTexture(json.envMap);\n    if (json.envMapRotation !== undefined) material.envMapRotation.fromArray(json.envMapRotation);\n    if (json.envMapIntensity !== undefined) material.envMapIntensity = json.envMapIntensity;\n    if (json.reflectivity !== undefined) material.reflectivity = json.reflectivity;\n    if (json.refractionRatio !== undefined) material.refractionRatio = json.refractionRatio;\n    if (json.lightMap !== undefined) material.lightMap = getTexture(json.lightMap);\n    if (json.lightMapIntensity !== undefined) material.lightMapIntensity = json.lightMapIntensity;\n    if (json.aoMap !== undefined) material.aoMap = getTexture(json.aoMap);\n    if (json.aoMapIntensity !== undefined) material.aoMapIntensity = json.aoMapIntensity;\n    if (json.gradientMap !== undefined) material.gradientMap = getTexture(json.gradientMap);\n    if (json.clearcoatMap !== undefined) material.clearcoatMap = getTexture(json.clearcoatMap);\n    if (json.clearcoatRoughnessMap !== undefined) material.clearcoatRoughnessMap = getTexture(json.clearcoatRoughnessMap);\n    if (json.clearcoatNormalMap !== undefined) material.clearcoatNormalMap = getTexture(json.clearcoatNormalMap);\n    if (json.clearcoatNormalScale !== undefined) material.clearcoatNormalScale = new Vector2().fromArray(json.clearcoatNormalScale);\n    if (json.iridescenceMap !== undefined) material.iridescenceMap = getTexture(json.iridescenceMap);\n    if (json.iridescenceThicknessMap !== undefined) material.iridescenceThicknessMap = getTexture(json.iridescenceThicknessMap);\n    if (json.transmissionMap !== undefined) material.transmissionMap = getTexture(json.transmissionMap);\n    if (json.thicknessMap !== undefined) material.thicknessMap = getTexture(json.thicknessMap);\n    if (json.anisotropyMap !== undefined) material.anisotropyMap = getTexture(json.anisotropyMap);\n    if (json.sheenColorMap !== undefined) material.sheenColorMap = getTexture(json.sheenColorMap);\n    if (json.sheenRoughnessMap !== undefined) material.sheenRoughnessMap = getTexture(json.sheenRoughnessMap);\n    return material;\n  }\n\n  /**\n   * Textures are not embedded in the material JSON so they have\n   * to be injected before the loading process starts.\n   *\n   * @param {Object} value - A dictionary holding textures for material properties.\n   * @return {MaterialLoader} A reference to this material loader.\n   */\n  setTextures(value) {\n    this.textures = value;\n    return this;\n  }\n\n  /**\n   * Creates a material for the given type.\n   *\n   * @param {string} type - The material type.\n   * @return {Material} The new material.\n   */\n  createMaterialFromType(type) {\n    return MaterialLoader.createMaterialFromType(type);\n  }\n\n  /**\n   * Creates a material for the given type.\n   *\n   * @static\n   * @param {string} type - The material type.\n   * @return {Material} The new material.\n   */\n  static createMaterialFromType(type) {\n    const materialLib = {\n      ShadowMaterial,\n      SpriteMaterial,\n      RawShaderMaterial,\n      ShaderMaterial,\n      PointsMaterial,\n      MeshPhysicalMaterial,\n      MeshStandardMaterial,\n      MeshPhongMaterial,\n      MeshToonMaterial,\n      MeshNormalMaterial,\n      MeshLambertMaterial,\n      MeshDepthMaterial,\n      MeshDistanceMaterial,\n      MeshBasicMaterial,\n      MeshMatcapMaterial,\n      LineDashedMaterial,\n      LineBasicMaterial,\n      Material\n    };\n    return new materialLib[type]();\n  }\n}\n\n/**\n * A class with loader utility functions.\n */\nclass LoaderUtils {\n  /**\n   * Extracts the base URL from the given URL.\n   *\n   * @param {string} url -The URL to extract the base URL from.\n   * @return {string} The extracted base URL.\n   */\n  static extractUrlBase(url) {\n    const index = url.lastIndexOf('/');\n    if (index === -1) return './';\n    return url.slice(0, index + 1);\n  }\n\n  /**\n   * Resolves relative URLs against the given path. Absolute paths, data urls,\n   * and blob URLs will be returned as is. Invalid URLs will return an empty\n   * string.\n   *\n   * @param {string} url -The URL to resolve.\n   * @param {string} path - The base path for relative URLs to be resolved against.\n   * @return {string} The resolved URL.\n   */\n  static resolveURL(url, path) {\n    // Invalid URL\n    if (typeof url !== 'string' || url === '') return '';\n\n    // Host Relative URL\n    if (/^https?:\\/\\//i.test(path) && /^\\//.test(url)) {\n      path = path.replace(/(^https?:\\/\\/[^\\/]+).*/i, '$1');\n    }\n\n    // Absolute URL http://,https://,//\n    if (/^(https?:)?\\/\\//i.test(url)) return url;\n\n    // Data URI\n    if (/^data:.*,.*$/i.test(url)) return url;\n\n    // Blob URL\n    if (/^blob:.*$/i.test(url)) return url;\n\n    // Relative URL\n    return path + url;\n  }\n}\n\n/**\n * An instanced version of a geometry.\n */\nclass InstancedBufferGeometry extends BufferGeometry {\n  /**\n   * Constructs a new instanced buffer geometry.\n   */\n  constructor() {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isInstancedBufferGeometry = true;\n    this.type = 'InstancedBufferGeometry';\n\n    /**\n     * The instance count.\n     *\n     * @type {number}\n     * @default Infinity\n     */\n    this.instanceCount = Infinity;\n  }\n  copy(source) {\n    super.copy(source);\n    this.instanceCount = source.instanceCount;\n    return this;\n  }\n  toJSON() {\n    const data = super.toJSON();\n    data.instanceCount = this.instanceCount;\n    data.isInstancedBufferGeometry = true;\n    return data;\n  }\n}\n\n/**\n * Class for loading geometries. The files are internally\n * loaded via {@link FileLoader}.\n *\n * ```js\n * const loader = new THREE.BufferGeometryLoader();\n * const geometry = await loader.loadAsync( 'models/json/pressure.json' );\n *\n * const material = new THREE.MeshBasicMaterial( { color: 0xF5F5F5 } );\n * const object = new THREE.Mesh( geometry, material );\n * scene.add( object );\n * ```\n *\n * @augments Loader\n */\nclass BufferGeometryLoader extends Loader {\n  /**\n   * Constructs a new geometry loader.\n   *\n   * @param {LoadingManager} [manager] - The loading manager.\n   */\n  constructor(manager) {\n    super(manager);\n  }\n\n  /**\n   * Starts loading from the given URL and pass the loaded geometry to the `onLoad()` callback.\n   *\n   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n   * @param {function(BufferGeometry)} onLoad - Executed when the loading process has been finished.\n   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n   * @param {onErrorCallback} onError - Executed when errors occur.\n   */\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(JSON.parse(text)));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  /**\n   * Parses the given JSON object and returns a geometry.\n   *\n   * @param {Object} json - The serialized geometry.\n   * @return {BufferGeometry} The parsed geometry.\n   */\n  parse(json) {\n    const interleavedBufferMap = {};\n    const arrayBufferMap = {};\n    function getInterleavedBuffer(json, uuid) {\n      if (interleavedBufferMap[uuid] !== undefined) return interleavedBufferMap[uuid];\n      const interleavedBuffers = json.interleavedBuffers;\n      const interleavedBuffer = interleavedBuffers[uuid];\n      const buffer = getArrayBuffer(json, interleavedBuffer.buffer);\n      const array = getTypedArray(interleavedBuffer.type, buffer);\n      const ib = new InterleavedBuffer(array, interleavedBuffer.stride);\n      ib.uuid = interleavedBuffer.uuid;\n      interleavedBufferMap[uuid] = ib;\n      return ib;\n    }\n    function getArrayBuffer(json, uuid) {\n      if (arrayBufferMap[uuid] !== undefined) return arrayBufferMap[uuid];\n      const arrayBuffers = json.arrayBuffers;\n      const arrayBuffer = arrayBuffers[uuid];\n      const ab = new Uint32Array(arrayBuffer).buffer;\n      arrayBufferMap[uuid] = ab;\n      return ab;\n    }\n    const geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\n    const index = json.data.index;\n    if (index !== undefined) {\n      const typedArray = getTypedArray(index.type, index.array);\n      geometry.setIndex(new BufferAttribute(typedArray, 1));\n    }\n    const attributes = json.data.attributes;\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      let bufferAttribute;\n      if (attribute.isInterleavedBufferAttribute) {\n        const interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);\n        bufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);\n      } else {\n        const typedArray = getTypedArray(attribute.type, attribute.array);\n        const bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\n        bufferAttribute = new bufferAttributeConstr(typedArray, attribute.itemSize, attribute.normalized);\n      }\n      if (attribute.name !== undefined) bufferAttribute.name = attribute.name;\n      if (attribute.usage !== undefined) bufferAttribute.setUsage(attribute.usage);\n      geometry.setAttribute(key, bufferAttribute);\n    }\n    const morphAttributes = json.data.morphAttributes;\n    if (morphAttributes) {\n      for (const key in morphAttributes) {\n        const attributeArray = morphAttributes[key];\n        const array = [];\n        for (let i = 0, il = attributeArray.length; i < il; i++) {\n          const attribute = attributeArray[i];\n          let bufferAttribute;\n          if (attribute.isInterleavedBufferAttribute) {\n            const interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);\n            bufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);\n          } else {\n            const typedArray = getTypedArray(attribute.type, attribute.array);\n            bufferAttribute = new BufferAttribute(typedArray, attribute.itemSize, attribute.normalized);\n          }\n          if (attribute.name !== undefined) bufferAttribute.name = attribute.name;\n          array.push(bufferAttribute);\n        }\n        geometry.morphAttributes[key] = array;\n      }\n    }\n    const morphTargetsRelative = json.data.morphTargetsRelative;\n    if (morphTargetsRelative) {\n      geometry.morphTargetsRelative = true;\n    }\n    const groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n    if (groups !== undefined) {\n      for (let i = 0, n = groups.length; i !== n; ++i) {\n        const group = groups[i];\n        geometry.addGroup(group.start, group.count, group.materialIndex);\n      }\n    }\n    const boundingSphere = json.data.boundingSphere;\n    if (boundingSphere !== undefined) {\n      const center = new Vector3();\n      if (boundingSphere.center !== undefined) {\n        center.fromArray(boundingSphere.center);\n      }\n      geometry.boundingSphere = new Sphere(center, boundingSphere.radius);\n    }\n    if (json.name) geometry.name = json.name;\n    if (json.userData) geometry.userData = json.userData;\n    return geometry;\n  }\n}\n\n/**\n * A loader for loading a JSON resource in the [JSON Object/Scene format]{@link https://github.com/mrdoob/three.js/wiki/JSON-Object-Scene-format-4}.\n * The files are internally loaded via {@link FileLoader}.\n *\n * ```js\n * const loader = new THREE.ObjectLoader();\n * const obj = await loader.loadAsync( 'models/json/example.json' );\n * scene.add( obj );\n *\n * // Alternatively, to parse a previously loaded JSON structure\n * const object = await loader.parseAsync( a_json_object );\n * scene.add( object );\n * ```\n *\n * @augments Loader\n */\nclass ObjectLoader extends Loader {\n  /**\n   * Constructs a new object loader.\n   *\n   * @param {LoadingManager} [manager] - The loading manager.\n   */\n  constructor(manager) {\n    super(manager);\n  }\n\n  /**\n   * Starts loading from the given URL and pass the loaded 3D object to the `onLoad()` callback.\n   *\n   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n   * @param {function(Object3D)} onLoad - Executed when the loading process has been finished.\n   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n   * @param {onErrorCallback} onError - Executed when errors occur.\n   */\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;\n    this.resourcePath = this.resourcePath || path;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (text) {\n      let json = null;\n      try {\n        json = JSON.parse(text);\n      } catch (error) {\n        if (onError !== undefined) onError(error);\n        console.error('THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message);\n        return;\n      }\n      const metadata = json.metadata;\n      if (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry') {\n        if (onError !== undefined) onError(new Error('THREE.ObjectLoader: Can\\'t load ' + url));\n        console.error('THREE.ObjectLoader: Can\\'t load ' + url);\n        return;\n      }\n      scope.parse(json, onLoad);\n    }, onProgress, onError);\n  }\n\n  /**\n   * Async version of {@link ObjectLoader#load}.\n   *\n   * @async\n   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n   * @return {Promise<Object3D>} A Promise that resolves with the loaded 3D object.\n   */\n  async loadAsync(url, onProgress) {\n    const scope = this;\n    const path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;\n    this.resourcePath = this.resourcePath || path;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    const text = await loader.loadAsync(url, onProgress);\n    const json = JSON.parse(text);\n    const metadata = json.metadata;\n    if (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry') {\n      throw new Error('THREE.ObjectLoader: Can\\'t load ' + url);\n    }\n    return await scope.parseAsync(json);\n  }\n\n  /**\n   * Parses the given JSON. This is used internally by {@link ObjectLoader#load}\n   * but can also be used directly to parse a previously loaded JSON structure.\n   *\n   * @param {Object} json - The serialized 3D object.\n   * @param {onLoad} onLoad - Executed when all resources (e.g. textures) have been fully loaded.\n   * @return {Object3D} The parsed 3D object.\n   */\n  parse(json, onLoad) {\n    const animations = this.parseAnimations(json.animations);\n    const shapes = this.parseShapes(json.shapes);\n    const geometries = this.parseGeometries(json.geometries, shapes);\n    const images = this.parseImages(json.images, function () {\n      if (onLoad !== undefined) onLoad(object);\n    });\n    const textures = this.parseTextures(json.textures, images);\n    const materials = this.parseMaterials(json.materials, textures);\n    const object = this.parseObject(json.object, geometries, materials, textures, animations);\n    const skeletons = this.parseSkeletons(json.skeletons, object);\n    this.bindSkeletons(object, skeletons);\n    this.bindLightTargets(object);\n\n    //\n\n    if (onLoad !== undefined) {\n      let hasImages = false;\n      for (const uuid in images) {\n        if (images[uuid].data instanceof HTMLImageElement) {\n          hasImages = true;\n          break;\n        }\n      }\n      if (hasImages === false) onLoad(object);\n    }\n    return object;\n  }\n\n  /**\n   * Async version of {@link ObjectLoader#parse}.\n   *\n   * @param {Object} json - The serialized 3D object.\n   * @return {Promise<Object3D>} A Promise that resolves with the parsed 3D object.\n   */\n  async parseAsync(json) {\n    const animations = this.parseAnimations(json.animations);\n    const shapes = this.parseShapes(json.shapes);\n    const geometries = this.parseGeometries(json.geometries, shapes);\n    const images = await this.parseImagesAsync(json.images);\n    const textures = this.parseTextures(json.textures, images);\n    const materials = this.parseMaterials(json.materials, textures);\n    const object = this.parseObject(json.object, geometries, materials, textures, animations);\n    const skeletons = this.parseSkeletons(json.skeletons, object);\n    this.bindSkeletons(object, skeletons);\n    this.bindLightTargets(object);\n    return object;\n  }\n\n  // internals\n\n  parseShapes(json) {\n    const shapes = {};\n    if (json !== undefined) {\n      for (let i = 0, l = json.length; i < l; i++) {\n        const shape = new Shape().fromJSON(json[i]);\n        shapes[shape.uuid] = shape;\n      }\n    }\n    return shapes;\n  }\n  parseSkeletons(json, object) {\n    const skeletons = {};\n    const bones = {};\n\n    // generate bone lookup table\n\n    object.traverse(function (child) {\n      if (child.isBone) bones[child.uuid] = child;\n    });\n\n    // create skeletons\n\n    if (json !== undefined) {\n      for (let i = 0, l = json.length; i < l; i++) {\n        const skeleton = new Skeleton().fromJSON(json[i], bones);\n        skeletons[skeleton.uuid] = skeleton;\n      }\n    }\n    return skeletons;\n  }\n  parseGeometries(json, shapes) {\n    const geometries = {};\n    if (json !== undefined) {\n      const bufferGeometryLoader = new BufferGeometryLoader();\n      for (let i = 0, l = json.length; i < l; i++) {\n        let geometry;\n        const data = json[i];\n        switch (data.type) {\n          case 'BufferGeometry':\n          case 'InstancedBufferGeometry':\n            geometry = bufferGeometryLoader.parse(data);\n            break;\n          default:\n            if (data.type in Geometries) {\n              geometry = Geometries[data.type].fromJSON(data, shapes);\n            } else {\n              console.warn(`THREE.ObjectLoader: Unsupported geometry type \"${data.type}\"`);\n            }\n        }\n        geometry.uuid = data.uuid;\n        if (data.name !== undefined) geometry.name = data.name;\n        if (data.userData !== undefined) geometry.userData = data.userData;\n        geometries[data.uuid] = geometry;\n      }\n    }\n    return geometries;\n  }\n  parseMaterials(json, textures) {\n    const cache = {}; // MultiMaterial\n    const materials = {};\n    if (json !== undefined) {\n      const loader = new MaterialLoader();\n      loader.setTextures(textures);\n      for (let i = 0, l = json.length; i < l; i++) {\n        const data = json[i];\n        if (cache[data.uuid] === undefined) {\n          cache[data.uuid] = loader.parse(data);\n        }\n        materials[data.uuid] = cache[data.uuid];\n      }\n    }\n    return materials;\n  }\n  parseAnimations(json) {\n    const animations = {};\n    if (json !== undefined) {\n      for (let i = 0; i < json.length; i++) {\n        const data = json[i];\n        const clip = AnimationClip.parse(data);\n        animations[clip.uuid] = clip;\n      }\n    }\n    return animations;\n  }\n  parseImages(json, onLoad) {\n    const scope = this;\n    const images = {};\n    let loader;\n    function loadImage(url) {\n      scope.manager.itemStart(url);\n      return loader.load(url, function () {\n        scope.manager.itemEnd(url);\n      }, undefined, function () {\n        scope.manager.itemError(url);\n        scope.manager.itemEnd(url);\n      });\n    }\n    function deserializeImage(image) {\n      if (typeof image === 'string') {\n        const url = image;\n        const path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(url) ? url : scope.resourcePath + url;\n        return loadImage(path);\n      } else {\n        if (image.data) {\n          return {\n            data: getTypedArray(image.type, image.data),\n            width: image.width,\n            height: image.height\n          };\n        } else {\n          return null;\n        }\n      }\n    }\n    if (json !== undefined && json.length > 0) {\n      const manager = new LoadingManager(onLoad);\n      loader = new ImageLoader(manager);\n      loader.setCrossOrigin(this.crossOrigin);\n      for (let i = 0, il = json.length; i < il; i++) {\n        const image = json[i];\n        const url = image.url;\n        if (Array.isArray(url)) {\n          // load array of images e.g CubeTexture\n\n          const imageArray = [];\n          for (let j = 0, jl = url.length; j < jl; j++) {\n            const currentUrl = url[j];\n            const deserializedImage = deserializeImage(currentUrl);\n            if (deserializedImage !== null) {\n              if (deserializedImage instanceof HTMLImageElement) {\n                imageArray.push(deserializedImage);\n              } else {\n                // special case: handle array of data textures for cube textures\n\n                imageArray.push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height));\n              }\n            }\n          }\n          images[image.uuid] = new Source(imageArray);\n        } else {\n          // load single image\n\n          const deserializedImage = deserializeImage(image.url);\n          images[image.uuid] = new Source(deserializedImage);\n        }\n      }\n    }\n    return images;\n  }\n  async parseImagesAsync(json) {\n    const scope = this;\n    const images = {};\n    let loader;\n    async function deserializeImage(image) {\n      if (typeof image === 'string') {\n        const url = image;\n        const path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(url) ? url : scope.resourcePath + url;\n        return await loader.loadAsync(path);\n      } else {\n        if (image.data) {\n          return {\n            data: getTypedArray(image.type, image.data),\n            width: image.width,\n            height: image.height\n          };\n        } else {\n          return null;\n        }\n      }\n    }\n    if (json !== undefined && json.length > 0) {\n      loader = new ImageLoader(this.manager);\n      loader.setCrossOrigin(this.crossOrigin);\n      for (let i = 0, il = json.length; i < il; i++) {\n        const image = json[i];\n        const url = image.url;\n        if (Array.isArray(url)) {\n          // load array of images e.g CubeTexture\n\n          const imageArray = [];\n          for (let j = 0, jl = url.length; j < jl; j++) {\n            const currentUrl = url[j];\n            const deserializedImage = await deserializeImage(currentUrl);\n            if (deserializedImage !== null) {\n              if (deserializedImage instanceof HTMLImageElement) {\n                imageArray.push(deserializedImage);\n              } else {\n                // special case: handle array of data textures for cube textures\n\n                imageArray.push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height));\n              }\n            }\n          }\n          images[image.uuid] = new Source(imageArray);\n        } else {\n          // load single image\n\n          const deserializedImage = await deserializeImage(image.url);\n          images[image.uuid] = new Source(deserializedImage);\n        }\n      }\n    }\n    return images;\n  }\n  parseTextures(json, images) {\n    function parseConstant(value, type) {\n      if (typeof value === 'number') return value;\n      console.warn('THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value);\n      return type[value];\n    }\n    const textures = {};\n    if (json !== undefined) {\n      for (let i = 0, l = json.length; i < l; i++) {\n        const data = json[i];\n        if (data.image === undefined) {\n          console.warn('THREE.ObjectLoader: No \"image\" specified for', data.uuid);\n        }\n        if (images[data.image] === undefined) {\n          console.warn('THREE.ObjectLoader: Undefined image', data.image);\n        }\n        const source = images[data.image];\n        const image = source.data;\n        let texture;\n        if (Array.isArray(image)) {\n          texture = new CubeTexture();\n          if (image.length === 6) texture.needsUpdate = true;\n        } else {\n          if (image && image.data) {\n            texture = new DataTexture();\n          } else {\n            texture = new Texture();\n          }\n          if (image) texture.needsUpdate = true; // textures can have undefined image data\n        }\n        texture.source = source;\n        texture.uuid = data.uuid;\n        if (data.name !== undefined) texture.name = data.name;\n        if (data.mapping !== undefined) texture.mapping = parseConstant(data.mapping, TEXTURE_MAPPING);\n        if (data.channel !== undefined) texture.channel = data.channel;\n        if (data.offset !== undefined) texture.offset.fromArray(data.offset);\n        if (data.repeat !== undefined) texture.repeat.fromArray(data.repeat);\n        if (data.center !== undefined) texture.center.fromArray(data.center);\n        if (data.rotation !== undefined) texture.rotation = data.rotation;\n        if (data.wrap !== undefined) {\n          texture.wrapS = parseConstant(data.wrap[0], TEXTURE_WRAPPING);\n          texture.wrapT = parseConstant(data.wrap[1], TEXTURE_WRAPPING);\n        }\n        if (data.format !== undefined) texture.format = data.format;\n        if (data.internalFormat !== undefined) texture.internalFormat = data.internalFormat;\n        if (data.type !== undefined) texture.type = data.type;\n        if (data.colorSpace !== undefined) texture.colorSpace = data.colorSpace;\n        if (data.minFilter !== undefined) texture.minFilter = parseConstant(data.minFilter, TEXTURE_FILTER);\n        if (data.magFilter !== undefined) texture.magFilter = parseConstant(data.magFilter, TEXTURE_FILTER);\n        if (data.anisotropy !== undefined) texture.anisotropy = data.anisotropy;\n        if (data.flipY !== undefined) texture.flipY = data.flipY;\n        if (data.generateMipmaps !== undefined) texture.generateMipmaps = data.generateMipmaps;\n        if (data.premultiplyAlpha !== undefined) texture.premultiplyAlpha = data.premultiplyAlpha;\n        if (data.unpackAlignment !== undefined) texture.unpackAlignment = data.unpackAlignment;\n        if (data.compareFunction !== undefined) texture.compareFunction = data.compareFunction;\n        if (data.userData !== undefined) texture.userData = data.userData;\n        textures[data.uuid] = texture;\n      }\n    }\n    return textures;\n  }\n  parseObject(data, geometries, materials, textures, animations) {\n    let object;\n    function getGeometry(name) {\n      if (geometries[name] === undefined) {\n        console.warn('THREE.ObjectLoader: Undefined geometry', name);\n      }\n      return geometries[name];\n    }\n    function getMaterial(name) {\n      if (name === undefined) return undefined;\n      if (Array.isArray(name)) {\n        const array = [];\n        for (let i = 0, l = name.length; i < l; i++) {\n          const uuid = name[i];\n          if (materials[uuid] === undefined) {\n            console.warn('THREE.ObjectLoader: Undefined material', uuid);\n          }\n          array.push(materials[uuid]);\n        }\n        return array;\n      }\n      if (materials[name] === undefined) {\n        console.warn('THREE.ObjectLoader: Undefined material', name);\n      }\n      return materials[name];\n    }\n    function getTexture(uuid) {\n      if (textures[uuid] === undefined) {\n        console.warn('THREE.ObjectLoader: Undefined texture', uuid);\n      }\n      return textures[uuid];\n    }\n    let geometry, material;\n    switch (data.type) {\n      case 'Scene':\n        object = new Scene();\n        if (data.background !== undefined) {\n          if (Number.isInteger(data.background)) {\n            object.background = new Color(data.background);\n          } else {\n            object.background = getTexture(data.background);\n          }\n        }\n        if (data.environment !== undefined) {\n          object.environment = getTexture(data.environment);\n        }\n        if (data.fog !== undefined) {\n          if (data.fog.type === 'Fog') {\n            object.fog = new Fog(data.fog.color, data.fog.near, data.fog.far);\n          } else if (data.fog.type === 'FogExp2') {\n            object.fog = new FogExp2(data.fog.color, data.fog.density);\n          }\n          if (data.fog.name !== '') {\n            object.fog.name = data.fog.name;\n          }\n        }\n        if (data.backgroundBlurriness !== undefined) object.backgroundBlurriness = data.backgroundBlurriness;\n        if (data.backgroundIntensity !== undefined) object.backgroundIntensity = data.backgroundIntensity;\n        if (data.backgroundRotation !== undefined) object.backgroundRotation.fromArray(data.backgroundRotation);\n        if (data.environmentIntensity !== undefined) object.environmentIntensity = data.environmentIntensity;\n        if (data.environmentRotation !== undefined) object.environmentRotation.fromArray(data.environmentRotation);\n        break;\n      case 'PerspectiveCamera':\n        object = new PerspectiveCamera(data.fov, data.aspect, data.near, data.far);\n        if (data.focus !== undefined) object.focus = data.focus;\n        if (data.zoom !== undefined) object.zoom = data.zoom;\n        if (data.filmGauge !== undefined) object.filmGauge = data.filmGauge;\n        if (data.filmOffset !== undefined) object.filmOffset = data.filmOffset;\n        if (data.view !== undefined) object.view = Object.assign({}, data.view);\n        break;\n      case 'OrthographicCamera':\n        object = new OrthographicCamera(data.left, data.right, data.top, data.bottom, data.near, data.far);\n        if (data.zoom !== undefined) object.zoom = data.zoom;\n        if (data.view !== undefined) object.view = Object.assign({}, data.view);\n        break;\n      case 'AmbientLight':\n        object = new AmbientLight(data.color, data.intensity);\n        break;\n      case 'DirectionalLight':\n        object = new DirectionalLight(data.color, data.intensity);\n        object.target = data.target || '';\n        break;\n      case 'PointLight':\n        object = new PointLight(data.color, data.intensity, data.distance, data.decay);\n        break;\n      case 'RectAreaLight':\n        object = new RectAreaLight(data.color, data.intensity, data.width, data.height);\n        break;\n      case 'SpotLight':\n        object = new SpotLight(data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay);\n        object.target = data.target || '';\n        break;\n      case 'HemisphereLight':\n        object = new HemisphereLight(data.color, data.groundColor, data.intensity);\n        break;\n      case 'LightProbe':\n        object = new LightProbe().fromJSON(data);\n        break;\n      case 'SkinnedMesh':\n        geometry = getGeometry(data.geometry);\n        material = getMaterial(data.material);\n        object = new SkinnedMesh(geometry, material);\n        if (data.bindMode !== undefined) object.bindMode = data.bindMode;\n        if (data.bindMatrix !== undefined) object.bindMatrix.fromArray(data.bindMatrix);\n        if (data.skeleton !== undefined) object.skeleton = data.skeleton;\n        break;\n      case 'Mesh':\n        geometry = getGeometry(data.geometry);\n        material = getMaterial(data.material);\n        object = new Mesh(geometry, material);\n        break;\n      case 'InstancedMesh':\n        geometry = getGeometry(data.geometry);\n        material = getMaterial(data.material);\n        const count = data.count;\n        const instanceMatrix = data.instanceMatrix;\n        const instanceColor = data.instanceColor;\n        object = new InstancedMesh(geometry, material, count);\n        object.instanceMatrix = new InstancedBufferAttribute(new Float32Array(instanceMatrix.array), 16);\n        if (instanceColor !== undefined) object.instanceColor = new InstancedBufferAttribute(new Float32Array(instanceColor.array), instanceColor.itemSize);\n        break;\n      case 'BatchedMesh':\n        geometry = getGeometry(data.geometry);\n        material = getMaterial(data.material);\n        object = new BatchedMesh(data.maxInstanceCount, data.maxVertexCount, data.maxIndexCount, material);\n        object.geometry = geometry;\n        object.perObjectFrustumCulled = data.perObjectFrustumCulled;\n        object.sortObjects = data.sortObjects;\n        object._drawRanges = data.drawRanges;\n        object._reservedRanges = data.reservedRanges;\n        object._geometryInfo = data.geometryInfo.map(info => {\n          let box = null;\n          let sphere = null;\n          if (info.boundingBox !== undefined) {\n            box = new Box3();\n            box.min.fromArray(info.boundingBox.min);\n            box.max.fromArray(info.boundingBox.max);\n          }\n          if (info.boundingSphere !== undefined) {\n            sphere = new Sphere();\n            sphere.radius = info.boundingSphere.radius;\n            sphere.center.fromArray(info.boundingSphere.center);\n          }\n          return {\n            ...info,\n            boundingBox: box,\n            boundingSphere: sphere\n          };\n        });\n        object._instanceInfo = data.instanceInfo;\n        object._availableInstanceIds = data._availableInstanceIds;\n        object._availableGeometryIds = data._availableGeometryIds;\n        object._nextIndexStart = data.nextIndexStart;\n        object._nextVertexStart = data.nextVertexStart;\n        object._geometryCount = data.geometryCount;\n        object._maxInstanceCount = data.maxInstanceCount;\n        object._maxVertexCount = data.maxVertexCount;\n        object._maxIndexCount = data.maxIndexCount;\n        object._geometryInitialized = data.geometryInitialized;\n        object._matricesTexture = getTexture(data.matricesTexture.uuid);\n        object._indirectTexture = getTexture(data.indirectTexture.uuid);\n        if (data.colorsTexture !== undefined) {\n          object._colorsTexture = getTexture(data.colorsTexture.uuid);\n        }\n        if (data.boundingSphere !== undefined) {\n          object.boundingSphere = new Sphere();\n          object.boundingSphere.center.fromArray(data.boundingSphere.center);\n          object.boundingSphere.radius = data.boundingSphere.radius;\n        }\n        if (data.boundingBox !== undefined) {\n          object.boundingBox = new Box3();\n          object.boundingBox.min.fromArray(data.boundingBox.min);\n          object.boundingBox.max.fromArray(data.boundingBox.max);\n        }\n        break;\n      case 'LOD':\n        object = new LOD();\n        break;\n      case 'Line':\n        object = new Line(getGeometry(data.geometry), getMaterial(data.material));\n        break;\n      case 'LineLoop':\n        object = new LineLoop(getGeometry(data.geometry), getMaterial(data.material));\n        break;\n      case 'LineSegments':\n        object = new LineSegments(getGeometry(data.geometry), getMaterial(data.material));\n        break;\n      case 'PointCloud':\n      case 'Points':\n        object = new Points(getGeometry(data.geometry), getMaterial(data.material));\n        break;\n      case 'Sprite':\n        object = new Sprite(getMaterial(data.material));\n        break;\n      case 'Group':\n        object = new Group();\n        break;\n      case 'Bone':\n        object = new Bone();\n        break;\n      default:\n        object = new Object3D();\n    }\n    object.uuid = data.uuid;\n    if (data.name !== undefined) object.name = data.name;\n    if (data.matrix !== undefined) {\n      object.matrix.fromArray(data.matrix);\n      if (data.matrixAutoUpdate !== undefined) object.matrixAutoUpdate = data.matrixAutoUpdate;\n      if (object.matrixAutoUpdate) object.matrix.decompose(object.position, object.quaternion, object.scale);\n    } else {\n      if (data.position !== undefined) object.position.fromArray(data.position);\n      if (data.rotation !== undefined) object.rotation.fromArray(data.rotation);\n      if (data.quaternion !== undefined) object.quaternion.fromArray(data.quaternion);\n      if (data.scale !== undefined) object.scale.fromArray(data.scale);\n    }\n    if (data.up !== undefined) object.up.fromArray(data.up);\n    if (data.castShadow !== undefined) object.castShadow = data.castShadow;\n    if (data.receiveShadow !== undefined) object.receiveShadow = data.receiveShadow;\n    if (data.shadow) {\n      if (data.shadow.intensity !== undefined) object.shadow.intensity = data.shadow.intensity;\n      if (data.shadow.bias !== undefined) object.shadow.bias = data.shadow.bias;\n      if (data.shadow.normalBias !== undefined) object.shadow.normalBias = data.shadow.normalBias;\n      if (data.shadow.radius !== undefined) object.shadow.radius = data.shadow.radius;\n      if (data.shadow.mapSize !== undefined) object.shadow.mapSize.fromArray(data.shadow.mapSize);\n      if (data.shadow.camera !== undefined) object.shadow.camera = this.parseObject(data.shadow.camera);\n    }\n    if (data.visible !== undefined) object.visible = data.visible;\n    if (data.frustumCulled !== undefined) object.frustumCulled = data.frustumCulled;\n    if (data.renderOrder !== undefined) object.renderOrder = data.renderOrder;\n    if (data.userData !== undefined) object.userData = data.userData;\n    if (data.layers !== undefined) object.layers.mask = data.layers;\n    if (data.children !== undefined) {\n      const children = data.children;\n      for (let i = 0; i < children.length; i++) {\n        object.add(this.parseObject(children[i], geometries, materials, textures, animations));\n      }\n    }\n    if (data.animations !== undefined) {\n      const objectAnimations = data.animations;\n      for (let i = 0; i < objectAnimations.length; i++) {\n        const uuid = objectAnimations[i];\n        object.animations.push(animations[uuid]);\n      }\n    }\n    if (data.type === 'LOD') {\n      if (data.autoUpdate !== undefined) object.autoUpdate = data.autoUpdate;\n      const levels = data.levels;\n      for (let l = 0; l < levels.length; l++) {\n        const level = levels[l];\n        const child = object.getObjectByProperty('uuid', level.object);\n        if (child !== undefined) {\n          object.addLevel(child, level.distance, level.hysteresis);\n        }\n      }\n    }\n    return object;\n  }\n  bindSkeletons(object, skeletons) {\n    if (Object.keys(skeletons).length === 0) return;\n    object.traverse(function (child) {\n      if (child.isSkinnedMesh === true && child.skeleton !== undefined) {\n        const skeleton = skeletons[child.skeleton];\n        if (skeleton === undefined) {\n          console.warn('THREE.ObjectLoader: No skeleton found with UUID:', child.skeleton);\n        } else {\n          child.bind(skeleton, child.bindMatrix);\n        }\n      }\n    });\n  }\n  bindLightTargets(object) {\n    object.traverse(function (child) {\n      if (child.isDirectionalLight || child.isSpotLight) {\n        const uuid = child.target;\n        const target = object.getObjectByProperty('uuid', uuid);\n        if (target !== undefined) {\n          child.target = target;\n        } else {\n          child.target = new Object3D();\n        }\n      }\n    });\n  }\n}\nconst TEXTURE_MAPPING = {\n  UVMapping: UVMapping,\n  CubeReflectionMapping: CubeReflectionMapping,\n  CubeRefractionMapping: CubeRefractionMapping,\n  EquirectangularReflectionMapping: EquirectangularReflectionMapping,\n  EquirectangularRefractionMapping: EquirectangularRefractionMapping,\n  CubeUVReflectionMapping: CubeUVReflectionMapping\n};\nconst TEXTURE_WRAPPING = {\n  RepeatWrapping: RepeatWrapping,\n  ClampToEdgeWrapping: ClampToEdgeWrapping,\n  MirroredRepeatWrapping: MirroredRepeatWrapping\n};\nconst TEXTURE_FILTER = {\n  NearestFilter: NearestFilter,\n  NearestMipmapNearestFilter: NearestMipmapNearestFilter,\n  NearestMipmapLinearFilter: NearestMipmapLinearFilter,\n  LinearFilter: LinearFilter,\n  LinearMipmapNearestFilter: LinearMipmapNearestFilter,\n  LinearMipmapLinearFilter: LinearMipmapLinearFilter\n};\n\n/**\n * A loader for loading images as an [ImageBitmap]{@link https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap}.\n * An `ImageBitmap` provides an asynchronous and resource efficient pathway to prepare\n * textures for rendering.\n *\n * Note that {@link Texture#flipY} and {@link Texture#premultiplyAlpha} are ignored with image bitmaps.\n * They needs these configuration on bitmap creation unlike regular images need them on uploading to GPU.\n *\n * You need to set the equivalent options via {@link ImageBitmapLoader#setOptions} instead.\n *\n * Also note that unlike {@link FileLoader}, this loader does not avoid multiple concurrent requests to the same URL.\n *\n * ```js\n * const loader = new THREE.ImageBitmapLoader();\n * loader.setOptions( { imageOrientation: 'flipY' } ); // set options if needed\n * const imageBitmap = await loader.loadAsync( 'image.png' );\n *\n * const texture = new THREE.Texture( imageBitmap );\n * texture.needsUpdate = true;\n * ```\n *\n * @augments Loader\n */\nclass ImageBitmapLoader extends Loader {\n  /**\n   * Constructs a new image bitmap loader.\n   *\n   * @param {LoadingManager} [manager] - The loading manager.\n   */\n  constructor(manager) {\n    super(manager);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isImageBitmapLoader = true;\n    if (typeof createImageBitmap === 'undefined') {\n      console.warn('THREE.ImageBitmapLoader: createImageBitmap() not supported.');\n    }\n    if (typeof fetch === 'undefined') {\n      console.warn('THREE.ImageBitmapLoader: fetch() not supported.');\n    }\n\n    /**\n     * Represents the loader options.\n     *\n     * @type {Object}\n     * @default {premultiplyAlpha:'none'}\n     */\n    this.options = {\n      premultiplyAlpha: 'none'\n    };\n  }\n\n  /**\n   * Sets the given loader options. The structure of the object must match the `options` parameter of\n   * [createImageBitmap]{@link https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap}.\n   *\n   * @param {Object} options - The loader options to set.\n   * @return {ImageBitmapLoader} A reference to this image bitmap loader.\n   */\n  setOptions(options) {\n    this.options = options;\n    return this;\n  }\n\n  /**\n   * Starts loading from the given URL and pass the loaded image bitmap to the `onLoad()` callback.\n   *\n   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n   * @param {function(ImageBitmap)} onLoad - Executed when the loading process has been finished.\n   * @param {onProgressCallback} onProgress - Unsupported in this loader.\n   * @param {onErrorCallback} onError - Executed when errors occur.\n   * @return {ImageBitmap|undefined} The image bitmap.\n   */\n  load(url, onLoad, onProgress, onError) {\n    if (url === undefined) url = '';\n    if (this.path !== undefined) url = this.path + url;\n    url = this.manager.resolveURL(url);\n    const scope = this;\n    const cached = Cache.get(url);\n    if (cached !== undefined) {\n      scope.manager.itemStart(url);\n\n      // If cached is a promise, wait for it to resolve\n      if (cached.then) {\n        cached.then(imageBitmap => {\n          if (onLoad) onLoad(imageBitmap);\n          scope.manager.itemEnd(url);\n        }).catch(e => {\n          if (onError) onError(e);\n        });\n        return;\n      }\n\n      // If cached is not a promise (i.e., it's already an imageBitmap)\n      setTimeout(function () {\n        if (onLoad) onLoad(cached);\n        scope.manager.itemEnd(url);\n      }, 0);\n      return cached;\n    }\n    const fetchOptions = {};\n    fetchOptions.credentials = this.crossOrigin === 'anonymous' ? 'same-origin' : 'include';\n    fetchOptions.headers = this.requestHeader;\n    const promise = fetch(url, fetchOptions).then(function (res) {\n      return res.blob();\n    }).then(function (blob) {\n      return createImageBitmap(blob, Object.assign(scope.options, {\n        colorSpaceConversion: 'none'\n      }));\n    }).then(function (imageBitmap) {\n      Cache.add(url, imageBitmap);\n      if (onLoad) onLoad(imageBitmap);\n      scope.manager.itemEnd(url);\n      return imageBitmap;\n    }).catch(function (e) {\n      if (onError) onError(e);\n      Cache.remove(url);\n      scope.manager.itemError(url);\n      scope.manager.itemEnd(url);\n    });\n    Cache.add(url, promise);\n    scope.manager.itemStart(url);\n  }\n}\nlet _context;\n\n/**\n * Manages the global audio context in the engine.\n *\n * @hideconstructor\n */\nclass AudioContext {\n  /**\n   * Returns the global native audio context.\n   *\n   * @return {AudioContext} The native audio context.\n   */\n  static getContext() {\n    if (_context === undefined) {\n      _context = new (window.AudioContext || window.webkitAudioContext)();\n    }\n    return _context;\n  }\n\n  /**\n   * Allows to set the global native audio context from outside.\n   *\n   * @param {AudioContext} value - The native context to set.\n   */\n  static setContext(value) {\n    _context = value;\n  }\n}\n\n/**\n * Class for loading audio buffers. Audios are internally\n * loaded via {@link FileLoader}.\n *\n * ```js\n * const audioListener = new THREE.AudioListener();\n * const ambientSound = new THREE.Audio( audioListener );\n *\n * const loader = new THREE.AudioLoader();\n * const audioBuffer = await loader.loadAsync( 'audio/ambient_ocean.ogg' );\n *\n * ambientSound.setBuffer( audioBuffer );\n * ambientSound.play();\n * ```\n *\n * @augments Loader\n */\nclass AudioLoader extends Loader {\n  /**\n   * Constructs a new audio loader.\n   *\n   * @param {LoadingManager} [manager] - The loading manager.\n   */\n  constructor(manager) {\n    super(manager);\n  }\n\n  /**\n   * Starts loading from the given URL and passes the loaded audio buffer\n   * to the `onLoad()` callback.\n   *\n   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n   * @param {function(AudioBuffer)} onLoad - Executed when the loading process has been finished.\n   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n   * @param {onErrorCallback} onError - Executed when errors occur.\n   */\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setResponseType('arraybuffer');\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (buffer) {\n      try {\n        // Create a copy of the buffer. The `decodeAudioData` method\n        // detaches the buffer when complete, preventing reuse.\n        const bufferCopy = buffer.slice(0);\n        const context = AudioContext.getContext();\n        context.decodeAudioData(bufferCopy, function (audioBuffer) {\n          onLoad(audioBuffer);\n        }).catch(handleError);\n      } catch (e) {\n        handleError(e);\n      }\n    }, onProgress, onError);\n    function handleError(e) {\n      if (onError) {\n        onError(e);\n      } else {\n        console.error(e);\n      }\n      scope.manager.itemError(url);\n    }\n  }\n}\nconst _eyeRight = /*@__PURE__*/new Matrix4();\nconst _eyeLeft = /*@__PURE__*/new Matrix4();\nconst _projectionMatrix = /*@__PURE__*/new Matrix4();\n\n/**\n * A special type of camera that uses two perspective cameras with\n * stereoscopic projection. Can be used for rendering stereo effects\n * like [3D Anaglyph]{@link https://en.wikipedia.org/wiki/Anaglyph_3D} or\n * [Parallax Barrier]{@link https://en.wikipedia.org/wiki/parallax_barrier}.\n */\nclass StereoCamera {\n  /**\n   * Constructs a new stereo camera.\n   */\n  constructor() {\n    /**\n     * The type property is used for detecting the object type\n     * in context of serialization/deserialization.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.type = 'StereoCamera';\n\n    /**\n     * The aspect.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.aspect = 1;\n\n    /**\n     * The eye separation which represents the distance\n     * between the left and right camera.\n     *\n     * @type {number}\n     * @default 0.064\n     */\n    this.eyeSep = 0.064;\n\n    /**\n     * The camera representing the left eye. This is added to layer `1` so objects to be\n     * rendered by the left camera must also be added to this layer.\n     *\n     * @type {PerspectiveCamera}\n     */\n    this.cameraL = new PerspectiveCamera();\n    this.cameraL.layers.enable(1);\n    this.cameraL.matrixAutoUpdate = false;\n\n    /**\n     * The camera representing the right eye. This is added to layer `2` so objects to be\n     * rendered by the right camera must also be added to this layer.\n     *\n     * @type {PerspectiveCamera}\n     */\n    this.cameraR = new PerspectiveCamera();\n    this.cameraR.layers.enable(2);\n    this.cameraR.matrixAutoUpdate = false;\n    this._cache = {\n      focus: null,\n      fov: null,\n      aspect: null,\n      near: null,\n      far: null,\n      zoom: null,\n      eyeSep: null\n    };\n  }\n\n  /**\n   * Updates the stereo camera based on the given perspective camera.\n   *\n   * @param {PerspectiveCamera} camera - The perspective camera.\n   */\n  update(camera) {\n    const cache = this._cache;\n    const needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov || cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near || cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n    if (needsUpdate) {\n      cache.focus = camera.focus;\n      cache.fov = camera.fov;\n      cache.aspect = camera.aspect * this.aspect;\n      cache.near = camera.near;\n      cache.far = camera.far;\n      cache.zoom = camera.zoom;\n      cache.eyeSep = this.eyeSep;\n\n      // Off-axis stereoscopic effect based on\n      // http://paulbourke.net/stereographics/stereorender/\n\n      _projectionMatrix.copy(camera.projectionMatrix);\n      const eyeSepHalf = cache.eyeSep / 2;\n      const eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n      const ymax = cache.near * Math.tan(DEG2RAD * cache.fov * 0.5) / cache.zoom;\n      let xmin, xmax;\n\n      // translate xOffset\n\n      _eyeLeft.elements[12] = -eyeSepHalf;\n      _eyeRight.elements[12] = eyeSepHalf;\n\n      // for left eye\n\n      xmin = -ymax * cache.aspect + eyeSepOnProjection;\n      xmax = ymax * cache.aspect + eyeSepOnProjection;\n      _projectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);\n      _projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n      this.cameraL.projectionMatrix.copy(_projectionMatrix);\n\n      // for right eye\n\n      xmin = -ymax * cache.aspect - eyeSepOnProjection;\n      xmax = ymax * cache.aspect - eyeSepOnProjection;\n      _projectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);\n      _projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n      this.cameraR.projectionMatrix.copy(_projectionMatrix);\n    }\n    this.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(_eyeLeft);\n    this.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(_eyeRight);\n  }\n}\n\n/**\n * This type of camera can be used in order to efficiently render a scene with a\n * predefined set of cameras. This is an important performance aspect for\n * rendering VR scenes.\n *\n * An instance of `ArrayCamera` always has an array of sub cameras. It's mandatory\n * to define for each sub camera the `viewport` property which determines the\n * part of the viewport that is rendered with this camera.\n *\n * @augments PerspectiveCamera\n */\nclass ArrayCamera extends PerspectiveCamera {\n  /**\n   * Constructs a new array camera.\n   *\n   * @param {Array<PerspectiveCamera>} [array=[]] - An array of perspective sub cameras.\n   */\n  constructor() {\n    let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isArrayCamera = true;\n\n    /**\n     * Whether this camera is used with multiview rendering or not.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default false\n     */\n    this.isMultiViewCamera = false;\n\n    /**\n     * An array of perspective sub cameras.\n     *\n     * @type {Array<PerspectiveCamera>}\n     */\n    this.cameras = array;\n  }\n}\n\n/**\n * Class for keeping track of time.\n */\nclass Clock {\n  /**\n   * Constructs a new clock.\n   *\n   * @param {boolean} [autoStart=true] - Whether to automatically start the clock when\n   * `getDelta()` is called for the first time.\n   */\n  constructor() {\n    let autoStart = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    /**\n     * If set to `true`, the clock starts automatically when `getDelta()` is called\n     * for the first time.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.autoStart = autoStart;\n\n    /**\n     * Holds the time at which the clock's `start()` method was last called.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.startTime = 0;\n\n    /**\n     * Holds the time at which the clock's `start()`, `getElapsedTime()` or\n     * `getDelta()` methods were last called.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.oldTime = 0;\n\n    /**\n     * Keeps track of the total time that the clock has been running.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.elapsedTime = 0;\n\n    /**\n     * Whether the clock is running or not.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.running = false;\n  }\n\n  /**\n   * Starts the clock. When `autoStart` is set to `true`, the method is automatically\n   * called by the class.\n   */\n  start() {\n    this.startTime = now();\n    this.oldTime = this.startTime;\n    this.elapsedTime = 0;\n    this.running = true;\n  }\n\n  /**\n   * Stops the clock.\n   */\n  stop() {\n    this.getElapsedTime();\n    this.running = false;\n    this.autoStart = false;\n  }\n\n  /**\n   * Returns the elapsed time in seconds.\n   *\n   * @return {number} The elapsed time.\n   */\n  getElapsedTime() {\n    this.getDelta();\n    return this.elapsedTime;\n  }\n\n  /**\n   * Returns the delta time in seconds.\n   *\n   * @return {number} The delta time.\n   */\n  getDelta() {\n    let diff = 0;\n    if (this.autoStart && !this.running) {\n      this.start();\n      return 0;\n    }\n    if (this.running) {\n      const newTime = now();\n      diff = (newTime - this.oldTime) / 1000;\n      this.oldTime = newTime;\n      this.elapsedTime += diff;\n    }\n    return diff;\n  }\n}\nfunction now() {\n  return performance.now();\n}\nconst _position$1 = /*@__PURE__*/new Vector3();\nconst _quaternion$1 = /*@__PURE__*/new Quaternion();\nconst _scale$1 = /*@__PURE__*/new Vector3();\nconst _orientation$1 = /*@__PURE__*/new Vector3();\n\n/**\n * The class represents a virtual listener of the all positional and non-positional audio effects\n * in the scene. A three.js application usually creates a single listener. It is a mandatory\n * constructor parameter for audios entities like {@link Audio} and {@link PositionalAudio}.\n *\n * In most cases, the listener object is a child of the camera. So the 3D transformation of the\n * camera represents the 3D transformation of the listener.\n *\n * @augments Object3D\n */\nclass AudioListener extends Object3D {\n  /**\n   * Constructs a new audio listener.\n   */\n  constructor() {\n    super();\n    this.type = 'AudioListener';\n\n    /**\n     * The native audio context.\n     *\n     * @type {AudioContext}\n     * @readonly\n     */\n    this.context = AudioContext.getContext();\n\n    /**\n     * The gain node used for volume control.\n     *\n     * @type {GainNode}\n     * @readonly\n     */\n    this.gain = this.context.createGain();\n    this.gain.connect(this.context.destination);\n\n    /**\n     * An optional filter.\n     *\n     * Defined via {@link AudioListener#setFilter}.\n     *\n     * @type {?AudioNode}\n     * @default null\n     * @readonly\n     */\n    this.filter = null;\n\n    /**\n     * Time delta values required for `linearRampToValueAtTime()` usage.\n     *\n     * @type {number}\n     * @default 0\n     * @readonly\n     */\n    this.timeDelta = 0;\n\n    // private\n\n    this._clock = new Clock();\n  }\n\n  /**\n   * Returns the listener's input node.\n   *\n   * This method is used by other audio nodes to connect to this listener.\n   *\n   * @return {GainNode} The input node.\n   */\n  getInput() {\n    return this.gain;\n  }\n\n  /**\n   * Removes the current filter from this listener.\n   *\n   * @return {AudioListener} A reference to this listener.\n   */\n  removeFilter() {\n    if (this.filter !== null) {\n      this.gain.disconnect(this.filter);\n      this.filter.disconnect(this.context.destination);\n      this.gain.connect(this.context.destination);\n      this.filter = null;\n    }\n    return this;\n  }\n\n  /**\n   * Returns the current set filter.\n   *\n   * @return {?AudioNode} The filter.\n   */\n  getFilter() {\n    return this.filter;\n  }\n\n  /**\n   * Sets the given filter to this listener.\n   *\n   * @param {AudioNode} value - The filter to set.\n   * @return {AudioListener} A reference to this listener.\n   */\n  setFilter(value) {\n    if (this.filter !== null) {\n      this.gain.disconnect(this.filter);\n      this.filter.disconnect(this.context.destination);\n    } else {\n      this.gain.disconnect(this.context.destination);\n    }\n    this.filter = value;\n    this.gain.connect(this.filter);\n    this.filter.connect(this.context.destination);\n    return this;\n  }\n\n  /**\n   * Returns the applications master volume.\n   *\n   * @return {number} The master volume.\n   */\n  getMasterVolume() {\n    return this.gain.gain.value;\n  }\n\n  /**\n   * Sets the applications master volume. This volume setting affects\n   * all audio nodes in the scene.\n   *\n   * @param {number} value - The master volume to set.\n   * @return {AudioListener} A reference to this listener.\n   */\n  setMasterVolume(value) {\n    this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);\n    return this;\n  }\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    const listener = this.context.listener;\n    const up = this.up;\n    this.timeDelta = this._clock.getDelta();\n    this.matrixWorld.decompose(_position$1, _quaternion$1, _scale$1);\n    _orientation$1.set(0, 0, -1).applyQuaternion(_quaternion$1);\n    if (listener.positionX) {\n      // code path for Chrome (see #14393)\n\n      const endTime = this.context.currentTime + this.timeDelta;\n      listener.positionX.linearRampToValueAtTime(_position$1.x, endTime);\n      listener.positionY.linearRampToValueAtTime(_position$1.y, endTime);\n      listener.positionZ.linearRampToValueAtTime(_position$1.z, endTime);\n      listener.forwardX.linearRampToValueAtTime(_orientation$1.x, endTime);\n      listener.forwardY.linearRampToValueAtTime(_orientation$1.y, endTime);\n      listener.forwardZ.linearRampToValueAtTime(_orientation$1.z, endTime);\n      listener.upX.linearRampToValueAtTime(up.x, endTime);\n      listener.upY.linearRampToValueAtTime(up.y, endTime);\n      listener.upZ.linearRampToValueAtTime(up.z, endTime);\n    } else {\n      listener.setPosition(_position$1.x, _position$1.y, _position$1.z);\n      listener.setOrientation(_orientation$1.x, _orientation$1.y, _orientation$1.z, up.x, up.y, up.z);\n    }\n  }\n}\n\n/**\n * Represents a non-positional ( global ) audio object.\n *\n * This and related audio modules make use of the [Web Audio API]{@link https://www.w3.org/TR/webaudio-1.1/}.\n *\n * ```js\n * // create an AudioListener and add it to the camera\n * const listener = new THREE.AudioListener();\n * camera.add( listener );\n *\n * // create a global audio source\n * const sound = new THREE.Audio( listener );\n *\n * // load a sound and set it as the Audio object's buffer\n * const audioLoader = new THREE.AudioLoader();\n * audioLoader.load( 'sounds/ambient.ogg', function( buffer ) {\n * \tsound.setBuffer( buffer );\n * \tsound.setLoop( true );\n * \tsound.setVolume( 0.5 );\n * \tsound.play();\n * });\n * ```\n *\n * @augments Object3D\n */\nclass Audio extends Object3D {\n  /**\n   * Constructs a new audio.\n   *\n   * @param {AudioListener} listener - The global audio listener.\n   */\n  constructor(listener) {\n    super();\n    this.type = 'Audio';\n\n    /**\n     * The global audio listener.\n     *\n     * @type {AudioListener}\n     * @readonly\n     */\n    this.listener = listener;\n\n    /**\n     * The audio context.\n     *\n     * @type {AudioContext}\n     * @readonly\n     */\n    this.context = listener.context;\n\n    /**\n     * The gain node used for volume control.\n     *\n     * @type {GainNode}\n     * @readonly\n     */\n    this.gain = this.context.createGain();\n    this.gain.connect(listener.getInput());\n\n    /**\n     * Whether to start playback automatically or not.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.autoplay = false;\n\n    /**\n     * A reference to an audio buffer.\n     *\n     * Defined via {@link Audio#setBuffer}.\n     *\n     * @type {?AudioBuffer}\n     * @default null\n     * @readonly\n     */\n    this.buffer = null;\n\n    /**\n     * Modify pitch, measured in cents. +/- 100 is a semitone.\n     * +/- 1200 is an octave.\n     *\n     * Defined via {@link Audio#setDetune}.\n     *\n     * @type {number}\n     * @default 0\n     * @readonly\n     */\n    this.detune = 0;\n\n    /**\n     * Whether the audio should loop or not.\n     *\n     * Defined via {@link Audio#setLoop}.\n     *\n     * @type {boolean}\n     * @default false\n     * @readonly\n     */\n    this.loop = false;\n\n    /**\n     * Defines where in the audio buffer the replay should\n     * start, in seconds.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.loopStart = 0;\n\n    /**\n     * Defines where in the audio buffer the replay should\n     * stop, in seconds.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.loopEnd = 0;\n\n    /**\n     * An offset to the time within the audio buffer the playback\n     * should begin, in seconds.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.offset = 0;\n\n    /**\n     * Overrides the default duration of the audio.\n     *\n     * @type {undefined|number}\n     * @default undefined\n     */\n    this.duration = undefined;\n\n    /**\n     * The playback speed.\n     *\n     * Defined via {@link Audio#setPlaybackRate}.\n     *\n     * @type {number}\n     * @readonly\n     * @default 1\n     */\n    this.playbackRate = 1;\n\n    /**\n     * Indicates whether the audio is playing or not.\n     *\n     * This flag will be automatically set when using {@link Audio#play},\n     * {@link Audio#pause}, {@link Audio#stop}.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default false\n     */\n    this.isPlaying = false;\n\n    /**\n     * Indicates whether the audio playback can be controlled\n     * with method like {@link Audio#play} or {@link Audio#pause}.\n     *\n     * This flag will be automatically set when audio sources are\n     * defined.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.hasPlaybackControl = true;\n\n    /**\n     * Holds a reference to the current audio source.\n     *\n     * The property is automatically by one of the `set*()` methods.\n     *\n     * @type {?AudioNode}\n     * @readonly\n     * @default null\n     */\n    this.source = null;\n\n    /**\n     * Defines the source type.\n     *\n     * The property is automatically by one of the `set*()` methods.\n     *\n     * @type {('empty'|'audioNode'|'mediaNode'|'mediaStreamNode'|'buffer')}\n     * @readonly\n     * @default 'empty'\n     */\n    this.sourceType = 'empty';\n    this._startedAt = 0;\n    this._progress = 0;\n    this._connected = false;\n\n    /**\n     * Can be used to apply a variety of low-order filters to create\n     * more complex sound effects e.g. via `BiquadFilterNode`.\n     *\n     * The property is automatically set by {@link Audio#setFilters}.\n     *\n     * @type {Array<AudioNode>}\n     * @readonly\n     */\n    this.filters = [];\n  }\n\n  /**\n   * Returns the output audio node.\n   *\n   * @return {GainNode} The output node.\n   */\n  getOutput() {\n    return this.gain;\n  }\n\n  /**\n   * Sets the given audio node as the source of this instance.\n   *\n   * {@link Audio#sourceType} is set to `audioNode` and {@link Audio#hasPlaybackControl} to `false`.\n   *\n   * @param {AudioNode} audioNode - The audio node like an instance of `OscillatorNode`.\n   * @return {Audio} A reference to this instance.\n   */\n  setNodeSource(audioNode) {\n    this.hasPlaybackControl = false;\n    this.sourceType = 'audioNode';\n    this.source = audioNode;\n    this.connect();\n    return this;\n  }\n\n  /**\n   * Sets the given media element as the source of this instance.\n   *\n   * {@link Audio#sourceType} is set to `mediaNode` and {@link Audio#hasPlaybackControl} to `false`.\n   *\n   * @param {HTMLMediaElement} mediaElement - The media element.\n   * @return {Audio} A reference to this instance.\n   */\n  setMediaElementSource(mediaElement) {\n    this.hasPlaybackControl = false;\n    this.sourceType = 'mediaNode';\n    this.source = this.context.createMediaElementSource(mediaElement);\n    this.connect();\n    return this;\n  }\n\n  /**\n   * Sets the given media stream as the source of this instance.\n   *\n   * {@link Audio#sourceType} is set to `mediaStreamNode` and {@link Audio#hasPlaybackControl} to `false`.\n   *\n   * @param {MediaStream} mediaStream - The media stream.\n   * @return {Audio} A reference to this instance.\n   */\n  setMediaStreamSource(mediaStream) {\n    this.hasPlaybackControl = false;\n    this.sourceType = 'mediaStreamNode';\n    this.source = this.context.createMediaStreamSource(mediaStream);\n    this.connect();\n    return this;\n  }\n\n  /**\n   * Sets the given audio buffer as the source of this instance.\n   *\n   * {@link Audio#sourceType} is set to `buffer` and {@link Audio#hasPlaybackControl} to `true`.\n   *\n   * @param {AudioBuffer} audioBuffer - The audio buffer.\n   * @return {Audio} A reference to this instance.\n   */\n  setBuffer(audioBuffer) {\n    this.buffer = audioBuffer;\n    this.sourceType = 'buffer';\n    if (this.autoplay) this.play();\n    return this;\n  }\n\n  /**\n   * Starts the playback of the audio.\n   *\n   * Can only be used with compatible audio sources that allow playback control.\n   *\n   * @param {number} [delay=0] - The delay, in seconds, at which the audio should start playing.\n   * @return {Audio|undefined} A reference to this instance.\n   */\n  play() {\n    let delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    if (this.isPlaying === true) {\n      console.warn('THREE.Audio: Audio is already playing.');\n      return;\n    }\n    if (this.hasPlaybackControl === false) {\n      console.warn('THREE.Audio: this Audio has no playback control.');\n      return;\n    }\n    this._startedAt = this.context.currentTime + delay;\n    const source = this.context.createBufferSource();\n    source.buffer = this.buffer;\n    source.loop = this.loop;\n    source.loopStart = this.loopStart;\n    source.loopEnd = this.loopEnd;\n    source.onended = this.onEnded.bind(this);\n    source.start(this._startedAt, this._progress + this.offset, this.duration);\n    this.isPlaying = true;\n    this.source = source;\n    this.setDetune(this.detune);\n    this.setPlaybackRate(this.playbackRate);\n    return this.connect();\n  }\n\n  /**\n   * Pauses the playback of the audio.\n   *\n   * Can only be used with compatible audio sources that allow playback control.\n   *\n   * @return {Audio|undefined} A reference to this instance.\n   */\n  pause() {\n    if (this.hasPlaybackControl === false) {\n      console.warn('THREE.Audio: this Audio has no playback control.');\n      return;\n    }\n    if (this.isPlaying === true) {\n      // update current progress\n\n      this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;\n      if (this.loop === true) {\n        // ensure _progress does not exceed duration with looped audios\n\n        this._progress = this._progress % (this.duration || this.buffer.duration);\n      }\n      this.source.stop();\n      this.source.onended = null;\n      this.isPlaying = false;\n    }\n    return this;\n  }\n\n  /**\n   * Stops the playback of the audio.\n   *\n   * Can only be used with compatible audio sources that allow playback control.\n   *\n   * @param {number} [delay=0] - The delay, in seconds, at which the audio should stop playing.\n   * @return {Audio|undefined} A reference to this instance.\n   */\n  stop() {\n    let delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    if (this.hasPlaybackControl === false) {\n      console.warn('THREE.Audio: this Audio has no playback control.');\n      return;\n    }\n    this._progress = 0;\n    if (this.source !== null) {\n      this.source.stop(this.context.currentTime + delay);\n      this.source.onended = null;\n    }\n    this.isPlaying = false;\n    return this;\n  }\n\n  /**\n   * Connects to the audio source. This is used internally on\n   * initialisation and when setting / removing filters.\n   *\n   * @return {Audio} A reference to this instance.\n   */\n  connect() {\n    if (this.filters.length > 0) {\n      this.source.connect(this.filters[0]);\n      for (let i = 1, l = this.filters.length; i < l; i++) {\n        this.filters[i - 1].connect(this.filters[i]);\n      }\n      this.filters[this.filters.length - 1].connect(this.getOutput());\n    } else {\n      this.source.connect(this.getOutput());\n    }\n    this._connected = true;\n    return this;\n  }\n\n  /**\n   * Disconnects to the audio source. This is used internally on\n   * initialisation and when setting / removing filters.\n   *\n   * @return {Audio|undefined} A reference to this instance.\n   */\n  disconnect() {\n    if (this._connected === false) {\n      return;\n    }\n    if (this.filters.length > 0) {\n      this.source.disconnect(this.filters[0]);\n      for (let i = 1, l = this.filters.length; i < l; i++) {\n        this.filters[i - 1].disconnect(this.filters[i]);\n      }\n      this.filters[this.filters.length - 1].disconnect(this.getOutput());\n    } else {\n      this.source.disconnect(this.getOutput());\n    }\n    this._connected = false;\n    return this;\n  }\n\n  /**\n   * Returns the current set filters.\n   *\n   * @return {Array<AudioNode>} The list of filters.\n   */\n  getFilters() {\n    return this.filters;\n  }\n\n  /**\n   * Sets an array of filters and connects them with the audio source.\n   *\n   * @param {Array<AudioNode>} [value] - A list of filters.\n   * @return {Audio} A reference to this instance.\n   */\n  setFilters(value) {\n    if (!value) value = [];\n    if (this._connected === true) {\n      this.disconnect();\n      this.filters = value.slice();\n      this.connect();\n    } else {\n      this.filters = value.slice();\n    }\n    return this;\n  }\n\n  /**\n   * Defines the detuning of oscillation in cents.\n   *\n   * @param {number} value - The detuning of oscillation in cents.\n   * @return {Audio} A reference to this instance.\n   */\n  setDetune(value) {\n    this.detune = value;\n    if (this.isPlaying === true && this.source.detune !== undefined) {\n      this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01);\n    }\n    return this;\n  }\n\n  /**\n   * Returns the detuning of oscillation in cents.\n   *\n   * @return {number} The detuning of oscillation in cents.\n   */\n  getDetune() {\n    return this.detune;\n  }\n\n  /**\n   * Returns the first filter in the list of filters.\n   *\n   * @return {AudioNode|undefined} The first filter in the list of filters.\n   */\n  getFilter() {\n    return this.getFilters()[0];\n  }\n\n  /**\n   * Applies a single filter node to the audio.\n   *\n   * @param {AudioNode} [filter] - The filter to set.\n   * @return {Audio} A reference to this instance.\n   */\n  setFilter(filter) {\n    return this.setFilters(filter ? [filter] : []);\n  }\n\n  /**\n   * Sets the playback rate.\n   *\n   * Can only be used with compatible audio sources that allow playback control.\n   *\n   * @param {number} [value] - The playback rate to set.\n   * @return {Audio|undefined} A reference to this instance.\n   */\n  setPlaybackRate(value) {\n    if (this.hasPlaybackControl === false) {\n      console.warn('THREE.Audio: this Audio has no playback control.');\n      return;\n    }\n    this.playbackRate = value;\n    if (this.isPlaying === true) {\n      this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01);\n    }\n    return this;\n  }\n\n  /**\n   * Returns the current playback rate.\n  \t * @return {number} The playback rate.\n   */\n  getPlaybackRate() {\n    return this.playbackRate;\n  }\n\n  /**\n   * Automatically called when playback finished.\n   */\n  onEnded() {\n    this.isPlaying = false;\n    this._progress = 0;\n  }\n\n  /**\n   * Returns the loop flag.\n   *\n   * Can only be used with compatible audio sources that allow playback control.\n   *\n   * @return {boolean} Whether the audio should loop or not.\n   */\n  getLoop() {\n    if (this.hasPlaybackControl === false) {\n      console.warn('THREE.Audio: this Audio has no playback control.');\n      return false;\n    }\n    return this.loop;\n  }\n\n  /**\n   * Sets the loop flag.\n   *\n   * Can only be used with compatible audio sources that allow playback control.\n   *\n   * @param {boolean} value - Whether the audio should loop or not.\n   * @return {Audio|undefined} A reference to this instance.\n   */\n  setLoop(value) {\n    if (this.hasPlaybackControl === false) {\n      console.warn('THREE.Audio: this Audio has no playback control.');\n      return;\n    }\n    this.loop = value;\n    if (this.isPlaying === true) {\n      this.source.loop = this.loop;\n    }\n    return this;\n  }\n\n  /**\n   * Sets the loop start value which defines where in the audio buffer the replay should\n   * start, in seconds.\n   *\n   * @param {number} value - The loop start value.\n   * @return {Audio} A reference to this instance.\n   */\n  setLoopStart(value) {\n    this.loopStart = value;\n    return this;\n  }\n\n  /**\n   * Sets the loop end value which defines where in the audio buffer the replay should\n   * stop, in seconds.\n   *\n   * @param {number} value - The loop end value.\n   * @return {Audio} A reference to this instance.\n   */\n  setLoopEnd(value) {\n    this.loopEnd = value;\n    return this;\n  }\n\n  /**\n   * Returns the volume.\n   *\n   * @return {number} The volume.\n   */\n  getVolume() {\n    return this.gain.gain.value;\n  }\n\n  /**\n   * Sets the volume.\n   *\n   * @param {number} value - The volume to set.\n   * @return {Audio} A reference to this instance.\n   */\n  setVolume(value) {\n    this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);\n    return this;\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    if (source.sourceType !== 'buffer') {\n      console.warn('THREE.Audio: Audio source type cannot be copied.');\n      return this;\n    }\n    this.autoplay = source.autoplay;\n    this.buffer = source.buffer;\n    this.detune = source.detune;\n    this.loop = source.loop;\n    this.loopStart = source.loopStart;\n    this.loopEnd = source.loopEnd;\n    this.offset = source.offset;\n    this.duration = source.duration;\n    this.playbackRate = source.playbackRate;\n    this.hasPlaybackControl = source.hasPlaybackControl;\n    this.sourceType = source.sourceType;\n    this.filters = source.filters.slice();\n    return this;\n  }\n  clone(recursive) {\n    return new this.constructor(this.listener).copy(this, recursive);\n  }\n}\nconst _position = /*@__PURE__*/new Vector3();\nconst _quaternion = /*@__PURE__*/new Quaternion();\nconst _scale = /*@__PURE__*/new Vector3();\nconst _orientation = /*@__PURE__*/new Vector3();\n\n/**\n * Represents a positional audio object.\n *\n * ```js\n * // create an AudioListener and add it to the camera\n * const listener = new THREE.AudioListener();\n * camera.add( listener );\n *\n * // create the PositionalAudio object (passing in the listener)\n * const sound = new THREE.PositionalAudio( listener );\n *\n * // load a sound and set it as the PositionalAudio object's buffer\n * const audioLoader = new THREE.AudioLoader();\n * audioLoader.load( 'sounds/song.ogg', function( buffer ) {\n * \tsound.setBuffer( buffer );\n * \tsound.setRefDistance( 20 );\n * \tsound.play();\n * });\n *\n * // create an object for the sound to play from\n * const sphere = new THREE.SphereGeometry( 20, 32, 16 );\n * const material = new THREE.MeshPhongMaterial( { color: 0xff2200 } );\n * const mesh = new THREE.Mesh( sphere, material );\n * scene.add( mesh );\n *\n * // finally add the sound to the mesh\n * mesh.add( sound );\n *\n * @augments Audio\n */\nclass PositionalAudio extends Audio {\n  /**\n   * Constructs a positional audio.\n   *\n   * @param {AudioListener} listener - The global audio listener.\n   */\n  constructor(listener) {\n    super(listener);\n\n    /**\n     * The panner node represents the location, direction, and behavior of an audio\n     * source in 3D space.\n     *\n     * @type {PannerNode}\n     * @readonly\n     */\n    this.panner = this.context.createPanner();\n    this.panner.panningModel = 'HRTF';\n    this.panner.connect(this.gain);\n  }\n  connect() {\n    super.connect();\n    this.panner.connect(this.gain);\n    return this;\n  }\n  disconnect() {\n    super.disconnect();\n    this.panner.disconnect(this.gain);\n    return this;\n  }\n  getOutput() {\n    return this.panner;\n  }\n\n  /**\n   * Returns the current reference distance.\n   *\n   * @return {number} The reference distance.\n   */\n  getRefDistance() {\n    return this.panner.refDistance;\n  }\n\n  /**\n   * Defines the reference distance for reducing volume as the audio source moves\n   * further from the listener – i.e. the distance at which the volume reduction\n   * starts taking effect.\n   *\n   * @param {number} value - The reference distance to set.\n   * @return {PositionalAudio} A reference to this instance.\n   */\n  setRefDistance(value) {\n    this.panner.refDistance = value;\n    return this;\n  }\n\n  /**\n   * Returns the current rolloff factor.\n   *\n   * @return {number} The rolloff factor.\n   */\n  getRolloffFactor() {\n    return this.panner.rolloffFactor;\n  }\n\n  /**\n   * Defines how quickly the volume is reduced as the source moves away from the listener.\n   *\n   * @param {number} value - The rolloff factor.\n   * @return {PositionalAudio} A reference to this instance.\n   */\n  setRolloffFactor(value) {\n    this.panner.rolloffFactor = value;\n    return this;\n  }\n\n  /**\n   * Returns the current distance model.\n   *\n   * @return {('linear'|'inverse'|'exponential')} The distance model.\n   */\n  getDistanceModel() {\n    return this.panner.distanceModel;\n  }\n\n  /**\n   * Defines which algorithm to use to reduce the volume of the audio source\n   * as it moves away from the listener.\n   *\n   * Read [the spec]{@link https://www.w3.org/TR/webaudio-1.1/#enumdef-distancemodeltype}\n   * for more details.\n   *\n   * @param {('linear'|'inverse'|'exponential')} value - The distance model to set.\n   * @return {PositionalAudio} A reference to this instance.\n   */\n  setDistanceModel(value) {\n    this.panner.distanceModel = value;\n    return this;\n  }\n\n  /**\n   * Returns the current max distance.\n   *\n   * @return {number} The max distance.\n   */\n  getMaxDistance() {\n    return this.panner.maxDistance;\n  }\n\n  /**\n   * Defines the maximum distance between the audio source and the listener,\n   * after which the volume is not reduced any further.\n   *\n   * This value is used only by the `linear` distance model.\n   *\n   * @param {number} value - The max distance.\n   * @return {PositionalAudio} A reference to this instance.\n   */\n  setMaxDistance(value) {\n    this.panner.maxDistance = value;\n    return this;\n  }\n\n  /**\n   * Sets the directional cone in which the audio can be listened.\n   *\n   * @param {number} coneInnerAngle - An angle, in degrees, of a cone inside of which there will be no volume reduction.\n   * @param {number} coneOuterAngle - An angle, in degrees, of a cone outside of which the volume will be reduced by a constant value, defined by the `coneOuterGain` parameter.\n   * @param {number} coneOuterGain - The amount of volume reduction outside the cone defined by the `coneOuterAngle`. When set to `0`, no sound can be heard.\n   * @return {PositionalAudio} A reference to this instance.\n   */\n  setDirectionalCone(coneInnerAngle, coneOuterAngle, coneOuterGain) {\n    this.panner.coneInnerAngle = coneInnerAngle;\n    this.panner.coneOuterAngle = coneOuterAngle;\n    this.panner.coneOuterGain = coneOuterGain;\n    return this;\n  }\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    if (this.hasPlaybackControl === true && this.isPlaying === false) return;\n    this.matrixWorld.decompose(_position, _quaternion, _scale);\n    _orientation.set(0, 0, 1).applyQuaternion(_quaternion);\n    const panner = this.panner;\n    if (panner.positionX) {\n      // code path for Chrome and Firefox (see #14393)\n\n      const endTime = this.context.currentTime + this.listener.timeDelta;\n      panner.positionX.linearRampToValueAtTime(_position.x, endTime);\n      panner.positionY.linearRampToValueAtTime(_position.y, endTime);\n      panner.positionZ.linearRampToValueAtTime(_position.z, endTime);\n      panner.orientationX.linearRampToValueAtTime(_orientation.x, endTime);\n      panner.orientationY.linearRampToValueAtTime(_orientation.y, endTime);\n      panner.orientationZ.linearRampToValueAtTime(_orientation.z, endTime);\n    } else {\n      panner.setPosition(_position.x, _position.y, _position.z);\n      panner.setOrientation(_orientation.x, _orientation.y, _orientation.z);\n    }\n  }\n}\n\n/**\n * This class can be used to analyse audio data.\n *\n * ```js\n * // create an AudioListener and add it to the camera\n * const listener = new THREE.AudioListener();\n * camera.add( listener );\n *\n * // create an Audio source\n * const sound = new THREE.Audio( listener );\n *\n * // load a sound and set it as the Audio object's buffer\n * const audioLoader = new THREE.AudioLoader();\n * audioLoader.load( 'sounds/ambient.ogg', function( buffer ) {\n * \tsound.setBuffer( buffer );\n * \tsound.setLoop(true);\n * \tsound.setVolume(0.5);\n * \tsound.play();\n * });\n *\n * // create an AudioAnalyser, passing in the sound and desired fftSize\n * const analyser = new THREE.AudioAnalyser( sound, 32 );\n *\n * // get the average frequency of the sound\n * const data = analyser.getAverageFrequency();\n * ```\n */\nclass AudioAnalyser {\n  /**\n   * Constructs a new audio analyzer.\n   *\n   * @param {Audio} audio - The audio to analyze.\n   * @param {number} [fftSize=2048] - The window size in samples that is used when performing a Fast Fourier Transform (FFT) to get frequency domain data.\n   */\n  constructor(audio) {\n    let fftSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2048;\n    /**\n     * The global audio listener.\n     *\n     * @type {AnalyserNode}\n     */\n    this.analyser = audio.context.createAnalyser();\n    this.analyser.fftSize = fftSize;\n\n    /**\n     * Holds the analyzed data.\n     *\n     * @type {Uint8Array}\n     */\n    this.data = new Uint8Array(this.analyser.frequencyBinCount);\n    audio.getOutput().connect(this.analyser);\n  }\n\n  /**\n   * Returns an array with frequency data of the audio.\n   *\n   * Each item in the array represents the decibel value for a specific frequency.\n   * The frequencies are spread linearly from 0 to 1/2 of the sample rate.\n   * For example, for 48000 sample rate, the last item of the array will represent\n   * the decibel value for 24000 Hz.\n   *\n   * @return {Uint8Array} The frequency data.\n   */\n  getFrequencyData() {\n    this.analyser.getByteFrequencyData(this.data);\n    return this.data;\n  }\n\n  /**\n   * Returns the average of the frequencies returned by {@link AudioAnalyser#getFrequencyData}.\n   *\n   * @return {number} The average frequency.\n   */\n  getAverageFrequency() {\n    let value = 0;\n    const data = this.getFrequencyData();\n    for (let i = 0; i < data.length; i++) {\n      value += data[i];\n    }\n    return value / data.length;\n  }\n}\n\n/**\n * Buffered scene graph property that allows weighted accumulation; used internally.\n */\nclass PropertyMixer {\n  /**\n   * Constructs a new property mixer.\n   *\n   * @param {PropertyBinding} binding - The property binding.\n   * @param {string} typeName - The keyframe track type name.\n   * @param {number} valueSize - The keyframe track value size.\n   */\n  constructor(binding, typeName, valueSize) {\n    /**\n     * The property binding.\n     *\n     * @type {PropertyBinding}\n     */\n    this.binding = binding;\n\n    /**\n     * The keyframe track value size.\n     *\n     * @type {number}\n     */\n    this.valueSize = valueSize;\n    let mixFunction, mixFunctionAdditive, setIdentity;\n\n    // buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]\n    //\n    // interpolators can use .buffer as their .result\n    // the data then goes to 'incoming'\n    //\n    // 'accu0' and 'accu1' are used frame-interleaved for\n    // the cumulative result and are compared to detect\n    // changes\n    //\n    // 'orig' stores the original state of the property\n    //\n    // 'add' is used for additive cumulative results\n    //\n    // 'work' is optional and is only present for quaternion types. It is used\n    // to store intermediate quaternion multiplication results\n\n    switch (typeName) {\n      case 'quaternion':\n        mixFunction = this._slerp;\n        mixFunctionAdditive = this._slerpAdditive;\n        setIdentity = this._setAdditiveIdentityQuaternion;\n        this.buffer = new Float64Array(valueSize * 6);\n        this._workIndex = 5;\n        break;\n      case 'string':\n      case 'bool':\n        mixFunction = this._select;\n\n        // Use the regular mix function and for additive on these types,\n        // additive is not relevant for non-numeric types\n        mixFunctionAdditive = this._select;\n        setIdentity = this._setAdditiveIdentityOther;\n        this.buffer = new Array(valueSize * 5);\n        break;\n      default:\n        mixFunction = this._lerp;\n        mixFunctionAdditive = this._lerpAdditive;\n        setIdentity = this._setAdditiveIdentityNumeric;\n        this.buffer = new Float64Array(valueSize * 5);\n    }\n    this._mixBufferRegion = mixFunction;\n    this._mixBufferRegionAdditive = mixFunctionAdditive;\n    this._setIdentity = setIdentity;\n    this._origIndex = 3;\n    this._addIndex = 4;\n\n    /**\n     * TODO\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.cumulativeWeight = 0;\n\n    /**\n     * TODO\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.cumulativeWeightAdditive = 0;\n\n    /**\n     * TODO\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.useCount = 0;\n\n    /**\n     * TODO\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.referenceCount = 0;\n  }\n\n  /**\n   * Accumulates data in the `incoming` region into `accu<i>`.\n   *\n   * @param {number} accuIndex - The accumulation index.\n   * @param {number} weight - The weight.\n   */\n  accumulate(accuIndex, weight) {\n    // note: happily accumulating nothing when weight = 0, the caller knows\n    // the weight and shouldn't have made the call in the first place\n\n    const buffer = this.buffer,\n      stride = this.valueSize,\n      offset = accuIndex * stride + stride;\n    let currentWeight = this.cumulativeWeight;\n    if (currentWeight === 0) {\n      // accuN := incoming * weight\n\n      for (let i = 0; i !== stride; ++i) {\n        buffer[offset + i] = buffer[i];\n      }\n      currentWeight = weight;\n    } else {\n      // accuN := accuN + incoming * weight\n\n      currentWeight += weight;\n      const mix = weight / currentWeight;\n      this._mixBufferRegion(buffer, offset, 0, mix, stride);\n    }\n    this.cumulativeWeight = currentWeight;\n  }\n\n  /**\n   * Accumulates data in the `incoming` region into `add`.\n   *\n   * @param {number} weight - The weight.\n   */\n  accumulateAdditive(weight) {\n    const buffer = this.buffer,\n      stride = this.valueSize,\n      offset = stride * this._addIndex;\n    if (this.cumulativeWeightAdditive === 0) {\n      // add = identity\n\n      this._setIdentity();\n    }\n\n    // add := add + incoming * weight\n\n    this._mixBufferRegionAdditive(buffer, offset, 0, weight, stride);\n    this.cumulativeWeightAdditive += weight;\n  }\n\n  /**\n   * Applies the state of `accu<i>` to the binding when accus differ.\n   *\n   * @param {number} accuIndex - The accumulation index.\n   */\n  apply(accuIndex) {\n    const stride = this.valueSize,\n      buffer = this.buffer,\n      offset = accuIndex * stride + stride,\n      weight = this.cumulativeWeight,\n      weightAdditive = this.cumulativeWeightAdditive,\n      binding = this.binding;\n    this.cumulativeWeight = 0;\n    this.cumulativeWeightAdditive = 0;\n    if (weight < 1) {\n      // accuN := accuN + original * ( 1 - cumulativeWeight )\n\n      const originalValueOffset = stride * this._origIndex;\n      this._mixBufferRegion(buffer, offset, originalValueOffset, 1 - weight, stride);\n    }\n    if (weightAdditive > 0) {\n      // accuN := accuN + additive accuN\n\n      this._mixBufferRegionAdditive(buffer, offset, this._addIndex * stride, 1, stride);\n    }\n    for (let i = stride, e = stride + stride; i !== e; ++i) {\n      if (buffer[i] !== buffer[i + stride]) {\n        // value has changed -> update scene graph\n\n        binding.setValue(buffer, offset);\n        break;\n      }\n    }\n  }\n\n  /**\n   * Remembers the state of the bound property and copy it to both accus.\n   */\n  saveOriginalState() {\n    const binding = this.binding;\n    const buffer = this.buffer,\n      stride = this.valueSize,\n      originalValueOffset = stride * this._origIndex;\n    binding.getValue(buffer, originalValueOffset);\n\n    // accu[0..1] := orig -- initially detect changes against the original\n    for (let i = stride, e = originalValueOffset; i !== e; ++i) {\n      buffer[i] = buffer[originalValueOffset + i % stride];\n    }\n\n    // Add to identity for additive\n    this._setIdentity();\n    this.cumulativeWeight = 0;\n    this.cumulativeWeightAdditive = 0;\n  }\n\n  /**\n   * Applies the state previously taken via {@link PropertyMixer#saveOriginalState} to the binding.\n   */\n  restoreOriginalState() {\n    const originalValueOffset = this.valueSize * 3;\n    this.binding.setValue(this.buffer, originalValueOffset);\n  }\n\n  // internals\n\n  _setAdditiveIdentityNumeric() {\n    const startIndex = this._addIndex * this.valueSize;\n    const endIndex = startIndex + this.valueSize;\n    for (let i = startIndex; i < endIndex; i++) {\n      this.buffer[i] = 0;\n    }\n  }\n  _setAdditiveIdentityQuaternion() {\n    this._setAdditiveIdentityNumeric();\n    this.buffer[this._addIndex * this.valueSize + 3] = 1;\n  }\n  _setAdditiveIdentityOther() {\n    const startIndex = this._origIndex * this.valueSize;\n    const targetIndex = this._addIndex * this.valueSize;\n    for (let i = 0; i < this.valueSize; i++) {\n      this.buffer[targetIndex + i] = this.buffer[startIndex + i];\n    }\n  }\n\n  // mix functions\n\n  _select(buffer, dstOffset, srcOffset, t, stride) {\n    if (t >= 0.5) {\n      for (let i = 0; i !== stride; ++i) {\n        buffer[dstOffset + i] = buffer[srcOffset + i];\n      }\n    }\n  }\n  _slerp(buffer, dstOffset, srcOffset, t) {\n    Quaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t);\n  }\n  _slerpAdditive(buffer, dstOffset, srcOffset, t, stride) {\n    const workOffset = this._workIndex * stride;\n\n    // Store result in intermediate buffer offset\n    Quaternion.multiplyQuaternionsFlat(buffer, workOffset, buffer, dstOffset, buffer, srcOffset);\n\n    // Slerp to the intermediate result\n    Quaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t);\n  }\n  _lerp(buffer, dstOffset, srcOffset, t, stride) {\n    const s = 1 - t;\n    for (let i = 0; i !== stride; ++i) {\n      const j = dstOffset + i;\n      buffer[j] = buffer[j] * s + buffer[srcOffset + i] * t;\n    }\n  }\n  _lerpAdditive(buffer, dstOffset, srcOffset, t, stride) {\n    for (let i = 0; i !== stride; ++i) {\n      const j = dstOffset + i;\n      buffer[j] = buffer[j] + buffer[srcOffset + i] * t;\n    }\n  }\n}\n\n// Characters [].:/ are reserved for track binding syntax.\nconst _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\nconst _reservedRe = new RegExp('[' + _RESERVED_CHARS_RE + ']', 'g');\n\n// Attempts to allow node names from any language. ES5's `\\w` regexp matches\n// only latin characters, and the unicode \\p{L} is not yet supported. So\n// instead, we exclude reserved characters and match everything else.\nconst _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\nconst _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace('\\\\.', '') + ']';\n\n// Parent directories, delimited by '/' or ':'. Currently unused, but must\n// be matched to parse the rest of the track name.\nconst _directoryRe = /*@__PURE__*//((?:WC+[\\/:])*)/.source.replace('WC', _wordChar);\n\n// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\nconst _nodeRe = /*@__PURE__*//(WCOD+)?/.source.replace('WCOD', _wordCharOrDot);\n\n// Object on target node, and accessor. May not contain reserved\n// characters. Accessor may contain any character except closing bracket.\nconst _objectRe = /*@__PURE__*//(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace('WC', _wordChar);\n\n// Property and accessor. May not contain reserved characters. Accessor may\n// contain any non-bracket characters.\nconst _propertyRe = /*@__PURE__*//\\.(WC+)(?:\\[(.+)\\])?/.source.replace('WC', _wordChar);\nconst _trackRe = new RegExp('' + '^' + _directoryRe + _nodeRe + _objectRe + _propertyRe + '$');\nconst _supportedObjectNames = ['material', 'materials', 'bones', 'map'];\nclass Composite {\n  constructor(targetGroup, path, optionalParsedPath) {\n    const parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);\n    this._targetGroup = targetGroup;\n    this._bindings = targetGroup.subscribe_(path, parsedPath);\n  }\n  getValue(array, offset) {\n    this.bind(); // bind all binding\n\n    const firstValidIndex = this._targetGroup.nCachedObjects_,\n      binding = this._bindings[firstValidIndex];\n\n    // and only call .getValue on the first\n    if (binding !== undefined) binding.getValue(array, offset);\n  }\n  setValue(array, offset) {\n    const bindings = this._bindings;\n    for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n      bindings[i].setValue(array, offset);\n    }\n  }\n  bind() {\n    const bindings = this._bindings;\n    for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n      bindings[i].bind();\n    }\n  }\n  unbind() {\n    const bindings = this._bindings;\n    for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n      bindings[i].unbind();\n    }\n  }\n}\n\n// Note: This class uses a State pattern on a per-method basis:\n// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n// prototype version of these methods with one that represents\n// the bound state. When the property is not found, the methods\n// become no-ops.\n\n/**\n * This holds a reference to a real property in the scene graph; used internally.\n */\nclass PropertyBinding {\n  /**\n   * Constructs a new property binding.\n   *\n   * @param {Object} rootNode - The root node.\n   * @param {string} path - The path.\n   * @param {?Object} [parsedPath] - The parsed path.\n   */\n  constructor(rootNode, path, parsedPath) {\n    /**\n     * The object path to the animated property.\n     *\n     * @type {string}\n     */\n    this.path = path;\n\n    /**\n     * An object holding information about the path.\n     *\n     * @type {Object}\n     */\n    this.parsedPath = parsedPath || PropertyBinding.parseTrackName(path);\n\n    /**\n     * The object owns the animated property.\n     *\n     * @type {?Object}\n     */\n    this.node = PropertyBinding.findNode(rootNode, this.parsedPath.nodeName);\n\n    /**\n     * The root node.\n     *\n     * @type {Object3D|Skeleton}\n     */\n    this.rootNode = rootNode;\n\n    // initial state of these methods that calls 'bind'\n    this.getValue = this._getValue_unbound;\n    this.setValue = this._setValue_unbound;\n  }\n\n  /**\n   * Factory method for creating a property binding from the given parameters.\n   *\n   * @static\n   * @param {Object} root - The root node.\n   * @param {string} path - The path.\n   * @param {?Object} [parsedPath] - The parsed path.\n   * @return {PropertyBinding|Composite} The created property binding or composite.\n   */\n  static create(root, path, parsedPath) {\n    if (!(root && root.isAnimationObjectGroup)) {\n      return new PropertyBinding(root, path, parsedPath);\n    } else {\n      return new PropertyBinding.Composite(root, path, parsedPath);\n    }\n  }\n\n  /**\n   * Replaces spaces with underscores and removes unsupported characters from\n   * node names, to ensure compatibility with parseTrackName().\n   *\n   * @param {string} name - Node name to be sanitized.\n   * @return {string} The sanitized node name.\n   */\n  static sanitizeNodeName(name) {\n    return name.replace(/\\s/g, '_').replace(_reservedRe, '');\n  }\n\n  /**\n   * Parses the given track name (an object path to an animated property) and\n   * returns an object with information about the path. Matches strings in the following forms:\n   *\n   * - nodeName.property\n   * - nodeName.property[accessor]\n   * - nodeName.material.property[accessor]\n   * - uuid.property[accessor]\n   * - uuid.objectName[objectIndex].propertyName[propertyIndex]\n   * - parentName/nodeName.property\n   * - parentName/parentName/nodeName.property[index]\n   * - .bone[Armature.DEF_cog].position\n   * - scene:helium_balloon_model:helium_balloon_model.position\n   *\n   * @static\n   * @param {string} trackName - The track name to parse.\n   * @return {Object} The parsed track name as an object.\n   */\n  static parseTrackName(trackName) {\n    const matches = _trackRe.exec(trackName);\n    if (matches === null) {\n      throw new Error('PropertyBinding: Cannot parse trackName: ' + trackName);\n    }\n    const results = {\n      // directoryName: matches[ 1 ], // (tschw) currently unused\n      nodeName: matches[2],\n      objectName: matches[3],\n      objectIndex: matches[4],\n      propertyName: matches[5],\n      // required\n      propertyIndex: matches[6]\n    };\n    const lastDot = results.nodeName && results.nodeName.lastIndexOf('.');\n    if (lastDot !== undefined && lastDot !== -1) {\n      const objectName = results.nodeName.substring(lastDot + 1);\n\n      // Object names must be checked against an allowlist. Otherwise, there\n      // is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n      // 'bar' could be the objectName, or part of a nodeName (which can\n      // include '.' characters).\n      if (_supportedObjectNames.indexOf(objectName) !== -1) {\n        results.nodeName = results.nodeName.substring(0, lastDot);\n        results.objectName = objectName;\n      }\n    }\n    if (results.propertyName === null || results.propertyName.length === 0) {\n      throw new Error('PropertyBinding: can not parse propertyName from trackName: ' + trackName);\n    }\n    return results;\n  }\n\n  /**\n   * Searches for a node in the hierarchy of the given root object by the given\n   * node name.\n   *\n   * @static\n   * @param {Object} root - The root object.\n   * @param {string|number} nodeName - The name of the node.\n   * @return {?Object} The found node. Returns `null` if no object was found.\n   */\n  static findNode(root, nodeName) {\n    if (nodeName === undefined || nodeName === '' || nodeName === '.' || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {\n      return root;\n    }\n\n    // search into skeleton bones.\n    if (root.skeleton) {\n      const bone = root.skeleton.getBoneByName(nodeName);\n      if (bone !== undefined) {\n        return bone;\n      }\n    }\n\n    // search into node subtree.\n    if (root.children) {\n      const searchNodeSubtree = function (children) {\n        for (let i = 0; i < children.length; i++) {\n          const childNode = children[i];\n          if (childNode.name === nodeName || childNode.uuid === nodeName) {\n            return childNode;\n          }\n          const result = searchNodeSubtree(childNode.children);\n          if (result) return result;\n        }\n        return null;\n      };\n      const subTreeNode = searchNodeSubtree(root.children);\n      if (subTreeNode) {\n        return subTreeNode;\n      }\n    }\n    return null;\n  }\n\n  // these are used to \"bind\" a nonexistent property\n  _getValue_unavailable() {}\n  _setValue_unavailable() {}\n\n  // Getters\n\n  _getValue_direct(buffer, offset) {\n    buffer[offset] = this.targetObject[this.propertyName];\n  }\n  _getValue_array(buffer, offset) {\n    const source = this.resolvedProperty;\n    for (let i = 0, n = source.length; i !== n; ++i) {\n      buffer[offset++] = source[i];\n    }\n  }\n  _getValue_arrayElement(buffer, offset) {\n    buffer[offset] = this.resolvedProperty[this.propertyIndex];\n  }\n  _getValue_toArray(buffer, offset) {\n    this.resolvedProperty.toArray(buffer, offset);\n  }\n\n  // Direct\n\n  _setValue_direct(buffer, offset) {\n    this.targetObject[this.propertyName] = buffer[offset];\n  }\n  _setValue_direct_setNeedsUpdate(buffer, offset) {\n    this.targetObject[this.propertyName] = buffer[offset];\n    this.targetObject.needsUpdate = true;\n  }\n  _setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {\n    this.targetObject[this.propertyName] = buffer[offset];\n    this.targetObject.matrixWorldNeedsUpdate = true;\n  }\n\n  // EntireArray\n\n  _setValue_array(buffer, offset) {\n    const dest = this.resolvedProperty;\n    for (let i = 0, n = dest.length; i !== n; ++i) {\n      dest[i] = buffer[offset++];\n    }\n  }\n  _setValue_array_setNeedsUpdate(buffer, offset) {\n    const dest = this.resolvedProperty;\n    for (let i = 0, n = dest.length; i !== n; ++i) {\n      dest[i] = buffer[offset++];\n    }\n    this.targetObject.needsUpdate = true;\n  }\n  _setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {\n    const dest = this.resolvedProperty;\n    for (let i = 0, n = dest.length; i !== n; ++i) {\n      dest[i] = buffer[offset++];\n    }\n    this.targetObject.matrixWorldNeedsUpdate = true;\n  }\n\n  // ArrayElement\n\n  _setValue_arrayElement(buffer, offset) {\n    this.resolvedProperty[this.propertyIndex] = buffer[offset];\n  }\n  _setValue_arrayElement_setNeedsUpdate(buffer, offset) {\n    this.resolvedProperty[this.propertyIndex] = buffer[offset];\n    this.targetObject.needsUpdate = true;\n  }\n  _setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {\n    this.resolvedProperty[this.propertyIndex] = buffer[offset];\n    this.targetObject.matrixWorldNeedsUpdate = true;\n  }\n\n  // HasToFromArray\n\n  _setValue_fromArray(buffer, offset) {\n    this.resolvedProperty.fromArray(buffer, offset);\n  }\n  _setValue_fromArray_setNeedsUpdate(buffer, offset) {\n    this.resolvedProperty.fromArray(buffer, offset);\n    this.targetObject.needsUpdate = true;\n  }\n  _setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {\n    this.resolvedProperty.fromArray(buffer, offset);\n    this.targetObject.matrixWorldNeedsUpdate = true;\n  }\n  _getValue_unbound(targetArray, offset) {\n    this.bind();\n    this.getValue(targetArray, offset);\n  }\n  _setValue_unbound(sourceArray, offset) {\n    this.bind();\n    this.setValue(sourceArray, offset);\n  }\n\n  /**\n   * Creates a getter / setter pair for the property tracked by this binding.\n   */\n  bind() {\n    let targetObject = this.node;\n    const parsedPath = this.parsedPath;\n    const objectName = parsedPath.objectName;\n    const propertyName = parsedPath.propertyName;\n    let propertyIndex = parsedPath.propertyIndex;\n    if (!targetObject) {\n      targetObject = PropertyBinding.findNode(this.rootNode, parsedPath.nodeName);\n      this.node = targetObject;\n    }\n\n    // set fail state so we can just 'return' on error\n    this.getValue = this._getValue_unavailable;\n    this.setValue = this._setValue_unavailable;\n\n    // ensure there is a value node\n    if (!targetObject) {\n      console.warn('THREE.PropertyBinding: No target node found for track: ' + this.path + '.');\n      return;\n    }\n    if (objectName) {\n      let objectIndex = parsedPath.objectIndex;\n\n      // special cases were we need to reach deeper into the hierarchy to get the face materials....\n      switch (objectName) {\n        case 'materials':\n          if (!targetObject.material) {\n            console.error('THREE.PropertyBinding: Can not bind to material as node does not have a material.', this);\n            return;\n          }\n          if (!targetObject.material.materials) {\n            console.error('THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this);\n            return;\n          }\n          targetObject = targetObject.material.materials;\n          break;\n        case 'bones':\n          if (!targetObject.skeleton) {\n            console.error('THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this);\n            return;\n          }\n\n          // potential future optimization: skip this if propertyIndex is already an integer\n          // and convert the integer string to a true integer.\n\n          targetObject = targetObject.skeleton.bones;\n\n          // support resolving morphTarget names into indices.\n          for (let i = 0; i < targetObject.length; i++) {\n            if (targetObject[i].name === objectIndex) {\n              objectIndex = i;\n              break;\n            }\n          }\n          break;\n        case 'map':\n          if ('map' in targetObject) {\n            targetObject = targetObject.map;\n            break;\n          }\n          if (!targetObject.material) {\n            console.error('THREE.PropertyBinding: Can not bind to material as node does not have a material.', this);\n            return;\n          }\n          if (!targetObject.material.map) {\n            console.error('THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.', this);\n            return;\n          }\n          targetObject = targetObject.material.map;\n          break;\n        default:\n          if (targetObject[objectName] === undefined) {\n            console.error('THREE.PropertyBinding: Can not bind to objectName of node undefined.', this);\n            return;\n          }\n          targetObject = targetObject[objectName];\n      }\n      if (objectIndex !== undefined) {\n        if (targetObject[objectIndex] === undefined) {\n          console.error('THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject);\n          return;\n        }\n        targetObject = targetObject[objectIndex];\n      }\n    }\n\n    // resolve property\n    const nodeProperty = targetObject[propertyName];\n    if (nodeProperty === undefined) {\n      const nodeName = parsedPath.nodeName;\n      console.error('THREE.PropertyBinding: Trying to update property for track: ' + nodeName + '.' + propertyName + ' but it wasn\\'t found.', targetObject);\n      return;\n    }\n\n    // determine versioning scheme\n    let versioning = this.Versioning.None;\n    this.targetObject = targetObject;\n    if (targetObject.isMaterial === true) {\n      versioning = this.Versioning.NeedsUpdate;\n    } else if (targetObject.isObject3D === true) {\n      versioning = this.Versioning.MatrixWorldNeedsUpdate;\n    }\n\n    // determine how the property gets bound\n    let bindingType = this.BindingType.Direct;\n    if (propertyIndex !== undefined) {\n      // access a sub element of the property array (only primitives are supported right now)\n\n      if (propertyName === 'morphTargetInfluences') {\n        // potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n        // support resolving morphTarget names into indices.\n        if (!targetObject.geometry) {\n          console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this);\n          return;\n        }\n        if (!targetObject.geometry.morphAttributes) {\n          console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this);\n          return;\n        }\n        if (targetObject.morphTargetDictionary[propertyIndex] !== undefined) {\n          propertyIndex = targetObject.morphTargetDictionary[propertyIndex];\n        }\n      }\n      bindingType = this.BindingType.ArrayElement;\n      this.resolvedProperty = nodeProperty;\n      this.propertyIndex = propertyIndex;\n    } else if (nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined) {\n      // must use copy for Object3D.Euler/Quaternion\n\n      bindingType = this.BindingType.HasFromToArray;\n      this.resolvedProperty = nodeProperty;\n    } else if (Array.isArray(nodeProperty)) {\n      bindingType = this.BindingType.EntireArray;\n      this.resolvedProperty = nodeProperty;\n    } else {\n      this.propertyName = propertyName;\n    }\n\n    // select getter / setter\n    this.getValue = this.GetterByBindingType[bindingType];\n    this.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];\n  }\n\n  /**\n   * Unbinds the property.\n   */\n  unbind() {\n    this.node = null;\n\n    // back to the prototype version of getValue / setValue\n    // note: avoiding to mutate the shape of 'this' via 'delete'\n    this.getValue = this._getValue_unbound;\n    this.setValue = this._setValue_unbound;\n  }\n}\nPropertyBinding.Composite = Composite;\nPropertyBinding.prototype.BindingType = {\n  Direct: 0,\n  EntireArray: 1,\n  ArrayElement: 2,\n  HasFromToArray: 3\n};\nPropertyBinding.prototype.Versioning = {\n  None: 0,\n  NeedsUpdate: 1,\n  MatrixWorldNeedsUpdate: 2\n};\nPropertyBinding.prototype.GetterByBindingType = [PropertyBinding.prototype._getValue_direct, PropertyBinding.prototype._getValue_array, PropertyBinding.prototype._getValue_arrayElement, PropertyBinding.prototype._getValue_toArray];\nPropertyBinding.prototype.SetterByBindingTypeAndVersioning = [[\n// Direct\nPropertyBinding.prototype._setValue_direct, PropertyBinding.prototype._setValue_direct_setNeedsUpdate, PropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate], [\n// EntireArray\n\nPropertyBinding.prototype._setValue_array, PropertyBinding.prototype._setValue_array_setNeedsUpdate, PropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate], [\n// ArrayElement\nPropertyBinding.prototype._setValue_arrayElement, PropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate, PropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate], [\n// HasToFromArray\nPropertyBinding.prototype._setValue_fromArray, PropertyBinding.prototype._setValue_fromArray_setNeedsUpdate, PropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];\n\n/**\n * A group of objects that receives a shared animation state.\n *\n * Usage:\n *\n * - Add objects you would otherwise pass as 'root' to the\n * constructor or the .clipAction method of AnimationMixer.\n * - Instead pass this object as 'root'.\n * - You can also add and remove objects later when the mixer is running.\n *\n * Note:\n *\n * - Objects of this class appear as one object to the mixer,\n * so cache control of the individual objects must be done on the group.\n *\n * Limitation:\n *\n * - The animated properties must be compatible among the all objects in the group.\n * - A single property can either be controlled through a target group or directly, but not both.\n */\nclass AnimationObjectGroup {\n  /**\n   * Constructs a new animation group.\n   *\n   * @param {...Object3D} arguments - An arbitrary number of 3D objects that share the same animation state.\n   */\n  constructor() {\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isAnimationObjectGroup = true;\n\n    /**\n     * The UUID of the 3D object.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.uuid = generateUUID();\n\n    // cached objects followed by the active ones\n    this._objects = Array.prototype.slice.call(arguments);\n    this.nCachedObjects_ = 0; // threshold\n    // note: read by PropertyBinding.Composite\n\n    const indices = {};\n    this._indicesByUUID = indices; // for bookkeeping\n\n    for (let i = 0, n = arguments.length; i !== n; ++i) {\n      indices[arguments[i].uuid] = i;\n    }\n    this._paths = []; // inside: string\n    this._parsedPaths = []; // inside: { we don't care, here }\n    this._bindings = []; // inside: Array< PropertyBinding >\n    this._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n    const scope = this;\n    this.stats = {\n      objects: {\n        get total() {\n          return scope._objects.length;\n        },\n        get inUse() {\n          return this.total - scope.nCachedObjects_;\n        }\n      },\n      get bindingsPerObject() {\n        return scope._bindings.length;\n      }\n    };\n  }\n\n  /**\n   * Adds an arbitrary number of objects to this animation group.\n   *\n   * @param {...Object3D} arguments - The 3D objects to add.\n   */\n  add() {\n    const objects = this._objects,\n      indicesByUUID = this._indicesByUUID,\n      paths = this._paths,\n      parsedPaths = this._parsedPaths,\n      bindings = this._bindings,\n      nBindings = bindings.length;\n    let knownObject = undefined,\n      nObjects = objects.length,\n      nCachedObjects = this.nCachedObjects_;\n    for (let i = 0, n = arguments.length; i !== n; ++i) {\n      const object = arguments[i],\n        uuid = object.uuid;\n      let index = indicesByUUID[uuid];\n      if (index === undefined) {\n        // unknown object -> add it to the ACTIVE region\n\n        index = nObjects++;\n        indicesByUUID[uuid] = index;\n        objects.push(object);\n\n        // accounting is done, now do the same for all bindings\n\n        for (let j = 0, m = nBindings; j !== m; ++j) {\n          bindings[j].push(new PropertyBinding(object, paths[j], parsedPaths[j]));\n        }\n      } else if (index < nCachedObjects) {\n        knownObject = objects[index];\n\n        // move existing object to the ACTIVE region\n\n        const firstActiveIndex = --nCachedObjects,\n          lastCachedObject = objects[firstActiveIndex];\n        indicesByUUID[lastCachedObject.uuid] = index;\n        objects[index] = lastCachedObject;\n        indicesByUUID[uuid] = firstActiveIndex;\n        objects[firstActiveIndex] = object;\n\n        // accounting is done, now do the same for all bindings\n\n        for (let j = 0, m = nBindings; j !== m; ++j) {\n          const bindingsForPath = bindings[j],\n            lastCached = bindingsForPath[firstActiveIndex];\n          let binding = bindingsForPath[index];\n          bindingsForPath[index] = lastCached;\n          if (binding === undefined) {\n            // since we do not bother to create new bindings\n            // for objects that are cached, the binding may\n            // or may not exist\n\n            binding = new PropertyBinding(object, paths[j], parsedPaths[j]);\n          }\n          bindingsForPath[firstActiveIndex] = binding;\n        }\n      } else if (objects[index] !== knownObject) {\n        console.error('THREE.AnimationObjectGroup: Different objects with the same UUID ' + 'detected. Clean the caches or recreate your infrastructure when reloading scenes.');\n      } // else the object is already where we want it to be\n    } // for arguments\n\n    this.nCachedObjects_ = nCachedObjects;\n  }\n\n  /**\n   * Removes an arbitrary number of objects to this animation group\n   *\n   * @param {...Object3D} arguments - The 3D objects to remove.\n   */\n  remove() {\n    const objects = this._objects,\n      indicesByUUID = this._indicesByUUID,\n      bindings = this._bindings,\n      nBindings = bindings.length;\n    let nCachedObjects = this.nCachedObjects_;\n    for (let i = 0, n = arguments.length; i !== n; ++i) {\n      const object = arguments[i],\n        uuid = object.uuid,\n        index = indicesByUUID[uuid];\n      if (index !== undefined && index >= nCachedObjects) {\n        // move existing object into the CACHED region\n\n        const lastCachedIndex = nCachedObjects++,\n          firstActiveObject = objects[lastCachedIndex];\n        indicesByUUID[firstActiveObject.uuid] = index;\n        objects[index] = firstActiveObject;\n        indicesByUUID[uuid] = lastCachedIndex;\n        objects[lastCachedIndex] = object;\n\n        // accounting is done, now do the same for all bindings\n\n        for (let j = 0, m = nBindings; j !== m; ++j) {\n          const bindingsForPath = bindings[j],\n            firstActive = bindingsForPath[lastCachedIndex],\n            binding = bindingsForPath[index];\n          bindingsForPath[index] = firstActive;\n          bindingsForPath[lastCachedIndex] = binding;\n        }\n      }\n    } // for arguments\n\n    this.nCachedObjects_ = nCachedObjects;\n  }\n\n  /**\n   * Deallocates all memory resources for the passed 3D objects of this animation group.\n   *\n   * @param {...Object3D} arguments - The 3D objects to uncache.\n   */\n  uncache() {\n    const objects = this._objects,\n      indicesByUUID = this._indicesByUUID,\n      bindings = this._bindings,\n      nBindings = bindings.length;\n    let nCachedObjects = this.nCachedObjects_,\n      nObjects = objects.length;\n    for (let i = 0, n = arguments.length; i !== n; ++i) {\n      const object = arguments[i],\n        uuid = object.uuid,\n        index = indicesByUUID[uuid];\n      if (index !== undefined) {\n        delete indicesByUUID[uuid];\n        if (index < nCachedObjects) {\n          // object is cached, shrink the CACHED region\n\n          const firstActiveIndex = --nCachedObjects,\n            lastCachedObject = objects[firstActiveIndex],\n            lastIndex = --nObjects,\n            lastObject = objects[lastIndex];\n\n          // last cached object takes this object's place\n          indicesByUUID[lastCachedObject.uuid] = index;\n          objects[index] = lastCachedObject;\n\n          // last object goes to the activated slot and pop\n          indicesByUUID[lastObject.uuid] = firstActiveIndex;\n          objects[firstActiveIndex] = lastObject;\n          objects.pop();\n\n          // accounting is done, now do the same for all bindings\n\n          for (let j = 0, m = nBindings; j !== m; ++j) {\n            const bindingsForPath = bindings[j],\n              lastCached = bindingsForPath[firstActiveIndex],\n              last = bindingsForPath[lastIndex];\n            bindingsForPath[index] = lastCached;\n            bindingsForPath[firstActiveIndex] = last;\n            bindingsForPath.pop();\n          }\n        } else {\n          // object is active, just swap with the last and pop\n\n          const lastIndex = --nObjects,\n            lastObject = objects[lastIndex];\n          if (lastIndex > 0) {\n            indicesByUUID[lastObject.uuid] = index;\n          }\n          objects[index] = lastObject;\n          objects.pop();\n\n          // accounting is done, now do the same for all bindings\n\n          for (let j = 0, m = nBindings; j !== m; ++j) {\n            const bindingsForPath = bindings[j];\n            bindingsForPath[index] = bindingsForPath[lastIndex];\n            bindingsForPath.pop();\n          }\n        } // cached or active\n      } // if object is known\n    } // for arguments\n\n    this.nCachedObjects_ = nCachedObjects;\n  }\n\n  // Internal interface used by befriended PropertyBinding.Composite:\n\n  subscribe_(path, parsedPath) {\n    // returns an array of bindings for the given path that is changed\n    // according to the contained objects in the group\n\n    const indicesByPath = this._bindingsIndicesByPath;\n    let index = indicesByPath[path];\n    const bindings = this._bindings;\n    if (index !== undefined) return bindings[index];\n    const paths = this._paths,\n      parsedPaths = this._parsedPaths,\n      objects = this._objects,\n      nObjects = objects.length,\n      nCachedObjects = this.nCachedObjects_,\n      bindingsForPath = new Array(nObjects);\n    index = bindings.length;\n    indicesByPath[path] = index;\n    paths.push(path);\n    parsedPaths.push(parsedPath);\n    bindings.push(bindingsForPath);\n    for (let i = nCachedObjects, n = objects.length; i !== n; ++i) {\n      const object = objects[i];\n      bindingsForPath[i] = new PropertyBinding(object, path, parsedPath);\n    }\n    return bindingsForPath;\n  }\n  unsubscribe_(path) {\n    // tells the group to forget about a property path and no longer\n    // update the array previously obtained with 'subscribe_'\n\n    const indicesByPath = this._bindingsIndicesByPath,\n      index = indicesByPath[path];\n    if (index !== undefined) {\n      const paths = this._paths,\n        parsedPaths = this._parsedPaths,\n        bindings = this._bindings,\n        lastBindingsIndex = bindings.length - 1,\n        lastBindings = bindings[lastBindingsIndex],\n        lastBindingsPath = path[lastBindingsIndex];\n      indicesByPath[lastBindingsPath] = index;\n      bindings[index] = lastBindings;\n      bindings.pop();\n      parsedPaths[index] = parsedPaths[lastBindingsIndex];\n      parsedPaths.pop();\n      paths[index] = paths[lastBindingsIndex];\n      paths.pop();\n    }\n  }\n}\n\n/**\n * An instance of `AnimationAction` schedules the playback of an animation which is\n * stored in {@link AnimationClip}.\n */\nclass AnimationAction {\n  /**\n   * Constructs a new animation action.\n   *\n   * @param {AnimationMixer} mixer - The mixer that is controlled by this action.\n   * @param {AnimationClip} clip - The animation clip that holds the actual keyframes.\n   * @param {?Object3D} [localRoot=null] - The root object on which this action is performed.\n   * @param {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)} [blendMode] - The blend mode.\n   */\n  constructor(mixer, clip) {\n    let localRoot = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let blendMode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : clip.blendMode;\n    this._mixer = mixer;\n    this._clip = clip;\n    this._localRoot = localRoot;\n\n    /**\n     * Defines how the animation is blended/combined when two or more animations\n     * are simultaneously played.\n     *\n     * @type {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)}\n     */\n    this.blendMode = blendMode;\n    const tracks = clip.tracks,\n      nTracks = tracks.length,\n      interpolants = new Array(nTracks);\n    const interpolantSettings = {\n      endingStart: ZeroCurvatureEnding,\n      endingEnd: ZeroCurvatureEnding\n    };\n    for (let i = 0; i !== nTracks; ++i) {\n      const interpolant = tracks[i].createInterpolant(null);\n      interpolants[i] = interpolant;\n      interpolant.settings = interpolantSettings;\n    }\n    this._interpolantSettings = interpolantSettings;\n    this._interpolants = interpolants; // bound by the mixer\n\n    // inside: PropertyMixer (managed by the mixer)\n    this._propertyBindings = new Array(nTracks);\n    this._cacheIndex = null; // for the memory manager\n    this._byClipCacheIndex = null; // for the memory manager\n\n    this._timeScaleInterpolant = null;\n    this._weightInterpolant = null;\n\n    /**\n     * The loop mode, set via {@link AnimationAction#setLoop}.\n     *\n     * @type {(LoopRepeat|LoopOnce|LoopPingPong)}\n     * @default LoopRepeat\n     */\n    this.loop = LoopRepeat;\n    this._loopCount = -1;\n\n    // global mixer time when the action is to be started\n    // it's set back to 'null' upon start of the action\n    this._startTime = null;\n\n    /**\n     * The local time of this action (in seconds, starting with `0`).\n     *\n     * The value gets clamped or wrapped to `[0,clip.duration]` (according to the\n     * loop state).\n     *\n     * @type {number}\n     * @default Infinity\n     */\n    this.time = 0;\n\n    /**\n     * Scaling factor for the {@link AnimationAction#time}. A value of `0` causes the\n     * animation to pause. Negative values cause the animation to play backwards.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.timeScale = 1;\n    this._effectiveTimeScale = 1;\n\n    /**\n     * The degree of influence of this action (in the interval `[0, 1]`). Values\n     * between `0` (no impact) and `1` (full impact) can be used to blend between\n     * several actions.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.weight = 1;\n    this._effectiveWeight = 1;\n\n    /**\n     * The number of repetitions of the performed clip over the course of this action.\n     * Can be set via {@link AnimationAction#setLoop}.\n     *\n     * Setting this number has no effect if {@link AnimationAction#loop} is set to\n     * `THREE:LoopOnce`.\n     *\n     * @type {number}\n     * @default Infinity\n     */\n    this.repetitions = Infinity;\n\n    /**\n     * If set to `true`, the playback of the action is paused.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.paused = false;\n\n    /**\n     * If set to `false`, the action is disabled so it has no impact.\n     *\n     * When the action is re-enabled, the animation continues from its current\n     * time (setting `enabled` to `false` doesn't reset the action).\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.enabled = true;\n\n    /**\n     * If set to true the animation will automatically be paused on its last frame.\n     *\n     * If set to false, {@link AnimationAction#enabled} will automatically be switched\n     * to `false` when the last loop of the action has finished, so that this action has\n     * no further impact.\n     *\n     * Note: This member has no impact if the action is interrupted (it\n     * has only an effect if its last loop has really finished).\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.clampWhenFinished = false;\n\n    /**\n     * Enables smooth interpolation without separate clips for start, loop and end.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.zeroSlopeAtStart = true;\n\n    /**\n     * Enables smooth interpolation without separate clips for start, loop and end.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.zeroSlopeAtEnd = true;\n  }\n\n  /**\n   * Starts the playback of the animation.\n   *\n   * @return {AnimationAction} A reference to this animation action.\n   */\n  play() {\n    this._mixer._activateAction(this);\n    return this;\n  }\n\n  /**\n   * Stops the playback of the animation.\n   *\n   * @return {AnimationAction} A reference to this animation action.\n   */\n  stop() {\n    this._mixer._deactivateAction(this);\n    return this.reset();\n  }\n\n  /**\n   * Resets the playback of the animation.\n   *\n   * @return {AnimationAction} A reference to this animation action.\n   */\n  reset() {\n    this.paused = false;\n    this.enabled = true;\n    this.time = 0; // restart clip\n    this._loopCount = -1; // forget previous loops\n    this._startTime = null; // forget scheduling\n\n    return this.stopFading().stopWarping();\n  }\n\n  /**\n   * Returns `true` if the animation is running.\n   *\n   * @return {boolean} Whether the animation is running or not.\n   */\n  isRunning() {\n    return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);\n  }\n\n  /**\n   * Returns `true` when {@link AnimationAction#play} has been called.\n   *\n   * @return {boolean} Whether the animation is scheduled or not.\n   */\n  isScheduled() {\n    return this._mixer._isActiveAction(this);\n  }\n\n  /**\n   * Defines the time when the animation should start.\n   *\n   * @param {number} time - The start time in seconds.\n   * @return {AnimationAction} A reference to this animation action.\n   */\n  startAt(time) {\n    this._startTime = time;\n    return this;\n  }\n\n  /**\n   * Configures the loop settings for this action.\n   *\n   * @param {(LoopRepeat|LoopOnce|LoopPingPong)} mode - The loop mode.\n   * @param {number} repetitions - The number of repetitions.\n   * @return {AnimationAction} A reference to this animation action.\n   */\n  setLoop(mode, repetitions) {\n    this.loop = mode;\n    this.repetitions = repetitions;\n    return this;\n  }\n\n  /**\n   * Sets the effective weight of this action.\n   *\n   * An action has no effect and thus an effective weight of zero when the\n   * action is disabled.\n   *\n   * @param {number} weight - The weight to set.\n   * @return {AnimationAction} A reference to this animation action.\n   */\n  setEffectiveWeight(weight) {\n    this.weight = weight;\n\n    // note: same logic as when updated at runtime\n    this._effectiveWeight = this.enabled ? weight : 0;\n    return this.stopFading();\n  }\n\n  /**\n   * Returns the effective weight of this action.\n   *\n   * @return {number} The effective weight.\n   */\n  getEffectiveWeight() {\n    return this._effectiveWeight;\n  }\n\n  /**\n   * Fades the animation in by increasing its weight gradually from `0` to `1`,\n   * within the passed time interval.\n   *\n   * @param {number} duration - The duration of the fade.\n   * @return {AnimationAction} A reference to this animation action.\n   */\n  fadeIn(duration) {\n    return this._scheduleFading(duration, 0, 1);\n  }\n\n  /**\n   * Fades the animation out by decreasing its weight gradually from `1` to `0`,\n   * within the passed time interval.\n   *\n   * @param {number} duration - The duration of the fade.\n   * @return {AnimationAction} A reference to this animation action.\n   */\n  fadeOut(duration) {\n    return this._scheduleFading(duration, 1, 0);\n  }\n\n  /**\n   * Causes this action to fade in and the given action to fade out,\n   * within the passed time interval.\n   *\n   * @param {AnimationAction} fadeOutAction - The animation action to fade out.\n   * @param {number} duration - The duration of the fade.\n   * @param {boolean} [warp=false] - Whether warping should be used or not.\n   * @return {AnimationAction} A reference to this animation action.\n   */\n  crossFadeFrom(fadeOutAction, duration) {\n    let warp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    fadeOutAction.fadeOut(duration);\n    this.fadeIn(duration);\n    if (warp === true) {\n      const fadeInDuration = this._clip.duration,\n        fadeOutDuration = fadeOutAction._clip.duration,\n        startEndRatio = fadeOutDuration / fadeInDuration,\n        endStartRatio = fadeInDuration / fadeOutDuration;\n      fadeOutAction.warp(1.0, startEndRatio, duration);\n      this.warp(endStartRatio, 1.0, duration);\n    }\n    return this;\n  }\n\n  /**\n   * Causes this action to fade out and the given action to fade in,\n   * within the passed time interval.\n   *\n   * @param {AnimationAction} fadeInAction - The animation action to fade in.\n   * @param {number} duration - The duration of the fade.\n   * @param {boolean} [warp=false] - Whether warping should be used or not.\n   * @return {AnimationAction} A reference to this animation action.\n   */\n  crossFadeTo(fadeInAction, duration) {\n    let warp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    return fadeInAction.crossFadeFrom(this, duration, warp);\n  }\n\n  /**\n   * Stops any fading which is applied to this action.\n   *\n   * @return {AnimationAction} A reference to this animation action.\n   */\n  stopFading() {\n    const weightInterpolant = this._weightInterpolant;\n    if (weightInterpolant !== null) {\n      this._weightInterpolant = null;\n      this._mixer._takeBackControlInterpolant(weightInterpolant);\n    }\n    return this;\n  }\n\n  /**\n   * Sets the effective time scale of this action.\n   *\n   * An action has no effect and thus an effective time scale of zero when the\n   * action is paused.\n   *\n   * @param {number} timeScale - The time scale to set.\n   * @return {AnimationAction} A reference to this animation action.\n   */\n  setEffectiveTimeScale(timeScale) {\n    this.timeScale = timeScale;\n    this._effectiveTimeScale = this.paused ? 0 : timeScale;\n    return this.stopWarping();\n  }\n\n  /**\n   * Returns the effective time scale of this action.\n   *\n   * @return {number} The effective time scale.\n   */\n  getEffectiveTimeScale() {\n    return this._effectiveTimeScale;\n  }\n\n  /**\n   * Sets the duration for a single loop of this action.\n   *\n   * @param {number} duration - The duration to set.\n   * @return {AnimationAction} A reference to this animation action.\n   */\n  setDuration(duration) {\n    this.timeScale = this._clip.duration / duration;\n    return this.stopWarping();\n  }\n\n  /**\n   * Synchronizes this action with the passed other action.\n   *\n   * @param {AnimationAction} action - The action to sync with.\n   * @return {AnimationAction} A reference to this animation action.\n   */\n  syncWith(action) {\n    this.time = action.time;\n    this.timeScale = action.timeScale;\n    return this.stopWarping();\n  }\n\n  /**\n   * Decelerates this animation's speed to `0` within the passed time interval.\n   *\n   * @param {number} duration - The duration.\n   * @return {AnimationAction} A reference to this animation action.\n   */\n  halt(duration) {\n    return this.warp(this._effectiveTimeScale, 0, duration);\n  }\n\n  /**\n   * Changes the playback speed, within the passed time interval, by modifying\n   * {@link AnimationAction#timeScale} gradually from `startTimeScale` to\n   * `endTimeScale`.\n   *\n   * @param {number} startTimeScale - The start time scale.\n   * @param {number} endTimeScale - The end time scale.\n   * @param {number} duration - The duration.\n   * @return {AnimationAction} A reference to this animation action.\n   */\n  warp(startTimeScale, endTimeScale, duration) {\n    const mixer = this._mixer,\n      now = mixer.time,\n      timeScale = this.timeScale;\n    let interpolant = this._timeScaleInterpolant;\n    if (interpolant === null) {\n      interpolant = mixer._lendControlInterpolant();\n      this._timeScaleInterpolant = interpolant;\n    }\n    const times = interpolant.parameterPositions,\n      values = interpolant.sampleValues;\n    times[0] = now;\n    times[1] = now + duration;\n    values[0] = startTimeScale / timeScale;\n    values[1] = endTimeScale / timeScale;\n    return this;\n  }\n\n  /**\n   * Stops any scheduled warping which is applied to this action.\n   *\n   * @return {AnimationAction} A reference to this animation action.\n   */\n  stopWarping() {\n    const timeScaleInterpolant = this._timeScaleInterpolant;\n    if (timeScaleInterpolant !== null) {\n      this._timeScaleInterpolant = null;\n      this._mixer._takeBackControlInterpolant(timeScaleInterpolant);\n    }\n    return this;\n  }\n\n  /**\n   * Returns the animation mixer of this animation action.\n   *\n   * @return {AnimationMixer} The animation mixer.\n   */\n  getMixer() {\n    return this._mixer;\n  }\n\n  /**\n   * Returns the animation clip of this animation action.\n   *\n   * @return {AnimationClip} The animation clip.\n   */\n  getClip() {\n    return this._clip;\n  }\n\n  /**\n   * Returns the root object of this animation action.\n   *\n   * @return {Object3D} The root object.\n   */\n  getRoot() {\n    return this._localRoot || this._mixer._root;\n  }\n\n  // Interna\n\n  _update(time, deltaTime, timeDirection, accuIndex) {\n    // called by the mixer\n\n    if (!this.enabled) {\n      // call ._updateWeight() to update ._effectiveWeight\n\n      this._updateWeight(time);\n      return;\n    }\n    const startTime = this._startTime;\n    if (startTime !== null) {\n      // check for scheduled start of action\n\n      const timeRunning = (time - startTime) * timeDirection;\n      if (timeRunning < 0 || timeDirection === 0) {\n        deltaTime = 0;\n      } else {\n        this._startTime = null; // unschedule\n        deltaTime = timeDirection * timeRunning;\n      }\n    }\n\n    // apply time scale and advance time\n\n    deltaTime *= this._updateTimeScale(time);\n    const clipTime = this._updateTime(deltaTime);\n\n    // note: _updateTime may disable the action resulting in\n    // an effective weight of 0\n\n    const weight = this._updateWeight(time);\n    if (weight > 0) {\n      const interpolants = this._interpolants;\n      const propertyMixers = this._propertyBindings;\n      switch (this.blendMode) {\n        case AdditiveAnimationBlendMode:\n          for (let j = 0, m = interpolants.length; j !== m; ++j) {\n            interpolants[j].evaluate(clipTime);\n            propertyMixers[j].accumulateAdditive(weight);\n          }\n          break;\n        case NormalAnimationBlendMode:\n        default:\n          for (let j = 0, m = interpolants.length; j !== m; ++j) {\n            interpolants[j].evaluate(clipTime);\n            propertyMixers[j].accumulate(accuIndex, weight);\n          }\n      }\n    }\n  }\n  _updateWeight(time) {\n    let weight = 0;\n    if (this.enabled) {\n      weight = this.weight;\n      const interpolant = this._weightInterpolant;\n      if (interpolant !== null) {\n        const interpolantValue = interpolant.evaluate(time)[0];\n        weight *= interpolantValue;\n        if (time > interpolant.parameterPositions[1]) {\n          this.stopFading();\n          if (interpolantValue === 0) {\n            // faded out, disable\n            this.enabled = false;\n          }\n        }\n      }\n    }\n    this._effectiveWeight = weight;\n    return weight;\n  }\n  _updateTimeScale(time) {\n    let timeScale = 0;\n    if (!this.paused) {\n      timeScale = this.timeScale;\n      const interpolant = this._timeScaleInterpolant;\n      if (interpolant !== null) {\n        const interpolantValue = interpolant.evaluate(time)[0];\n        timeScale *= interpolantValue;\n        if (time > interpolant.parameterPositions[1]) {\n          this.stopWarping();\n          if (timeScale === 0) {\n            // motion has halted, pause\n            this.paused = true;\n          } else {\n            // warp done - apply final time scale\n            this.timeScale = timeScale;\n          }\n        }\n      }\n    }\n    this._effectiveTimeScale = timeScale;\n    return timeScale;\n  }\n  _updateTime(deltaTime) {\n    const duration = this._clip.duration;\n    const loop = this.loop;\n    let time = this.time + deltaTime;\n    let loopCount = this._loopCount;\n    const pingPong = loop === LoopPingPong;\n    if (deltaTime === 0) {\n      if (loopCount === -1) return time;\n      return pingPong && (loopCount & 1) === 1 ? duration - time : time;\n    }\n    if (loop === LoopOnce) {\n      if (loopCount === -1) {\n        // just started\n\n        this._loopCount = 0;\n        this._setEndings(true, true, false);\n      }\n      handle_stop: {\n        if (time >= duration) {\n          time = duration;\n        } else if (time < 0) {\n          time = 0;\n        } else {\n          this.time = time;\n          break handle_stop;\n        }\n        if (this.clampWhenFinished) this.paused = true;else this.enabled = false;\n        this.time = time;\n        this._mixer.dispatchEvent({\n          type: 'finished',\n          action: this,\n          direction: deltaTime < 0 ? -1 : 1\n        });\n      }\n    } else {\n      // repetitive Repeat or PingPong\n\n      if (loopCount === -1) {\n        // just started\n\n        if (deltaTime >= 0) {\n          loopCount = 0;\n          this._setEndings(true, this.repetitions === 0, pingPong);\n        } else {\n          // when looping in reverse direction, the initial\n          // transition through zero counts as a repetition,\n          // so leave loopCount at -1\n\n          this._setEndings(this.repetitions === 0, true, pingPong);\n        }\n      }\n      if (time >= duration || time < 0) {\n        // wrap around\n\n        const loopDelta = Math.floor(time / duration); // signed\n        time -= duration * loopDelta;\n        loopCount += Math.abs(loopDelta);\n        const pending = this.repetitions - loopCount;\n        if (pending <= 0) {\n          // have to stop (switch state, clamp time, fire event)\n\n          if (this.clampWhenFinished) this.paused = true;else this.enabled = false;\n          time = deltaTime > 0 ? duration : 0;\n          this.time = time;\n          this._mixer.dispatchEvent({\n            type: 'finished',\n            action: this,\n            direction: deltaTime > 0 ? 1 : -1\n          });\n        } else {\n          // keep running\n\n          if (pending === 1) {\n            // entering the last round\n\n            const atStart = deltaTime < 0;\n            this._setEndings(atStart, !atStart, pingPong);\n          } else {\n            this._setEndings(false, false, pingPong);\n          }\n          this._loopCount = loopCount;\n          this.time = time;\n          this._mixer.dispatchEvent({\n            type: 'loop',\n            action: this,\n            loopDelta: loopDelta\n          });\n        }\n      } else {\n        this.time = time;\n      }\n      if (pingPong && (loopCount & 1) === 1) {\n        // invert time for the \"pong round\"\n\n        return duration - time;\n      }\n    }\n    return time;\n  }\n  _setEndings(atStart, atEnd, pingPong) {\n    const settings = this._interpolantSettings;\n    if (pingPong) {\n      settings.endingStart = ZeroSlopeEnding;\n      settings.endingEnd = ZeroSlopeEnding;\n    } else {\n      // assuming for LoopOnce atStart == atEnd == true\n\n      if (atStart) {\n        settings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n      } else {\n        settings.endingStart = WrapAroundEnding;\n      }\n      if (atEnd) {\n        settings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n      } else {\n        settings.endingEnd = WrapAroundEnding;\n      }\n    }\n  }\n  _scheduleFading(duration, weightNow, weightThen) {\n    const mixer = this._mixer,\n      now = mixer.time;\n    let interpolant = this._weightInterpolant;\n    if (interpolant === null) {\n      interpolant = mixer._lendControlInterpolant();\n      this._weightInterpolant = interpolant;\n    }\n    const times = interpolant.parameterPositions,\n      values = interpolant.sampleValues;\n    times[0] = now;\n    values[0] = weightNow;\n    times[1] = now + duration;\n    values[1] = weightThen;\n    return this;\n  }\n}\nconst _controlInterpolantsResultBuffer = new Float32Array(1);\n\n/**\n * `AnimationMixer` is a player for animations on a particular object in\n * the scene. When multiple objects in the scene are animated independently,\n * one `AnimationMixer` may be used for each object.\n */\nclass AnimationMixer extends EventDispatcher {\n  /**\n   * Constructs a new animation mixer.\n   *\n   * @param {Object3D} root - The object whose animations shall be played by this mixer.\n   */\n  constructor(root) {\n    super();\n    this._root = root;\n    this._initMemoryManager();\n    this._accuIndex = 0;\n\n    /**\n     * The global mixer time (in seconds; starting with `0` on the mixer's creation).\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.time = 0;\n\n    /**\n     * A scaling factor for the global time.\n     *\n     * Note: Setting this member to `0` and later back to `1` is a\n     * possibility to pause/unpause all actions that are controlled by this\n     * mixer.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.timeScale = 1.0;\n  }\n  _bindAction(action, prototypeAction) {\n    const root = action._localRoot || this._root,\n      tracks = action._clip.tracks,\n      nTracks = tracks.length,\n      bindings = action._propertyBindings,\n      interpolants = action._interpolants,\n      rootUuid = root.uuid,\n      bindingsByRoot = this._bindingsByRootAndName;\n    let bindingsByName = bindingsByRoot[rootUuid];\n    if (bindingsByName === undefined) {\n      bindingsByName = {};\n      bindingsByRoot[rootUuid] = bindingsByName;\n    }\n    for (let i = 0; i !== nTracks; ++i) {\n      const track = tracks[i],\n        trackName = track.name;\n      let binding = bindingsByName[trackName];\n      if (binding !== undefined) {\n        ++binding.referenceCount;\n        bindings[i] = binding;\n      } else {\n        binding = bindings[i];\n        if (binding !== undefined) {\n          // existing binding, make sure the cache knows\n\n          if (binding._cacheIndex === null) {\n            ++binding.referenceCount;\n            this._addInactiveBinding(binding, rootUuid, trackName);\n          }\n          continue;\n        }\n        const path = prototypeAction && prototypeAction._propertyBindings[i].binding.parsedPath;\n        binding = new PropertyMixer(PropertyBinding.create(root, trackName, path), track.ValueTypeName, track.getValueSize());\n        ++binding.referenceCount;\n        this._addInactiveBinding(binding, rootUuid, trackName);\n        bindings[i] = binding;\n      }\n      interpolants[i].resultBuffer = binding.buffer;\n    }\n  }\n  _activateAction(action) {\n    if (!this._isActiveAction(action)) {\n      if (action._cacheIndex === null) {\n        // this action has been forgotten by the cache, but the user\n        // appears to be still using it -> rebind\n\n        const rootUuid = (action._localRoot || this._root).uuid,\n          clipUuid = action._clip.uuid,\n          actionsForClip = this._actionsByClip[clipUuid];\n        this._bindAction(action, actionsForClip && actionsForClip.knownActions[0]);\n        this._addInactiveAction(action, clipUuid, rootUuid);\n      }\n      const bindings = action._propertyBindings;\n\n      // increment reference counts / sort out state\n      for (let i = 0, n = bindings.length; i !== n; ++i) {\n        const binding = bindings[i];\n        if (binding.useCount++ === 0) {\n          this._lendBinding(binding);\n          binding.saveOriginalState();\n        }\n      }\n      this._lendAction(action);\n    }\n  }\n  _deactivateAction(action) {\n    if (this._isActiveAction(action)) {\n      const bindings = action._propertyBindings;\n\n      // decrement reference counts / sort out state\n      for (let i = 0, n = bindings.length; i !== n; ++i) {\n        const binding = bindings[i];\n        if (--binding.useCount === 0) {\n          binding.restoreOriginalState();\n          this._takeBackBinding(binding);\n        }\n      }\n      this._takeBackAction(action);\n    }\n  }\n\n  // Memory manager\n\n  _initMemoryManager() {\n    this._actions = []; // 'nActiveActions' followed by inactive ones\n    this._nActiveActions = 0;\n    this._actionsByClip = {};\n    // inside:\n    // {\n    // \tknownActions: Array< AnimationAction > - used as prototypes\n    // \tactionByRoot: AnimationAction - lookup\n    // }\n\n    this._bindings = []; // 'nActiveBindings' followed by inactive ones\n    this._nActiveBindings = 0;\n    this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n    this._controlInterpolants = []; // same game as above\n    this._nActiveControlInterpolants = 0;\n    const scope = this;\n    this.stats = {\n      actions: {\n        get total() {\n          return scope._actions.length;\n        },\n        get inUse() {\n          return scope._nActiveActions;\n        }\n      },\n      bindings: {\n        get total() {\n          return scope._bindings.length;\n        },\n        get inUse() {\n          return scope._nActiveBindings;\n        }\n      },\n      controlInterpolants: {\n        get total() {\n          return scope._controlInterpolants.length;\n        },\n        get inUse() {\n          return scope._nActiveControlInterpolants;\n        }\n      }\n    };\n  }\n\n  // Memory management for AnimationAction objects\n\n  _isActiveAction(action) {\n    const index = action._cacheIndex;\n    return index !== null && index < this._nActiveActions;\n  }\n  _addInactiveAction(action, clipUuid, rootUuid) {\n    const actions = this._actions,\n      actionsByClip = this._actionsByClip;\n    let actionsForClip = actionsByClip[clipUuid];\n    if (actionsForClip === undefined) {\n      actionsForClip = {\n        knownActions: [action],\n        actionByRoot: {}\n      };\n      action._byClipCacheIndex = 0;\n      actionsByClip[clipUuid] = actionsForClip;\n    } else {\n      const knownActions = actionsForClip.knownActions;\n      action._byClipCacheIndex = knownActions.length;\n      knownActions.push(action);\n    }\n    action._cacheIndex = actions.length;\n    actions.push(action);\n    actionsForClip.actionByRoot[rootUuid] = action;\n  }\n  _removeInactiveAction(action) {\n    const actions = this._actions,\n      lastInactiveAction = actions[actions.length - 1],\n      cacheIndex = action._cacheIndex;\n    lastInactiveAction._cacheIndex = cacheIndex;\n    actions[cacheIndex] = lastInactiveAction;\n    actions.pop();\n    action._cacheIndex = null;\n    const clipUuid = action._clip.uuid,\n      actionsByClip = this._actionsByClip,\n      actionsForClip = actionsByClip[clipUuid],\n      knownActionsForClip = actionsForClip.knownActions,\n      lastKnownAction = knownActionsForClip[knownActionsForClip.length - 1],\n      byClipCacheIndex = action._byClipCacheIndex;\n    lastKnownAction._byClipCacheIndex = byClipCacheIndex;\n    knownActionsForClip[byClipCacheIndex] = lastKnownAction;\n    knownActionsForClip.pop();\n    action._byClipCacheIndex = null;\n    const actionByRoot = actionsForClip.actionByRoot,\n      rootUuid = (action._localRoot || this._root).uuid;\n    delete actionByRoot[rootUuid];\n    if (knownActionsForClip.length === 0) {\n      delete actionsByClip[clipUuid];\n    }\n    this._removeInactiveBindingsForAction(action);\n  }\n  _removeInactiveBindingsForAction(action) {\n    const bindings = action._propertyBindings;\n    for (let i = 0, n = bindings.length; i !== n; ++i) {\n      const binding = bindings[i];\n      if (--binding.referenceCount === 0) {\n        this._removeInactiveBinding(binding);\n      }\n    }\n  }\n  _lendAction(action) {\n    // [ active actions |  inactive actions  ]\n    // [  active actions >| inactive actions ]\n    //                 s        a\n    //                  <-swap->\n    //                 a        s\n\n    const actions = this._actions,\n      prevIndex = action._cacheIndex,\n      lastActiveIndex = this._nActiveActions++,\n      firstInactiveAction = actions[lastActiveIndex];\n    action._cacheIndex = lastActiveIndex;\n    actions[lastActiveIndex] = action;\n    firstInactiveAction._cacheIndex = prevIndex;\n    actions[prevIndex] = firstInactiveAction;\n  }\n  _takeBackAction(action) {\n    // [  active actions  | inactive actions ]\n    // [ active actions |< inactive actions  ]\n    //        a        s\n    //         <-swap->\n    //        s        a\n\n    const actions = this._actions,\n      prevIndex = action._cacheIndex,\n      firstInactiveIndex = --this._nActiveActions,\n      lastActiveAction = actions[firstInactiveIndex];\n    action._cacheIndex = firstInactiveIndex;\n    actions[firstInactiveIndex] = action;\n    lastActiveAction._cacheIndex = prevIndex;\n    actions[prevIndex] = lastActiveAction;\n  }\n\n  // Memory management for PropertyMixer objects\n\n  _addInactiveBinding(binding, rootUuid, trackName) {\n    const bindingsByRoot = this._bindingsByRootAndName,\n      bindings = this._bindings;\n    let bindingByName = bindingsByRoot[rootUuid];\n    if (bindingByName === undefined) {\n      bindingByName = {};\n      bindingsByRoot[rootUuid] = bindingByName;\n    }\n    bindingByName[trackName] = binding;\n    binding._cacheIndex = bindings.length;\n    bindings.push(binding);\n  }\n  _removeInactiveBinding(binding) {\n    const bindings = this._bindings,\n      propBinding = binding.binding,\n      rootUuid = propBinding.rootNode.uuid,\n      trackName = propBinding.path,\n      bindingsByRoot = this._bindingsByRootAndName,\n      bindingByName = bindingsByRoot[rootUuid],\n      lastInactiveBinding = bindings[bindings.length - 1],\n      cacheIndex = binding._cacheIndex;\n    lastInactiveBinding._cacheIndex = cacheIndex;\n    bindings[cacheIndex] = lastInactiveBinding;\n    bindings.pop();\n    delete bindingByName[trackName];\n    if (Object.keys(bindingByName).length === 0) {\n      delete bindingsByRoot[rootUuid];\n    }\n  }\n  _lendBinding(binding) {\n    const bindings = this._bindings,\n      prevIndex = binding._cacheIndex,\n      lastActiveIndex = this._nActiveBindings++,\n      firstInactiveBinding = bindings[lastActiveIndex];\n    binding._cacheIndex = lastActiveIndex;\n    bindings[lastActiveIndex] = binding;\n    firstInactiveBinding._cacheIndex = prevIndex;\n    bindings[prevIndex] = firstInactiveBinding;\n  }\n  _takeBackBinding(binding) {\n    const bindings = this._bindings,\n      prevIndex = binding._cacheIndex,\n      firstInactiveIndex = --this._nActiveBindings,\n      lastActiveBinding = bindings[firstInactiveIndex];\n    binding._cacheIndex = firstInactiveIndex;\n    bindings[firstInactiveIndex] = binding;\n    lastActiveBinding._cacheIndex = prevIndex;\n    bindings[prevIndex] = lastActiveBinding;\n  }\n\n  // Memory management of Interpolants for weight and time scale\n\n  _lendControlInterpolant() {\n    const interpolants = this._controlInterpolants,\n      lastActiveIndex = this._nActiveControlInterpolants++;\n    let interpolant = interpolants[lastActiveIndex];\n    if (interpolant === undefined) {\n      interpolant = new LinearInterpolant(new Float32Array(2), new Float32Array(2), 1, _controlInterpolantsResultBuffer);\n      interpolant.__cacheIndex = lastActiveIndex;\n      interpolants[lastActiveIndex] = interpolant;\n    }\n    return interpolant;\n  }\n  _takeBackControlInterpolant(interpolant) {\n    const interpolants = this._controlInterpolants,\n      prevIndex = interpolant.__cacheIndex,\n      firstInactiveIndex = --this._nActiveControlInterpolants,\n      lastActiveInterpolant = interpolants[firstInactiveIndex];\n    interpolant.__cacheIndex = firstInactiveIndex;\n    interpolants[firstInactiveIndex] = interpolant;\n    lastActiveInterpolant.__cacheIndex = prevIndex;\n    interpolants[prevIndex] = lastActiveInterpolant;\n  }\n\n  /**\n   * Returns an instance of {@link AnimationAction} for the passed clip.\n   *\n   * If an action fitting the clip and root parameters doesn't yet exist, it\n   * will be created by this method. Calling this method several times with the\n   * same clip and root parameters always returns the same action.\n   *\n   * @param {AnimationClip|string} clip - An animation clip or alternatively the name of the animation clip.\n   * @param {Object3D} [optionalRoot] - An alternative root object.\n   * @param {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)} [blendMode] - The blend mode.\n   * @return {?AnimationAction} The animation action.\n   */\n  clipAction(clip, optionalRoot, blendMode) {\n    const root = optionalRoot || this._root,\n      rootUuid = root.uuid;\n    let clipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip;\n    const clipUuid = clipObject !== null ? clipObject.uuid : clip;\n    const actionsForClip = this._actionsByClip[clipUuid];\n    let prototypeAction = null;\n    if (blendMode === undefined) {\n      if (clipObject !== null) {\n        blendMode = clipObject.blendMode;\n      } else {\n        blendMode = NormalAnimationBlendMode;\n      }\n    }\n    if (actionsForClip !== undefined) {\n      const existingAction = actionsForClip.actionByRoot[rootUuid];\n      if (existingAction !== undefined && existingAction.blendMode === blendMode) {\n        return existingAction;\n      }\n\n      // we know the clip, so we don't have to parse all\n      // the bindings again but can just copy\n      prototypeAction = actionsForClip.knownActions[0];\n\n      // also, take the clip from the prototype action\n      if (clipObject === null) clipObject = prototypeAction._clip;\n    }\n\n    // clip must be known when specified via string\n    if (clipObject === null) return null;\n\n    // allocate all resources required to run it\n    const newAction = new AnimationAction(this, clipObject, optionalRoot, blendMode);\n    this._bindAction(newAction, prototypeAction);\n\n    // and make the action known to the memory manager\n    this._addInactiveAction(newAction, clipUuid, rootUuid);\n    return newAction;\n  }\n\n  /**\n   * Returns an existing animation action for the passed clip.\n   *\n   * @param {AnimationClip|string} clip - An animation clip or alternatively the name of the animation clip.\n   * @param {Object3D} [optionalRoot] - An alternative root object.\n   * @return {?AnimationAction} The animation action. Returns `null` if no action was found.\n   */\n  existingAction(clip, optionalRoot) {\n    const root = optionalRoot || this._root,\n      rootUuid = root.uuid,\n      clipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip,\n      clipUuid = clipObject ? clipObject.uuid : clip,\n      actionsForClip = this._actionsByClip[clipUuid];\n    if (actionsForClip !== undefined) {\n      return actionsForClip.actionByRoot[rootUuid] || null;\n    }\n    return null;\n  }\n\n  /**\n   * Deactivates all previously scheduled actions on this mixer.\n   *\n   * @return {AnimationMixer} A reference to thi animation mixer.\n   */\n  stopAllAction() {\n    const actions = this._actions,\n      nActions = this._nActiveActions;\n    for (let i = nActions - 1; i >= 0; --i) {\n      actions[i].stop();\n    }\n    return this;\n  }\n\n  /**\n   * Advances the global mixer time and updates the animation.\n   *\n   * This is usually done in the render loop by passing the delta\n   * time from {@link Clock} or {@link Timer}.\n   *\n   * @param {number} deltaTime - The delta time in seconds.\n   * @return {AnimationMixer} A reference to thi animation mixer.\n   */\n  update(deltaTime) {\n    deltaTime *= this.timeScale;\n    const actions = this._actions,\n      nActions = this._nActiveActions,\n      time = this.time += deltaTime,\n      timeDirection = Math.sign(deltaTime),\n      accuIndex = this._accuIndex ^= 1;\n\n    // run active actions\n\n    for (let i = 0; i !== nActions; ++i) {\n      const action = actions[i];\n      action._update(time, deltaTime, timeDirection, accuIndex);\n    }\n\n    // update scene graph\n\n    const bindings = this._bindings,\n      nBindings = this._nActiveBindings;\n    for (let i = 0; i !== nBindings; ++i) {\n      bindings[i].apply(accuIndex);\n    }\n    return this;\n  }\n\n  /**\n   * Sets the global mixer to a specific time and updates the animation accordingly.\n   *\n   * This is useful when you need to jump to an exact time in an animation. The\n   * input parameter will be scaled by {@link AnimationMixer#timeScale}\n   *\n   * @param {number} time - The time to set in seconds.\n   * @return {AnimationMixer} A reference to thi animation mixer.\n   */\n  setTime(time) {\n    this.time = 0; // Zero out time attribute for AnimationMixer object;\n    for (let i = 0; i < this._actions.length; i++) {\n      this._actions[i].time = 0; // Zero out time attribute for all associated AnimationAction objects.\n    }\n    return this.update(time); // Update used to set exact time. Returns \"this\" AnimationMixer object.\n  }\n\n  /**\n   * Returns this mixer's root object.\n   *\n   * @return {Object3D} The mixer's root object.\n   */\n  getRoot() {\n    return this._root;\n  }\n\n  /**\n   * Deallocates all memory resources for a clip. Before using this method make\n   * sure to call {@link AnimationAction#stop} for all related actions.\n   *\n   * @param {AnimationClip} clip - The clip to uncache.\n   */\n  uncacheClip(clip) {\n    const actions = this._actions,\n      clipUuid = clip.uuid,\n      actionsByClip = this._actionsByClip,\n      actionsForClip = actionsByClip[clipUuid];\n    if (actionsForClip !== undefined) {\n      // note: just calling _removeInactiveAction would mess up the\n      // iteration state and also require updating the state we can\n      // just throw away\n\n      const actionsToRemove = actionsForClip.knownActions;\n      for (let i = 0, n = actionsToRemove.length; i !== n; ++i) {\n        const action = actionsToRemove[i];\n        this._deactivateAction(action);\n        const cacheIndex = action._cacheIndex,\n          lastInactiveAction = actions[actions.length - 1];\n        action._cacheIndex = null;\n        action._byClipCacheIndex = null;\n        lastInactiveAction._cacheIndex = cacheIndex;\n        actions[cacheIndex] = lastInactiveAction;\n        actions.pop();\n        this._removeInactiveBindingsForAction(action);\n      }\n      delete actionsByClip[clipUuid];\n    }\n  }\n\n  /**\n   * Deallocates all memory resources for a root object. Before using this\n   * method make sure to call {@link AnimationAction#stop} for all related\n   * actions or alternatively {@link AnimationMixer#stopAllAction} when the\n   * mixer operates on a single root.\n   *\n   * @param {Object3D} root - The root object to uncache.\n   */\n  uncacheRoot(root) {\n    const rootUuid = root.uuid,\n      actionsByClip = this._actionsByClip;\n    for (const clipUuid in actionsByClip) {\n      const actionByRoot = actionsByClip[clipUuid].actionByRoot,\n        action = actionByRoot[rootUuid];\n      if (action !== undefined) {\n        this._deactivateAction(action);\n        this._removeInactiveAction(action);\n      }\n    }\n    const bindingsByRoot = this._bindingsByRootAndName,\n      bindingByName = bindingsByRoot[rootUuid];\n    if (bindingByName !== undefined) {\n      for (const trackName in bindingByName) {\n        const binding = bindingByName[trackName];\n        binding.restoreOriginalState();\n        this._removeInactiveBinding(binding);\n      }\n    }\n  }\n\n  /**\n   * Deallocates all memory resources for an action. The action is identified by the\n   * given clip and an optional root object. Before using this method make\n   * sure to call {@link AnimationAction#stop} to deactivate the action.\n   *\n   * @param {AnimationClip|string} clip - An animation clip or alternatively the name of the animation clip.\n   * @param {Object3D} [optionalRoot] - An alternative root object.\n   */\n  uncacheAction(clip, optionalRoot) {\n    const action = this.existingAction(clip, optionalRoot);\n    if (action !== null) {\n      this._deactivateAction(action);\n      this._removeInactiveAction(action);\n    }\n  }\n}\n\n/**\n * Represents a 3D render target.\n *\n * @augments RenderTarget\n */\nclass RenderTarget3D extends RenderTarget {\n  /**\n   * Constructs a new 3D render target.\n   *\n   * @param {number} [width=1] - The width of the render target.\n   * @param {number} [height=1] - The height of the render target.\n   * @param {number} [depth=1] - The height of the render target.\n   * @param {RenderTarget~Options} [options] - The configuration object.\n   */\n  constructor() {\n    let width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    super(width, height, options);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isRenderTarget3D = true;\n    this.depth = depth;\n\n    /**\n     * Overwritten with a different texture type.\n     *\n     * @type {Data3DTexture}\n     */\n    this.texture = new Data3DTexture(null, width, height, depth);\n    this.texture.isRenderTargetTexture = true;\n  }\n}\n\n/**\n * Represents an array render target.\n *\n * @augments RenderTarget\n */\nclass RenderTargetArray extends RenderTarget {\n  /**\n   * Constructs a new 3D render target.\n   *\n   * @param {number} [width=1] - The width of the render target.\n   * @param {number} [height=1] - The height of the render target.\n   * @param {number} [depth=1] - The height of the render target.\n   * @param {RenderTarget~Options} [options] - The configuration object.\n   */\n  constructor() {\n    let width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    super(width, height, options);\n    this.isRenderTargetArray = true;\n    this.depth = depth;\n\n    /**\n     * Overwritten with a different texture type.\n     *\n     * @type {DataArrayTexture}\n     */\n    this.texture = new DataArrayTexture(null, width, height, depth);\n    this.texture.isRenderTargetTexture = true;\n  }\n}\n\n/**\n * Represents a uniform which is a global shader variable. They are passed to shader programs.\n *\n * When declaring a uniform of a {@link ShaderMaterial}, it is declared by value or by object.\n * ```js\n * uniforms: {\n * \ttime: { value: 1.0 },\n * \tresolution: new Uniform( new Vector2() )\n * };\n * ```\n * Since this class can only be used in context of {@link ShaderMaterial}, it is only supported\n * in {@link WebGLRenderer}.\n */\nclass Uniform {\n  /**\n   * Constructs a new uniform.\n   *\n   * @param {any} value - The uniform value.\n   */\n  constructor(value) {\n    /**\n     * The uniform value.\n     *\n     * @type {any}\n     */\n    this.value = value;\n  }\n\n  /**\n   * Returns a new uniform with copied values from this instance.\n   * If the value has a `clone()` method, the value is cloned as well.\n   *\n   * @return {Uniform} A clone of this instance.\n   */\n  clone() {\n    return new Uniform(this.value.clone === undefined ? this.value : this.value.clone());\n  }\n}\nlet _id = 0;\n\n/**\n * A class for managing multiple uniforms in a single group. The renderer will process\n * such a definition as a single UBO.\n *\n * Since this class can only be used in context of {@link ShaderMaterial}, it is only supported\n * in {@link WebGLRenderer}.\n *\n * @augments EventDispatcher\n */\nclass UniformsGroup extends EventDispatcher {\n  /**\n   * Constructs a new uniforms group.\n   */\n  constructor() {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isUniformsGroup = true;\n\n    /**\n     * The ID of the 3D object.\n     *\n     * @name UniformsGroup#id\n     * @type {number}\n     * @readonly\n     */\n    Object.defineProperty(this, 'id', {\n      value: _id++\n    });\n\n    /**\n     * The name of the uniforms group.\n     *\n     * @type {string}\n     */\n    this.name = '';\n\n    /**\n     * The buffer usage.\n     *\n     * @type {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)}\n     * @default StaticDrawUsage\n     */\n    this.usage = StaticDrawUsage;\n\n    /**\n     * An array holding the uniforms.\n     *\n     * @type {Array<Uniform>}\n     */\n    this.uniforms = [];\n  }\n\n  /**\n   * Adds the given uniform to this uniforms group.\n   *\n   * @param {Uniform} uniform - The uniform to add.\n   * @return {UniformsGroup} A reference to this uniforms group.\n   */\n  add(uniform) {\n    this.uniforms.push(uniform);\n    return this;\n  }\n\n  /**\n   * Removes the given uniform from this uniforms group.\n   *\n   * @param {Uniform} uniform - The uniform to remove.\n   * @return {UniformsGroup} A reference to this uniforms group.\n   */\n  remove(uniform) {\n    const index = this.uniforms.indexOf(uniform);\n    if (index !== -1) this.uniforms.splice(index, 1);\n    return this;\n  }\n\n  /**\n   * Sets the name of this uniforms group.\n   *\n   * @param {string} name - The name to set.\n   * @return {UniformsGroup} A reference to this uniforms group.\n   */\n  setName(name) {\n    this.name = name;\n    return this;\n  }\n\n  /**\n   * Sets the usage of this uniforms group.\n   *\n   * @param {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)} value - The usage to set.\n   * @return {UniformsGroup} A reference to this uniforms group.\n   */\n  setUsage(value) {\n    this.usage = value;\n    return this;\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   *\n   * @fires Texture#dispose\n   */\n  dispose() {\n    this.dispatchEvent({\n      type: 'dispose'\n    });\n  }\n\n  /**\n   * Copies the values of the given uniforms group to this instance.\n   *\n   * @param {UniformsGroup} source - The uniforms group to copy.\n   * @return {UniformsGroup} A reference to this uniforms group.\n   */\n  copy(source) {\n    this.name = source.name;\n    this.usage = source.usage;\n    const uniformsSource = source.uniforms;\n    this.uniforms.length = 0;\n    for (let i = 0, l = uniformsSource.length; i < l; i++) {\n      const uniforms = Array.isArray(uniformsSource[i]) ? uniformsSource[i] : [uniformsSource[i]];\n      for (let j = 0; j < uniforms.length; j++) {\n        this.uniforms.push(uniforms[j].clone());\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Returns a new uniforms group with copied values from this instance.\n   *\n   * @return {UniformsGroup} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor().copy(this);\n  }\n}\n\n/**\n * An instanced version of an interleaved buffer.\n *\n * @augments InterleavedBuffer\n */\nclass InstancedInterleavedBuffer extends InterleavedBuffer {\n  /**\n   * Constructs a new instanced interleaved buffer.\n   *\n   * @param {TypedArray} array - A typed array with a shared buffer storing attribute data.\n   * @param {number} stride - The number of typed-array elements per vertex.\n   * @param {number} [meshPerAttribute=1] - Defines how often a value of this interleaved buffer should be repeated.\n   */\n  constructor(array, stride) {\n    let meshPerAttribute = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    super(array, stride);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isInstancedInterleavedBuffer = true;\n\n    /**\n     * Defines how often a value of this buffer attribute should be repeated,\n     * see {@link InstancedBufferAttribute#meshPerAttribute}.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.meshPerAttribute = meshPerAttribute;\n  }\n  copy(source) {\n    super.copy(source);\n    this.meshPerAttribute = source.meshPerAttribute;\n    return this;\n  }\n  clone(data) {\n    const ib = super.clone(data);\n    ib.meshPerAttribute = this.meshPerAttribute;\n    return ib;\n  }\n  toJSON(data) {\n    const json = super.toJSON(data);\n    json.isInstancedInterleavedBuffer = true;\n    json.meshPerAttribute = this.meshPerAttribute;\n    return json;\n  }\n}\n\n/**\n * An alternative version of a buffer attribute with more control over the VBO.\n *\n * The renderer does not construct a VBO for this kind of attribute. Instead, it uses\n * whatever VBO is passed in constructor and can later be altered via the `buffer` property.\n *\n * The most common use case for this class is when some kind of GPGPU calculation interferes\n * or even produces the VBOs in question.\n *\n * Notice that this class can only be used with {@link WebGLRenderer}.\n */\nclass GLBufferAttribute {\n  /**\n   * Constructs a new GL buffer attribute.\n   *\n   * @param {WebGLBuffer} buffer - The native WebGL buffer.\n   * @param {number} type - The native data type (e.g. `gl.FLOAT`).\n   * @param {number} itemSize - The item size.\n   * @param {number} elementSize - The corresponding size (in bytes) for the given `type` parameter.\n   * @param {number} count - The expected number of vertices in VBO.\n   */\n  constructor(buffer, type, itemSize, elementSize, count) {\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isGLBufferAttribute = true;\n\n    /**\n     * The name of the buffer attribute.\n     *\n     * @type {string}\n     */\n    this.name = '';\n\n    /**\n     * The native WebGL buffer.\n     *\n     * @type {WebGLBuffer}\n     */\n    this.buffer = buffer;\n\n    /**\n     * The native data type.\n     *\n     * @type {number}\n     */\n    this.type = type;\n\n    /**\n     * The item size, see {@link BufferAttribute#itemSize}.\n     *\n     * @type {number}\n     */\n    this.itemSize = itemSize;\n\n    /**\n     * The corresponding size (in bytes) for the given `type` parameter.\n     *\n     * @type {number}\n     */\n    this.elementSize = elementSize;\n\n    /**\n     * The expected number of vertices in VBO.\n     *\n     * @type {number}\n     */\n    this.count = count;\n\n    /**\n     * A version number, incremented every time the `needsUpdate` is set to `true`.\n     *\n     * @type {number}\n     */\n    this.version = 0;\n  }\n\n  /**\n   * Flag to indicate that this attribute has changed and should be re-sent to\n   * the GPU. Set this to `true` when you modify the value of the array.\n   *\n   * @type {number}\n   * @default false\n   * @param {boolean} value\n   */\n  set needsUpdate(value) {\n    if (value === true) this.version++;\n  }\n\n  /**\n   * Sets the given native WebGL buffer.\n   *\n   * @param {WebGLBuffer} buffer - The buffer to set.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  setBuffer(buffer) {\n    this.buffer = buffer;\n    return this;\n  }\n\n  /**\n   * Sets the given native data type and element size.\n   *\n   * @param {number} type - The native data type (e.g. `gl.FLOAT`).\n   * @param {number} elementSize - The corresponding size (in bytes) for the given `type` parameter.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  setType(type, elementSize) {\n    this.type = type;\n    this.elementSize = elementSize;\n    return this;\n  }\n\n  /**\n   * Sets the item size.\n   *\n   * @param {number} itemSize - The item size.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  setItemSize(itemSize) {\n    this.itemSize = itemSize;\n    return this;\n  }\n\n  /**\n   * Sets the count (the expected number of vertices in VBO).\n   *\n   * @param {number} count - The count.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  setCount(count) {\n    this.count = count;\n    return this;\n  }\n}\nconst _matrix = /*@__PURE__*/new Matrix4();\n\n/**\n * This class is designed to assist with raycasting. Raycasting is used for\n * mouse picking (working out what objects in the 3d space the mouse is over)\n * amongst other things.\n */\nclass Raycaster {\n  /**\n   * Constructs a new raycaster.\n   *\n   * @param {Vector3} origin - The origin vector where the ray casts from.\n   * @param {Vector3} direction - The (normalized) direction vector that gives direction to the ray.\n   * @param {number} [near=0] - All results returned are further away than near. Near can't be negative.\n   * @param {number} [far=Infinity] - All results returned are closer than far. Far can't be lower than near.\n   */\n  constructor(origin, direction) {\n    let near = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let far = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Infinity;\n    /**\n     * The ray used for raycasting.\n     *\n     * @type {Ray}\n     */\n    this.ray = new Ray(origin, direction);\n\n    /**\n     * All results returned are further away than near. Near can't be negative.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.near = near;\n\n    /**\n     * All results returned are further away than near. Near can't be negative.\n     *\n     * @type {number}\n     * @default Infinity\n     */\n    this.far = far;\n\n    /**\n     * The camera to use when raycasting against view-dependent objects such as\n     * billboarded objects like sprites. This field can be set manually or\n     * is set when calling `setFromCamera()`.\n     *\n     * @type {?Camera}\n     * @default null\n     */\n    this.camera = null;\n\n    /**\n     * Allows to selectively ignore 3D objects when performing intersection tests.\n     * The following code example ensures that only 3D objects on layer `1` will be\n     * honored by raycaster.\n     * ```js\n     * raycaster.layers.set( 1 );\n     * object.layers.enable( 1 );\n     * ```\n     *\n     * @type {Layers}\n     */\n    this.layers = new Layers();\n\n    /**\n     * A parameter object that configures the raycasting. It has the structure:\n     *\n     * ```\n     * {\n     * \tMesh: {},\n     * \tLine: { threshold: 1 },\n     * \tLOD: {},\n     * \tPoints: { threshold: 1 },\n     * \tSprite: {}\n     * }\n     * ```\n     * Where `threshold` is the precision of the raycaster when intersecting objects, in world units.\n     *\n     * @type {Object}\n     */\n    this.params = {\n      Mesh: {},\n      Line: {\n        threshold: 1\n      },\n      LOD: {},\n      Points: {\n        threshold: 1\n      },\n      Sprite: {}\n    };\n  }\n\n  /**\n   * Updates the ray with a new origin and direction by copying the values from the arguments.\n   *\n   * @param {Vector3} origin - The origin vector where the ray casts from.\n   * @param {Vector3} direction - The (normalized) direction vector that gives direction to the ray.\n   */\n  set(origin, direction) {\n    // direction is assumed to be normalized (for accurate distance calculations)\n\n    this.ray.set(origin, direction);\n  }\n\n  /**\n   * Uses the given coordinates and camera to compute a new origin and direction for the internal ray.\n   *\n   * @param {Vector2} coords - 2D coordinates of the mouse, in normalized device coordinates (NDC).\n   * X and Y components should be between `-1` and `1`.\n   * @param {Camera} camera - The camera from which the ray should originate.\n   */\n  setFromCamera(coords, camera) {\n    if (camera.isPerspectiveCamera) {\n      this.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n      this.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera).sub(this.ray.origin).normalize();\n      this.camera = camera;\n    } else if (camera.isOrthographicCamera) {\n      this.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera); // set origin in plane of camera\n      this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n      this.camera = camera;\n    } else {\n      console.error('THREE.Raycaster: Unsupported camera type: ' + camera.type);\n    }\n  }\n\n  /**\n   * Uses the given WebXR controller to compute a new origin and direction for the internal ray.\n   *\n   * @param {WebXRController} controller - The controller to copy the position and direction from.\n   * @return {Raycaster} A reference to this raycaster.\n   */\n  setFromXRController(controller) {\n    _matrix.identity().extractRotation(controller.matrixWorld);\n    this.ray.origin.setFromMatrixPosition(controller.matrixWorld);\n    this.ray.direction.set(0, 0, -1).applyMatrix4(_matrix);\n    return this;\n  }\n\n  /**\n   * The intersection point of a raycaster intersection test.\n   * @typedef {Object} Raycaster~Intersection\n   * @property {number} distance - The distance from the ray's origin to the intersection point.\n   * @property {number} distanceToRay -  Some 3D objects e.g. {@link Points} provide the distance of the\n   * intersection to the nearest point on the ray. For other objects it will be `undefined`.\n   * @property {Vector3} point - The intersection point, in world coordinates.\n   * @property {Object} face - The face that has been intersected.\n   * @property {number} faceIndex - The face index.\n   * @property {Object3D} object - The 3D object that has been intersected.\n   * @property {Vector2} uv - U,V coordinates at point of intersection.\n   * @property {Vector2} uv1 - Second set of U,V coordinates at point of intersection.\n   * @property {Vector3} uv1 - Interpolated normal vector at point of intersection.\n   * @property {number} instanceId - The index number of the instance where the ray\n   * intersects the {@link InstancedMesh}.\n   */\n\n  /**\n   * Checks all intersection between the ray and the object with or without the\n   * descendants. Intersections are returned sorted by distance, closest first.\n   *\n   * `Raycaster` delegates to the `raycast()` method of the passed 3D object, when\n   * evaluating whether the ray intersects the object or not. This allows meshes to respond\n   * differently to ray casting than lines or points.\n   *\n   * Note that for meshes, faces must be pointed towards the origin of the ray in order\n   * to be detected; intersections of the ray passing through the back of a face will not\n   * be detected. To raycast against both faces of an object, you'll want to set  {@link Material#side}\n   * to `THREE.DoubleSide`.\n   *\n   * @param {Object3D} object - The 3D object to check for intersection with the ray.\n   * @param {boolean} [recursive=true] - If set to `true`, it also checks all descendants.\n   * Otherwise it only checks intersection with the object.\n   * @param {Array<Raycaster~Intersection>} [intersects=[]] The target array that holds the result of the method.\n   * @return {Array<Raycaster~Intersection>} An array holding the intersection points.\n   */\n  intersectObject(object) {\n    let recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let intersects = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    intersect(object, this, intersects, recursive);\n    intersects.sort(ascSort);\n    return intersects;\n  }\n\n  /**\n   * Checks all intersection between the ray and the objects with or without\n   * the descendants. Intersections are returned sorted by distance, closest first.\n   *\n   * @param {Array<Object3D>} objects - The 3D objects to check for intersection with the ray.\n   * @param {boolean} [recursive=true] - If set to `true`, it also checks all descendants.\n   * Otherwise it only checks intersection with the object.\n   * @param {Array<Raycaster~Intersection>} [intersects=[]] The target array that holds the result of the method.\n   * @return {Array<Raycaster~Intersection>} An array holding the intersection points.\n   */\n  intersectObjects(objects) {\n    let recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let intersects = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    for (let i = 0, l = objects.length; i < l; i++) {\n      intersect(objects[i], this, intersects, recursive);\n    }\n    intersects.sort(ascSort);\n    return intersects;\n  }\n}\nfunction ascSort(a, b) {\n  return a.distance - b.distance;\n}\nfunction intersect(object, raycaster, intersects, recursive) {\n  let propagate = true;\n  if (object.layers.test(raycaster.layers)) {\n    const result = object.raycast(raycaster, intersects);\n    if (result === false) propagate = false;\n  }\n  if (propagate === true && recursive === true) {\n    const children = object.children;\n    for (let i = 0, l = children.length; i < l; i++) {\n      intersect(children[i], raycaster, intersects, true);\n    }\n  }\n}\n\n/**\n * This class can be used to represent points in 3D space as\n * [Spherical coordinates]{@link https://en.wikipedia.org/wiki/Spherical_coordinate_system}.\n */\nclass Spherical {\n  /**\n   * Constructs a new spherical.\n   *\n   * @param {number} [radius=1] - The radius, or the Euclidean distance (straight-line distance) from the point to the origin.\n   * @param {number} [phi=0] - The polar angle in radians from the y (up) axis.\n   * @param {number} [theta=0] - The equator/azimuthal angle in radians around the y (up) axis.\n   */\n  constructor() {\n    let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let phi = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let theta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    /**\n     * The radius, or the Euclidean distance (straight-line distance) from the point to the origin.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.radius = radius;\n\n    /**\n     * The polar angle in radians from the y (up) axis.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.phi = phi;\n\n    /**\n     * The equator/azimuthal angle in radians around the y (up) axis.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.theta = theta;\n  }\n\n  /**\n   * Sets the spherical components by copying the given values.\n   *\n   * @param {number} radius - The radius.\n   * @param {number} phi - The polar angle.\n   * @param {number} theta - The azimuthal angle.\n   * @return {Spherical} A reference to this spherical.\n   */\n  set(radius, phi, theta) {\n    this.radius = radius;\n    this.phi = phi;\n    this.theta = theta;\n    return this;\n  }\n\n  /**\n   * Copies the values of the given spherical to this instance.\n   *\n   * @param {Spherical} other - The spherical to copy.\n   * @return {Spherical} A reference to this spherical.\n   */\n  copy(other) {\n    this.radius = other.radius;\n    this.phi = other.phi;\n    this.theta = other.theta;\n    return this;\n  }\n\n  /**\n   * Restricts the polar angle [page:.phi phi] to be between `0.000001` and pi -\n   * `0.000001`.\n   *\n   * @return {Spherical} A reference to this spherical.\n   */\n  makeSafe() {\n    const EPS = 0.000001;\n    this.phi = clamp(this.phi, EPS, Math.PI - EPS);\n    return this;\n  }\n\n  /**\n   * Sets the spherical components from the given vector which is assumed to hold\n   * Cartesian coordinates.\n   *\n   * @param {Vector3} v - The vector to set.\n   * @return {Spherical} A reference to this spherical.\n   */\n  setFromVector3(v) {\n    return this.setFromCartesianCoords(v.x, v.y, v.z);\n  }\n\n  /**\n   * Sets the spherical components from the given Cartesian coordinates.\n   *\n   * @param {number} x - The x value.\n   * @param {number} y - The x value.\n   * @param {number} z - The x value.\n   * @return {Spherical} A reference to this spherical.\n   */\n  setFromCartesianCoords(x, y, z) {\n    this.radius = Math.sqrt(x * x + y * y + z * z);\n    if (this.radius === 0) {\n      this.theta = 0;\n      this.phi = 0;\n    } else {\n      this.theta = Math.atan2(x, z);\n      this.phi = Math.acos(clamp(y / this.radius, -1, 1));\n    }\n    return this;\n  }\n\n  /**\n   * Returns a new spherical with copied values from this instance.\n   *\n   * @return {Spherical} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor().copy(this);\n  }\n}\n\n/**\n * This class can be used to represent points in 3D space as\n * [Cylindrical coordinates]{@link https://en.wikipedia.org/wiki/Cylindrical_coordinate_system}.\n */\nclass Cylindrical {\n  /**\n   * Constructs a new cylindrical.\n   *\n   * @param {number} [radius=1] - The distance from the origin to a point in the x-z plane.\n   * @param {number} [theta=0] - A counterclockwise angle in the x-z plane measured in radians from the positive z-axis.\n   * @param {number} [y=0] - The height above the x-z plane.\n   */\n  constructor() {\n    let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let theta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    /**\n     * The distance from the origin to a point in the x-z plane.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.radius = radius;\n\n    /**\n     * A counterclockwise angle in the x-z plane measured in radians from the positive z-axis.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.theta = theta;\n\n    /**\n     * The height above the x-z plane.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.y = y;\n  }\n\n  /**\n   * Sets the cylindrical components by copying the given values.\n   *\n   * @param {number} radius - The radius.\n   * @param {number} theta - The theta angle.\n   * @param {number} y - The height value.\n   * @return {Cylindrical} A reference to this cylindrical.\n   */\n  set(radius, theta, y) {\n    this.radius = radius;\n    this.theta = theta;\n    this.y = y;\n    return this;\n  }\n\n  /**\n   * Copies the values of the given cylindrical to this instance.\n   *\n   * @param {Cylindrical} other - The cylindrical to copy.\n   * @return {Cylindrical} A reference to this cylindrical.\n   */\n  copy(other) {\n    this.radius = other.radius;\n    this.theta = other.theta;\n    this.y = other.y;\n    return this;\n  }\n\n  /**\n   * Sets the cylindrical components from the given vector which is assumed to hold\n   * Cartesian coordinates.\n   *\n   * @param {Vector3} v - The vector to set.\n   * @return {Cylindrical} A reference to this cylindrical.\n   */\n  setFromVector3(v) {\n    return this.setFromCartesianCoords(v.x, v.y, v.z);\n  }\n\n  /**\n   * Sets the cylindrical components from the given Cartesian coordinates.\n   *\n   * @param {number} x - The x value.\n   * @param {number} y - The x value.\n   * @param {number} z - The x value.\n   * @return {Cylindrical} A reference to this cylindrical.\n   */\n  setFromCartesianCoords(x, y, z) {\n    this.radius = Math.sqrt(x * x + z * z);\n    this.theta = Math.atan2(x, z);\n    this.y = y;\n    return this;\n  }\n\n  /**\n   * Returns a new cylindrical with copied values from this instance.\n   *\n   * @return {Cylindrical} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor().copy(this);\n  }\n}\n\n/**\n * Represents a 2x2 matrix.\n *\n * A Note on Row-Major and Column-Major Ordering:\n *\n * The constructor and {@link Matrix2#set} method take arguments in\n * [row-major]{@link https://en.wikipedia.org/wiki/Row-_and_column-major_order#Column-major_order}\n * order, while internally they are stored in the {@link Matrix2#elements} array in column-major order.\n * This means that calling:\n * ```js\n * const m = new THREE.Matrix2();\n * m.set( 11, 12,\n *        21, 22 );\n * ```\n * will result in the elements array containing:\n * ```js\n * m.elements = [ 11, 21,\n *                12, 22 ];\n * ```\n * and internally all calculations are performed using column-major ordering.\n * However, as the actual ordering makes no difference mathematically and\n * most people are used to thinking about matrices in row-major order, the\n * three.js documentation shows matrices in row-major order. Just bear in\n * mind that if you are reading the source code, you'll have to take the\n * transpose of any matrices outlined here to make sense of the calculations.\n */\nclass Matrix2 {\n  /**\n   * Constructs a new 2x2 matrix. The arguments are supposed to be\n   * in row-major order. If no arguments are provided, the constructor\n   * initializes the matrix as an identity matrix.\n   *\n   * @param {number} [n11] - 1-1 matrix element.\n   * @param {number} [n12] - 1-2 matrix element.\n   * @param {number} [n21] - 2-1 matrix element.\n   * @param {number} [n22] - 2-2 matrix element.\n   */\n  constructor(n11, n12, n21, n22) {\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    Matrix2.prototype.isMatrix2 = true;\n\n    /**\n     * A column-major list of matrix values.\n     *\n     * @type {Array<number>}\n     */\n    this.elements = [1, 0, 0, 1];\n    if (n11 !== undefined) {\n      this.set(n11, n12, n21, n22);\n    }\n  }\n\n  /**\n   * Sets this matrix to the 2x2 identity matrix.\n   *\n   * @return {Matrix2} A reference to this matrix.\n   */\n  identity() {\n    this.set(1, 0, 0, 1);\n    return this;\n  }\n\n  /**\n   * Sets the elements of the matrix from the given array.\n   *\n   * @param {Array<number>} array - The matrix elements in column-major order.\n   * @param {number} [offset=0] - Index of the first element in the array.\n   * @return {Matrix2} A reference to this matrix.\n   */\n  fromArray(array) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    for (let i = 0; i < 4; i++) {\n      this.elements[i] = array[i + offset];\n    }\n    return this;\n  }\n\n  /**\n   * Sets the elements of the matrix.The arguments are supposed to be\n   * in row-major order.\n   *\n   * @param {number} n11 - 1-1 matrix element.\n   * @param {number} n12 - 1-2 matrix element.\n   * @param {number} n21 - 2-1 matrix element.\n   * @param {number} n22 - 2-2 matrix element.\n   * @return {Matrix2} A reference to this matrix.\n   */\n  set(n11, n12, n21, n22) {\n    const te = this.elements;\n    te[0] = n11;\n    te[2] = n12;\n    te[1] = n21;\n    te[3] = n22;\n    return this;\n  }\n}\nconst _vector$4 = /*@__PURE__*/new Vector2();\n\n/**\n * Represents an axis-aligned bounding box (AABB) in 2D space.\n */\nclass Box2 {\n  /**\n   * Constructs a new bounding box.\n   *\n   * @param {Vector2} [min=(Infinity,Infinity)] - A vector representing the lower boundary of the box.\n   * @param {Vector2} [max=(-Infinity,-Infinity)] - A vector representing the upper boundary of the box.\n   */\n  constructor() {\n    let min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector2(+Infinity, +Infinity);\n    let max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2(-Infinity, -Infinity);\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isBox2 = true;\n\n    /**\n     * The lower boundary of the box.\n     *\n     * @type {Vector2}\n     */\n    this.min = min;\n\n    /**\n     * The upper boundary of the box.\n     *\n     * @type {Vector2}\n     */\n    this.max = max;\n  }\n\n  /**\n   * Sets the lower and upper boundaries of this box.\n   * Please note that this method only copies the values from the given objects.\n   *\n   * @param {Vector2} min - The lower boundary of the box.\n   * @param {Vector2} max - The upper boundary of the box.\n   * @return {Box2} A reference to this bounding box.\n   */\n  set(min, max) {\n    this.min.copy(min);\n    this.max.copy(max);\n    return this;\n  }\n\n  /**\n   * Sets the upper and lower bounds of this box so it encloses the position data\n   * in the given array.\n   *\n   * @param {Array<Vector2>} points - An array holding 2D position data as instances of {@link Vector2}.\n   * @return {Box2} A reference to this bounding box.\n   */\n  setFromPoints(points) {\n    this.makeEmpty();\n    for (let i = 0, il = points.length; i < il; i++) {\n      this.expandByPoint(points[i]);\n    }\n    return this;\n  }\n\n  /**\n   * Centers this box on the given center vector and sets this box's width, height and\n   * depth to the given size values.\n   *\n   * @param {Vector2} center - The center of the box.\n   * @param {Vector2} size - The x and y dimensions of the box.\n   * @return {Box2} A reference to this bounding box.\n   */\n  setFromCenterAndSize(center, size) {\n    const halfSize = _vector$4.copy(size).multiplyScalar(0.5);\n    this.min.copy(center).sub(halfSize);\n    this.max.copy(center).add(halfSize);\n    return this;\n  }\n\n  /**\n   * Returns a new box with copied values from this instance.\n   *\n   * @return {Box2} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  /**\n   * Copies the values of the given box to this instance.\n   *\n   * @param {Box2} box - The box to copy.\n   * @return {Box2} A reference to this bounding box.\n   */\n  copy(box) {\n    this.min.copy(box.min);\n    this.max.copy(box.max);\n    return this;\n  }\n\n  /**\n   * Makes this box empty which means in encloses a zero space in 2D.\n   *\n   * @return {Box2} A reference to this bounding box.\n   */\n  makeEmpty() {\n    this.min.x = this.min.y = +Infinity;\n    this.max.x = this.max.y = -Infinity;\n    return this;\n  }\n\n  /**\n   * Returns true if this box includes zero points within its bounds.\n   * Note that a box with equal lower and upper bounds still includes one\n   * point, the one both bounds share.\n   *\n   * @return {boolean} Whether this box is empty or not.\n   */\n  isEmpty() {\n    // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n    return this.max.x < this.min.x || this.max.y < this.min.y;\n  }\n\n  /**\n   * Returns the center point of this box.\n   *\n   * @param {Vector2} target - The target vector that is used to store the method's result.\n   * @return {Vector2} The center point.\n   */\n  getCenter(target) {\n    return this.isEmpty() ? target.set(0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n  }\n\n  /**\n   * Returns the dimensions of this box.\n   *\n   * @param {Vector2} target - The target vector that is used to store the method's result.\n   * @return {Vector2} The size.\n   */\n  getSize(target) {\n    return this.isEmpty() ? target.set(0, 0) : target.subVectors(this.max, this.min);\n  }\n\n  /**\n   * Expands the boundaries of this box to include the given point.\n   *\n   * @param {Vector2} point - The point that should be included by the bounding box.\n   * @return {Box2} A reference to this bounding box.\n   */\n  expandByPoint(point) {\n    this.min.min(point);\n    this.max.max(point);\n    return this;\n  }\n\n  /**\n   * Expands this box equilaterally by the given vector. The width of this\n   * box will be expanded by the x component of the vector in both\n   * directions. The height of this box will be expanded by the y component of\n   * the vector in both directions.\n   *\n   * @param {Vector2} vector - The vector that should expand the bounding box.\n   * @return {Box2} A reference to this bounding box.\n   */\n  expandByVector(vector) {\n    this.min.sub(vector);\n    this.max.add(vector);\n    return this;\n  }\n\n  /**\n   * Expands each dimension of the box by the given scalar. If negative, the\n   * dimensions of the box will be contracted.\n   *\n   * @param {number} scalar - The scalar value that should expand the bounding box.\n   * @return {Box2} A reference to this bounding box.\n   */\n  expandByScalar(scalar) {\n    this.min.addScalar(-scalar);\n    this.max.addScalar(scalar);\n    return this;\n  }\n\n  /**\n   * Returns `true` if the given point lies within or on the boundaries of this box.\n   *\n   * @param {Vector2} point - The point to test.\n   * @return {boolean} Whether the bounding box contains the given point or not.\n   */\n  containsPoint(point) {\n    return point.x >= this.min.x && point.x <= this.max.x && point.y >= this.min.y && point.y <= this.max.y;\n  }\n\n  /**\n   * Returns `true` if this bounding box includes the entirety of the given bounding box.\n   * If this box and the given one are identical, this function also returns `true`.\n   *\n   * @param {Box2} box - The bounding box to test.\n   * @return {boolean} Whether the bounding box contains the given bounding box or not.\n   */\n  containsBox(box) {\n    return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y;\n  }\n\n  /**\n   * Returns a point as a proportion of this box's width and height.\n   *\n   * @param {Vector2} point - A point in 2D space.\n   * @param {Vector2} target - The target vector that is used to store the method's result.\n   * @return {Vector2} A point as a proportion of this box's width and height.\n   */\n  getParameter(point, target) {\n    // This can potentially have a divide by zero if the box\n    // has a size dimension of 0.\n\n    return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y));\n  }\n\n  /**\n   * Returns `true` if the given bounding box intersects with this bounding box.\n   *\n   * @param {Box2} box - The bounding box to test.\n   * @return {boolean} Whether the given bounding box intersects with this bounding box.\n   */\n  intersectsBox(box) {\n    // using 4 splitting planes to rule out intersections\n\n    return box.max.x >= this.min.x && box.min.x <= this.max.x && box.max.y >= this.min.y && box.min.y <= this.max.y;\n  }\n\n  /**\n   * Clamps the given point within the bounds of this box.\n   *\n   * @param {Vector2} point - The point to clamp.\n   * @param {Vector2} target - The target vector that is used to store the method's result.\n   * @return {Vector2} The clamped point.\n   */\n  clampPoint(point, target) {\n    return target.copy(point).clamp(this.min, this.max);\n  }\n\n  /**\n   * Returns the euclidean distance from any edge of this box to the specified point. If\n   * the given point lies inside of this box, the distance will be `0`.\n   *\n   * @param {Vector2} point - The point to compute the distance to.\n   * @return {number} The euclidean distance.\n   */\n  distanceToPoint(point) {\n    return this.clampPoint(point, _vector$4).distanceTo(point);\n  }\n\n  /**\n   * Computes the intersection of this bounding box and the given one, setting the upper\n   * bound of this box to the lesser of the two boxes' upper bounds and the\n   * lower bound of this box to the greater of the two boxes' lower bounds. If\n   * there's no overlap, makes this box empty.\n   *\n   * @param {Box2} box - The bounding box to intersect with.\n   * @return {Box2} A reference to this bounding box.\n   */\n  intersect(box) {\n    this.min.max(box.min);\n    this.max.min(box.max);\n    if (this.isEmpty()) this.makeEmpty();\n    return this;\n  }\n\n  /**\n   * Computes the union of this box and another and the given one, setting the upper\n   * bound of this box to the greater of the two boxes' upper bounds and the\n   * lower bound of this box to the lesser of the two boxes' lower bounds.\n   *\n   * @param {Box2} box - The bounding box that will be unioned with this instance.\n   * @return {Box2} A reference to this bounding box.\n   */\n  union(box) {\n    this.min.min(box.min);\n    this.max.max(box.max);\n    return this;\n  }\n\n  /**\n   * Adds the given offset to both the upper and lower bounds of this bounding box,\n   * effectively moving it in 2D space.\n   *\n   * @param {Vector2} offset - The offset that should be used to translate the bounding box.\n   * @return {Box2} A reference to this bounding box.\n   */\n  translate(offset) {\n    this.min.add(offset);\n    this.max.add(offset);\n    return this;\n  }\n\n  /**\n   * Returns `true` if this bounding box is equal with the given one.\n   *\n   * @param {Box2} box - The box to test for equality.\n   * @return {boolean} Whether this bounding box is equal with the given one.\n   */\n  equals(box) {\n    return box.min.equals(this.min) && box.max.equals(this.max);\n  }\n}\nconst _startP = /*@__PURE__*/new Vector3();\nconst _startEnd = /*@__PURE__*/new Vector3();\n\n/**\n * An analytical line segment in 3D space represented by a start and end point.\n */\nclass Line3 {\n  /**\n   * Constructs a new line segment.\n   *\n   * @param {Vector3} [start=(0,0,0)] - Start of the line segment.\n   * @param {Vector3} [end=(0,0,0)] - End of the line segment.\n   */\n  constructor() {\n    let start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3();\n    let end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n    /**\n     * Start of the line segment.\n     *\n     * @type {Vector3}\n     */\n    this.start = start;\n\n    /**\n     * End of the line segment.\n     *\n     * @type {Vector3}\n     */\n    this.end = end;\n  }\n\n  /**\n   * Sets the start and end values by copying the given vectors.\n   *\n   * @param {Vector3} start - The start point.\n   * @param {Vector3} end - The end point.\n   * @return {Line3} A reference to this line segment.\n   */\n  set(start, end) {\n    this.start.copy(start);\n    this.end.copy(end);\n    return this;\n  }\n\n  /**\n   * Copies the values of the given line segment to this instance.\n   *\n   * @param {Line3} line - The line segment to copy.\n   * @return {Line3} A reference to this line segment.\n   */\n  copy(line) {\n    this.start.copy(line.start);\n    this.end.copy(line.end);\n    return this;\n  }\n\n  /**\n   * Returns the center of the line segment.\n   *\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {Vector3} The center point.\n   */\n  getCenter(target) {\n    return target.addVectors(this.start, this.end).multiplyScalar(0.5);\n  }\n\n  /**\n   * Returns the delta vector of the line segment's start and end point.\n   *\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {Vector3} The delta vector.\n   */\n  delta(target) {\n    return target.subVectors(this.end, this.start);\n  }\n\n  /**\n   * Returns the squared Euclidean distance between the line' start and end point.\n   *\n   * @return {number} The squared Euclidean distance.\n   */\n  distanceSq() {\n    return this.start.distanceToSquared(this.end);\n  }\n\n  /**\n   * Returns the Euclidean distance between the line' start and end point.\n   *\n   * @return {number} The Euclidean distance.\n   */\n  distance() {\n    return this.start.distanceTo(this.end);\n  }\n\n  /**\n   * Returns a vector at a certain position along the line segment.\n   *\n   * @param {number} t - A value between `[0,1]` to represent a position along the line segment.\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {Vector3} The delta vector.\n   */\n  at(t, target) {\n    return this.delta(target).multiplyScalar(t).add(this.start);\n  }\n\n  /**\n   * Returns a point parameter based on the closest point as projected on the line segment.\n   *\n   * @param {Vector3} point - The point for which to return a point parameter.\n   * @param {boolean} clampToLine - Whether to clamp the result to the range `[0,1]` or not.\n   * @return {number} The point parameter.\n   */\n  closestPointToPointParameter(point, clampToLine) {\n    _startP.subVectors(point, this.start);\n    _startEnd.subVectors(this.end, this.start);\n    const startEnd2 = _startEnd.dot(_startEnd);\n    const startEnd_startP = _startEnd.dot(_startP);\n    let t = startEnd_startP / startEnd2;\n    if (clampToLine) {\n      t = clamp(t, 0, 1);\n    }\n    return t;\n  }\n\n  /**\n   * Returns the closets point on the line for a given point.\n   *\n   * @param {Vector3} point - The point to compute the closest point on the line for.\n   * @param {boolean} clampToLine - Whether to clamp the result to the range `[0,1]` or not.\n   * @param {Vector3} target -  The target vector that is used to store the method's result.\n   * @return {Vector3} The closest point on the line.\n   */\n  closestPointToPoint(point, clampToLine, target) {\n    const t = this.closestPointToPointParameter(point, clampToLine);\n    return this.delta(target).multiplyScalar(t).add(this.start);\n  }\n\n  /**\n   * Applies a 4x4 transformation matrix to this line segment.\n   *\n   * @param {Matrix4} matrix - The transformation matrix.\n   * @return {Line3} A reference to this line segment.\n   */\n  applyMatrix4(matrix) {\n    this.start.applyMatrix4(matrix);\n    this.end.applyMatrix4(matrix);\n    return this;\n  }\n\n  /**\n   * Returns `true` if this line segment is equal with the given one.\n   *\n   * @param {Line3} line - The line segment to test for equality.\n   * @return {boolean} Whether this line segment is equal with the given one.\n   */\n  equals(line) {\n    return line.start.equals(this.start) && line.end.equals(this.end);\n  }\n\n  /**\n   * Returns a new line segment with copied values from this instance.\n   *\n   * @return {Line3} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor().copy(this);\n  }\n}\nconst _vector$3 = /*@__PURE__*/new Vector3();\n\n/**\n * This displays a cone shaped helper object for a {@link SpotLight}.\n *\n * ```js\n * const spotLight = new THREE.SpotLight( 0xffffff );\n * spotLight.position.set( 10, 10, 10 );\n * scene.add( spotLight );\n *\n * const spotLightHelper = new THREE.SpotLightHelper( spotLight );\n * scene.add( spotLightHelper );\n * ```\n *\n * @augments Object3D\n */\nclass SpotLightHelper extends Object3D {\n  /**\n   * Constructs a new spot light helper.\n   *\n   * @param {HemisphereLight} light - The light to be visualized.\n   * @param {number|Color|string} [color] - The helper's color. If not set, the helper will take\n   * the color of the light.\n   */\n  constructor(light, color) {\n    super();\n\n    /**\n     * The light being visualized.\n     *\n     * @type {SpotLight}\n     */\n    this.light = light;\n    this.matrixAutoUpdate = false;\n\n    /**\n     * The color parameter passed in the constructor.\n     * If not set, the helper will take the color of the light.\n     *\n     * @type {number|Color|string}\n     */\n    this.color = color;\n    this.type = 'SpotLightHelper';\n    const geometry = new BufferGeometry();\n    const positions = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];\n    for (let i = 0, j = 1, l = 32; i < l; i++, j++) {\n      const p1 = i / l * Math.PI * 2;\n      const p2 = j / l * Math.PI * 2;\n      positions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);\n    }\n    geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n    const material = new LineBasicMaterial({\n      fog: false,\n      toneMapped: false\n    });\n    this.cone = new LineSegments(geometry, material);\n    this.add(this.cone);\n    this.update();\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    this.cone.geometry.dispose();\n    this.cone.material.dispose();\n  }\n\n  /**\n   * Updates the helper to match the position and direction of the\n   * light being visualized.\n   */\n  update() {\n    this.light.updateWorldMatrix(true, false);\n    this.light.target.updateWorldMatrix(true, false);\n\n    // update the local matrix based on the parent and light target transforms\n    if (this.parent) {\n      this.parent.updateWorldMatrix(true);\n      this.matrix.copy(this.parent.matrixWorld).invert().multiply(this.light.matrixWorld);\n    } else {\n      this.matrix.copy(this.light.matrixWorld);\n    }\n    this.matrixWorld.copy(this.light.matrixWorld);\n    const coneLength = this.light.distance ? this.light.distance : 1000;\n    const coneWidth = coneLength * Math.tan(this.light.angle);\n    this.cone.scale.set(coneWidth, coneWidth, coneLength);\n    _vector$3.setFromMatrixPosition(this.light.target.matrixWorld);\n    this.cone.lookAt(_vector$3);\n    if (this.color !== undefined) {\n      this.cone.material.color.set(this.color);\n    } else {\n      this.cone.material.color.copy(this.light.color);\n    }\n  }\n}\nconst _vector$2 = /*@__PURE__*/new Vector3();\nconst _boneMatrix = /*@__PURE__*/new Matrix4();\nconst _matrixWorldInv = /*@__PURE__*/new Matrix4();\n\n/**\n * A helper object to assist with visualizing a {@link Skeleton}.\n *\n * ```js\n * const helper = new THREE.SkeletonHelper( skinnedMesh );\n * scene.add( helper );\n * ```\n *\n * @augments LineSegments\n */\nclass SkeletonHelper extends LineSegments {\n  /**\n   * Constructs a new hemisphere light helper.\n   *\n   * @param {Object3D} object -  Usually an instance of {@link SkinnedMesh}. However, any 3D object\n   * can be used if it represents a hierarchy of bones (see {@link Bone}).\n   */\n  constructor(object) {\n    const bones = getBoneList(object);\n    const geometry = new BufferGeometry();\n    const vertices = [];\n    const colors = [];\n    const color1 = new Color(0, 0, 1);\n    const color2 = new Color(0, 1, 0);\n    for (let i = 0; i < bones.length; i++) {\n      const bone = bones[i];\n      if (bone.parent && bone.parent.isBone) {\n        vertices.push(0, 0, 0);\n        vertices.push(0, 0, 0);\n        colors.push(color1.r, color1.g, color1.b);\n        colors.push(color2.r, color2.g, color2.b);\n      }\n    }\n    geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n    const material = new LineBasicMaterial({\n      vertexColors: true,\n      depthTest: false,\n      depthWrite: false,\n      toneMapped: false,\n      transparent: true\n    });\n    super(geometry, material);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isSkeletonHelper = true;\n    this.type = 'SkeletonHelper';\n\n    /**\n     * The object being visualized.\n     *\n     * @type {Object3D}\n     */\n    this.root = object;\n\n    /**\n     * he list of bones that the helper visualizes.\n     *\n     * @type {Array<Bone>}\n     */\n    this.bones = bones;\n    this.matrix = object.matrixWorld;\n    this.matrixAutoUpdate = false;\n  }\n  updateMatrixWorld(force) {\n    const bones = this.bones;\n    const geometry = this.geometry;\n    const position = geometry.getAttribute('position');\n    _matrixWorldInv.copy(this.root.matrixWorld).invert();\n    for (let i = 0, j = 0; i < bones.length; i++) {\n      const bone = bones[i];\n      if (bone.parent && bone.parent.isBone) {\n        _boneMatrix.multiplyMatrices(_matrixWorldInv, bone.matrixWorld);\n        _vector$2.setFromMatrixPosition(_boneMatrix);\n        position.setXYZ(j, _vector$2.x, _vector$2.y, _vector$2.z);\n        _boneMatrix.multiplyMatrices(_matrixWorldInv, bone.parent.matrixWorld);\n        _vector$2.setFromMatrixPosition(_boneMatrix);\n        position.setXYZ(j + 1, _vector$2.x, _vector$2.y, _vector$2.z);\n        j += 2;\n      }\n    }\n    geometry.getAttribute('position').needsUpdate = true;\n    super.updateMatrixWorld(force);\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    this.geometry.dispose();\n    this.material.dispose();\n  }\n}\nfunction getBoneList(object) {\n  const boneList = [];\n  if (object.isBone === true) {\n    boneList.push(object);\n  }\n  for (let i = 0; i < object.children.length; i++) {\n    boneList.push(...getBoneList(object.children[i]));\n  }\n  return boneList;\n}\n\n/**\n * This displays a helper object consisting of a spherical mesh for\n * visualizing an instance of {@link PointLight}.\n *\n * ```js\n * const pointLight = new THREE.PointLight( 0xff0000, 1, 100 );\n * pointLight.position.set( 10, 10, 10 );\n * scene.add( pointLight );\n *\n * const sphereSize = 1;\n * const pointLightHelper = new THREE.PointLightHelper( pointLight, sphereSize );\n * scene.add( pointLightHelper );\n * ```\n *\n * @augments Mesh\n */\nclass PointLightHelper extends Mesh {\n  /**\n   * Constructs a new point light helper.\n   *\n   * @param {PointLight} light - The light to be visualized.\n   * @param {number} [sphereSize=1] - The size of the sphere helper.\n   * @param {number|Color|string} [color] - The helper's color. If not set, the helper will take\n   * the color of the light.\n   */\n  constructor(light, sphereSize, color) {\n    const geometry = new SphereGeometry(sphereSize, 4, 2);\n    const material = new MeshBasicMaterial({\n      wireframe: true,\n      fog: false,\n      toneMapped: false\n    });\n    super(geometry, material);\n\n    /**\n     * The light being visualized.\n     *\n     * @type {HemisphereLight}\n     */\n    this.light = light;\n\n    /**\n     * The color parameter passed in the constructor.\n     * If not set, the helper will take the color of the light.\n     *\n     * @type {number|Color|string}\n     */\n    this.color = color;\n    this.type = 'PointLightHelper';\n    this.matrix = this.light.matrixWorld;\n    this.matrixAutoUpdate = false;\n    this.update();\n\n    /*\n    // TODO: delete this comment?\n    const distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n    const distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n    this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n    this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n    const d = light.distance;\n    if ( d === 0.0 ) {\n    \tthis.lightDistance.visible = false;\n    } else {\n    \tthis.lightDistance.scale.set( d, d, d );\n    }\n    this.add( this.lightDistance );\n    */\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    this.geometry.dispose();\n    this.material.dispose();\n  }\n\n  /**\n   * Updates the helper to match the position of the\n   * light being visualized.\n   */\n  update() {\n    this.light.updateWorldMatrix(true, false);\n    if (this.color !== undefined) {\n      this.material.color.set(this.color);\n    } else {\n      this.material.color.copy(this.light.color);\n    }\n\n    /*\n    const d = this.light.distance;\n    \tif ( d === 0.0 ) {\n    \t\tthis.lightDistance.visible = false;\n    \t} else {\n    \t\tthis.lightDistance.visible = true;\n    \tthis.lightDistance.scale.set( d, d, d );\n    \t}\n    */\n  }\n}\nconst _vector$1 = /*@__PURE__*/new Vector3();\nconst _color1 = /*@__PURE__*/new Color();\nconst _color2 = /*@__PURE__*/new Color();\n\n/**\n * Creates a visual aid consisting of a spherical mesh for a\n * given {@link HemisphereLight}.\n *\n * ```js\n * const light = new THREE.HemisphereLight( 0xffffbb, 0x080820, 1 );\n * const helper = new THREE.HemisphereLightHelper( light, 5 );\n * scene.add( helper );\n * ```\n *\n * @augments Object3D\n */\nclass HemisphereLightHelper extends Object3D {\n  /**\n   * Constructs a new hemisphere light helper.\n   *\n   * @param {HemisphereLight} light - The light to be visualized.\n   * @param {number} [size=1] - The size of the mesh used to visualize the light.\n   * @param {number|Color|string} [color] - The helper's color. If not set, the helper will take\n   * the color of the light.\n   */\n  constructor(light, size, color) {\n    super();\n\n    /**\n     * The light being visualized.\n     *\n     * @type {HemisphereLight}\n     */\n    this.light = light;\n    this.matrix = light.matrixWorld;\n    this.matrixAutoUpdate = false;\n\n    /**\n     * The color parameter passed in the constructor.\n     * If not set, the helper will take the color of the light.\n     *\n     * @type {number|Color|string}\n     */\n    this.color = color;\n    this.type = 'HemisphereLightHelper';\n    const geometry = new OctahedronGeometry(size);\n    geometry.rotateY(Math.PI * 0.5);\n    this.material = new MeshBasicMaterial({\n      wireframe: true,\n      fog: false,\n      toneMapped: false\n    });\n    if (this.color === undefined) this.material.vertexColors = true;\n    const position = geometry.getAttribute('position');\n    const colors = new Float32Array(position.count * 3);\n    geometry.setAttribute('color', new BufferAttribute(colors, 3));\n    this.add(new Mesh(geometry, this.material));\n    this.update();\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    this.children[0].geometry.dispose();\n    this.children[0].material.dispose();\n  }\n\n  /**\n   * Updates the helper to match the position and direction of the\n   * light being visualized.\n   */\n  update() {\n    const mesh = this.children[0];\n    if (this.color !== undefined) {\n      this.material.color.set(this.color);\n    } else {\n      const colors = mesh.geometry.getAttribute('color');\n      _color1.copy(this.light.color);\n      _color2.copy(this.light.groundColor);\n      for (let i = 0, l = colors.count; i < l; i++) {\n        const color = i < l / 2 ? _color1 : _color2;\n        colors.setXYZ(i, color.r, color.g, color.b);\n      }\n      colors.needsUpdate = true;\n    }\n    this.light.updateWorldMatrix(true, false);\n    mesh.lookAt(_vector$1.setFromMatrixPosition(this.light.matrixWorld).negate());\n  }\n}\n\n/**\n * The helper is an object to define grids. Grids are two-dimensional\n * arrays of lines.\n *\n * ```js\n * const size = 10;\n * const divisions = 10;\n *\n * const gridHelper = new THREE.GridHelper( size, divisions );\n * scene.add( gridHelper );\n * ```\n *\n * @augments LineSegments\n */\nclass GridHelper extends LineSegments {\n  /**\n   * Constructs a new grid helper.\n   *\n   * @param {number} [size=10] - The size of the grid.\n   * @param {number} [divisions=10] - The number of divisions across the grid.\n   * @param {number|Color|string} [color1=0x444444] - The color of the center line.\n   * @param {number|Color|string} [color2=0x888888] - The color of the lines of the grid.\n   */\n  constructor() {\n    let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n    let divisions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n    let color1 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0x444444;\n    let color2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0x888888;\n    color1 = new Color(color1);\n    color2 = new Color(color2);\n    const center = divisions / 2;\n    const step = size / divisions;\n    const halfSize = size / 2;\n    const vertices = [],\n      colors = [];\n    for (let i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step) {\n      vertices.push(-halfSize, 0, k, halfSize, 0, k);\n      vertices.push(k, 0, -halfSize, k, 0, halfSize);\n      const color = i === center ? color1 : color2;\n      color.toArray(colors, j);\n      j += 3;\n      color.toArray(colors, j);\n      j += 3;\n      color.toArray(colors, j);\n      j += 3;\n      color.toArray(colors, j);\n      j += 3;\n    }\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n    const material = new LineBasicMaterial({\n      vertexColors: true,\n      toneMapped: false\n    });\n    super(geometry, material);\n    this.type = 'GridHelper';\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    this.geometry.dispose();\n    this.material.dispose();\n  }\n}\n\n/**\n * This helper is an object to define polar grids. Grids are\n * two-dimensional arrays of lines.\n *\n * ```js\n * const radius = 10;\n * const sectors = 16;\n * const rings = 8;\n * const divisions = 64;\n *\n * const helper = new THREE.PolarGridHelper( radius, sectors, rings, divisions );\n * scene.add( helper );\n * ```\n *\n * @augments LineSegments\n */\nclass PolarGridHelper extends LineSegments {\n  /**\n   * Constructs a new polar grid helper.\n   *\n   * @param {number} [radius=10] - The radius of the polar grid. This can be any positive number.\n   * @param {number} [sectors=16] - The number of sectors the grid will be divided into. This can be any positive integer.\n   * @param {number} [rings=16] - The number of rings. This can be any positive integer.\n   * @param {number} [divisions=64] - The number of line segments used for each circle. This can be any positive integer.\n   * @param {number|Color|string} [color1=0x444444] - The first color used for grid elements.\n   * @param {number|Color|string} [color2=0x888888] -  The second color used for grid elements.\n   */\n  constructor() {\n    let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n    let sectors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;\n    let rings = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 8;\n    let divisions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 64;\n    let color1 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0x444444;\n    let color2 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0x888888;\n    color1 = new Color(color1);\n    color2 = new Color(color2);\n    const vertices = [];\n    const colors = [];\n\n    // create the sectors\n\n    if (sectors > 1) {\n      for (let i = 0; i < sectors; i++) {\n        const v = i / sectors * (Math.PI * 2);\n        const x = Math.sin(v) * radius;\n        const z = Math.cos(v) * radius;\n        vertices.push(0, 0, 0);\n        vertices.push(x, 0, z);\n        const color = i & 1 ? color1 : color2;\n        colors.push(color.r, color.g, color.b);\n        colors.push(color.r, color.g, color.b);\n      }\n    }\n\n    // create the rings\n\n    for (let i = 0; i < rings; i++) {\n      const color = i & 1 ? color1 : color2;\n      const r = radius - radius / rings * i;\n      for (let j = 0; j < divisions; j++) {\n        // first vertex\n\n        let v = j / divisions * (Math.PI * 2);\n        let x = Math.sin(v) * r;\n        let z = Math.cos(v) * r;\n        vertices.push(x, 0, z);\n        colors.push(color.r, color.g, color.b);\n\n        // second vertex\n\n        v = (j + 1) / divisions * (Math.PI * 2);\n        x = Math.sin(v) * r;\n        z = Math.cos(v) * r;\n        vertices.push(x, 0, z);\n        colors.push(color.r, color.g, color.b);\n      }\n    }\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n    const material = new LineBasicMaterial({\n      vertexColors: true,\n      toneMapped: false\n    });\n    super(geometry, material);\n    this.type = 'PolarGridHelper';\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    this.geometry.dispose();\n    this.material.dispose();\n  }\n}\nconst _v1 = /*@__PURE__*/new Vector3();\nconst _v2 = /*@__PURE__*/new Vector3();\nconst _v3 = /*@__PURE__*/new Vector3();\n\n/**\n * Helper object to assist with visualizing a {@link DirectionalLight}'s\n * effect on the scene. This consists of plane and a line representing the\n * light's position and direction.\n *\n * ```js\n * const light = new THREE.DirectionalLight( 0xFFFFFF );\n * scene.add( light );\n *\n * const helper = new THREE.DirectionalLightHelper( light, 5 );\n * scene.add( helper );\n * ```\n *\n * @augments Object3D\n */\nclass DirectionalLightHelper extends Object3D {\n  /**\n   * Constructs a new directional light helper.\n   *\n   * @param {DirectionalLight} light - The light to be visualized.\n   * @param {number} [size=1] - The dimensions of the plane.\n   * @param {number|Color|string} [color] - The helper's color. If not set, the helper will take\n   * the color of the light.\n   */\n  constructor(light, size, color) {\n    super();\n\n    /**\n     * The light being visualized.\n     *\n     * @type {DirectionalLight}\n     */\n    this.light = light;\n    this.matrix = light.matrixWorld;\n    this.matrixAutoUpdate = false;\n\n    /**\n     * The color parameter passed in the constructor.\n     * If not set, the helper will take the color of the light.\n     *\n     * @type {number|Color|string}\n     */\n    this.color = color;\n    this.type = 'DirectionalLightHelper';\n    if (size === undefined) size = 1;\n    let geometry = new BufferGeometry();\n    geometry.setAttribute('position', new Float32BufferAttribute([-size, size, 0, size, size, 0, size, -size, 0, -size, -size, 0, -size, size, 0], 3));\n    const material = new LineBasicMaterial({\n      fog: false,\n      toneMapped: false\n    });\n\n    /**\n     * Contains the line showing the location of the directional light.\n     *\n     * @type {Line}\n     */\n    this.lightPlane = new Line(geometry, material);\n    this.add(this.lightPlane);\n    geometry = new BufferGeometry();\n    geometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 0, 1], 3));\n\n    /**\n     * Represents the target line of the directional light.\n     *\n     * @type {Line}\n     */\n    this.targetLine = new Line(geometry, material);\n    this.add(this.targetLine);\n    this.update();\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    this.lightPlane.geometry.dispose();\n    this.lightPlane.material.dispose();\n    this.targetLine.geometry.dispose();\n    this.targetLine.material.dispose();\n  }\n\n  /**\n   * Updates the helper to match the position and direction of the\n   * light being visualized.\n   */\n  update() {\n    this.light.updateWorldMatrix(true, false);\n    this.light.target.updateWorldMatrix(true, false);\n    _v1.setFromMatrixPosition(this.light.matrixWorld);\n    _v2.setFromMatrixPosition(this.light.target.matrixWorld);\n    _v3.subVectors(_v2, _v1);\n    this.lightPlane.lookAt(_v2);\n    if (this.color !== undefined) {\n      this.lightPlane.material.color.set(this.color);\n      this.targetLine.material.color.set(this.color);\n    } else {\n      this.lightPlane.material.color.copy(this.light.color);\n      this.targetLine.material.color.copy(this.light.color);\n    }\n    this.targetLine.lookAt(_v2);\n    this.targetLine.scale.z = _v3.length();\n  }\n}\nconst _vector = /*@__PURE__*/new Vector3();\nconst _camera = /*@__PURE__*/new Camera();\n\n/**\n * This helps with visualizing what a camera contains in its frustum. It\n * visualizes the frustum of a camera using a line segments.\n *\n * Based on frustum visualization in [lightgl.js shadowmap example]{@link https://github.com/evanw/lightgl.js/blob/master/tests/shadowmap.html}.\n *\n * `CameraHelper` must be a child of the scene.\n *\n * ```js\n * const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\n * const helper = new THREE.CameraHelper( camera );\n * scene.add( helper );\n * ```\n *\n * @augments LineSegments\n */\nclass CameraHelper extends LineSegments {\n  /**\n   * Constructs a new arrow helper.\n   *\n   * @param {Camera} camera - The camera to visualize.\n   */\n  constructor(camera) {\n    const geometry = new BufferGeometry();\n    const material = new LineBasicMaterial({\n      color: 0xffffff,\n      vertexColors: true,\n      toneMapped: false\n    });\n    const vertices = [];\n    const colors = [];\n    const pointMap = {};\n\n    // near\n\n    addLine('n1', 'n2');\n    addLine('n2', 'n4');\n    addLine('n4', 'n3');\n    addLine('n3', 'n1');\n\n    // far\n\n    addLine('f1', 'f2');\n    addLine('f2', 'f4');\n    addLine('f4', 'f3');\n    addLine('f3', 'f1');\n\n    // sides\n\n    addLine('n1', 'f1');\n    addLine('n2', 'f2');\n    addLine('n3', 'f3');\n    addLine('n4', 'f4');\n\n    // cone\n\n    addLine('p', 'n1');\n    addLine('p', 'n2');\n    addLine('p', 'n3');\n    addLine('p', 'n4');\n\n    // up\n\n    addLine('u1', 'u2');\n    addLine('u2', 'u3');\n    addLine('u3', 'u1');\n\n    // target\n\n    addLine('c', 't');\n    addLine('p', 'c');\n\n    // cross\n\n    addLine('cn1', 'cn2');\n    addLine('cn3', 'cn4');\n    addLine('cf1', 'cf2');\n    addLine('cf3', 'cf4');\n    function addLine(a, b) {\n      addPoint(a);\n      addPoint(b);\n    }\n    function addPoint(id) {\n      vertices.push(0, 0, 0);\n      colors.push(0, 0, 0);\n      if (pointMap[id] === undefined) {\n        pointMap[id] = [];\n      }\n      pointMap[id].push(vertices.length / 3 - 1);\n    }\n    geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n    super(geometry, material);\n    this.type = 'CameraHelper';\n\n    /**\n     * The camera being visualized.\n     *\n     * @type {Camera}\n     */\n    this.camera = camera;\n    if (this.camera.updateProjectionMatrix) this.camera.updateProjectionMatrix();\n    this.matrix = camera.matrixWorld;\n    this.matrixAutoUpdate = false;\n\n    /**\n     * This contains the points used to visualize the camera.\n     *\n     * @type {Object<string,Array<number>>}\n     */\n    this.pointMap = pointMap;\n    this.update();\n\n    // colors\n\n    const colorFrustum = new Color(0xffaa00);\n    const colorCone = new Color(0xff0000);\n    const colorUp = new Color(0x00aaff);\n    const colorTarget = new Color(0xffffff);\n    const colorCross = new Color(0x333333);\n    this.setColors(colorFrustum, colorCone, colorUp, colorTarget, colorCross);\n  }\n\n  /**\n   * Defines the colors of the helper.\n   *\n   * @param {Color} frustum - The frustum line color.\n   * @param {Color} cone - The cone line color.\n   * @param {Color} up - The up line color.\n   * @param {Color} target - The target line color.\n   * @param {Color} cross - The cross line color.\n   */\n  setColors(frustum, cone, up, target, cross) {\n    const geometry = this.geometry;\n    const colorAttribute = geometry.getAttribute('color');\n\n    // near\n\n    colorAttribute.setXYZ(0, frustum.r, frustum.g, frustum.b);\n    colorAttribute.setXYZ(1, frustum.r, frustum.g, frustum.b); // n1, n2\n    colorAttribute.setXYZ(2, frustum.r, frustum.g, frustum.b);\n    colorAttribute.setXYZ(3, frustum.r, frustum.g, frustum.b); // n2, n4\n    colorAttribute.setXYZ(4, frustum.r, frustum.g, frustum.b);\n    colorAttribute.setXYZ(5, frustum.r, frustum.g, frustum.b); // n4, n3\n    colorAttribute.setXYZ(6, frustum.r, frustum.g, frustum.b);\n    colorAttribute.setXYZ(7, frustum.r, frustum.g, frustum.b); // n3, n1\n\n    // far\n\n    colorAttribute.setXYZ(8, frustum.r, frustum.g, frustum.b);\n    colorAttribute.setXYZ(9, frustum.r, frustum.g, frustum.b); // f1, f2\n    colorAttribute.setXYZ(10, frustum.r, frustum.g, frustum.b);\n    colorAttribute.setXYZ(11, frustum.r, frustum.g, frustum.b); // f2, f4\n    colorAttribute.setXYZ(12, frustum.r, frustum.g, frustum.b);\n    colorAttribute.setXYZ(13, frustum.r, frustum.g, frustum.b); // f4, f3\n    colorAttribute.setXYZ(14, frustum.r, frustum.g, frustum.b);\n    colorAttribute.setXYZ(15, frustum.r, frustum.g, frustum.b); // f3, f1\n\n    // sides\n\n    colorAttribute.setXYZ(16, frustum.r, frustum.g, frustum.b);\n    colorAttribute.setXYZ(17, frustum.r, frustum.g, frustum.b); // n1, f1\n    colorAttribute.setXYZ(18, frustum.r, frustum.g, frustum.b);\n    colorAttribute.setXYZ(19, frustum.r, frustum.g, frustum.b); // n2, f2\n    colorAttribute.setXYZ(20, frustum.r, frustum.g, frustum.b);\n    colorAttribute.setXYZ(21, frustum.r, frustum.g, frustum.b); // n3, f3\n    colorAttribute.setXYZ(22, frustum.r, frustum.g, frustum.b);\n    colorAttribute.setXYZ(23, frustum.r, frustum.g, frustum.b); // n4, f4\n\n    // cone\n\n    colorAttribute.setXYZ(24, cone.r, cone.g, cone.b);\n    colorAttribute.setXYZ(25, cone.r, cone.g, cone.b); // p, n1\n    colorAttribute.setXYZ(26, cone.r, cone.g, cone.b);\n    colorAttribute.setXYZ(27, cone.r, cone.g, cone.b); // p, n2\n    colorAttribute.setXYZ(28, cone.r, cone.g, cone.b);\n    colorAttribute.setXYZ(29, cone.r, cone.g, cone.b); // p, n3\n    colorAttribute.setXYZ(30, cone.r, cone.g, cone.b);\n    colorAttribute.setXYZ(31, cone.r, cone.g, cone.b); // p, n4\n\n    // up\n\n    colorAttribute.setXYZ(32, up.r, up.g, up.b);\n    colorAttribute.setXYZ(33, up.r, up.g, up.b); // u1, u2\n    colorAttribute.setXYZ(34, up.r, up.g, up.b);\n    colorAttribute.setXYZ(35, up.r, up.g, up.b); // u2, u3\n    colorAttribute.setXYZ(36, up.r, up.g, up.b);\n    colorAttribute.setXYZ(37, up.r, up.g, up.b); // u3, u1\n\n    // target\n\n    colorAttribute.setXYZ(38, target.r, target.g, target.b);\n    colorAttribute.setXYZ(39, target.r, target.g, target.b); // c, t\n    colorAttribute.setXYZ(40, cross.r, cross.g, cross.b);\n    colorAttribute.setXYZ(41, cross.r, cross.g, cross.b); // p, c\n\n    // cross\n\n    colorAttribute.setXYZ(42, cross.r, cross.g, cross.b);\n    colorAttribute.setXYZ(43, cross.r, cross.g, cross.b); // cn1, cn2\n    colorAttribute.setXYZ(44, cross.r, cross.g, cross.b);\n    colorAttribute.setXYZ(45, cross.r, cross.g, cross.b); // cn3, cn4\n\n    colorAttribute.setXYZ(46, cross.r, cross.g, cross.b);\n    colorAttribute.setXYZ(47, cross.r, cross.g, cross.b); // cf1, cf2\n    colorAttribute.setXYZ(48, cross.r, cross.g, cross.b);\n    colorAttribute.setXYZ(49, cross.r, cross.g, cross.b); // cf3, cf4\n\n    colorAttribute.needsUpdate = true;\n  }\n\n  /**\n   * Updates the helper based on the projection matrix of the camera.\n   */\n  update() {\n    const geometry = this.geometry;\n    const pointMap = this.pointMap;\n    const w = 1,\n      h = 1;\n\n    // we need just camera projection matrix inverse\n    // world matrix must be identity\n\n    _camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse);\n\n    // Adjust z values based on coordinate system\n    const nearZ = this.camera.coordinateSystem === WebGLCoordinateSystem ? -1 : 0;\n\n    // center / target\n    setPoint('c', pointMap, geometry, _camera, 0, 0, nearZ);\n    setPoint('t', pointMap, geometry, _camera, 0, 0, 1);\n\n    // near\n\n    setPoint('n1', pointMap, geometry, _camera, -1, -1, nearZ);\n    setPoint('n2', pointMap, geometry, _camera, w, -1, nearZ);\n    setPoint('n3', pointMap, geometry, _camera, -1, h, nearZ);\n    setPoint('n4', pointMap, geometry, _camera, w, h, nearZ);\n\n    // far\n\n    setPoint('f1', pointMap, geometry, _camera, -1, -1, 1);\n    setPoint('f2', pointMap, geometry, _camera, w, -1, 1);\n    setPoint('f3', pointMap, geometry, _camera, -1, h, 1);\n    setPoint('f4', pointMap, geometry, _camera, w, h, 1);\n\n    // up\n\n    setPoint('u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, nearZ);\n    setPoint('u2', pointMap, geometry, _camera, -1 * 0.7, h * 1.1, nearZ);\n    setPoint('u3', pointMap, geometry, _camera, 0, h * 2, nearZ);\n\n    // cross\n\n    setPoint('cf1', pointMap, geometry, _camera, -1, 0, 1);\n    setPoint('cf2', pointMap, geometry, _camera, w, 0, 1);\n    setPoint('cf3', pointMap, geometry, _camera, 0, -1, 1);\n    setPoint('cf4', pointMap, geometry, _camera, 0, h, 1);\n    setPoint('cn1', pointMap, geometry, _camera, -1, 0, nearZ);\n    setPoint('cn2', pointMap, geometry, _camera, w, 0, nearZ);\n    setPoint('cn3', pointMap, geometry, _camera, 0, -1, nearZ);\n    setPoint('cn4', pointMap, geometry, _camera, 0, h, nearZ);\n    geometry.getAttribute('position').needsUpdate = true;\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    this.geometry.dispose();\n    this.material.dispose();\n  }\n}\nfunction setPoint(point, pointMap, geometry, camera, x, y, z) {\n  _vector.set(x, y, z).unproject(camera);\n  const points = pointMap[point];\n  if (points !== undefined) {\n    const position = geometry.getAttribute('position');\n    for (let i = 0, l = points.length; i < l; i++) {\n      position.setXYZ(points[i], _vector.x, _vector.y, _vector.z);\n    }\n  }\n}\nconst _box = /*@__PURE__*/new Box3();\n\n/**\n * Helper object to graphically show the world-axis-aligned bounding box\n * around an object. The actual bounding box is handled with {@link Box3},\n * this is just a visual helper for debugging. It can be automatically\n * resized with {@link BoxHelper#update} when the object it's created from\n * is transformed. Note that the object must have a geometry for this to work,\n * so it won't work with sprites.\n *\n * ```js\n * const sphere = new THREE.SphereGeometry();\n * const object = new THREE.Mesh( sphere, new THREE.MeshBasicMaterial( 0xff0000 ) );\n * const box = new THREE.BoxHelper( object, 0xffff00 );\n * scene.add( box );\n * ```\n *\n * @augments LineSegments\n */\nclass BoxHelper extends LineSegments {\n  /**\n   * Constructs a new box helper.\n   *\n   * @param {Object3D} [object] - The 3D object to show the world-axis-aligned bounding box.\n   * @param {number|Color|string} [color=0xffff00] - The box's color.\n   */\n  constructor(object) {\n    let color = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0xffff00;\n    const indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n    const positions = new Float32Array(8 * 3);\n    const geometry = new BufferGeometry();\n    geometry.setIndex(new BufferAttribute(indices, 1));\n    geometry.setAttribute('position', new BufferAttribute(positions, 3));\n    super(geometry, new LineBasicMaterial({\n      color: color,\n      toneMapped: false\n    }));\n\n    /**\n     * The 3D object being visualized.\n     *\n     * @type {Object3D}\n     */\n    this.object = object;\n    this.type = 'BoxHelper';\n    this.matrixAutoUpdate = false;\n    this.update();\n  }\n\n  /**\n   * Updates the helper's geometry to match the dimensions of the object,\n   * including any children.\n   */\n  update() {\n    if (this.object !== undefined) {\n      _box.setFromObject(this.object);\n    }\n    if (_box.isEmpty()) return;\n    const min = _box.min;\n    const max = _box.max;\n\n    /*\n    \t5____4\n    1/___0/|\n    | 6__|_7\n    2/___3/\n    \t0: max.x, max.y, max.z\n    1: min.x, max.y, max.z\n    2: min.x, min.y, max.z\n    3: max.x, min.y, max.z\n    4: max.x, max.y, min.z\n    5: min.x, max.y, min.z\n    6: min.x, min.y, min.z\n    7: max.x, min.y, min.z\n    */\n\n    const position = this.geometry.attributes.position;\n    const array = position.array;\n    array[0] = max.x;\n    array[1] = max.y;\n    array[2] = max.z;\n    array[3] = min.x;\n    array[4] = max.y;\n    array[5] = max.z;\n    array[6] = min.x;\n    array[7] = min.y;\n    array[8] = max.z;\n    array[9] = max.x;\n    array[10] = min.y;\n    array[11] = max.z;\n    array[12] = max.x;\n    array[13] = max.y;\n    array[14] = min.z;\n    array[15] = min.x;\n    array[16] = max.y;\n    array[17] = min.z;\n    array[18] = min.x;\n    array[19] = min.y;\n    array[20] = min.z;\n    array[21] = max.x;\n    array[22] = min.y;\n    array[23] = min.z;\n    position.needsUpdate = true;\n    this.geometry.computeBoundingSphere();\n  }\n\n  /**\n   * Updates the wireframe box for the passed object.\n   *\n   * @param {Object3D} object - The 3D object to create the helper for.\n   * @return {BoxHelper} A reference to this instance.\n   */\n  setFromObject(object) {\n    this.object = object;\n    this.update();\n    return this;\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.object = source.object;\n    return this;\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    this.geometry.dispose();\n    this.material.dispose();\n  }\n}\n\n/**\n * A helper object to visualize an instance of {@link Box3}.\n *\n * ```js\n * const box = new THREE.Box3();\n * box.setFromCenterAndSize( new THREE.Vector3( 1, 1, 1 ), new THREE.Vector3( 2, 1, 3 ) );\n *\n * const helper = new THREE.Box3Helper( box, 0xffff00 );\n * scene.add( helper )\n * ```\n *\n * @augments LineSegments\n */\nclass Box3Helper extends LineSegments {\n  /**\n   * Constructs a new box3 helper.\n   *\n   * @param {Box3} box - The box to visualize.\n   * @param {number|Color|string} [color=0xffff00] - The box's color.\n   */\n  constructor(box) {\n    let color = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0xffff00;\n    const indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n    const positions = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1];\n    const geometry = new BufferGeometry();\n    geometry.setIndex(new BufferAttribute(indices, 1));\n    geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n    super(geometry, new LineBasicMaterial({\n      color: color,\n      toneMapped: false\n    }));\n\n    /**\n     * The box being visualized.\n     *\n     * @type {Box3}\n     */\n    this.box = box;\n    this.type = 'Box3Helper';\n    this.geometry.computeBoundingSphere();\n  }\n  updateMatrixWorld(force) {\n    const box = this.box;\n    if (box.isEmpty()) return;\n    box.getCenter(this.position);\n    box.getSize(this.scale);\n    this.scale.multiplyScalar(0.5);\n    super.updateMatrixWorld(force);\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    this.geometry.dispose();\n    this.material.dispose();\n  }\n}\n\n/**\n * A helper object to visualize an instance of {@link Plane}.\n *\n * ```js\n * const plane = new THREE.Plane( new THREE.Vector3( 1, 1, 0.2 ), 3 );\n * const helper = new THREE.PlaneHelper( plane, 1, 0xffff00 );\n * scene.add( helper );\n * ```\n *\n * @augments Line\n */\nclass PlaneHelper extends Line {\n  /**\n   * Constructs a new plane helper.\n   *\n   * @param {Plane} plane - The plane to be visualized.\n   * @param {number} [size=1] - The side length of plane helper.\n   * @param {number|Color|string} [hex=0xffff00] - The helper's color.\n   */\n  constructor(plane) {\n    let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let hex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0xffff00;\n    const color = hex;\n    const positions = [1, -1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0, 1, 1, 0];\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n    geometry.computeBoundingSphere();\n    super(geometry, new LineBasicMaterial({\n      color: color,\n      toneMapped: false\n    }));\n    this.type = 'PlaneHelper';\n\n    /**\n     * The plane being visualized.\n     *\n     * @type {Plane}\n     */\n    this.plane = plane;\n\n    /**\n     * The side length of plane helper.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.size = size;\n    const positions2 = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0];\n    const geometry2 = new BufferGeometry();\n    geometry2.setAttribute('position', new Float32BufferAttribute(positions2, 3));\n    geometry2.computeBoundingSphere();\n    this.add(new Mesh(geometry2, new MeshBasicMaterial({\n      color: color,\n      opacity: 0.2,\n      transparent: true,\n      depthWrite: false,\n      toneMapped: false\n    })));\n  }\n  updateMatrixWorld(force) {\n    this.position.set(0, 0, 0);\n    this.scale.set(0.5 * this.size, 0.5 * this.size, 1);\n    this.lookAt(this.plane.normal);\n    this.translateZ(-this.plane.constant);\n    super.updateMatrixWorld(force);\n  }\n\n  /**\n   * Updates the helper to match the position and direction of the\n   * light being visualized.\n   */\n  dispose() {\n    this.geometry.dispose();\n    this.material.dispose();\n    this.children[0].geometry.dispose();\n    this.children[0].material.dispose();\n  }\n}\nconst _axis = /*@__PURE__*/new Vector3();\nlet _lineGeometry, _coneGeometry;\n\n/**\n * An 3D arrow object for visualizing directions.\n *\n * ```js\n * const dir = new THREE.Vector3( 1, 2, 0 );\n *\n * //normalize the direction vector (convert to vector of length 1)\n * dir.normalize();\n *\n * const origin = new THREE.Vector3( 0, 0, 0 );\n * const length = 1;\n * const hex = 0xffff00;\n *\n * const arrowHelper = new THREE.ArrowHelper( dir, origin, length, hex );\n * scene.add( arrowHelper );\n * ```\n *\n * @augments Object3D\n */\nclass ArrowHelper extends Object3D {\n  /**\n   * Constructs a new arrow helper.\n   *\n   * @param {Vector3} [dir=(0, 0, 1)] - The (normalized) direction vector.\n   * @param {Vector3} [origin=(0, 0, 0)] - Point at which the arrow starts.\n   * @param {number} [length=1] - Length of the arrow in world units.\n   * @param {(number|Color|string)} [color=0xffff00] - Color of the arrow.\n   * @param {number} [headLength=length*0.2] - The length of the head of the arrow.\n   * @param {number} [headWidth=headLength*0.2] - The width of the head of the arrow.\n   */\n  constructor() {\n    let dir = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3(0, 0, 1);\n    let origin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3(0, 0, 0);\n    let length = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let color = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0xffff00;\n    let headLength = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : length * 0.2;\n    let headWidth = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : headLength * 0.2;\n    super();\n    this.type = 'ArrowHelper';\n    if (_lineGeometry === undefined) {\n      _lineGeometry = new BufferGeometry();\n      _lineGeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 1, 0], 3));\n      _coneGeometry = new ConeGeometry(0.5, 1, 5, 1);\n      _coneGeometry.translate(0, -0.5, 0);\n    }\n    this.position.copy(origin);\n\n    /**\n     * The line part of the arrow helper.\n     *\n     * @type {Line}\n     */\n    this.line = new Line(_lineGeometry, new LineBasicMaterial({\n      color: color,\n      toneMapped: false\n    }));\n    this.line.matrixAutoUpdate = false;\n    this.add(this.line);\n\n    /**\n     * The cone part of the arrow helper.\n     *\n     * @type {Mesh}\n     */\n    this.cone = new Mesh(_coneGeometry, new MeshBasicMaterial({\n      color: color,\n      toneMapped: false\n    }));\n    this.cone.matrixAutoUpdate = false;\n    this.add(this.cone);\n    this.setDirection(dir);\n    this.setLength(length, headLength, headWidth);\n  }\n\n  /**\n   * Sets the direction of the helper.\n   *\n   * @param {Vector3} dir - The normalized direction vector.\n   */\n  setDirection(dir) {\n    // dir is assumed to be normalized\n\n    if (dir.y > 0.99999) {\n      this.quaternion.set(0, 0, 0, 1);\n    } else if (dir.y < -0.99999) {\n      this.quaternion.set(1, 0, 0, 0);\n    } else {\n      _axis.set(dir.z, 0, -dir.x).normalize();\n      const radians = Math.acos(dir.y);\n      this.quaternion.setFromAxisAngle(_axis, radians);\n    }\n  }\n\n  /**\n   * Sets the length of the helper.\n   *\n   * @param {number} length - Length of the arrow in world units.\n   * @param {number} [headLength=length*0.2] - The length of the head of the arrow.\n   * @param {number} [headWidth=headLength*0.2] - The width of the head of the arrow.\n   */\n  setLength(length) {\n    let headLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : length * 0.2;\n    let headWidth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : headLength * 0.2;\n    this.line.scale.set(1, Math.max(0.0001, length - headLength), 1); // see #17458\n    this.line.updateMatrix();\n    this.cone.scale.set(headWidth, headLength, headWidth);\n    this.cone.position.y = length;\n    this.cone.updateMatrix();\n  }\n\n  /**\n   * Sets the color of the helper.\n   *\n   * @param {number|Color|string} color - The color to set.\n   */\n  setColor(color) {\n    this.line.material.color.set(color);\n    this.cone.material.color.set(color);\n  }\n  copy(source) {\n    super.copy(source, false);\n    this.line.copy(source.line);\n    this.cone.copy(source.cone);\n    return this;\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    this.line.geometry.dispose();\n    this.line.material.dispose();\n    this.cone.geometry.dispose();\n    this.cone.material.dispose();\n  }\n}\n\n/**\n * An axis object to visualize the 3 axes in a simple way.\n * The X axis is red. The Y axis is green. The Z axis is blue.\n *\n * ```js\n * const axesHelper = new THREE.AxesHelper( 5 );\n * scene.add( axesHelper );\n * ```\n *\n * @augments LineSegments\n */\nclass AxesHelper extends LineSegments {\n  /**\n   * Constructs a new axes helper.\n   *\n   * @param {number} [size=1] - Size of the lines representing the axes.\n   */\n  constructor() {\n    let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    const vertices = [0, 0, 0, size, 0, 0, 0, 0, 0, 0, size, 0, 0, 0, 0, 0, 0, size];\n    const colors = [1, 0, 0, 1, 0.6, 0, 0, 1, 0, 0.6, 1, 0, 0, 0, 1, 0, 0.6, 1];\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n    const material = new LineBasicMaterial({\n      vertexColors: true,\n      toneMapped: false\n    });\n    super(geometry, material);\n    this.type = 'AxesHelper';\n  }\n\n  /**\n   * Defines the colors of the axes helper.\n   *\n   * @param {number|Color|string} xAxisColor - The color for the x axis.\n   * @param {number|Color|string} yAxisColor - The color for the y axis.\n   * @param {number|Color|string} zAxisColor - The color for the z axis.\n   * @return {AxesHelper} A reference to this axes helper.\n   */\n  setColors(xAxisColor, yAxisColor, zAxisColor) {\n    const color = new Color();\n    const array = this.geometry.attributes.color.array;\n    color.set(xAxisColor);\n    color.toArray(array, 0);\n    color.toArray(array, 3);\n    color.set(yAxisColor);\n    color.toArray(array, 6);\n    color.toArray(array, 9);\n    color.set(zAxisColor);\n    color.toArray(array, 12);\n    color.toArray(array, 15);\n    this.geometry.attributes.color.needsUpdate = true;\n    return this;\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    this.geometry.dispose();\n    this.material.dispose();\n  }\n}\n\n/**\n * This class is used to convert a series of paths to an array of\n * shapes. It is specifically used in context of fonts and SVG.\n */\nclass ShapePath {\n  /**\n   * Constructs a new shape path.\n   */\n  constructor() {\n    this.type = 'ShapePath';\n\n    /**\n     * The color of the shape.\n     *\n     * @type {Color}\n     */\n    this.color = new Color();\n\n    /**\n     * The paths that have been generated for this shape.\n     *\n     * @type {Array<Path>}\n     * @default null\n     */\n    this.subPaths = [];\n\n    /**\n     * The current path that is being generated.\n     *\n     * @type {?Path}\n     * @default null\n     */\n    this.currentPath = null;\n  }\n\n  /**\n   * Creates a new path and moves it current point to the given one.\n   *\n   * @param {number} x - The x coordinate.\n   * @param {number} y - The y coordinate.\n   * @return {ShapePath} A reference to this shape path.\n   */\n  moveTo(x, y) {\n    this.currentPath = new Path();\n    this.subPaths.push(this.currentPath);\n    this.currentPath.moveTo(x, y);\n    return this;\n  }\n\n  /**\n   * Adds an instance of {@link LineCurve} to the path by connecting\n   * the current point with the given one.\n   *\n   * @param {number} x - The x coordinate of the end point.\n   * @param {number} y - The y coordinate of the end point.\n   * @return {ShapePath} A reference to this shape path.\n   */\n  lineTo(x, y) {\n    this.currentPath.lineTo(x, y);\n    return this;\n  }\n\n  /**\n   * Adds an instance of {@link QuadraticBezierCurve} to the path by connecting\n   * the current point with the given one.\n   *\n   * @param {number} aCPx - The x coordinate of the control point.\n   * @param {number} aCPy - The y coordinate of the control point.\n   * @param {number} aX - The x coordinate of the end point.\n   * @param {number} aY - The y coordinate of the end point.\n   * @return {ShapePath} A reference to this shape path.\n   */\n  quadraticCurveTo(aCPx, aCPy, aX, aY) {\n    this.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY);\n    return this;\n  }\n\n  /**\n   * Adds an instance of {@link CubicBezierCurve} to the path by connecting\n   * the current point with the given one.\n   *\n   * @param {number} aCP1x - The x coordinate of the first control point.\n   * @param {number} aCP1y - The y coordinate of the first control point.\n   * @param {number} aCP2x - The x coordinate of the second control point.\n   * @param {number} aCP2y - The y coordinate of the second control point.\n   * @param {number} aX - The x coordinate of the end point.\n   * @param {number} aY - The y coordinate of the end point.\n   * @return {ShapePath} A reference to this shape path.\n   */\n  bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n    this.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);\n    return this;\n  }\n\n  /**\n   * Adds an instance of {@link SplineCurve} to the path by connecting\n   * the current point with the given list of points.\n   *\n   * @param {Array<Vector2>} pts - An array of points in 2D space.\n   * @return {ShapePath} A reference to this shape path.\n   */\n  splineThru(pts) {\n    this.currentPath.splineThru(pts);\n    return this;\n  }\n\n  /**\n   * Converts the paths into an array of shapes.\n   *\n   * @param {boolean} isCCW - By default solid shapes are  defined clockwise (CW) and holes are defined counterclockwise (CCW).\n   * If this flag is set to `true`, then those are flipped.\n   * @return {Array<Shape>} An array of shapes.\n   */\n  toShapes(isCCW) {\n    function toShapesNoHoles(inSubpaths) {\n      const shapes = [];\n      for (let i = 0, l = inSubpaths.length; i < l; i++) {\n        const tmpPath = inSubpaths[i];\n        const tmpShape = new Shape();\n        tmpShape.curves = tmpPath.curves;\n        shapes.push(tmpShape);\n      }\n      return shapes;\n    }\n    function isPointInsidePolygon(inPt, inPolygon) {\n      const polyLen = inPolygon.length;\n\n      // inPt on polygon contour => immediate success    or\n      // toggling of inside/outside at every single! intersection point of an edge\n      //  with the horizontal line through inPt, left of inPt\n      //  not counting lowerY endpoints of edges and whole edges on that line\n      let inside = false;\n      for (let p = polyLen - 1, q = 0; q < polyLen; p = q++) {\n        let edgeLowPt = inPolygon[p];\n        let edgeHighPt = inPolygon[q];\n        let edgeDx = edgeHighPt.x - edgeLowPt.x;\n        let edgeDy = edgeHighPt.y - edgeLowPt.y;\n        if (Math.abs(edgeDy) > Number.EPSILON) {\n          // not parallel\n          if (edgeDy < 0) {\n            edgeLowPt = inPolygon[q];\n            edgeDx = -edgeDx;\n            edgeHighPt = inPolygon[p];\n            edgeDy = -edgeDy;\n          }\n          if (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y) continue;\n          if (inPt.y === edgeLowPt.y) {\n            if (inPt.x === edgeLowPt.x) return true; // inPt is on contour ?\n            // continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n          } else {\n            const perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);\n            if (perpEdge === 0) return true; // inPt is on contour ?\n            if (perpEdge < 0) continue;\n            inside = !inside; // true intersection left of inPt\n          }\n        } else {\n          // parallel or collinear\n          if (inPt.y !== edgeLowPt.y) continue; // parallel\n          // edge lies on the same horizontal line as inPt\n          if (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x || edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x) return true; // inPt: Point on contour !\n          // continue;\n        }\n      }\n      return inside;\n    }\n    const isClockWise = ShapeUtils.isClockWise;\n    const subPaths = this.subPaths;\n    if (subPaths.length === 0) return [];\n    let solid, tmpPath, tmpShape;\n    const shapes = [];\n    if (subPaths.length === 1) {\n      tmpPath = subPaths[0];\n      tmpShape = new Shape();\n      tmpShape.curves = tmpPath.curves;\n      shapes.push(tmpShape);\n      return shapes;\n    }\n    let holesFirst = !isClockWise(subPaths[0].getPoints());\n    holesFirst = isCCW ? !holesFirst : holesFirst;\n\n    // console.log(\"Holes first\", holesFirst);\n\n    const betterShapeHoles = [];\n    const newShapes = [];\n    let newShapeHoles = [];\n    let mainIdx = 0;\n    let tmpPoints;\n    newShapes[mainIdx] = undefined;\n    newShapeHoles[mainIdx] = [];\n    for (let i = 0, l = subPaths.length; i < l; i++) {\n      tmpPath = subPaths[i];\n      tmpPoints = tmpPath.getPoints();\n      solid = isClockWise(tmpPoints);\n      solid = isCCW ? !solid : solid;\n      if (solid) {\n        if (!holesFirst && newShapes[mainIdx]) mainIdx++;\n        newShapes[mainIdx] = {\n          s: new Shape(),\n          p: tmpPoints\n        };\n        newShapes[mainIdx].s.curves = tmpPath.curves;\n        if (holesFirst) mainIdx++;\n        newShapeHoles[mainIdx] = [];\n\n        //console.log('cw', i);\n      } else {\n        newShapeHoles[mainIdx].push({\n          h: tmpPath,\n          p: tmpPoints[0]\n        });\n\n        //console.log('ccw', i);\n      }\n    }\n\n    // only Holes? -> probably all Shapes with wrong orientation\n    if (!newShapes[0]) return toShapesNoHoles(subPaths);\n    if (newShapes.length > 1) {\n      let ambiguous = false;\n      let toChange = 0;\n      for (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {\n        betterShapeHoles[sIdx] = [];\n      }\n      for (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {\n        const sho = newShapeHoles[sIdx];\n        for (let hIdx = 0; hIdx < sho.length; hIdx++) {\n          const ho = sho[hIdx];\n          let hole_unassigned = true;\n          for (let s2Idx = 0; s2Idx < newShapes.length; s2Idx++) {\n            if (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {\n              if (sIdx !== s2Idx) toChange++;\n              if (hole_unassigned) {\n                hole_unassigned = false;\n                betterShapeHoles[s2Idx].push(ho);\n              } else {\n                ambiguous = true;\n              }\n            }\n          }\n          if (hole_unassigned) {\n            betterShapeHoles[sIdx].push(ho);\n          }\n        }\n      }\n      if (toChange > 0 && ambiguous === false) {\n        newShapeHoles = betterShapeHoles;\n      }\n    }\n    let tmpHoles;\n    for (let i = 0, il = newShapes.length; i < il; i++) {\n      tmpShape = newShapes[i].s;\n      shapes.push(tmpShape);\n      tmpHoles = newShapeHoles[i];\n      for (let j = 0, jl = tmpHoles.length; j < jl; j++) {\n        tmpShape.holes.push(tmpHoles[j].h);\n      }\n    }\n\n    //console.log(\"shape\", shapes);\n\n    return shapes;\n  }\n}\n\n/**\n * Abstract base class for controls.\n *\n * @abstract\n * @augments EventDispatcher\n */\nclass Controls extends EventDispatcher {\n  /**\n   * Constructs a new controls instance.\n   *\n   * @param {Object3D} object - The object that is managed by the controls.\n   * @param {?HTMLDOMElement} domElement - The HTML element used for event listeners.\n   */\n  constructor(object) {\n    let domElement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    super();\n\n    /**\n     * The object that is managed by the controls.\n     *\n     * @type {Object3D}\n     */\n    this.object = object;\n\n    /**\n     * The HTML element used for event listeners.\n     *\n     * @type {?HTMLDOMElement}\n     * @default null\n     */\n    this.domElement = domElement;\n\n    /**\n     * Whether the controls responds to user input or not.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.enabled = true;\n\n    /**\n     * The internal state of the controls.\n     *\n     * @type {number}\n     * @default -1\n     */\n    this.state = -1;\n\n    /**\n     * This object defines the keyboard input of the controls.\n     *\n     * @type {Object}\n     */\n    this.keys = {};\n\n    /**\n     * This object defines what type of actions are assigned to the available mouse buttons.\n     * It depends on the control implementation what kind of mouse buttons and actions are supported.\n     *\n     * @type {{LEFT: ?number, MIDDLE: ?number, RIGHT: ?number}}\n     */\n    this.mouseButtons = {\n      LEFT: null,\n      MIDDLE: null,\n      RIGHT: null\n    };\n\n    /**\n     * This object defines what type of actions are assigned to what kind of touch interaction.\n     * It depends on the control implementation what kind of touch interaction and actions are supported.\n     *\n     * @type {{ONE: ?number, TWO: ?number}}\n     */\n    this.touches = {\n      ONE: null,\n      TWO: null\n    };\n  }\n\n  /**\n   * Connects the controls to the DOM. This method has so called \"side effects\" since\n   * it adds the module's event listeners to the DOM.\n   *\n   * @param {HTMLDOMElement} element - The DOM element to connect to.\n   */\n  connect(element) {\n    if (element === undefined) {\n      console.warn('THREE.Controls: connect() now requires an element.'); // @deprecated, the warning can be removed with r185\n      return;\n    }\n    if (this.domElement !== null) this.disconnect();\n    this.domElement = element;\n  }\n\n  /**\n   * Disconnects the controls from the DOM.\n   */\n  disconnect() {}\n\n  /**\n   * Call this method if you no longer want use to the controls. It frees all internal\n   * resources and removes all event listeners.\n   */\n  dispose() {}\n\n  /**\n   * Controls should implement this method if they have to update their internal state\n   * per simulation step.\n   *\n   * @param {number} [delta] - The time delta in seconds.\n   */\n  update(/* delta */) {}\n}\n\n/**\n * Scales the texture as large as possible within its surface without cropping\n * or stretching the texture. The method preserves the original aspect ratio of\n * the texture. Akin to CSS `object-fit: contain`\n *\n * @param {Texture} texture - The texture.\n * @param {number} aspect - The texture's aspect ratio.\n * @return {Texture} The updated texture.\n */\nfunction contain(texture, aspect) {\n  const imageAspect = texture.image && texture.image.width ? texture.image.width / texture.image.height : 1;\n  if (imageAspect > aspect) {\n    texture.repeat.x = 1;\n    texture.repeat.y = imageAspect / aspect;\n    texture.offset.x = 0;\n    texture.offset.y = (1 - texture.repeat.y) / 2;\n  } else {\n    texture.repeat.x = aspect / imageAspect;\n    texture.repeat.y = 1;\n    texture.offset.x = (1 - texture.repeat.x) / 2;\n    texture.offset.y = 0;\n  }\n  return texture;\n}\n\n/**\n * Scales the texture to the smallest possible size to fill the surface, leaving\n * no empty space. The method preserves the original aspect ratio of the texture.\n * Akin to CSS `object-fit: cover`.\n *\n * @param {Texture} texture - The texture.\n * @param {number} aspect - The texture's aspect ratio.\n * @return {Texture} The updated texture.\n */\nfunction cover(texture, aspect) {\n  const imageAspect = texture.image && texture.image.width ? texture.image.width / texture.image.height : 1;\n  if (imageAspect > aspect) {\n    texture.repeat.x = aspect / imageAspect;\n    texture.repeat.y = 1;\n    texture.offset.x = (1 - texture.repeat.x) / 2;\n    texture.offset.y = 0;\n  } else {\n    texture.repeat.x = 1;\n    texture.repeat.y = imageAspect / aspect;\n    texture.offset.x = 0;\n    texture.offset.y = (1 - texture.repeat.y) / 2;\n  }\n  return texture;\n}\n\n/**\n * Configures the texture to the default transformation. Akin to CSS `object-fit: fill`.\n *\n * @param {Texture} texture - The texture.\n * @return {Texture} The updated texture.\n */\nfunction fill(texture) {\n  texture.repeat.x = 1;\n  texture.repeat.y = 1;\n  texture.offset.x = 0;\n  texture.offset.y = 0;\n  return texture;\n}\n\n/**\n * Determines how many bytes must be used to represent the texture.\n *\n * @param {number} width - The width of the texture.\n * @param {number} height - The height of the texture.\n * @param {number} format - The texture's format.\n * @param {number} type - The texture's type.\n * @return {number} The byte length.\n */\nfunction getByteLength(width, height, format, type) {\n  const typeByteLength = getTextureTypeByteLength(type);\n  switch (format) {\n    // https://registry.khronos.org/OpenGL-Refpages/es3.0/html/glTexImage2D.xhtml\n    case AlphaFormat:\n      return width * height;\n    case RedFormat:\n      return width * height / typeByteLength.components * typeByteLength.byteLength;\n    case RedIntegerFormat:\n      return width * height / typeByteLength.components * typeByteLength.byteLength;\n    case RGFormat:\n      return width * height * 2 / typeByteLength.components * typeByteLength.byteLength;\n    case RGIntegerFormat:\n      return width * height * 2 / typeByteLength.components * typeByteLength.byteLength;\n    case RGBFormat:\n      return width * height * 3 / typeByteLength.components * typeByteLength.byteLength;\n    case RGBAFormat:\n      return width * height * 4 / typeByteLength.components * typeByteLength.byteLength;\n    case RGBAIntegerFormat:\n      return width * height * 4 / typeByteLength.components * typeByteLength.byteLength;\n\n    // https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_s3tc_srgb/\n    case RGB_S3TC_DXT1_Format:\n    case RGBA_S3TC_DXT1_Format:\n      return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 8;\n    case RGBA_S3TC_DXT3_Format:\n    case RGBA_S3TC_DXT5_Format:\n      return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 16;\n\n    // https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_pvrtc/\n    case RGB_PVRTC_2BPPV1_Format:\n    case RGBA_PVRTC_2BPPV1_Format:\n      return Math.max(width, 16) * Math.max(height, 8) / 4;\n    case RGB_PVRTC_4BPPV1_Format:\n    case RGBA_PVRTC_4BPPV1_Format:\n      return Math.max(width, 8) * Math.max(height, 8) / 2;\n\n    // https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_etc/\n    case RGB_ETC1_Format:\n    case RGB_ETC2_Format:\n      return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 8;\n    case RGBA_ETC2_EAC_Format:\n      return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 16;\n\n    // https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_astc/\n    case RGBA_ASTC_4x4_Format:\n      return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 16;\n    case RGBA_ASTC_5x4_Format:\n      return Math.floor((width + 4) / 5) * Math.floor((height + 3) / 4) * 16;\n    case RGBA_ASTC_5x5_Format:\n      return Math.floor((width + 4) / 5) * Math.floor((height + 4) / 5) * 16;\n    case RGBA_ASTC_6x5_Format:\n      return Math.floor((width + 5) / 6) * Math.floor((height + 4) / 5) * 16;\n    case RGBA_ASTC_6x6_Format:\n      return Math.floor((width + 5) / 6) * Math.floor((height + 5) / 6) * 16;\n    case RGBA_ASTC_8x5_Format:\n      return Math.floor((width + 7) / 8) * Math.floor((height + 4) / 5) * 16;\n    case RGBA_ASTC_8x6_Format:\n      return Math.floor((width + 7) / 8) * Math.floor((height + 5) / 6) * 16;\n    case RGBA_ASTC_8x8_Format:\n      return Math.floor((width + 7) / 8) * Math.floor((height + 7) / 8) * 16;\n    case RGBA_ASTC_10x5_Format:\n      return Math.floor((width + 9) / 10) * Math.floor((height + 4) / 5) * 16;\n    case RGBA_ASTC_10x6_Format:\n      return Math.floor((width + 9) / 10) * Math.floor((height + 5) / 6) * 16;\n    case RGBA_ASTC_10x8_Format:\n      return Math.floor((width + 9) / 10) * Math.floor((height + 7) / 8) * 16;\n    case RGBA_ASTC_10x10_Format:\n      return Math.floor((width + 9) / 10) * Math.floor((height + 9) / 10) * 16;\n    case RGBA_ASTC_12x10_Format:\n      return Math.floor((width + 11) / 12) * Math.floor((height + 9) / 10) * 16;\n    case RGBA_ASTC_12x12_Format:\n      return Math.floor((width + 11) / 12) * Math.floor((height + 11) / 12) * 16;\n\n    // https://registry.khronos.org/webgl/extensions/EXT_texture_compression_bptc/\n    case RGBA_BPTC_Format:\n    case RGB_BPTC_SIGNED_Format:\n    case RGB_BPTC_UNSIGNED_Format:\n      return Math.ceil(width / 4) * Math.ceil(height / 4) * 16;\n\n    // https://registry.khronos.org/webgl/extensions/EXT_texture_compression_rgtc/\n    case RED_RGTC1_Format:\n    case SIGNED_RED_RGTC1_Format:\n      return Math.ceil(width / 4) * Math.ceil(height / 4) * 8;\n    case RED_GREEN_RGTC2_Format:\n    case SIGNED_RED_GREEN_RGTC2_Format:\n      return Math.ceil(width / 4) * Math.ceil(height / 4) * 16;\n  }\n  throw new Error(`Unable to determine texture byte length for ${format} format.`);\n}\nfunction getTextureTypeByteLength(type) {\n  switch (type) {\n    case UnsignedByteType:\n    case ByteType:\n      return {\n        byteLength: 1,\n        components: 1\n      };\n    case UnsignedShortType:\n    case ShortType:\n    case HalfFloatType:\n      return {\n        byteLength: 2,\n        components: 1\n      };\n    case UnsignedShort4444Type:\n    case UnsignedShort5551Type:\n      return {\n        byteLength: 2,\n        components: 4\n      };\n    case UnsignedIntType:\n    case IntType:\n    case FloatType:\n      return {\n        byteLength: 4,\n        components: 1\n      };\n    case UnsignedInt5999Type:\n      return {\n        byteLength: 4,\n        components: 3\n      };\n  }\n  throw new Error(`Unknown texture type ${type}.`);\n}\n\n/**\n * A class containing utility functions for textures.\n *\n * @hideconstructor\n */\nclass TextureUtils {\n  /**\n   * Scales the texture as large as possible within its surface without cropping\n   * or stretching the texture. The method preserves the original aspect ratio of\n   * the texture. Akin to CSS `object-fit: contain`\n   *\n   * @param {Texture} texture - The texture.\n   * @param {number} aspect - The texture's aspect ratio.\n   * @return {Texture} The updated texture.\n   */\n  static contain(texture, aspect) {\n    return contain(texture, aspect);\n  }\n\n  /**\n   * Scales the texture to the smallest possible size to fill the surface, leaving\n   * no empty space. The method preserves the original aspect ratio of the texture.\n   * Akin to CSS `object-fit: cover`.\n   *\n   * @param {Texture} texture - The texture.\n   * @param {number} aspect - The texture's aspect ratio.\n   * @return {Texture} The updated texture.\n   */\n  static cover(texture, aspect) {\n    return cover(texture, aspect);\n  }\n\n  /**\n   * Configures the texture to the default transformation. Akin to CSS `object-fit: fill`.\n   *\n   * @param {Texture} texture - The texture.\n   * @return {Texture} The updated texture.\n   */\n  static fill(texture) {\n    return fill(texture);\n  }\n\n  /**\n   * Determines how many bytes must be used to represent the texture.\n   *\n   * @param {number} width - The width of the texture.\n   * @param {number} height - The height of the texture.\n   * @param {number} format - The texture's format.\n   * @param {number} type - The texture's type.\n   * @return {number} The byte length.\n   */\n  static getByteLength(width, height, format, type) {\n    return getByteLength(width, height, format, type);\n  }\n}\nif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n  __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('register', {\n    detail: {\n      revision: REVISION\n    }\n  }));\n}\nif (typeof window !== 'undefined') {\n  if (window.__THREE__) {\n    console.warn('WARNING: Multiple instances of Three.js being imported.');\n  } else {\n    window.__THREE__ = REVISION;\n  }\n}\nexport { ACESFilmicToneMapping, AddEquation, AddOperation, AdditiveAnimationBlendMode, AdditiveBlending, AgXToneMapping, AlphaFormat, AlwaysCompare, AlwaysDepth, AlwaysStencilFunc, AmbientLight, AnimationAction, AnimationClip, AnimationLoader, AnimationMixer, AnimationObjectGroup, AnimationUtils, ArcCurve, ArrayCamera, ArrowHelper, AttachedBindMode, Audio, AudioAnalyser, AudioContext, AudioListener, AudioLoader, AxesHelper, BackSide, BasicDepthPacking, BasicShadowMap, BatchedMesh, Bone, BooleanKeyframeTrack, Box2, Box3, Box3Helper, BoxGeometry, BoxHelper, BufferAttribute, BufferGeometry, BufferGeometryLoader, ByteType, Cache, Camera, CameraHelper, CanvasTexture, CapsuleGeometry, CatmullRomCurve3, CineonToneMapping, CircleGeometry, ClampToEdgeWrapping, Clock, Color, ColorKeyframeTrack, ColorManagement, CompressedArrayTexture, CompressedCubeTexture, CompressedTexture, CompressedTextureLoader, ConeGeometry, ConstantAlphaFactor, ConstantColorFactor, Controls, CubeCamera, CubeReflectionMapping, CubeRefractionMapping, CubeTexture, CubeTextureLoader, CubeUVReflectionMapping, CubicBezierCurve, CubicBezierCurve3, CubicInterpolant, CullFaceBack, CullFaceFront, CullFaceFrontBack, CullFaceNone, Curve, CurvePath, CustomBlending, CustomToneMapping, CylinderGeometry, Cylindrical, Data3DTexture, DataArrayTexture, DataTexture, DataTextureLoader, DataUtils, DecrementStencilOp, DecrementWrapStencilOp, DefaultLoadingManager, DepthArrayTexture, DepthFormat, DepthStencilFormat, DepthTexture, DetachedBindMode, DirectionalLight, DirectionalLightHelper, DiscreteInterpolant, DodecahedronGeometry, DoubleSide, DstAlphaFactor, DstColorFactor, DynamicCopyUsage, DynamicDrawUsage, DynamicReadUsage, EdgesGeometry, EllipseCurve, EqualCompare, EqualDepth, EqualStencilFunc, EquirectangularReflectionMapping, EquirectangularRefractionMapping, Euler, EventDispatcher, ExtrudeGeometry, FileLoader, Float16BufferAttribute, Float32BufferAttribute, FloatType, Fog, FogExp2, FramebufferTexture, FrontSide, Frustum, FrustumArray, GLBufferAttribute, GLSL1, GLSL3, GreaterCompare, GreaterDepth, GreaterEqualCompare, GreaterEqualDepth, GreaterEqualStencilFunc, GreaterStencilFunc, GridHelper, Group, HalfFloatType, HemisphereLight, HemisphereLightHelper, IcosahedronGeometry, ImageBitmapLoader, ImageLoader, ImageUtils, IncrementStencilOp, IncrementWrapStencilOp, InstancedBufferAttribute, InstancedBufferGeometry, InstancedInterleavedBuffer, InstancedMesh, Int16BufferAttribute, Int32BufferAttribute, Int8BufferAttribute, IntType, InterleavedBuffer, InterleavedBufferAttribute, Interpolant, InterpolateDiscrete, InterpolateLinear, InterpolateSmooth, InterpolationSamplingMode, InterpolationSamplingType, InvertStencilOp, KeepStencilOp, KeyframeTrack, LOD, LatheGeometry, Layers, LessCompare, LessDepth, LessEqualCompare, LessEqualDepth, LessEqualStencilFunc, LessStencilFunc, Light, LightProbe, Line, Line3, LineBasicMaterial, LineCurve, LineCurve3, LineDashedMaterial, LineLoop, LineSegments, LinearFilter, LinearInterpolant, LinearMipMapLinearFilter, LinearMipMapNearestFilter, LinearMipmapLinearFilter, LinearMipmapNearestFilter, LinearSRGBColorSpace, LinearToneMapping, LinearTransfer, Loader, LoaderUtils, LoadingManager, LoopOnce, LoopPingPong, LoopRepeat, MOUSE, Material, MaterialLoader, MathUtils, Matrix2, Matrix3, Matrix4, MaxEquation, Mesh, MeshBasicMaterial, MeshDepthMaterial, MeshDistanceMaterial, MeshLambertMaterial, MeshMatcapMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshPhysicalMaterial, MeshStandardMaterial, MeshToonMaterial, MinEquation, MirroredRepeatWrapping, MixOperation, MultiplyBlending, MultiplyOperation, NearestFilter, NearestMipMapLinearFilter, NearestMipMapNearestFilter, NearestMipmapLinearFilter, NearestMipmapNearestFilter, NeutralToneMapping, NeverCompare, NeverDepth, NeverStencilFunc, NoBlending, NoColorSpace, NoToneMapping, NormalAnimationBlendMode, NormalBlending, NotEqualCompare, NotEqualDepth, NotEqualStencilFunc, NumberKeyframeTrack, Object3D, ObjectLoader, ObjectSpaceNormalMap, OctahedronGeometry, OneFactor, OneMinusConstantAlphaFactor, OneMinusConstantColorFactor, OneMinusDstAlphaFactor, OneMinusDstColorFactor, OneMinusSrcAlphaFactor, OneMinusSrcColorFactor, OrthographicCamera, PCFShadowMap, PCFSoftShadowMap, Path, PerspectiveCamera, Plane, PlaneGeometry, PlaneHelper, PointLight, PointLightHelper, Points, PointsMaterial, PolarGridHelper, PolyhedronGeometry, PositionalAudio, PropertyBinding, PropertyMixer, QuadraticBezierCurve, QuadraticBezierCurve3, Quaternion, QuaternionKeyframeTrack, QuaternionLinearInterpolant, RAD2DEG, RED_GREEN_RGTC2_Format, RED_RGTC1_Format, REVISION, RGBADepthPacking, RGBAFormat, RGBAIntegerFormat, RGBA_ASTC_10x10_Format, RGBA_ASTC_10x5_Format, RGBA_ASTC_10x6_Format, RGBA_ASTC_10x8_Format, RGBA_ASTC_12x10_Format, RGBA_ASTC_12x12_Format, RGBA_ASTC_4x4_Format, RGBA_ASTC_5x4_Format, RGBA_ASTC_5x5_Format, RGBA_ASTC_6x5_Format, RGBA_ASTC_6x6_Format, RGBA_ASTC_8x5_Format, RGBA_ASTC_8x6_Format, RGBA_ASTC_8x8_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_2BPPV1_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT1_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT5_Format, RGBDepthPacking, RGBFormat, RGBIntegerFormat, RGB_BPTC_SIGNED_Format, RGB_BPTC_UNSIGNED_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_2BPPV1_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, RGDepthPacking, RGFormat, RGIntegerFormat, RawShaderMaterial, Ray, Raycaster, RectAreaLight, RedFormat, RedIntegerFormat, ReinhardToneMapping, RenderTarget, RenderTarget3D, RenderTargetArray, RepeatWrapping, ReplaceStencilOp, ReverseSubtractEquation, RingGeometry, SIGNED_RED_GREEN_RGTC2_Format, SIGNED_RED_RGTC1_Format, SRGBColorSpace, SRGBTransfer, Scene, ShaderMaterial, ShadowMaterial, Shape, ShapeGeometry, ShapePath, ShapeUtils, ShortType, Skeleton, SkeletonHelper, SkinnedMesh, Source, Sphere, SphereGeometry, Spherical, SphericalHarmonics3, SplineCurve, SpotLight, SpotLightHelper, Sprite, SpriteMaterial, SrcAlphaFactor, SrcAlphaSaturateFactor, SrcColorFactor, StaticCopyUsage, StaticDrawUsage, StaticReadUsage, StereoCamera, StreamCopyUsage, StreamDrawUsage, StreamReadUsage, StringKeyframeTrack, SubtractEquation, SubtractiveBlending, TOUCH, TangentSpaceNormalMap, TetrahedronGeometry, Texture, TextureLoader, TextureUtils, TimestampQuery, TorusGeometry, TorusKnotGeometry, Triangle, TriangleFanDrawMode, TriangleStripDrawMode, TrianglesDrawMode, TubeGeometry, UVMapping, Uint16BufferAttribute, Uint32BufferAttribute, Uint8BufferAttribute, Uint8ClampedBufferAttribute, Uniform, UniformsGroup, UniformsUtils, UnsignedByteType, UnsignedInt248Type, UnsignedInt5999Type, UnsignedIntType, UnsignedShort4444Type, UnsignedShort5551Type, UnsignedShortType, VSMShadowMap, Vector2, Vector3, Vector4, VectorKeyframeTrack, VideoFrameTexture, VideoTexture, WebGL3DRenderTarget, WebGLArrayRenderTarget, WebGLCoordinateSystem, WebGLCubeRenderTarget, WebGLRenderTarget, WebGPUCoordinateSystem, WebXRController, WireframeGeometry, WrapAroundEnding, ZeroCurvatureEnding, ZeroFactor, ZeroSlopeEnding, ZeroStencilOp, arrayNeedsUint32, cloneUniforms, createCanvasElement, createElementNS, getByteLength, getUnlitUniformColorSpace, mergeUniforms, probeAsync, toNormalizedProjectionMatrix, toReversedProjectionMatrix, warnOnce };","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}","/**\n * @license\n * Copyright 2010-2025 Three.js Authors\n * SPDX-License-Identifier: MIT\n */\nimport { Matrix3, Vector2, Color, mergeUniforms, Vector3, CubeUVReflectionMapping, Mesh, BoxGeometry, ShaderMaterial, BackSide, cloneUniforms, Euler, Matrix4, ColorManagement, SRGBTransfer, PlaneGeometry, FrontSide, getUnlitUniformColorSpace, IntType, HalfFloatType, UnsignedByteType, FloatType, RGBAFormat, Plane, EquirectangularReflectionMapping, EquirectangularRefractionMapping, WebGLCubeRenderTarget, CubeReflectionMapping, CubeRefractionMapping, OrthographicCamera, PerspectiveCamera, NoToneMapping, MeshBasicMaterial, NoBlending, WebGLRenderTarget, BufferGeometry, BufferAttribute, LinearSRGBColorSpace, LinearFilter, warnOnce, Uint32BufferAttribute, Uint16BufferAttribute, arrayNeedsUint32, Vector4, DataArrayTexture, CubeTexture, Data3DTexture, LessEqualCompare, DepthTexture, Texture, GLSL3, PCFShadowMap, PCFSoftShadowMap, VSMShadowMap, CustomToneMapping, NeutralToneMapping, AgXToneMapping, ACESFilmicToneMapping, CineonToneMapping, ReinhardToneMapping, LinearToneMapping, LinearTransfer, AddOperation, MixOperation, MultiplyOperation, UniformsUtils, DoubleSide, NormalBlending, TangentSpaceNormalMap, ObjectSpaceNormalMap, Layers, Frustum, MeshDepthMaterial, RGBADepthPacking, MeshDistanceMaterial, NearestFilter, LessEqualDepth, ReverseSubtractEquation, SubtractEquation, AddEquation, OneMinusConstantAlphaFactor, ConstantAlphaFactor, OneMinusConstantColorFactor, ConstantColorFactor, OneMinusDstAlphaFactor, OneMinusDstColorFactor, OneMinusSrcAlphaFactor, OneMinusSrcColorFactor, DstAlphaFactor, DstColorFactor, SrcAlphaSaturateFactor, SrcAlphaFactor, SrcColorFactor, OneFactor, ZeroFactor, NotEqualDepth, GreaterDepth, GreaterEqualDepth, EqualDepth, LessDepth, AlwaysDepth, NeverDepth, CullFaceNone, CullFaceBack, CullFaceFront, CustomBlending, MultiplyBlending, SubtractiveBlending, AdditiveBlending, MinEquation, MaxEquation, MirroredRepeatWrapping, ClampToEdgeWrapping, RepeatWrapping, LinearMipmapLinearFilter, LinearMipmapNearestFilter, NearestMipmapLinearFilter, NearestMipmapNearestFilter, NotEqualCompare, GreaterCompare, GreaterEqualCompare, EqualCompare, LessCompare, AlwaysCompare, NeverCompare, NoColorSpace, DepthStencilFormat, getByteLength, DepthFormat, UnsignedIntType, UnsignedInt248Type, UnsignedShortType, createElementNS, UnsignedShort4444Type, UnsignedShort5551Type, UnsignedInt5999Type, ByteType, ShortType, AlphaFormat, RGBFormat, RedFormat, RedIntegerFormat, RGFormat, RGIntegerFormat, RGBAIntegerFormat, RGB_S3TC_DXT1_Format, RGBA_S3TC_DXT1_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT5_Format, RGB_PVRTC_4BPPV1_Format, RGB_PVRTC_2BPPV1_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_PVRTC_2BPPV1_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGBA_ETC2_EAC_Format, RGBA_ASTC_4x4_Format, RGBA_ASTC_5x4_Format, RGBA_ASTC_5x5_Format, RGBA_ASTC_6x5_Format, RGBA_ASTC_6x6_Format, RGBA_ASTC_8x5_Format, RGBA_ASTC_8x6_Format, RGBA_ASTC_8x8_Format, RGBA_ASTC_10x5_Format, RGBA_ASTC_10x6_Format, RGBA_ASTC_10x8_Format, RGBA_ASTC_10x10_Format, RGBA_ASTC_12x10_Format, RGBA_ASTC_12x12_Format, RGBA_BPTC_Format, RGB_BPTC_SIGNED_Format, RGB_BPTC_UNSIGNED_Format, RED_RGTC1_Format, SIGNED_RED_RGTC1_Format, RED_GREEN_RGTC2_Format, SIGNED_RED_GREEN_RGTC2_Format, EventDispatcher, ArrayCamera, WebXRController, RAD2DEG, createCanvasElement, SRGBColorSpace, REVISION, toNormalizedProjectionMatrix, toReversedProjectionMatrix, probeAsync, WebGLCoordinateSystem } from './three.core.js';\nexport { AdditiveAnimationBlendMode, AlwaysStencilFunc, AmbientLight, AnimationAction, AnimationClip, AnimationLoader, AnimationMixer, AnimationObjectGroup, AnimationUtils, ArcCurve, ArrowHelper, AttachedBindMode, Audio, AudioAnalyser, AudioContext, AudioListener, AudioLoader, AxesHelper, BasicDepthPacking, BasicShadowMap, BatchedMesh, Bone, BooleanKeyframeTrack, Box2, Box3, Box3Helper, BoxHelper, BufferGeometryLoader, Cache, Camera, CameraHelper, CanvasTexture, CapsuleGeometry, CatmullRomCurve3, CircleGeometry, Clock, ColorKeyframeTrack, CompressedArrayTexture, CompressedCubeTexture, CompressedTexture, CompressedTextureLoader, ConeGeometry, Controls, CubeCamera, CubeTextureLoader, CubicBezierCurve, CubicBezierCurve3, CubicInterpolant, CullFaceFrontBack, Curve, CurvePath, CylinderGeometry, Cylindrical, DataTexture, DataTextureLoader, DataUtils, DecrementStencilOp, DecrementWrapStencilOp, DefaultLoadingManager, DepthArrayTexture, DetachedBindMode, DirectionalLight, DirectionalLightHelper, DiscreteInterpolant, DodecahedronGeometry, DynamicCopyUsage, DynamicDrawUsage, DynamicReadUsage, EdgesGeometry, EllipseCurve, EqualStencilFunc, ExtrudeGeometry, FileLoader, Float16BufferAttribute, Float32BufferAttribute, Fog, FogExp2, FramebufferTexture, FrustumArray, GLBufferAttribute, GLSL1, GreaterEqualStencilFunc, GreaterStencilFunc, GridHelper, Group, HemisphereLight, HemisphereLightHelper, IcosahedronGeometry, ImageBitmapLoader, ImageLoader, ImageUtils, IncrementStencilOp, IncrementWrapStencilOp, InstancedBufferAttribute, InstancedBufferGeometry, InstancedInterleavedBuffer, InstancedMesh, Int16BufferAttribute, Int32BufferAttribute, Int8BufferAttribute, InterleavedBuffer, InterleavedBufferAttribute, Interpolant, InterpolateDiscrete, InterpolateLinear, InterpolateSmooth, InterpolationSamplingMode, InterpolationSamplingType, InvertStencilOp, KeepStencilOp, KeyframeTrack, LOD, LatheGeometry, LessEqualStencilFunc, LessStencilFunc, Light, LightProbe, Line, Line3, LineBasicMaterial, LineCurve, LineCurve3, LineDashedMaterial, LineLoop, LineSegments, LinearInterpolant, LinearMipMapLinearFilter, LinearMipMapNearestFilter, Loader, LoaderUtils, LoadingManager, LoopOnce, LoopPingPong, LoopRepeat, MOUSE, Material, MaterialLoader, MathUtils, Matrix2, MeshLambertMaterial, MeshMatcapMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshPhysicalMaterial, MeshStandardMaterial, MeshToonMaterial, NearestMipMapLinearFilter, NearestMipMapNearestFilter, NeverStencilFunc, NormalAnimationBlendMode, NotEqualStencilFunc, NumberKeyframeTrack, Object3D, ObjectLoader, OctahedronGeometry, Path, PlaneHelper, PointLight, PointLightHelper, Points, PointsMaterial, PolarGridHelper, PolyhedronGeometry, PositionalAudio, PropertyBinding, PropertyMixer, QuadraticBezierCurve, QuadraticBezierCurve3, Quaternion, QuaternionKeyframeTrack, QuaternionLinearInterpolant, RGBDepthPacking, RGBIntegerFormat, RGDepthPacking, RawShaderMaterial, Ray, Raycaster, RectAreaLight, RenderTarget, RenderTarget3D, RenderTargetArray, ReplaceStencilOp, RingGeometry, Scene, ShadowMaterial, Shape, ShapeGeometry, ShapePath, ShapeUtils, Skeleton, SkeletonHelper, SkinnedMesh, Source, Sphere, SphereGeometry, Spherical, SphericalHarmonics3, SplineCurve, SpotLight, SpotLightHelper, Sprite, SpriteMaterial, StaticCopyUsage, StaticDrawUsage, StaticReadUsage, StereoCamera, StreamCopyUsage, StreamDrawUsage, StreamReadUsage, StringKeyframeTrack, TOUCH, TetrahedronGeometry, TextureLoader, TextureUtils, TimestampQuery, TorusGeometry, TorusKnotGeometry, Triangle, TriangleFanDrawMode, TriangleStripDrawMode, TrianglesDrawMode, TubeGeometry, UVMapping, Uint8BufferAttribute, Uint8ClampedBufferAttribute, Uniform, UniformsGroup, VectorKeyframeTrack, VideoFrameTexture, VideoTexture, WebGL3DRenderTarget, WebGLArrayRenderTarget, WebGPUCoordinateSystem, WireframeGeometry, WrapAroundEnding, ZeroCurvatureEnding, ZeroSlopeEnding, ZeroStencilOp } from './three.core.js';\nfunction WebGLAnimation() {\n  let context = null;\n  let isAnimating = false;\n  let animationLoop = null;\n  let requestId = null;\n  function onAnimationFrame(time, frame) {\n    animationLoop(time, frame);\n    requestId = context.requestAnimationFrame(onAnimationFrame);\n  }\n  return {\n    start: function () {\n      if (isAnimating === true) return;\n      if (animationLoop === null) return;\n      requestId = context.requestAnimationFrame(onAnimationFrame);\n      isAnimating = true;\n    },\n    stop: function () {\n      context.cancelAnimationFrame(requestId);\n      isAnimating = false;\n    },\n    setAnimationLoop: function (callback) {\n      animationLoop = callback;\n    },\n    setContext: function (value) {\n      context = value;\n    }\n  };\n}\nfunction WebGLAttributes(gl) {\n  const buffers = new WeakMap();\n  function createBuffer(attribute, bufferType) {\n    const array = attribute.array;\n    const usage = attribute.usage;\n    const size = array.byteLength;\n    const buffer = gl.createBuffer();\n    gl.bindBuffer(bufferType, buffer);\n    gl.bufferData(bufferType, array, usage);\n    attribute.onUploadCallback();\n    let type;\n    if (array instanceof Float32Array) {\n      type = gl.FLOAT;\n    } else if (array instanceof Uint16Array) {\n      if (attribute.isFloat16BufferAttribute) {\n        type = gl.HALF_FLOAT;\n      } else {\n        type = gl.UNSIGNED_SHORT;\n      }\n    } else if (array instanceof Int16Array) {\n      type = gl.SHORT;\n    } else if (array instanceof Uint32Array) {\n      type = gl.UNSIGNED_INT;\n    } else if (array instanceof Int32Array) {\n      type = gl.INT;\n    } else if (array instanceof Int8Array) {\n      type = gl.BYTE;\n    } else if (array instanceof Uint8Array) {\n      type = gl.UNSIGNED_BYTE;\n    } else if (array instanceof Uint8ClampedArray) {\n      type = gl.UNSIGNED_BYTE;\n    } else {\n      throw new Error('THREE.WebGLAttributes: Unsupported buffer data format: ' + array);\n    }\n    return {\n      buffer: buffer,\n      type: type,\n      bytesPerElement: array.BYTES_PER_ELEMENT,\n      version: attribute.version,\n      size: size\n    };\n  }\n  function updateBuffer(buffer, attribute, bufferType) {\n    const array = attribute.array;\n    const updateRanges = attribute.updateRanges;\n    gl.bindBuffer(bufferType, buffer);\n    if (updateRanges.length === 0) {\n      // Not using update ranges\n      gl.bufferSubData(bufferType, 0, array);\n    } else {\n      // Before applying update ranges, we merge any adjacent / overlapping\n      // ranges to reduce load on `gl.bufferSubData`. Empirically, this has led\n      // to performance improvements for applications which make heavy use of\n      // update ranges. Likely due to GPU command overhead.\n      //\n      // Note that to reduce garbage collection between frames, we merge the\n      // update ranges in-place. This is safe because this method will clear the\n      // update ranges once updated.\n\n      updateRanges.sort((a, b) => a.start - b.start);\n\n      // To merge the update ranges in-place, we work from left to right in the\n      // existing updateRanges array, merging ranges. This may result in a final\n      // array which is smaller than the original. This index tracks the last\n      // index representing a merged range, any data after this index can be\n      // trimmed once the merge algorithm is completed.\n      let mergeIndex = 0;\n      for (let i = 1; i < updateRanges.length; i++) {\n        const previousRange = updateRanges[mergeIndex];\n        const range = updateRanges[i];\n\n        // We add one here to merge adjacent ranges. This is safe because ranges\n        // operate over positive integers.\n        if (range.start <= previousRange.start + previousRange.count + 1) {\n          previousRange.count = Math.max(previousRange.count, range.start + range.count - previousRange.start);\n        } else {\n          ++mergeIndex;\n          updateRanges[mergeIndex] = range;\n        }\n      }\n\n      // Trim the array to only contain the merged ranges.\n      updateRanges.length = mergeIndex + 1;\n      for (let i = 0, l = updateRanges.length; i < l; i++) {\n        const range = updateRanges[i];\n        gl.bufferSubData(bufferType, range.start * array.BYTES_PER_ELEMENT, array, range.start, range.count);\n      }\n      attribute.clearUpdateRanges();\n    }\n    attribute.onUploadCallback();\n  }\n\n  //\n\n  function get(attribute) {\n    if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n    return buffers.get(attribute);\n  }\n  function remove(attribute) {\n    if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n    const data = buffers.get(attribute);\n    if (data) {\n      gl.deleteBuffer(data.buffer);\n      buffers.delete(attribute);\n    }\n  }\n  function update(attribute, bufferType) {\n    if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n    if (attribute.isGLBufferAttribute) {\n      const cached = buffers.get(attribute);\n      if (!cached || cached.version < attribute.version) {\n        buffers.set(attribute, {\n          buffer: attribute.buffer,\n          type: attribute.type,\n          bytesPerElement: attribute.elementSize,\n          version: attribute.version\n        });\n      }\n      return;\n    }\n    const data = buffers.get(attribute);\n    if (data === undefined) {\n      buffers.set(attribute, createBuffer(attribute, bufferType));\n    } else if (data.version < attribute.version) {\n      if (data.size !== attribute.array.byteLength) {\n        throw new Error('THREE.WebGLAttributes: The size of the buffer attribute\\'s array buffer does not match the original size. Resizing buffer attributes is not supported.');\n      }\n      updateBuffer(data.buffer, attribute, bufferType);\n      data.version = attribute.version;\n    }\n  }\n  return {\n    get: get,\n    remove: remove,\n    update: update\n  };\n}\nvar alphahash_fragment = \"#ifdef USE_ALPHAHASH\\n\\tif ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\\n#endif\";\nvar alphahash_pars_fragment = \"#ifdef USE_ALPHAHASH\\n\\tconst float ALPHA_HASH_SCALE = 0.05;\\n\\tfloat hash2D( vec2 value ) {\\n\\t\\treturn fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\\n\\t}\\n\\tfloat hash3D( vec3 value ) {\\n\\t\\treturn hash2D( vec2( hash2D( value.xy ), value.z ) );\\n\\t}\\n\\tfloat getAlphaHashThreshold( vec3 position ) {\\n\\t\\tfloat maxDeriv = max(\\n\\t\\t\\tlength( dFdx( position.xyz ) ),\\n\\t\\t\\tlength( dFdy( position.xyz ) )\\n\\t\\t);\\n\\t\\tfloat pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\\n\\t\\tvec2 pixScales = vec2(\\n\\t\\t\\texp2( floor( log2( pixScale ) ) ),\\n\\t\\t\\texp2( ceil( log2( pixScale ) ) )\\n\\t\\t);\\n\\t\\tvec2 alpha = vec2(\\n\\t\\t\\thash3D( floor( pixScales.x * position.xyz ) ),\\n\\t\\t\\thash3D( floor( pixScales.y * position.xyz ) )\\n\\t\\t);\\n\\t\\tfloat lerpFactor = fract( log2( pixScale ) );\\n\\t\\tfloat x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\\n\\t\\tfloat a = min( lerpFactor, 1.0 - lerpFactor );\\n\\t\\tvec3 cases = vec3(\\n\\t\\t\\tx * x / ( 2.0 * a * ( 1.0 - a ) ),\\n\\t\\t\\t( x - 0.5 * a ) / ( 1.0 - a ),\\n\\t\\t\\t1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\\n\\t\\t);\\n\\t\\tfloat threshold = ( x < ( 1.0 - a ) )\\n\\t\\t\\t? ( ( x < a ) ? cases.x : cases.y )\\n\\t\\t\\t: cases.z;\\n\\t\\treturn clamp( threshold , 1.0e-6, 1.0 );\\n\\t}\\n#endif\";\nvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\\n#endif\";\nvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\nvar alphatest_fragment = \"#ifdef USE_ALPHATEST\\n\\t#ifdef ALPHA_TO_COVERAGE\\n\\tdiffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );\\n\\tif ( diffuseColor.a == 0.0 ) discard;\\n\\t#else\\n\\tif ( diffuseColor.a < alphaTest ) discard;\\n\\t#endif\\n#endif\";\nvar alphatest_pars_fragment = \"#ifdef USE_ALPHATEST\\n\\tuniform float alphaTest;\\n#endif\";\nvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_CLEARCOAT ) \\n\\t\\tclearcoatSpecularIndirect *= ambientOcclusion;\\n\\t#endif\\n\\t#if defined( USE_SHEEN ) \\n\\t\\tsheenSpecularIndirect *= ambientOcclusion;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometryNormal, geometryViewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\\n\\t#endif\\n#endif\";\nvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\nvar batching_pars_vertex = \"#ifdef USE_BATCHING\\n\\t#if ! defined( GL_ANGLE_multi_draw )\\n\\t#define gl_DrawID _gl_DrawID\\n\\tuniform int _gl_DrawID;\\n\\t#endif\\n\\tuniform highp sampler2D batchingTexture;\\n\\tuniform highp usampler2D batchingIdTexture;\\n\\tmat4 getBatchingMatrix( const in float i ) {\\n\\t\\tint size = textureSize( batchingTexture, 0 ).x;\\n\\t\\tint j = int( i ) * 4;\\n\\t\\tint x = j % size;\\n\\t\\tint y = j / size;\\n\\t\\tvec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );\\n\\t\\tvec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );\\n\\t\\tvec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );\\n\\t\\tvec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );\\n\\t\\treturn mat4( v1, v2, v3, v4 );\\n\\t}\\n\\tfloat getIndirectIndex( const in int i ) {\\n\\t\\tint size = textureSize( batchingIdTexture, 0 ).x;\\n\\t\\tint x = i % size;\\n\\t\\tint y = i / size;\\n\\t\\treturn float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );\\n\\t}\\n#endif\\n#ifdef USE_BATCHING_COLOR\\n\\tuniform sampler2D batchingColorTexture;\\n\\tvec3 getBatchingColor( const in float i ) {\\n\\t\\tint size = textureSize( batchingColorTexture, 0 ).x;\\n\\t\\tint j = int( i );\\n\\t\\tint x = j % size;\\n\\t\\tint y = j / size;\\n\\t\\treturn texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;\\n\\t}\\n#endif\";\nvar batching_vertex = \"#ifdef USE_BATCHING\\n\\tmat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );\\n#endif\";\nvar begin_vertex = \"vec3 transformed = vec3( position );\\n#ifdef USE_ALPHAHASH\\n\\tvPosition = vec3( position );\\n#endif\";\nvar beginnormal_vertex = \"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\";\nvar bsdfs = \"float G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n} // validated\";\nvar iridescence_fragment = \"#ifdef USE_IRIDESCENCE\\n\\tconst mat3 XYZ_TO_REC709 = mat3(\\n\\t\\t 3.2404542, -0.9692660,  0.0556434,\\n\\t\\t-1.5371385,  1.8760108, -0.2040259,\\n\\t\\t-0.4985314,  0.0415560,  1.0572252\\n\\t);\\n\\tvec3 Fresnel0ToIor( vec3 fresnel0 ) {\\n\\t\\tvec3 sqrtF0 = sqrt( fresnel0 );\\n\\t\\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\\n\\t}\\n\\tvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\\n\\t\\treturn pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\\n\\t}\\n\\tfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\\n\\t\\treturn pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\\n\\t}\\n\\tvec3 evalSensitivity( float OPD, vec3 shift ) {\\n\\t\\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\\n\\t\\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\\n\\t\\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\\n\\t\\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\\n\\t\\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\\n\\t\\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\\n\\t\\txyz /= 1.0685e-7;\\n\\t\\tvec3 rgb = XYZ_TO_REC709 * xyz;\\n\\t\\treturn rgb;\\n\\t}\\n\\tvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\\n\\t\\tvec3 I;\\n\\t\\tfloat iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\\n\\t\\tfloat sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\\n\\t\\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\\n\\t\\tif ( cosTheta2Sq < 0.0 ) {\\n\\t\\t\\treturn vec3( 1.0 );\\n\\t\\t}\\n\\t\\tfloat cosTheta2 = sqrt( cosTheta2Sq );\\n\\t\\tfloat R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\\n\\t\\tfloat R12 = F_Schlick( R0, 1.0, cosTheta1 );\\n\\t\\tfloat T121 = 1.0 - R12;\\n\\t\\tfloat phi12 = 0.0;\\n\\t\\tif ( iridescenceIOR < outsideIOR ) phi12 = PI;\\n\\t\\tfloat phi21 = PI - phi12;\\n\\t\\tvec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );\\t\\tvec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\\n\\t\\tvec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\\n\\t\\tvec3 phi23 = vec3( 0.0 );\\n\\t\\tif ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\\n\\t\\tif ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\\n\\t\\tif ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\\n\\t\\tfloat OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\\n\\t\\tvec3 phi = vec3( phi21 ) + phi23;\\n\\t\\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\\n\\t\\tvec3 r123 = sqrt( R123 );\\n\\t\\tvec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\\n\\t\\tvec3 C0 = R12 + Rs;\\n\\t\\tI = C0;\\n\\t\\tvec3 Cm = Rs - T121;\\n\\t\\tfor ( int m = 1; m <= 2; ++ m ) {\\n\\t\\t\\tCm *= r123;\\n\\t\\t\\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\\n\\t\\t\\tI += Cm * Sm;\\n\\t\\t}\\n\\t\\treturn max( I, vec3( 0.0 ) );\\n\\t}\\n#endif\";\nvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vBumpMapUv );\\n\\t\\tvec2 dSTdy = dFdy( vBumpMapUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\\n\\t\\tvec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );\\n\\t\\tvec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\";\nvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#ifdef ALPHA_TO_COVERAGE\\n\\t\\tfloat distanceToPlane, distanceGradient;\\n\\t\\tfloat clipOpacity = 1.0;\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tdistanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\\n\\t\\t\\tdistanceGradient = fwidth( distanceToPlane ) / 2.0;\\n\\t\\t\\tclipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\\n\\t\\t\\tif ( clipOpacity == 0.0 ) discard;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\t\\tfloat unionClipOpacity = 1.0;\\n\\t\\t\\t#pragma unroll_loop_start\\n\\t\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\t\\tdistanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\\n\\t\\t\\t\\tdistanceGradient = fwidth( distanceToPlane ) / 2.0;\\n\\t\\t\\t\\tunionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\\n\\t\\t\\t}\\n\\t\\t\\t#pragma unroll_loop_end\\n\\t\\t\\tclipOpacity *= 1.0 - unionClipOpacity;\\n\\t\\t#endif\\n\\t\\tdiffuseColor.a *= clipOpacity;\\n\\t\\tif ( diffuseColor.a == 0.0 ) discard;\\n\\t#else\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\t\\tbool clipped = true;\\n\\t\\t\\t#pragma unroll_loop_start\\n\\t\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\t\\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t\\t}\\n\\t\\t\\t#pragma unroll_loop_end\\n\\t\\t\\tif ( clipped ) discard;\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\nvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\";\nvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n#endif\";\nvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvClipPosition = - mvPosition.xyz;\\n#endif\";\nvar color_fragment = \"#if defined( USE_COLOR_ALPHA )\\n\\tdiffuseColor *= vColor;\\n#elif defined( USE_COLOR )\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\nvar color_pars_fragment = \"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\nvar color_pars_vertex = \"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\nvar color_vertex = \"#if defined( USE_COLOR_ALPHA )\\n\\tvColor = vec4( 1.0 );\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\\n\\tvColor = vec3( 1.0 );\\n#endif\\n#ifdef USE_COLOR\\n\\tvColor *= color;\\n#endif\\n#ifdef USE_INSTANCING_COLOR\\n\\tvColor.xyz *= instanceColor.xyz;\\n#endif\\n#ifdef USE_BATCHING_COLOR\\n\\tvec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );\\n\\tvColor.xyz *= batchingColor.xyz;\\n#endif\";\nvar common = \"#define PI 3.141592653589793\\n#define PI2 6.283185307179586\\n#define PI_HALF 1.5707963267948966\\n#define RECIPROCAL_PI 0.3183098861837907\\n#define RECIPROCAL_PI2 0.15915494309189535\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate( a ) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nvec3 pow2( const in vec3 x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract( sin( sn ) * c );\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\n#ifdef USE_ALPHAHASH\\n\\tvarying vec3 vPosition;\\n#endif\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n\\treturn m[ 2 ][ 3 ] == - 1.0;\\n}\\nvec2 equirectUv( in vec3 dir ) {\\n\\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\treturn vec2( u, v );\\n}\\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\\n\\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\\n\\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\\n}\\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\\n\\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\\n\\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\\n} // validated\";\nvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t#define cubeUV_minMipLevel 4.0\\n\\t#define cubeUV_minTileSize 16.0\\n\\tfloat getFace( vec3 direction ) {\\n\\t\\tvec3 absDirection = abs( direction );\\n\\t\\tfloat face = - 1.0;\\n\\t\\tif ( absDirection.x > absDirection.z ) {\\n\\t\\t\\tif ( absDirection.x > absDirection.y )\\n\\t\\t\\t\\tface = direction.x > 0.0 ? 0.0 : 3.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t} else {\\n\\t\\t\\tif ( absDirection.z > absDirection.y )\\n\\t\\t\\t\\tface = direction.z > 0.0 ? 2.0 : 5.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t}\\n\\t\\treturn face;\\n\\t}\\n\\tvec2 getUV( vec3 direction, float face ) {\\n\\t\\tvec2 uv;\\n\\t\\tif ( face == 0.0 ) {\\n\\t\\t\\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 1.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\\n\\t\\t} else if ( face == 2.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\\n\\t\\t} else if ( face == 3.0 ) {\\n\\t\\t\\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 4.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\\n\\t\\t} else {\\n\\t\\t\\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\\n\\t\\t}\\n\\t\\treturn 0.5 * ( uv + 1.0 );\\n\\t}\\n\\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\\n\\t\\tfloat face = getFace( direction );\\n\\t\\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\\n\\t\\tmipInt = max( mipInt, cubeUV_minMipLevel );\\n\\t\\tfloat faceSize = exp2( mipInt );\\n\\t\\thighp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\\n\\t\\tif ( face > 2.0 ) {\\n\\t\\t\\tuv.y += faceSize;\\n\\t\\t\\tface -= 3.0;\\n\\t\\t}\\n\\t\\tuv.x += face * faceSize;\\n\\t\\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\\n\\t\\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\\n\\t\\tuv.x *= CUBEUV_TEXEL_WIDTH;\\n\\t\\tuv.y *= CUBEUV_TEXEL_HEIGHT;\\n\\t\\t#ifdef texture2DGradEXT\\n\\t\\t\\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\\n\\t\\t#else\\n\\t\\t\\treturn texture2D( envMap, uv ).rgb;\\n\\t\\t#endif\\n\\t}\\n\\t#define cubeUV_r0 1.0\\n\\t#define cubeUV_m0 - 2.0\\n\\t#define cubeUV_r1 0.8\\n\\t#define cubeUV_m1 - 1.0\\n\\t#define cubeUV_r4 0.4\\n\\t#define cubeUV_m4 2.0\\n\\t#define cubeUV_r5 0.305\\n\\t#define cubeUV_m5 3.0\\n\\t#define cubeUV_r6 0.21\\n\\t#define cubeUV_m6 4.0\\n\\tfloat roughnessToMip( float roughness ) {\\n\\t\\tfloat mip = 0.0;\\n\\t\\tif ( roughness >= cubeUV_r1 ) {\\n\\t\\t\\tmip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\\n\\t\\t} else if ( roughness >= cubeUV_r4 ) {\\n\\t\\t\\tmip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\\n\\t\\t} else if ( roughness >= cubeUV_r5 ) {\\n\\t\\t\\tmip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\\n\\t\\t} else if ( roughness >= cubeUV_r6 ) {\\n\\t\\t\\tmip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\\n\\t\\t} else {\\n\\t\\t\\tmip = - 2.0 * log2( 1.16 * roughness );\\t\\t}\\n\\t\\treturn mip;\\n\\t}\\n\\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\\n\\t\\tfloat mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\\n\\t\\tfloat mipF = fract( mip );\\n\\t\\tfloat mipInt = floor( mip );\\n\\t\\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\\n\\t\\tif ( mipF == 0.0 ) {\\n\\t\\t\\treturn vec4( color0, 1.0 );\\n\\t\\t} else {\\n\\t\\t\\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\\n\\t\\t\\treturn vec4( mix( color0, color1, mipF ), 1.0 );\\n\\t\\t}\\n\\t}\\n#endif\";\nvar defaultnormal_vertex = \"vec3 transformedNormal = objectNormal;\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = objectTangent;\\n#endif\\n#ifdef USE_BATCHING\\n\\tmat3 bm = mat3( batchingMatrix );\\n\\ttransformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );\\n\\ttransformedNormal = bm * transformedNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\ttransformedTangent = bm * transformedTangent;\\n\\t#endif\\n#endif\\n#ifdef USE_INSTANCING\\n\\tmat3 im = mat3( instanceMatrix );\\n\\ttransformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );\\n\\ttransformedNormal = im * transformedNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\ttransformedTangent = im * transformedTangent;\\n\\t#endif\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\ttransformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\";\nvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\";\nvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\\n#endif\";\nvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\\n\\t#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE\\n\\t\\temissiveColor = sRGBTransferEOTF( emissiveColor );\\n\\t#endif\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\";\nvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\";\nvar colorspace_fragment = \"gl_FragColor = linearToOutputTexel( gl_FragColor );\";\nvar colorspace_pars_fragment = \"vec4 LinearTransferOETF( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 sRGBTransferEOTF( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\n}\\nvec4 sRGBTransferOETF( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\";\nvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\";\nvar envmap_common_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\tuniform mat3 envMapRotation;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\";\nvar envmap_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\";\nvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\";\nvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\nvar fog_vertex = \"#ifdef USE_FOG\\n\\tvFogDepth = - mvPosition.z;\\n#endif\";\nvar fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying float vFogDepth;\\n#endif\";\nvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\";\nvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float vFogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\nvar gradientmap_pars_fragment = \"#ifdef USE_GRADIENTMAP\\n\\tuniform sampler2D gradientMap;\\n#endif\\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\tfloat dotNL = dot( normal, lightDirection );\\n\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t#ifdef USE_GRADIENTMAP\\n\\t\\treturn vec3( texture2D( gradientMap, coord ).r );\\n\\t#else\\n\\t\\tvec2 fw = fwidth( coord ) * 0.5;\\n\\t\\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\\n\\t#endif\\n}\";\nvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\nvar lights_lambert_fragment = \"LambertMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularStrength = specularStrength;\";\nvar lights_lambert_pars_fragment = \"varying vec3 vViewPosition;\\nstruct LambertMaterial {\\n\\tvec3 diffuseColor;\\n\\tfloat specularStrength;\\n};\\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Lambert\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Lambert\";\nvar lights_pars_begin = \"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\n#if defined( USE_LIGHT_PROBES )\\n\\tuniform vec3 lightProbe[ 9 ];\\n#endif\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\\n\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\treturn irradiance;\\n}\\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\tif ( cutoffDistance > 0.0 ) {\\n\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t}\\n\\treturn distanceFalloff;\\n}\\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\\n\\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {\\n\\t\\tlight.color = directionalLight.color;\\n\\t\\tlight.direction = directionalLight.direction;\\n\\t\\tlight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {\\n\\t\\tvec3 lVector = pointLight.position - geometryPosition;\\n\\t\\tlight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tlight.color = pointLight.color;\\n\\t\\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tlight.visible = ( light.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {\\n\\t\\tvec3 lVector = spotLight.position - geometryPosition;\\n\\t\\tlight.direction = normalize( lVector );\\n\\t\\tfloat angleCos = dot( light.direction, spotLight.direction );\\n\\t\\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\tif ( spotAttenuation > 0.0 ) {\\n\\t\\t\\tfloat lightDistance = length( lVector );\\n\\t\\t\\tlight.color = spotLight.color * spotAttenuation;\\n\\t\\t\\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tlight.visible = ( light.color != vec3( 0.0 ) );\\n\\t\\t} else {\\n\\t\\t\\tlight.color = vec3( 0.0 );\\n\\t\\t\\tlight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\\n\\t\\tfloat dotNL = dot( normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\";\nvar envmap_physical_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tvec3 getIBLIrradiance( const in vec3 normal ) {\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );\\n\\t\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t\\t#else\\n\\t\\t\\treturn vec3( 0.0 );\\n\\t\\t#endif\\n\\t}\\n\\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t\\t\\tvec3 reflectVec = reflect( - viewDir, normal );\\n\\t\\t\\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );\\n\\t\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t\\t#else\\n\\t\\t\\treturn vec3( 0.0 );\\n\\t\\t#endif\\n\\t}\\n\\t#ifdef USE_ANISOTROPY\\n\\t\\tvec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\\n\\t\\t\\t#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t\\t\\t\\tvec3 bentNormal = cross( bitangent, viewDir );\\n\\t\\t\\t\\tbentNormal = normalize( cross( bentNormal, bitangent ) );\\n\\t\\t\\t\\tbentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\\n\\t\\t\\t\\treturn getIBLRadiance( viewDir, bentNormal, roughness );\\n\\t\\t\\t#else\\n\\t\\t\\t\\treturn vec3( 0.0 );\\n\\t\\t\\t#endif\\n\\t\\t}\\n\\t#endif\\n#endif\";\nvar lights_toon_fragment = \"ToonMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\";\nvar lights_toon_pars_fragment = \"varying vec3 vViewPosition;\\nstruct ToonMaterial {\\n\\tvec3 diffuseColor;\\n};\\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tvec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Toon\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Toon\";\nvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\nvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\nstruct BlinnPhongMaterial {\\n\\tvec3 diffuseColor;\\n\\tvec3 specularColor;\\n\\tfloat specularShininess;\\n\\tfloat specularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\";\nvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nvec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );\\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\\nmaterial.roughness = min( material.roughness, 1.0 );\\n#ifdef IOR\\n\\tmaterial.ior = ior;\\n\\t#ifdef USE_SPECULAR\\n\\t\\tfloat specularIntensityFactor = specularIntensity;\\n\\t\\tvec3 specularColorFactor = specularColor;\\n\\t\\t#ifdef USE_SPECULAR_COLORMAP\\n\\t\\t\\tspecularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\\n\\t\\t#endif\\n\\t\\t#ifdef USE_SPECULAR_INTENSITYMAP\\n\\t\\t\\tspecularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\\n\\t\\t#endif\\n\\t\\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\\n\\t#else\\n\\t\\tfloat specularIntensityFactor = 1.0;\\n\\t\\tvec3 specularColorFactor = vec3( 1.0 );\\n\\t\\tmaterial.specularF90 = 1.0;\\n\\t#endif\\n\\tmaterial.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.specularF90 = 1.0;\\n#endif\\n#ifdef USE_CLEARCOAT\\n\\tmaterial.clearcoat = clearcoat;\\n\\tmaterial.clearcoatRoughness = clearcoatRoughness;\\n\\tmaterial.clearcoatF0 = vec3( 0.04 );\\n\\tmaterial.clearcoatF90 = 1.0;\\n\\t#ifdef USE_CLEARCOATMAP\\n\\t\\tmaterial.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\t\\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\\n\\t#endif\\n\\tmaterial.clearcoat = saturate( material.clearcoat );\\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\\n\\tmaterial.clearcoatRoughness += geometryRoughness;\\n\\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\\n#endif\\n#ifdef USE_DISPERSION\\n\\tmaterial.dispersion = dispersion;\\n#endif\\n#ifdef USE_IRIDESCENCE\\n\\tmaterial.iridescence = iridescence;\\n\\tmaterial.iridescenceIOR = iridescenceIOR;\\n\\t#ifdef USE_IRIDESCENCEMAP\\n\\t\\tmaterial.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\\n\\t#endif\\n\\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\\n\\t\\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\\n\\t#else\\n\\t\\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\\n\\t#endif\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheenColor;\\n\\t#ifdef USE_SHEEN_COLORMAP\\n\\t\\tmaterial.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\\n\\t#endif\\n\\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\\n\\t#ifdef USE_SHEEN_ROUGHNESSMAP\\n\\t\\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\\n\\t#endif\\n#endif\\n#ifdef USE_ANISOTROPY\\n\\t#ifdef USE_ANISOTROPYMAP\\n\\t\\tmat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\\n\\t\\tvec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\\n\\t\\tvec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\\n\\t#else\\n\\t\\tvec2 anisotropyV = anisotropyVector;\\n\\t#endif\\n\\tmaterial.anisotropy = length( anisotropyV );\\n\\tif( material.anisotropy == 0.0 ) {\\n\\t\\tanisotropyV = vec2( 1.0, 0.0 );\\n\\t} else {\\n\\t\\tanisotropyV /= material.anisotropy;\\n\\t\\tmaterial.anisotropy = saturate( material.anisotropy );\\n\\t}\\n\\tmaterial.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\\n\\tmaterial.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;\\n\\tmaterial.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;\\n#endif\";\nvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3 diffuseColor;\\n\\tfloat roughness;\\n\\tvec3 specularColor;\\n\\tfloat specularF90;\\n\\tfloat dispersion;\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat clearcoat;\\n\\t\\tfloat clearcoatRoughness;\\n\\t\\tvec3 clearcoatF0;\\n\\t\\tfloat clearcoatF90;\\n\\t#endif\\n\\t#ifdef USE_IRIDESCENCE\\n\\t\\tfloat iridescence;\\n\\t\\tfloat iridescenceIOR;\\n\\t\\tfloat iridescenceThickness;\\n\\t\\tvec3 iridescenceFresnel;\\n\\t\\tvec3 iridescenceF0;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\tvec3 sheenColor;\\n\\t\\tfloat sheenRoughness;\\n\\t#endif\\n\\t#ifdef IOR\\n\\t\\tfloat ior;\\n\\t#endif\\n\\t#ifdef USE_TRANSMISSION\\n\\t\\tfloat transmission;\\n\\t\\tfloat transmissionAlpha;\\n\\t\\tfloat thickness;\\n\\t\\tfloat attenuationDistance;\\n\\t\\tvec3 attenuationColor;\\n\\t#endif\\n\\t#ifdef USE_ANISOTROPY\\n\\t\\tfloat anisotropy;\\n\\t\\tfloat alphaT;\\n\\t\\tvec3 anisotropyT;\\n\\t\\tvec3 anisotropyB;\\n\\t#endif\\n};\\nvec3 clearcoatSpecularDirect = vec3( 0.0 );\\nvec3 clearcoatSpecularIndirect = vec3( 0.0 );\\nvec3 sheenSpecularDirect = vec3( 0.0 );\\nvec3 sheenSpecularIndirect = vec3(0.0 );\\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\\n    float x2 = x * x;\\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\\n}\\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\n#ifdef USE_ANISOTROPY\\n\\tfloat V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\\n\\t\\tfloat gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\\n\\t\\tfloat gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\\n\\t\\tfloat v = 0.5 / ( gv + gl );\\n\\t\\treturn saturate(v);\\n\\t}\\n\\tfloat D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\\n\\t\\tfloat a2 = alphaT * alphaB;\\n\\t\\thighp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\\n\\t\\thighp float v2 = dot( v, v );\\n\\t\\tfloat w2 = a2 / v2;\\n\\t\\treturn RECIPROCAL_PI * a2 * pow2 ( w2 );\\n\\t}\\n#endif\\n#ifdef USE_CLEARCOAT\\n\\tvec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\\n\\t\\tvec3 f0 = material.clearcoatF0;\\n\\t\\tfloat f90 = material.clearcoatF90;\\n\\t\\tfloat roughness = material.clearcoatRoughness;\\n\\t\\tfloat alpha = pow2( roughness );\\n\\t\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\t\\tfloat dotNL = saturate( dot( normal, lightDir ) );\\n\\t\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\t\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\t\\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\\n\\t\\tvec3 F = F_Schlick( f0, f90, dotVH );\\n\\t\\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\t\\tfloat D = D_GGX( alpha, dotNH );\\n\\t\\treturn F * ( V * D );\\n\\t}\\n#endif\\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\\n\\tvec3 f0 = material.specularColor;\\n\\tfloat f90 = material.specularF90;\\n\\tfloat roughness = material.roughness;\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, lightDir ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\\n\\tvec3 F = F_Schlick( f0, f90, dotVH );\\n\\t#ifdef USE_IRIDESCENCE\\n\\t\\tF = mix( F, material.iridescenceFresnel, material.iridescence );\\n\\t#endif\\n\\t#ifdef USE_ANISOTROPY\\n\\t\\tfloat dotTL = dot( material.anisotropyT, lightDir );\\n\\t\\tfloat dotTV = dot( material.anisotropyT, viewDir );\\n\\t\\tfloat dotTH = dot( material.anisotropyT, halfDir );\\n\\t\\tfloat dotBL = dot( material.anisotropyB, lightDir );\\n\\t\\tfloat dotBV = dot( material.anisotropyB, viewDir );\\n\\t\\tfloat dotBH = dot( material.anisotropyB, halfDir );\\n\\t\\tfloat V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\\n\\t\\tfloat D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\\n\\t#else\\n\\t\\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\t\\tfloat D = D_GGX( alpha, dotNH );\\n\\t#endif\\n\\treturn F * ( V * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie( float roughness, float dotNH ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tfloat invAlpha = 1.0 / alpha;\\n\\tfloat cos2h = dotNH * dotNH;\\n\\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\\n\\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\\n}\\nfloat V_Neubelt( float dotNV, float dotNL ) {\\n\\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\\n}\\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\\n\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, lightDir ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat D = D_Charlie( sheenRoughness, dotNH );\\n\\tfloat V = V_Neubelt( dotNV, dotNL );\\n\\treturn sheenColor * ( D * V );\\n}\\n#endif\\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat r2 = roughness * roughness;\\n\\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\\n\\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\\n\\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\\n\\treturn saturate( DG * RECIPROCAL_PI );\\n}\\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\\n\\treturn fab;\\n}\\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\\n\\tvec2 fab = DFGApprox( normal, viewDir, roughness );\\n\\treturn specularColor * fab.x + specularF90 * fab.y;\\n}\\n#ifdef USE_IRIDESCENCE\\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n#else\\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n#endif\\n\\tvec2 fab = DFGApprox( normal, viewDir, roughness );\\n\\t#ifdef USE_IRIDESCENCE\\n\\t\\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\\n\\t#else\\n\\t\\tvec3 Fr = specularColor;\\n\\t#endif\\n\\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\\n\\tfloat Ess = fab.x + fab.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometryNormal;\\n\\t\\tvec3 viewDir = geometryViewDir;\\n\\t\\tvec3 position = geometryPosition;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.roughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(    0, 1,    0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = dotNLcc * directLight.color;\\n\\t\\tclearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\tsheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );\\n\\t#endif\\n\\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tclearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\tsheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );\\n\\t#endif\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\t#ifdef USE_IRIDESCENCE\\n\\t\\tcomputeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\\n\\t#else\\n\\t\\tcomputeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\\n\\t#endif\\n\\tvec3 totalScattering = singleScattering + multiScattering;\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\\n\\treflectedLight.indirectSpecular += radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\";\nvar lights_fragment_begin = \"\\nvec3 geometryPosition = - vViewPosition;\\nvec3 geometryNormal = normal;\\nvec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\nvec3 geometryClearcoatNormal = vec3( 0.0 );\\n#ifdef USE_CLEARCOAT\\n\\tgeometryClearcoatNormal = clearcoatNormal;\\n#endif\\n#ifdef USE_IRIDESCENCE\\n\\tfloat dotNVi = saturate( dot( normal, geometryViewDir ) );\\n\\tif ( material.iridescenceThickness == 0.0 ) {\\n\\t\\tmaterial.iridescence = 0.0;\\n\\t} else {\\n\\t\\tmaterial.iridescence = saturate( material.iridescence );\\n\\t}\\n\\tif ( material.iridescence > 0.0 ) {\\n\\t\\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\\n\\t\\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\\n\\t}\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointLightInfo( pointLight, geometryPosition, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tpointLightShadow = pointLightShadows[ i ];\\n\\t\\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\tvec4 spotColor;\\n\\tvec3 spotLightCoord;\\n\\tbool inSpotLightMap;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotLightInfo( spotLight, geometryPosition, directLight );\\n\\t\\t#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\\n\\t\\t#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\\n\\t\\t#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\t#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\\n\\t\\t#else\\n\\t\\t#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\\n\\t\\t#endif\\n\\t\\t#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\\n\\t\\t\\tspotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\\n\\t\\t\\tinSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\\n\\t\\t\\tspotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\\n\\t\\t\\tdirectLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\\n\\t\\t#endif\\n\\t\\t#undef SPOT_LIGHT_MAP_INDEX\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tspotLightShadow = spotLightShadows[ i ];\\n\\t\\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalLightInfo( directionalLight, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectionalLightShadow = directionalLightShadows[ i ];\\n\\t\\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\t#if defined( USE_LIGHT_PROBES )\\n\\t\\tirradiance += getLightProbeIrradiance( lightProbe, geometryNormal );\\n\\t#endif\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\";\nvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\\n\\t\\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getIBLIrradiance( geometryNormal );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\t#ifdef USE_ANISOTROPY\\n\\t\\tradiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );\\n\\t#else\\n\\t\\tradiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tclearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );\\n\\t#endif\\n#endif\";\nvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\\n#endif\";\nvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF )\\n\\tgl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\nvar logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\nvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\nvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\tvFragDepth = 1.0 + gl_Position.w;\\n\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n#endif\";\nvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 sampledDiffuseColor = texture2D( map, vMapUv );\\n\\t#ifdef DECODE_VIDEO_TEXTURE\\n\\t\\tsampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );\\n\\t#endif\\n\\tdiffuseColor *= sampledDiffuseColor;\\n#endif\";\nvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\";\nvar map_particle_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\t#if defined( USE_POINTS_UV )\\n\\t\\tvec2 uv = vUv;\\n\\t#else\\n\\t\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n\\t#endif\\n#endif\\n#ifdef USE_MAP\\n\\tdiffuseColor *= texture2D( map, uv );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\";\nvar map_particle_pars_fragment = \"#if defined( USE_POINTS_UV )\\n\\tvarying vec2 vUv;\\n#else\\n\\t#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\t\\tuniform mat3 uvTransform;\\n\\t#endif\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\nvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\";\nvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\nvar morphinstance_vertex = \"#ifdef USE_INSTANCING_MORPH\\n\\tfloat morphTargetInfluences[ MORPHTARGETS_COUNT ];\\n\\tfloat morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;\\n\\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\\n\\t\\tmorphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;\\n\\t}\\n#endif\";\nvar morphcolor_vertex = \"#if defined( USE_MORPHCOLORS )\\n\\tvColor *= morphTargetBaseInfluence;\\n\\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\\n\\t\\t#if defined( USE_COLOR_ALPHA )\\n\\t\\t\\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\\n\\t\\t#elif defined( USE_COLOR )\\n\\t\\t\\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\\n\\t\\t#endif\\n\\t}\\n#endif\";\nvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\\n\\t\\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\\n\\t}\\n#endif\";\nvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\t#ifndef USE_INSTANCING_MORPH\\n\\t\\tuniform float morphTargetBaseInfluence;\\n\\t\\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\\n\\t#endif\\n\\tuniform sampler2DArray morphTargetsTexture;\\n\\tuniform ivec2 morphTargetsTextureSize;\\n\\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\\n\\t\\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\\n\\t\\tint y = texelIndex / morphTargetsTextureSize.x;\\n\\t\\tint x = texelIndex - y * morphTargetsTextureSize.x;\\n\\t\\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\\n\\t\\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\\n\\t}\\n#endif\";\nvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\\n\\t\\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\\n\\t}\\n#endif\";\nvar normal_fragment_begin = \"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\\n#ifdef FLAT_SHADED\\n\\tvec3 fdx = dFdx( vViewPosition );\\n\\tvec3 fdy = dFdy( vViewPosition );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal *= faceDirection;\\n\\t#endif\\n#endif\\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\\n\\t#ifdef USE_TANGENT\\n\\t\\tmat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\\n\\t#else\\n\\t\\tmat3 tbn = getTangentFrame( - vViewPosition, normal,\\n\\t\\t#if defined( USE_NORMALMAP )\\n\\t\\t\\tvNormalMapUv\\n\\t\\t#elif defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tvClearcoatNormalMapUv\\n\\t\\t#else\\n\\t\\t\\tvUv\\n\\t\\t#endif\\n\\t\\t);\\n\\t#endif\\n\\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\\n\\t\\ttbn[0] *= faceDirection;\\n\\t\\ttbn[1] *= faceDirection;\\n\\t#endif\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\t#ifdef USE_TANGENT\\n\\t\\tmat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\\n\\t#else\\n\\t\\tmat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\\n\\t#endif\\n\\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\\n\\t\\ttbn2[0] *= faceDirection;\\n\\t\\ttbn2[1] *= faceDirection;\\n\\t#endif\\n#endif\\nvec3 nonPerturbedNormal = normal;\";\nvar normal_fragment_maps = \"#ifdef USE_NORMALMAP_OBJECTSPACE\\n\\tnormal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\\n\\tvec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\tnormal = normalize( tbn * mapN );\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\\n#endif\";\nvar normal_pars_fragment = \"#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\";\nvar normal_pars_vertex = \"#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\";\nvar normal_vertex = \"#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\";\nvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef USE_NORMALMAP_OBJECTSPACE\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\\n\\tmat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\\n\\t\\tvec3 q0 = dFdx( eye_pos.xyz );\\n\\t\\tvec3 q1 = dFdy( eye_pos.xyz );\\n\\t\\tvec2 st0 = dFdx( uv.st );\\n\\t\\tvec2 st1 = dFdy( uv.st );\\n\\t\\tvec3 N = surf_norm;\\n\\t\\tvec3 q1perp = cross( q1, N );\\n\\t\\tvec3 q0perp = cross( N, q0 );\\n\\t\\tvec3 T = q1perp * st0.x + q0perp * st1.x;\\n\\t\\tvec3 B = q1perp * st0.y + q0perp * st1.y;\\n\\t\\tfloat det = max( dot( T, T ), dot( B, B ) );\\n\\t\\tfloat scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\\n\\t\\treturn mat3( T * scale, B * scale, N );\\n\\t}\\n#endif\";\nvar clearcoat_normal_fragment_begin = \"#ifdef USE_CLEARCOAT\\n\\tvec3 clearcoatNormal = nonPerturbedNormal;\\n#endif\";\nvar clearcoat_normal_fragment_maps = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\tclearcoatNormal = normalize( tbn2 * clearcoatMapN );\\n#endif\";\nvar clearcoat_pars_fragment = \"#ifdef USE_CLEARCOATMAP\\n\\tuniform sampler2D clearcoatMap;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tuniform sampler2D clearcoatRoughnessMap;\\n#endif\";\nvar iridescence_pars_fragment = \"#ifdef USE_IRIDESCENCEMAP\\n\\tuniform sampler2D iridescenceMap;\\n#endif\\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\\n\\tuniform sampler2D iridescenceThicknessMap;\\n#endif\";\nvar opaque_fragment = \"#ifdef OPAQUE\\ndiffuseColor.a = 1.0;\\n#endif\\n#ifdef USE_TRANSMISSION\\ndiffuseColor.a *= material.transmissionAlpha;\\n#endif\\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );\";\nvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;\\nconst float Inv255 = 1. / 255.;\\nconst vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );\\nconst vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );\\nconst vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );\\nconst vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tif( v <= 0.0 )\\n\\t\\treturn vec4( 0., 0., 0., 0. );\\n\\tif( v >= 1.0 )\\n\\t\\treturn vec4( 1., 1., 1., 1. );\\n\\tfloat vuf;\\n\\tfloat af = modf( v * PackFactors.a, vuf );\\n\\tfloat bf = modf( vuf * ShiftRight8, vuf );\\n\\tfloat gf = modf( vuf * ShiftRight8, vuf );\\n\\treturn vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );\\n}\\nvec3 packDepthToRGB( const in float v ) {\\n\\tif( v <= 0.0 )\\n\\t\\treturn vec3( 0., 0., 0. );\\n\\tif( v >= 1.0 )\\n\\t\\treturn vec3( 1., 1., 1. );\\n\\tfloat vuf;\\n\\tfloat bf = modf( v * PackFactors.b, vuf );\\n\\tfloat gf = modf( vuf * ShiftRight8, vuf );\\n\\treturn vec3( vuf * Inv255, gf * PackUpscale, bf );\\n}\\nvec2 packDepthToRG( const in float v ) {\\n\\tif( v <= 0.0 )\\n\\t\\treturn vec2( 0., 0. );\\n\\tif( v >= 1.0 )\\n\\t\\treturn vec2( 1., 1. );\\n\\tfloat vuf;\\n\\tfloat gf = modf( v * 256., vuf );\\n\\treturn vec2( vuf * Inv255, gf );\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors4 );\\n}\\nfloat unpackRGBToDepth( const in vec3 v ) {\\n\\treturn dot( v, UnpackFactors3 );\\n}\\nfloat unpackRGToDepth( const in vec2 v ) {\\n\\treturn v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;\\n}\\nvec4 pack2HalfToRGBA( const in vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\\n}\\nvec2 unpackRGBATo2Half( const in vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\\n\\treturn depth * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * depth - far );\\n}\";\nvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\";\nvar project_vertex = \"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_BATCHING\\n\\tmvPosition = batchingMatrix * mvPosition;\\n#endif\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\";\nvar dithering_fragment = \"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\";\nvar dithering_pars_fragment = \"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\";\nvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\";\nvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\nvar shadowmap_pars_fragment = \"#if NUM_SPOT_LIGHT_COORDS > 0\\n\\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\\n#endif\\n#if NUM_SPOT_LIGHT_MAPS > 0\\n\\tuniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\\n#endif\\n#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowIntensity;\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowIntensity;\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowIntensity;\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\\n\\t\\tbool frustumTest = inFrustum && shadowCoord.z <= 1.0;\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx = texelSize.x;\\n\\t\\t\\tfloat dy = texelSize.y;\\n\\t\\t\\tvec2 uv = shadowCoord.xy;\\n\\t\\t\\tvec2 f = fract( uv * shadowMapSize + 0.5 );\\n\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t f.y )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn mix( 1.0, shadow, shadowIntensity );\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\t\\n\\t\\tfloat lightToPositionLength = length( lightToPosition );\\n\\t\\tif ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {\\n\\t\\t\\tfloat dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\t\\tdp += shadowBias;\\n\\t\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\t\\tshadow = (\\n\\t\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tshadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn mix( 1.0, shadow, shadowIntensity );\\n\\t}\\n#endif\";\nvar shadowmap_pars_vertex = \"#if NUM_SPOT_LIGHT_COORDS > 0\\n\\tuniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\\n\\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\\n#endif\\n#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowIntensity;\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowIntensity;\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowIntensity;\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\";\nvar shadowmap_vertex = \"#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\\n\\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\tvec4 shadowWorldPosition;\\n#endif\\n#if defined( USE_SHADOWMAP )\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\\n#if NUM_SPOT_LIGHT_COORDS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition;\\n\\t\\t#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\t\\tshadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\\n\\t\\t#endif\\n\\t\\tvSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\";\nvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\";\nvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\nvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\tuniform highp sampler2D boneTexture;\\n\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\tint size = textureSize( boneTexture, 0 ).x;\\n\\t\\tint j = int( i ) * 4;\\n\\t\\tint x = j % size;\\n\\t\\tint y = j / size;\\n\\t\\tvec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );\\n\\t\\tvec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );\\n\\t\\tvec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );\\n\\t\\tvec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );\\n\\t\\treturn mat4( v1, v2, v3, v4 );\\n\\t}\\n#endif\";\nvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\";\nvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\";\nvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\nvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\nvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\";\nvar tonemapping_pars_fragment = \"#ifndef saturate\\n#define saturate( a ) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn saturate( toneMappingExposure * color );\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\nvec3 CineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 RRTAndODTFit( vec3 v ) {\\n\\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\\n\\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\\n\\treturn a / b;\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tconst mat3 ACESInputMat = mat3(\\n\\t\\tvec3( 0.59719, 0.07600, 0.02840 ),\\t\\tvec3( 0.35458, 0.90834, 0.13383 ),\\n\\t\\tvec3( 0.04823, 0.01566, 0.83777 )\\n\\t);\\n\\tconst mat3 ACESOutputMat = mat3(\\n\\t\\tvec3(  1.60475, -0.10208, -0.00327 ),\\t\\tvec3( -0.53108,  1.10813, -0.07276 ),\\n\\t\\tvec3( -0.07367, -0.00605,  1.07602 )\\n\\t);\\n\\tcolor *= toneMappingExposure / 0.6;\\n\\tcolor = ACESInputMat * color;\\n\\tcolor = RRTAndODTFit( color );\\n\\tcolor = ACESOutputMat * color;\\n\\treturn saturate( color );\\n}\\nconst mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(\\n\\tvec3( 1.6605, - 0.1246, - 0.0182 ),\\n\\tvec3( - 0.5876, 1.1329, - 0.1006 ),\\n\\tvec3( - 0.0728, - 0.0083, 1.1187 )\\n);\\nconst mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(\\n\\tvec3( 0.6274, 0.0691, 0.0164 ),\\n\\tvec3( 0.3293, 0.9195, 0.0880 ),\\n\\tvec3( 0.0433, 0.0113, 0.8956 )\\n);\\nvec3 agxDefaultContrastApprox( vec3 x ) {\\n\\tvec3 x2 = x * x;\\n\\tvec3 x4 = x2 * x2;\\n\\treturn + 15.5 * x4 * x2\\n\\t\\t- 40.14 * x4 * x\\n\\t\\t+ 31.96 * x4\\n\\t\\t- 6.868 * x2 * x\\n\\t\\t+ 0.4298 * x2\\n\\t\\t+ 0.1191 * x\\n\\t\\t- 0.00232;\\n}\\nvec3 AgXToneMapping( vec3 color ) {\\n\\tconst mat3 AgXInsetMatrix = mat3(\\n\\t\\tvec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),\\n\\t\\tvec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),\\n\\t\\tvec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )\\n\\t);\\n\\tconst mat3 AgXOutsetMatrix = mat3(\\n\\t\\tvec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),\\n\\t\\tvec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),\\n\\t\\tvec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )\\n\\t);\\n\\tconst float AgxMinEv = - 12.47393;\\tconst float AgxMaxEv = 4.026069;\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = LINEAR_SRGB_TO_LINEAR_REC2020 * color;\\n\\tcolor = AgXInsetMatrix * color;\\n\\tcolor = max( color, 1e-10 );\\tcolor = log2( color );\\n\\tcolor = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );\\n\\tcolor = clamp( color, 0.0, 1.0 );\\n\\tcolor = agxDefaultContrastApprox( color );\\n\\tcolor = AgXOutsetMatrix * color;\\n\\tcolor = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );\\n\\tcolor = LINEAR_REC2020_TO_LINEAR_SRGB * color;\\n\\tcolor = clamp( color, 0.0, 1.0 );\\n\\treturn color;\\n}\\nvec3 NeutralToneMapping( vec3 color ) {\\n\\tconst float StartCompression = 0.8 - 0.04;\\n\\tconst float Desaturation = 0.15;\\n\\tcolor *= toneMappingExposure;\\n\\tfloat x = min( color.r, min( color.g, color.b ) );\\n\\tfloat offset = x < 0.08 ? x - 6.25 * x * x : 0.04;\\n\\tcolor -= offset;\\n\\tfloat peak = max( color.r, max( color.g, color.b ) );\\n\\tif ( peak < StartCompression ) return color;\\n\\tfloat d = 1. - StartCompression;\\n\\tfloat newPeak = 1. - d * d / ( peak + d - StartCompression );\\n\\tcolor *= newPeak / peak;\\n\\tfloat g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );\\n\\treturn mix( color, vec3( newPeak ), g );\\n}\\nvec3 CustomToneMapping( vec3 color ) { return color; }\";\nvar transmission_fragment = \"#ifdef USE_TRANSMISSION\\n\\tmaterial.transmission = transmission;\\n\\tmaterial.transmissionAlpha = 1.0;\\n\\tmaterial.thickness = thickness;\\n\\tmaterial.attenuationDistance = attenuationDistance;\\n\\tmaterial.attenuationColor = attenuationColor;\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\tmaterial.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSMAP\\n\\t\\tmaterial.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\\n\\t#endif\\n\\tvec3 pos = vWorldPosition;\\n\\tvec3 v = normalize( cameraPosition - pos );\\n\\tvec3 n = inverseTransformDirection( normal, viewMatrix );\\n\\tvec4 transmitted = getIBLVolumeRefraction(\\n\\t\\tn, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\\n\\t\\tpos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,\\n\\t\\tmaterial.attenuationColor, material.attenuationDistance );\\n\\tmaterial.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\\n\\ttotalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\\n#endif\";\nvar transmission_pars_fragment = \"#ifdef USE_TRANSMISSION\\n\\tuniform float transmission;\\n\\tuniform float thickness;\\n\\tuniform float attenuationDistance;\\n\\tuniform vec3 attenuationColor;\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\tuniform sampler2D transmissionMap;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSMAP\\n\\t\\tuniform sampler2D thicknessMap;\\n\\t#endif\\n\\tuniform vec2 transmissionSamplerSize;\\n\\tuniform sampler2D transmissionSamplerMap;\\n\\tuniform mat4 modelMatrix;\\n\\tuniform mat4 projectionMatrix;\\n\\tvarying vec3 vWorldPosition;\\n\\tfloat w0( float a ) {\\n\\t\\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\\n\\t}\\n\\tfloat w1( float a ) {\\n\\t\\treturn ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\\n\\t}\\n\\tfloat w2( float a ){\\n\\t\\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\\n\\t}\\n\\tfloat w3( float a ) {\\n\\t\\treturn ( 1.0 / 6.0 ) * ( a * a * a );\\n\\t}\\n\\tfloat g0( float a ) {\\n\\t\\treturn w0( a ) + w1( a );\\n\\t}\\n\\tfloat g1( float a ) {\\n\\t\\treturn w2( a ) + w3( a );\\n\\t}\\n\\tfloat h0( float a ) {\\n\\t\\treturn - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\\n\\t}\\n\\tfloat h1( float a ) {\\n\\t\\treturn 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\\n\\t}\\n\\tvec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\\n\\t\\tuv = uv * texelSize.zw + 0.5;\\n\\t\\tvec2 iuv = floor( uv );\\n\\t\\tvec2 fuv = fract( uv );\\n\\t\\tfloat g0x = g0( fuv.x );\\n\\t\\tfloat g1x = g1( fuv.x );\\n\\t\\tfloat h0x = h0( fuv.x );\\n\\t\\tfloat h1x = h1( fuv.x );\\n\\t\\tfloat h0y = h0( fuv.y );\\n\\t\\tfloat h1y = h1( fuv.y );\\n\\t\\tvec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\\n\\t\\tvec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\\n\\t\\tvec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\\n\\t\\tvec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\\n\\t\\treturn g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\\n\\t\\t\\tg1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\\n\\t}\\n\\tvec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\\n\\t\\tvec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\\n\\t\\tvec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\\n\\t\\tvec2 fLodSizeInv = 1.0 / fLodSize;\\n\\t\\tvec2 cLodSizeInv = 1.0 / cLodSize;\\n\\t\\tvec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\\n\\t\\tvec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\\n\\t\\treturn mix( fSample, cSample, fract( lod ) );\\n\\t}\\n\\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\\n\\t\\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\\n\\t\\tvec3 modelScale;\\n\\t\\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\\n\\t\\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\\n\\t\\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\\n\\t\\treturn normalize( refractionVector ) * thickness * modelScale;\\n\\t}\\n\\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\\n\\t\\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\\n\\t}\\n\\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\\n\\t\\tfloat lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\\n\\t\\treturn textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\\n\\t}\\n\\tvec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\\n\\t\\tif ( isinf( attenuationDistance ) ) {\\n\\t\\t\\treturn vec3( 1.0 );\\n\\t\\t} else {\\n\\t\\t\\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\\n\\t\\t\\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\\t\\t\\treturn transmittance;\\n\\t\\t}\\n\\t}\\n\\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\\n\\t\\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\\n\\t\\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,\\n\\t\\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\\n\\t\\tvec4 transmittedLight;\\n\\t\\tvec3 transmittance;\\n\\t\\t#ifdef USE_DISPERSION\\n\\t\\t\\tfloat halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;\\n\\t\\t\\tvec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );\\n\\t\\t\\tfor ( int i = 0; i < 3; i ++ ) {\\n\\t\\t\\t\\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );\\n\\t\\t\\t\\tvec3 refractedRayExit = position + transmissionRay;\\n\\t\\t\\t\\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\\n\\t\\t\\t\\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\\n\\t\\t\\t\\trefractionCoords += 1.0;\\n\\t\\t\\t\\trefractionCoords /= 2.0;\\n\\t\\t\\t\\tvec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );\\n\\t\\t\\t\\ttransmittedLight[ i ] = transmissionSample[ i ];\\n\\t\\t\\t\\ttransmittedLight.a += transmissionSample.a;\\n\\t\\t\\t\\ttransmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];\\n\\t\\t\\t}\\n\\t\\t\\ttransmittedLight.a /= 3.0;\\n\\t\\t#else\\n\\t\\t\\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\\n\\t\\t\\tvec3 refractedRayExit = position + transmissionRay;\\n\\t\\t\\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\\n\\t\\t\\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\\n\\t\\t\\trefractionCoords += 1.0;\\n\\t\\t\\trefractionCoords /= 2.0;\\n\\t\\t\\ttransmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\\n\\t\\t\\ttransmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\\n\\t\\t#endif\\n\\t\\tvec3 attenuatedColor = transmittance * transmittedLight.rgb;\\n\\t\\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\\n\\t\\tfloat transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\\n\\t\\treturn vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\\n\\t}\\n#endif\";\nvar uv_pars_fragment = \"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\\n\\tvarying vec2 vUv;\\n#endif\\n#ifdef USE_MAP\\n\\tvarying vec2 vMapUv;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tvarying vec2 vAlphaMapUv;\\n#endif\\n#ifdef USE_LIGHTMAP\\n\\tvarying vec2 vLightMapUv;\\n#endif\\n#ifdef USE_AOMAP\\n\\tvarying vec2 vAoMapUv;\\n#endif\\n#ifdef USE_BUMPMAP\\n\\tvarying vec2 vBumpMapUv;\\n#endif\\n#ifdef USE_NORMALMAP\\n\\tvarying vec2 vNormalMapUv;\\n#endif\\n#ifdef USE_EMISSIVEMAP\\n\\tvarying vec2 vEmissiveMapUv;\\n#endif\\n#ifdef USE_METALNESSMAP\\n\\tvarying vec2 vMetalnessMapUv;\\n#endif\\n#ifdef USE_ROUGHNESSMAP\\n\\tvarying vec2 vRoughnessMapUv;\\n#endif\\n#ifdef USE_ANISOTROPYMAP\\n\\tvarying vec2 vAnisotropyMapUv;\\n#endif\\n#ifdef USE_CLEARCOATMAP\\n\\tvarying vec2 vClearcoatMapUv;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvarying vec2 vClearcoatNormalMapUv;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tvarying vec2 vClearcoatRoughnessMapUv;\\n#endif\\n#ifdef USE_IRIDESCENCEMAP\\n\\tvarying vec2 vIridescenceMapUv;\\n#endif\\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\\n\\tvarying vec2 vIridescenceThicknessMapUv;\\n#endif\\n#ifdef USE_SHEEN_COLORMAP\\n\\tvarying vec2 vSheenColorMapUv;\\n#endif\\n#ifdef USE_SHEEN_ROUGHNESSMAP\\n\\tvarying vec2 vSheenRoughnessMapUv;\\n#endif\\n#ifdef USE_SPECULARMAP\\n\\tvarying vec2 vSpecularMapUv;\\n#endif\\n#ifdef USE_SPECULAR_COLORMAP\\n\\tvarying vec2 vSpecularColorMapUv;\\n#endif\\n#ifdef USE_SPECULAR_INTENSITYMAP\\n\\tvarying vec2 vSpecularIntensityMapUv;\\n#endif\\n#ifdef USE_TRANSMISSIONMAP\\n\\tuniform mat3 transmissionMapTransform;\\n\\tvarying vec2 vTransmissionMapUv;\\n#endif\\n#ifdef USE_THICKNESSMAP\\n\\tuniform mat3 thicknessMapTransform;\\n\\tvarying vec2 vThicknessMapUv;\\n#endif\";\nvar uv_pars_vertex = \"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\\n\\tvarying vec2 vUv;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform mat3 mapTransform;\\n\\tvarying vec2 vMapUv;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform mat3 alphaMapTransform;\\n\\tvarying vec2 vAlphaMapUv;\\n#endif\\n#ifdef USE_LIGHTMAP\\n\\tuniform mat3 lightMapTransform;\\n\\tvarying vec2 vLightMapUv;\\n#endif\\n#ifdef USE_AOMAP\\n\\tuniform mat3 aoMapTransform;\\n\\tvarying vec2 vAoMapUv;\\n#endif\\n#ifdef USE_BUMPMAP\\n\\tuniform mat3 bumpMapTransform;\\n\\tvarying vec2 vBumpMapUv;\\n#endif\\n#ifdef USE_NORMALMAP\\n\\tuniform mat3 normalMapTransform;\\n\\tvarying vec2 vNormalMapUv;\\n#endif\\n#ifdef USE_DISPLACEMENTMAP\\n\\tuniform mat3 displacementMapTransform;\\n\\tvarying vec2 vDisplacementMapUv;\\n#endif\\n#ifdef USE_EMISSIVEMAP\\n\\tuniform mat3 emissiveMapTransform;\\n\\tvarying vec2 vEmissiveMapUv;\\n#endif\\n#ifdef USE_METALNESSMAP\\n\\tuniform mat3 metalnessMapTransform;\\n\\tvarying vec2 vMetalnessMapUv;\\n#endif\\n#ifdef USE_ROUGHNESSMAP\\n\\tuniform mat3 roughnessMapTransform;\\n\\tvarying vec2 vRoughnessMapUv;\\n#endif\\n#ifdef USE_ANISOTROPYMAP\\n\\tuniform mat3 anisotropyMapTransform;\\n\\tvarying vec2 vAnisotropyMapUv;\\n#endif\\n#ifdef USE_CLEARCOATMAP\\n\\tuniform mat3 clearcoatMapTransform;\\n\\tvarying vec2 vClearcoatMapUv;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform mat3 clearcoatNormalMapTransform;\\n\\tvarying vec2 vClearcoatNormalMapUv;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tuniform mat3 clearcoatRoughnessMapTransform;\\n\\tvarying vec2 vClearcoatRoughnessMapUv;\\n#endif\\n#ifdef USE_SHEEN_COLORMAP\\n\\tuniform mat3 sheenColorMapTransform;\\n\\tvarying vec2 vSheenColorMapUv;\\n#endif\\n#ifdef USE_SHEEN_ROUGHNESSMAP\\n\\tuniform mat3 sheenRoughnessMapTransform;\\n\\tvarying vec2 vSheenRoughnessMapUv;\\n#endif\\n#ifdef USE_IRIDESCENCEMAP\\n\\tuniform mat3 iridescenceMapTransform;\\n\\tvarying vec2 vIridescenceMapUv;\\n#endif\\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\\n\\tuniform mat3 iridescenceThicknessMapTransform;\\n\\tvarying vec2 vIridescenceThicknessMapUv;\\n#endif\\n#ifdef USE_SPECULARMAP\\n\\tuniform mat3 specularMapTransform;\\n\\tvarying vec2 vSpecularMapUv;\\n#endif\\n#ifdef USE_SPECULAR_COLORMAP\\n\\tuniform mat3 specularColorMapTransform;\\n\\tvarying vec2 vSpecularColorMapUv;\\n#endif\\n#ifdef USE_SPECULAR_INTENSITYMAP\\n\\tuniform mat3 specularIntensityMapTransform;\\n\\tvarying vec2 vSpecularIntensityMapUv;\\n#endif\\n#ifdef USE_TRANSMISSIONMAP\\n\\tuniform mat3 transmissionMapTransform;\\n\\tvarying vec2 vTransmissionMapUv;\\n#endif\\n#ifdef USE_THICKNESSMAP\\n\\tuniform mat3 thicknessMapTransform;\\n\\tvarying vec2 vThicknessMapUv;\\n#endif\";\nvar uv_vertex = \"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\\n\\tvUv = vec3( uv, 1 ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tvMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tvAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_LIGHTMAP\\n\\tvLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_AOMAP\\n\\tvAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_BUMPMAP\\n\\tvBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_NORMALMAP\\n\\tvNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_DISPLACEMENTMAP\\n\\tvDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_EMISSIVEMAP\\n\\tvEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_METALNESSMAP\\n\\tvMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_ROUGHNESSMAP\\n\\tvRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_ANISOTROPYMAP\\n\\tvAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_CLEARCOATMAP\\n\\tvClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tvClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_IRIDESCENCEMAP\\n\\tvIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\\n\\tvIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_SHEEN_COLORMAP\\n\\tvSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_SHEEN_ROUGHNESSMAP\\n\\tvSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_SPECULARMAP\\n\\tvSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_SPECULAR_COLORMAP\\n\\tvSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_SPECULAR_INTENSITYMAP\\n\\tvSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_TRANSMISSIONMAP\\n\\tvTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_THICKNESSMAP\\n\\tvThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\\n#endif\";\nvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_BATCHING\\n\\t\\tworldPosition = batchingMatrix * worldPosition;\\n\\t#endif\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\";\nconst vertex$h = \"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\";\nconst fragment$h = \"uniform sampler2D t2D;\\nuniform float backgroundIntensity;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\t#ifdef DECODE_VIDEO_TEXTURE\\n\\t\\ttexColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\\n\\t#endif\\n\\ttexColor.rgb *= backgroundIntensity;\\n\\tgl_FragColor = texColor;\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n}\";\nconst vertex$g = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\nconst fragment$g = \"#ifdef ENVMAP_TYPE_CUBE\\n\\tuniform samplerCube envMap;\\n#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\tuniform sampler2D envMap;\\n#endif\\nuniform float flipEnvMap;\\nuniform float backgroundBlurriness;\\nuniform float backgroundIntensity;\\nuniform mat3 backgroundRotation;\\nvarying vec3 vWorldDirection;\\n#include <cube_uv_reflection_fragment>\\nvoid main() {\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tvec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );\\n\\t#else\\n\\t\\tvec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\t#endif\\n\\ttexColor.rgb *= backgroundIntensity;\\n\\tgl_FragColor = texColor;\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n}\";\nconst vertex$f = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\nconst fragment$f = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\nvoid main() {\\n\\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\\n\\tgl_FragColor = texColor;\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n}\";\nconst vertex$e = \"#include <common>\\n#include <batching_pars_vertex>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <batching_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <morphinstance_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvHighPrecisionZW = gl_Position.zw;\\n}\";\nconst fragment$e = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <alphahash_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <clipping_planes_fragment>\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <alphahash_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( fragCoordZ );\\n\\t#elif DEPTH_PACKING == 3202\\n\\t\\tgl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );\\n\\t#elif DEPTH_PACKING == 3203\\n\\t\\tgl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );\\n\\t#endif\\n}\";\nconst vertex$d = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <batching_pars_vertex>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <batching_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <morphinstance_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\";\nconst fragment$d = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <alphahash_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <clipping_planes_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <alphahash_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\";\nconst vertex$c = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\";\nconst fragment$c = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV = equirectUv( direction );\\n\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n}\";\nconst vertex$b = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvLineDistance = scale * lineDistance;\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphinstance_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\nconst fragment$b = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <opaque_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\nconst vertex$a = \"#include <common>\\n#include <batching_pars_vertex>\\n#include <uv_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphinstance_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <batching_vertex>\\n\\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinbase_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\nconst fragment$a = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <alphahash_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <alphahash_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\\n\\t\\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\t#include <opaque_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\nconst vertex$9 = \"#define LAMBERT\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <batching_pars_vertex>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphinstance_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <batching_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\nconst fragment$9 = \"#define LAMBERT\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <alphahash_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_lambert_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <clipping_planes_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <alphahash_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_lambert_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\t#include <opaque_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\nconst vertex$8 = \"#define MATCAP\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <batching_pars_vertex>\\n#include <uv_pars_vertex>\\n#include <color_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphinstance_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <batching_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\";\nconst fragment$8 = \"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <alphahash_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <normal_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <alphahash_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\t#include <opaque_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\nconst vertex$7 = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#include <common>\\n#include <batching_pars_vertex>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <batching_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphinstance_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\";\nconst fragment$7 = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <normal_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\tvec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );\\n\\t#ifdef OPAQUE\\n\\t\\tgl_FragColor.a = 1.0;\\n\\t#endif\\n}\";\nconst vertex$6 = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <batching_pars_vertex>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <batching_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphinstance_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\nconst fragment$6 = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <alphahash_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <clipping_planes_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <alphahash_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\t#include <opaque_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\nconst vertex$5 = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifdef USE_TRANSMISSION\\n\\tvarying vec3 vWorldPosition;\\n#endif\\n#include <common>\\n#include <batching_pars_vertex>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphinstance_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <batching_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n#ifdef USE_TRANSMISSION\\n\\tvWorldPosition = worldPosition.xyz;\\n#endif\\n}\";\nconst fragment$5 = \"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define IOR\\n\\t#define USE_SPECULAR\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef IOR\\n\\tuniform float ior;\\n#endif\\n#ifdef USE_SPECULAR\\n\\tuniform float specularIntensity;\\n\\tuniform vec3 specularColor;\\n\\t#ifdef USE_SPECULAR_COLORMAP\\n\\t\\tuniform sampler2D specularColorMap;\\n\\t#endif\\n\\t#ifdef USE_SPECULAR_INTENSITYMAP\\n\\t\\tuniform sampler2D specularIntensityMap;\\n\\t#endif\\n#endif\\n#ifdef USE_CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_DISPERSION\\n\\tuniform float dispersion;\\n#endif\\n#ifdef USE_IRIDESCENCE\\n\\tuniform float iridescence;\\n\\tuniform float iridescenceIOR;\\n\\tuniform float iridescenceThicknessMinimum;\\n\\tuniform float iridescenceThicknessMaximum;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheenColor;\\n\\tuniform float sheenRoughness;\\n\\t#ifdef USE_SHEEN_COLORMAP\\n\\t\\tuniform sampler2D sheenColorMap;\\n\\t#endif\\n\\t#ifdef USE_SHEEN_ROUGHNESSMAP\\n\\t\\tuniform sampler2D sheenRoughnessMap;\\n\\t#endif\\n#endif\\n#ifdef USE_ANISOTROPY\\n\\tuniform vec2 anisotropyVector;\\n\\t#ifdef USE_ANISOTROPYMAP\\n\\t\\tuniform sampler2D anisotropyMap;\\n\\t#endif\\n#endif\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <alphahash_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <iridescence_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_physical_pars_fragment>\\n#include <transmission_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_pars_fragment>\\n#include <iridescence_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <clipping_planes_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <alphahash_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\\n\\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\\n\\t#include <transmission_fragment>\\n\\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\\n\\t#ifdef USE_SHEEN\\n\\t\\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\\n\\t\\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );\\n\\t\\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\\n\\t\\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;\\n\\t#endif\\n\\t#include <opaque_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\nconst vertex$4 = \"#define TOON\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <batching_pars_vertex>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphinstance_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <batching_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\nconst fragment$4 = \"#define TOON\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <alphahash_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_toon_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <clipping_planes_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <alphahash_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_toon_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <opaque_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\nconst vertex$3 = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\n#ifdef USE_POINTS_UV\\n\\tvarying vec2 vUv;\\n\\tuniform mat3 uvTransform;\\n#endif\\nvoid main() {\\n\\t#ifdef USE_POINTS_UV\\n\\t\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\t#endif\\n\\t#include <color_vertex>\\n\\t#include <morphinstance_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\";\nconst fragment$3 = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <alphahash_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <alphahash_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <opaque_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\nconst vertex$2 = \"#include <common>\\n#include <batching_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <batching_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphinstance_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\nconst fragment$2 = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <logdepthbuf_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\t#include <logdepthbuf_fragment>\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n\\t#include <fog_fragment>\\n}\";\nconst vertex$1 = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix[ 3 ];\\n\\tvec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\nconst fragment$1 = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <alphahash_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <alphahash_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <opaque_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n\\t#include <fog_fragment>\\n}\";\nconst ShaderChunk = {\n  alphahash_fragment: alphahash_fragment,\n  alphahash_pars_fragment: alphahash_pars_fragment,\n  alphamap_fragment: alphamap_fragment,\n  alphamap_pars_fragment: alphamap_pars_fragment,\n  alphatest_fragment: alphatest_fragment,\n  alphatest_pars_fragment: alphatest_pars_fragment,\n  aomap_fragment: aomap_fragment,\n  aomap_pars_fragment: aomap_pars_fragment,\n  batching_pars_vertex: batching_pars_vertex,\n  batching_vertex: batching_vertex,\n  begin_vertex: begin_vertex,\n  beginnormal_vertex: beginnormal_vertex,\n  bsdfs: bsdfs,\n  iridescence_fragment: iridescence_fragment,\n  bumpmap_pars_fragment: bumpmap_pars_fragment,\n  clipping_planes_fragment: clipping_planes_fragment,\n  clipping_planes_pars_fragment: clipping_planes_pars_fragment,\n  clipping_planes_pars_vertex: clipping_planes_pars_vertex,\n  clipping_planes_vertex: clipping_planes_vertex,\n  color_fragment: color_fragment,\n  color_pars_fragment: color_pars_fragment,\n  color_pars_vertex: color_pars_vertex,\n  color_vertex: color_vertex,\n  common: common,\n  cube_uv_reflection_fragment: cube_uv_reflection_fragment,\n  defaultnormal_vertex: defaultnormal_vertex,\n  displacementmap_pars_vertex: displacementmap_pars_vertex,\n  displacementmap_vertex: displacementmap_vertex,\n  emissivemap_fragment: emissivemap_fragment,\n  emissivemap_pars_fragment: emissivemap_pars_fragment,\n  colorspace_fragment: colorspace_fragment,\n  colorspace_pars_fragment: colorspace_pars_fragment,\n  envmap_fragment: envmap_fragment,\n  envmap_common_pars_fragment: envmap_common_pars_fragment,\n  envmap_pars_fragment: envmap_pars_fragment,\n  envmap_pars_vertex: envmap_pars_vertex,\n  envmap_physical_pars_fragment: envmap_physical_pars_fragment,\n  envmap_vertex: envmap_vertex,\n  fog_vertex: fog_vertex,\n  fog_pars_vertex: fog_pars_vertex,\n  fog_fragment: fog_fragment,\n  fog_pars_fragment: fog_pars_fragment,\n  gradientmap_pars_fragment: gradientmap_pars_fragment,\n  lightmap_pars_fragment: lightmap_pars_fragment,\n  lights_lambert_fragment: lights_lambert_fragment,\n  lights_lambert_pars_fragment: lights_lambert_pars_fragment,\n  lights_pars_begin: lights_pars_begin,\n  lights_toon_fragment: lights_toon_fragment,\n  lights_toon_pars_fragment: lights_toon_pars_fragment,\n  lights_phong_fragment: lights_phong_fragment,\n  lights_phong_pars_fragment: lights_phong_pars_fragment,\n  lights_physical_fragment: lights_physical_fragment,\n  lights_physical_pars_fragment: lights_physical_pars_fragment,\n  lights_fragment_begin: lights_fragment_begin,\n  lights_fragment_maps: lights_fragment_maps,\n  lights_fragment_end: lights_fragment_end,\n  logdepthbuf_fragment: logdepthbuf_fragment,\n  logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n  logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n  logdepthbuf_vertex: logdepthbuf_vertex,\n  map_fragment: map_fragment,\n  map_pars_fragment: map_pars_fragment,\n  map_particle_fragment: map_particle_fragment,\n  map_particle_pars_fragment: map_particle_pars_fragment,\n  metalnessmap_fragment: metalnessmap_fragment,\n  metalnessmap_pars_fragment: metalnessmap_pars_fragment,\n  morphinstance_vertex: morphinstance_vertex,\n  morphcolor_vertex: morphcolor_vertex,\n  morphnormal_vertex: morphnormal_vertex,\n  morphtarget_pars_vertex: morphtarget_pars_vertex,\n  morphtarget_vertex: morphtarget_vertex,\n  normal_fragment_begin: normal_fragment_begin,\n  normal_fragment_maps: normal_fragment_maps,\n  normal_pars_fragment: normal_pars_fragment,\n  normal_pars_vertex: normal_pars_vertex,\n  normal_vertex: normal_vertex,\n  normalmap_pars_fragment: normalmap_pars_fragment,\n  clearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\n  clearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\n  clearcoat_pars_fragment: clearcoat_pars_fragment,\n  iridescence_pars_fragment: iridescence_pars_fragment,\n  opaque_fragment: opaque_fragment,\n  packing: packing,\n  premultiplied_alpha_fragment: premultiplied_alpha_fragment,\n  project_vertex: project_vertex,\n  dithering_fragment: dithering_fragment,\n  dithering_pars_fragment: dithering_pars_fragment,\n  roughnessmap_fragment: roughnessmap_fragment,\n  roughnessmap_pars_fragment: roughnessmap_pars_fragment,\n  shadowmap_pars_fragment: shadowmap_pars_fragment,\n  shadowmap_pars_vertex: shadowmap_pars_vertex,\n  shadowmap_vertex: shadowmap_vertex,\n  shadowmask_pars_fragment: shadowmask_pars_fragment,\n  skinbase_vertex: skinbase_vertex,\n  skinning_pars_vertex: skinning_pars_vertex,\n  skinning_vertex: skinning_vertex,\n  skinnormal_vertex: skinnormal_vertex,\n  specularmap_fragment: specularmap_fragment,\n  specularmap_pars_fragment: specularmap_pars_fragment,\n  tonemapping_fragment: tonemapping_fragment,\n  tonemapping_pars_fragment: tonemapping_pars_fragment,\n  transmission_fragment: transmission_fragment,\n  transmission_pars_fragment: transmission_pars_fragment,\n  uv_pars_fragment: uv_pars_fragment,\n  uv_pars_vertex: uv_pars_vertex,\n  uv_vertex: uv_vertex,\n  worldpos_vertex: worldpos_vertex,\n  background_vert: vertex$h,\n  background_frag: fragment$h,\n  backgroundCube_vert: vertex$g,\n  backgroundCube_frag: fragment$g,\n  cube_vert: vertex$f,\n  cube_frag: fragment$f,\n  depth_vert: vertex$e,\n  depth_frag: fragment$e,\n  distanceRGBA_vert: vertex$d,\n  distanceRGBA_frag: fragment$d,\n  equirect_vert: vertex$c,\n  equirect_frag: fragment$c,\n  linedashed_vert: vertex$b,\n  linedashed_frag: fragment$b,\n  meshbasic_vert: vertex$a,\n  meshbasic_frag: fragment$a,\n  meshlambert_vert: vertex$9,\n  meshlambert_frag: fragment$9,\n  meshmatcap_vert: vertex$8,\n  meshmatcap_frag: fragment$8,\n  meshnormal_vert: vertex$7,\n  meshnormal_frag: fragment$7,\n  meshphong_vert: vertex$6,\n  meshphong_frag: fragment$6,\n  meshphysical_vert: vertex$5,\n  meshphysical_frag: fragment$5,\n  meshtoon_vert: vertex$4,\n  meshtoon_frag: fragment$4,\n  points_vert: vertex$3,\n  points_frag: fragment$3,\n  shadow_vert: vertex$2,\n  shadow_frag: fragment$2,\n  sprite_vert: vertex$1,\n  sprite_frag: fragment$1\n};\n\n// Uniforms library for shared webgl shaders\nconst UniformsLib = {\n  common: {\n    diffuse: {\n      value: /*@__PURE__*/new Color(0xffffff)\n    },\n    opacity: {\n      value: 1.0\n    },\n    map: {\n      value: null\n    },\n    mapTransform: {\n      value: /*@__PURE__*/new Matrix3()\n    },\n    alphaMap: {\n      value: null\n    },\n    alphaMapTransform: {\n      value: /*@__PURE__*/new Matrix3()\n    },\n    alphaTest: {\n      value: 0\n    }\n  },\n  specularmap: {\n    specularMap: {\n      value: null\n    },\n    specularMapTransform: {\n      value: /*@__PURE__*/new Matrix3()\n    }\n  },\n  envmap: {\n    envMap: {\n      value: null\n    },\n    envMapRotation: {\n      value: /*@__PURE__*/new Matrix3()\n    },\n    flipEnvMap: {\n      value: -1\n    },\n    reflectivity: {\n      value: 1.0\n    },\n    // basic, lambert, phong\n    ior: {\n      value: 1.5\n    },\n    // physical\n    refractionRatio: {\n      value: 0.98\n    } // basic, lambert, phong\n  },\n  aomap: {\n    aoMap: {\n      value: null\n    },\n    aoMapIntensity: {\n      value: 1\n    },\n    aoMapTransform: {\n      value: /*@__PURE__*/new Matrix3()\n    }\n  },\n  lightmap: {\n    lightMap: {\n      value: null\n    },\n    lightMapIntensity: {\n      value: 1\n    },\n    lightMapTransform: {\n      value: /*@__PURE__*/new Matrix3()\n    }\n  },\n  bumpmap: {\n    bumpMap: {\n      value: null\n    },\n    bumpMapTransform: {\n      value: /*@__PURE__*/new Matrix3()\n    },\n    bumpScale: {\n      value: 1\n    }\n  },\n  normalmap: {\n    normalMap: {\n      value: null\n    },\n    normalMapTransform: {\n      value: /*@__PURE__*/new Matrix3()\n    },\n    normalScale: {\n      value: /*@__PURE__*/new Vector2(1, 1)\n    }\n  },\n  displacementmap: {\n    displacementMap: {\n      value: null\n    },\n    displacementMapTransform: {\n      value: /*@__PURE__*/new Matrix3()\n    },\n    displacementScale: {\n      value: 1\n    },\n    displacementBias: {\n      value: 0\n    }\n  },\n  emissivemap: {\n    emissiveMap: {\n      value: null\n    },\n    emissiveMapTransform: {\n      value: /*@__PURE__*/new Matrix3()\n    }\n  },\n  metalnessmap: {\n    metalnessMap: {\n      value: null\n    },\n    metalnessMapTransform: {\n      value: /*@__PURE__*/new Matrix3()\n    }\n  },\n  roughnessmap: {\n    roughnessMap: {\n      value: null\n    },\n    roughnessMapTransform: {\n      value: /*@__PURE__*/new Matrix3()\n    }\n  },\n  gradientmap: {\n    gradientMap: {\n      value: null\n    }\n  },\n  fog: {\n    fogDensity: {\n      value: 0.00025\n    },\n    fogNear: {\n      value: 1\n    },\n    fogFar: {\n      value: 2000\n    },\n    fogColor: {\n      value: /*@__PURE__*/new Color(0xffffff)\n    }\n  },\n  lights: {\n    ambientLightColor: {\n      value: []\n    },\n    lightProbe: {\n      value: []\n    },\n    directionalLights: {\n      value: [],\n      properties: {\n        direction: {},\n        color: {}\n      }\n    },\n    directionalLightShadows: {\n      value: [],\n      properties: {\n        shadowIntensity: 1,\n        shadowBias: {},\n        shadowNormalBias: {},\n        shadowRadius: {},\n        shadowMapSize: {}\n      }\n    },\n    directionalShadowMap: {\n      value: []\n    },\n    directionalShadowMatrix: {\n      value: []\n    },\n    spotLights: {\n      value: [],\n      properties: {\n        color: {},\n        position: {},\n        direction: {},\n        distance: {},\n        coneCos: {},\n        penumbraCos: {},\n        decay: {}\n      }\n    },\n    spotLightShadows: {\n      value: [],\n      properties: {\n        shadowIntensity: 1,\n        shadowBias: {},\n        shadowNormalBias: {},\n        shadowRadius: {},\n        shadowMapSize: {}\n      }\n    },\n    spotLightMap: {\n      value: []\n    },\n    spotShadowMap: {\n      value: []\n    },\n    spotLightMatrix: {\n      value: []\n    },\n    pointLights: {\n      value: [],\n      properties: {\n        color: {},\n        position: {},\n        decay: {},\n        distance: {}\n      }\n    },\n    pointLightShadows: {\n      value: [],\n      properties: {\n        shadowIntensity: 1,\n        shadowBias: {},\n        shadowNormalBias: {},\n        shadowRadius: {},\n        shadowMapSize: {},\n        shadowCameraNear: {},\n        shadowCameraFar: {}\n      }\n    },\n    pointShadowMap: {\n      value: []\n    },\n    pointShadowMatrix: {\n      value: []\n    },\n    hemisphereLights: {\n      value: [],\n      properties: {\n        direction: {},\n        skyColor: {},\n        groundColor: {}\n      }\n    },\n    // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n    rectAreaLights: {\n      value: [],\n      properties: {\n        color: {},\n        position: {},\n        width: {},\n        height: {}\n      }\n    },\n    ltc_1: {\n      value: null\n    },\n    ltc_2: {\n      value: null\n    }\n  },\n  points: {\n    diffuse: {\n      value: /*@__PURE__*/new Color(0xffffff)\n    },\n    opacity: {\n      value: 1.0\n    },\n    size: {\n      value: 1.0\n    },\n    scale: {\n      value: 1.0\n    },\n    map: {\n      value: null\n    },\n    alphaMap: {\n      value: null\n    },\n    alphaMapTransform: {\n      value: /*@__PURE__*/new Matrix3()\n    },\n    alphaTest: {\n      value: 0\n    },\n    uvTransform: {\n      value: /*@__PURE__*/new Matrix3()\n    }\n  },\n  sprite: {\n    diffuse: {\n      value: /*@__PURE__*/new Color(0xffffff)\n    },\n    opacity: {\n      value: 1.0\n    },\n    center: {\n      value: /*@__PURE__*/new Vector2(0.5, 0.5)\n    },\n    rotation: {\n      value: 0.0\n    },\n    map: {\n      value: null\n    },\n    mapTransform: {\n      value: /*@__PURE__*/new Matrix3()\n    },\n    alphaMap: {\n      value: null\n    },\n    alphaMapTransform: {\n      value: /*@__PURE__*/new Matrix3()\n    },\n    alphaTest: {\n      value: 0\n    }\n  }\n};\nconst ShaderLib = {\n  basic: {\n    uniforms: /*@__PURE__*/mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.fog]),\n    vertexShader: ShaderChunk.meshbasic_vert,\n    fragmentShader: ShaderChunk.meshbasic_frag\n  },\n  lambert: {\n    uniforms: /*@__PURE__*/mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.fog, UniformsLib.lights, {\n      emissive: {\n        value: /*@__PURE__*/new Color(0x000000)\n      }\n    }]),\n    vertexShader: ShaderChunk.meshlambert_vert,\n    fragmentShader: ShaderChunk.meshlambert_frag\n  },\n  phong: {\n    uniforms: /*@__PURE__*/mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.fog, UniformsLib.lights, {\n      emissive: {\n        value: /*@__PURE__*/new Color(0x000000)\n      },\n      specular: {\n        value: /*@__PURE__*/new Color(0x111111)\n      },\n      shininess: {\n        value: 30\n      }\n    }]),\n    vertexShader: ShaderChunk.meshphong_vert,\n    fragmentShader: ShaderChunk.meshphong_frag\n  },\n  standard: {\n    uniforms: /*@__PURE__*/mergeUniforms([UniformsLib.common, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.roughnessmap, UniformsLib.metalnessmap, UniformsLib.fog, UniformsLib.lights, {\n      emissive: {\n        value: /*@__PURE__*/new Color(0x000000)\n      },\n      roughness: {\n        value: 1.0\n      },\n      metalness: {\n        value: 0.0\n      },\n      envMapIntensity: {\n        value: 1\n      }\n    }]),\n    vertexShader: ShaderChunk.meshphysical_vert,\n    fragmentShader: ShaderChunk.meshphysical_frag\n  },\n  toon: {\n    uniforms: /*@__PURE__*/mergeUniforms([UniformsLib.common, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.gradientmap, UniformsLib.fog, UniformsLib.lights, {\n      emissive: {\n        value: /*@__PURE__*/new Color(0x000000)\n      }\n    }]),\n    vertexShader: ShaderChunk.meshtoon_vert,\n    fragmentShader: ShaderChunk.meshtoon_frag\n  },\n  matcap: {\n    uniforms: /*@__PURE__*/mergeUniforms([UniformsLib.common, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.fog, {\n      matcap: {\n        value: null\n      }\n    }]),\n    vertexShader: ShaderChunk.meshmatcap_vert,\n    fragmentShader: ShaderChunk.meshmatcap_frag\n  },\n  points: {\n    uniforms: /*@__PURE__*/mergeUniforms([UniformsLib.points, UniformsLib.fog]),\n    vertexShader: ShaderChunk.points_vert,\n    fragmentShader: ShaderChunk.points_frag\n  },\n  dashed: {\n    uniforms: /*@__PURE__*/mergeUniforms([UniformsLib.common, UniformsLib.fog, {\n      scale: {\n        value: 1\n      },\n      dashSize: {\n        value: 1\n      },\n      totalSize: {\n        value: 2\n      }\n    }]),\n    vertexShader: ShaderChunk.linedashed_vert,\n    fragmentShader: ShaderChunk.linedashed_frag\n  },\n  depth: {\n    uniforms: /*@__PURE__*/mergeUniforms([UniformsLib.common, UniformsLib.displacementmap]),\n    vertexShader: ShaderChunk.depth_vert,\n    fragmentShader: ShaderChunk.depth_frag\n  },\n  normal: {\n    uniforms: /*@__PURE__*/mergeUniforms([UniformsLib.common, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, {\n      opacity: {\n        value: 1.0\n      }\n    }]),\n    vertexShader: ShaderChunk.meshnormal_vert,\n    fragmentShader: ShaderChunk.meshnormal_frag\n  },\n  sprite: {\n    uniforms: /*@__PURE__*/mergeUniforms([UniformsLib.sprite, UniformsLib.fog]),\n    vertexShader: ShaderChunk.sprite_vert,\n    fragmentShader: ShaderChunk.sprite_frag\n  },\n  background: {\n    uniforms: {\n      uvTransform: {\n        value: /*@__PURE__*/new Matrix3()\n      },\n      t2D: {\n        value: null\n      },\n      backgroundIntensity: {\n        value: 1\n      }\n    },\n    vertexShader: ShaderChunk.background_vert,\n    fragmentShader: ShaderChunk.background_frag\n  },\n  backgroundCube: {\n    uniforms: {\n      envMap: {\n        value: null\n      },\n      flipEnvMap: {\n        value: -1\n      },\n      backgroundBlurriness: {\n        value: 0\n      },\n      backgroundIntensity: {\n        value: 1\n      },\n      backgroundRotation: {\n        value: /*@__PURE__*/new Matrix3()\n      }\n    },\n    vertexShader: ShaderChunk.backgroundCube_vert,\n    fragmentShader: ShaderChunk.backgroundCube_frag\n  },\n  cube: {\n    uniforms: {\n      tCube: {\n        value: null\n      },\n      tFlip: {\n        value: -1\n      },\n      opacity: {\n        value: 1.0\n      }\n    },\n    vertexShader: ShaderChunk.cube_vert,\n    fragmentShader: ShaderChunk.cube_frag\n  },\n  equirect: {\n    uniforms: {\n      tEquirect: {\n        value: null\n      }\n    },\n    vertexShader: ShaderChunk.equirect_vert,\n    fragmentShader: ShaderChunk.equirect_frag\n  },\n  distanceRGBA: {\n    uniforms: /*@__PURE__*/mergeUniforms([UniformsLib.common, UniformsLib.displacementmap, {\n      referencePosition: {\n        value: /*@__PURE__*/new Vector3()\n      },\n      nearDistance: {\n        value: 1\n      },\n      farDistance: {\n        value: 1000\n      }\n    }]),\n    vertexShader: ShaderChunk.distanceRGBA_vert,\n    fragmentShader: ShaderChunk.distanceRGBA_frag\n  },\n  shadow: {\n    uniforms: /*@__PURE__*/mergeUniforms([UniformsLib.lights, UniformsLib.fog, {\n      color: {\n        value: /*@__PURE__*/new Color(0x00000)\n      },\n      opacity: {\n        value: 1.0\n      }\n    }]),\n    vertexShader: ShaderChunk.shadow_vert,\n    fragmentShader: ShaderChunk.shadow_frag\n  }\n};\nShaderLib.physical = {\n  uniforms: /*@__PURE__*/mergeUniforms([ShaderLib.standard.uniforms, {\n    clearcoat: {\n      value: 0\n    },\n    clearcoatMap: {\n      value: null\n    },\n    clearcoatMapTransform: {\n      value: /*@__PURE__*/new Matrix3()\n    },\n    clearcoatNormalMap: {\n      value: null\n    },\n    clearcoatNormalMapTransform: {\n      value: /*@__PURE__*/new Matrix3()\n    },\n    clearcoatNormalScale: {\n      value: /*@__PURE__*/new Vector2(1, 1)\n    },\n    clearcoatRoughness: {\n      value: 0\n    },\n    clearcoatRoughnessMap: {\n      value: null\n    },\n    clearcoatRoughnessMapTransform: {\n      value: /*@__PURE__*/new Matrix3()\n    },\n    dispersion: {\n      value: 0\n    },\n    iridescence: {\n      value: 0\n    },\n    iridescenceMap: {\n      value: null\n    },\n    iridescenceMapTransform: {\n      value: /*@__PURE__*/new Matrix3()\n    },\n    iridescenceIOR: {\n      value: 1.3\n    },\n    iridescenceThicknessMinimum: {\n      value: 100\n    },\n    iridescenceThicknessMaximum: {\n      value: 400\n    },\n    iridescenceThicknessMap: {\n      value: null\n    },\n    iridescenceThicknessMapTransform: {\n      value: /*@__PURE__*/new Matrix3()\n    },\n    sheen: {\n      value: 0\n    },\n    sheenColor: {\n      value: /*@__PURE__*/new Color(0x000000)\n    },\n    sheenColorMap: {\n      value: null\n    },\n    sheenColorMapTransform: {\n      value: /*@__PURE__*/new Matrix3()\n    },\n    sheenRoughness: {\n      value: 1\n    },\n    sheenRoughnessMap: {\n      value: null\n    },\n    sheenRoughnessMapTransform: {\n      value: /*@__PURE__*/new Matrix3()\n    },\n    transmission: {\n      value: 0\n    },\n    transmissionMap: {\n      value: null\n    },\n    transmissionMapTransform: {\n      value: /*@__PURE__*/new Matrix3()\n    },\n    transmissionSamplerSize: {\n      value: /*@__PURE__*/new Vector2()\n    },\n    transmissionSamplerMap: {\n      value: null\n    },\n    thickness: {\n      value: 0\n    },\n    thicknessMap: {\n      value: null\n    },\n    thicknessMapTransform: {\n      value: /*@__PURE__*/new Matrix3()\n    },\n    attenuationDistance: {\n      value: 0\n    },\n    attenuationColor: {\n      value: /*@__PURE__*/new Color(0x000000)\n    },\n    specularColor: {\n      value: /*@__PURE__*/new Color(1, 1, 1)\n    },\n    specularColorMap: {\n      value: null\n    },\n    specularColorMapTransform: {\n      value: /*@__PURE__*/new Matrix3()\n    },\n    specularIntensity: {\n      value: 1\n    },\n    specularIntensityMap: {\n      value: null\n    },\n    specularIntensityMapTransform: {\n      value: /*@__PURE__*/new Matrix3()\n    },\n    anisotropyVector: {\n      value: /*@__PURE__*/new Vector2()\n    },\n    anisotropyMap: {\n      value: null\n    },\n    anisotropyMapTransform: {\n      value: /*@__PURE__*/new Matrix3()\n    }\n  }]),\n  vertexShader: ShaderChunk.meshphysical_vert,\n  fragmentShader: ShaderChunk.meshphysical_frag\n};\nconst _rgb = {\n  r: 0,\n  b: 0,\n  g: 0\n};\nconst _e1$1 = /*@__PURE__*/new Euler();\nconst _m1$1 = /*@__PURE__*/new Matrix4();\nfunction WebGLBackground(renderer, cubemaps, cubeuvmaps, state, objects, alpha, premultipliedAlpha) {\n  const clearColor = new Color(0x000000);\n  let clearAlpha = alpha === true ? 0 : 1;\n  let planeMesh;\n  let boxMesh;\n  let currentBackground = null;\n  let currentBackgroundVersion = 0;\n  let currentTonemapping = null;\n  function getBackground(scene) {\n    let background = scene.isScene === true ? scene.background : null;\n    if (background && background.isTexture) {\n      const usePMREM = scene.backgroundBlurriness > 0; // use PMREM if the user wants to blur the background\n      background = (usePMREM ? cubeuvmaps : cubemaps).get(background);\n    }\n    return background;\n  }\n  function render(scene) {\n    let forceClear = false;\n    const background = getBackground(scene);\n    if (background === null) {\n      setClear(clearColor, clearAlpha);\n    } else if (background && background.isColor) {\n      setClear(background, 1);\n      forceClear = true;\n    }\n    const environmentBlendMode = renderer.xr.getEnvironmentBlendMode();\n    if (environmentBlendMode === 'additive') {\n      state.buffers.color.setClear(0, 0, 0, 1, premultipliedAlpha);\n    } else if (environmentBlendMode === 'alpha-blend') {\n      state.buffers.color.setClear(0, 0, 0, 0, premultipliedAlpha);\n    }\n    if (renderer.autoClear || forceClear) {\n      // buffers might not be writable which is required to ensure a correct clear\n\n      state.buffers.depth.setTest(true);\n      state.buffers.depth.setMask(true);\n      state.buffers.color.setMask(true);\n      renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n    }\n  }\n  function addToRenderList(renderList, scene) {\n    const background = getBackground(scene);\n    if (background && (background.isCubeTexture || background.mapping === CubeUVReflectionMapping)) {\n      if (boxMesh === undefined) {\n        boxMesh = new Mesh(new BoxGeometry(1, 1, 1), new ShaderMaterial({\n          name: 'BackgroundCubeMaterial',\n          uniforms: cloneUniforms(ShaderLib.backgroundCube.uniforms),\n          vertexShader: ShaderLib.backgroundCube.vertexShader,\n          fragmentShader: ShaderLib.backgroundCube.fragmentShader,\n          side: BackSide,\n          depthTest: false,\n          depthWrite: false,\n          fog: false,\n          allowOverride: false\n        }));\n        boxMesh.geometry.deleteAttribute('normal');\n        boxMesh.geometry.deleteAttribute('uv');\n        boxMesh.onBeforeRender = function (renderer, scene, camera) {\n          this.matrixWorld.copyPosition(camera.matrixWorld);\n        };\n\n        // add \"envMap\" material property so the renderer can evaluate it like for built-in materials\n        Object.defineProperty(boxMesh.material, 'envMap', {\n          get: function () {\n            return this.uniforms.envMap.value;\n          }\n        });\n        objects.update(boxMesh);\n      }\n      _e1$1.copy(scene.backgroundRotation);\n\n      // accommodate left-handed frame\n      _e1$1.x *= -1;\n      _e1$1.y *= -1;\n      _e1$1.z *= -1;\n      if (background.isCubeTexture && background.isRenderTargetTexture === false) {\n        // environment maps which are not cube render targets or PMREMs follow a different convention\n        _e1$1.y *= -1;\n        _e1$1.z *= -1;\n      }\n      boxMesh.material.uniforms.envMap.value = background;\n      boxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background.isRenderTargetTexture === false ? -1 : 1;\n      boxMesh.material.uniforms.backgroundBlurriness.value = scene.backgroundBlurriness;\n      boxMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;\n      boxMesh.material.uniforms.backgroundRotation.value.setFromMatrix4(_m1$1.makeRotationFromEuler(_e1$1));\n      boxMesh.material.toneMapped = ColorManagement.getTransfer(background.colorSpace) !== SRGBTransfer;\n      if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {\n        boxMesh.material.needsUpdate = true;\n        currentBackground = background;\n        currentBackgroundVersion = background.version;\n        currentTonemapping = renderer.toneMapping;\n      }\n      boxMesh.layers.enableAll();\n\n      // push to the pre-sorted opaque render list\n      renderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);\n    } else if (background && background.isTexture) {\n      if (planeMesh === undefined) {\n        planeMesh = new Mesh(new PlaneGeometry(2, 2), new ShaderMaterial({\n          name: 'BackgroundMaterial',\n          uniforms: cloneUniforms(ShaderLib.background.uniforms),\n          vertexShader: ShaderLib.background.vertexShader,\n          fragmentShader: ShaderLib.background.fragmentShader,\n          side: FrontSide,\n          depthTest: false,\n          depthWrite: false,\n          fog: false,\n          allowOverride: false\n        }));\n        planeMesh.geometry.deleteAttribute('normal');\n\n        // add \"map\" material property so the renderer can evaluate it like for built-in materials\n        Object.defineProperty(planeMesh.material, 'map', {\n          get: function () {\n            return this.uniforms.t2D.value;\n          }\n        });\n        objects.update(planeMesh);\n      }\n      planeMesh.material.uniforms.t2D.value = background;\n      planeMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;\n      planeMesh.material.toneMapped = ColorManagement.getTransfer(background.colorSpace) !== SRGBTransfer;\n      if (background.matrixAutoUpdate === true) {\n        background.updateMatrix();\n      }\n      planeMesh.material.uniforms.uvTransform.value.copy(background.matrix);\n      if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {\n        planeMesh.material.needsUpdate = true;\n        currentBackground = background;\n        currentBackgroundVersion = background.version;\n        currentTonemapping = renderer.toneMapping;\n      }\n      planeMesh.layers.enableAll();\n\n      // push to the pre-sorted opaque render list\n      renderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);\n    }\n  }\n  function setClear(color, alpha) {\n    color.getRGB(_rgb, getUnlitUniformColorSpace(renderer));\n    state.buffers.color.setClear(_rgb.r, _rgb.g, _rgb.b, alpha, premultipliedAlpha);\n  }\n  function dispose() {\n    if (boxMesh !== undefined) {\n      boxMesh.geometry.dispose();\n      boxMesh.material.dispose();\n      boxMesh = undefined;\n    }\n    if (planeMesh !== undefined) {\n      planeMesh.geometry.dispose();\n      planeMesh.material.dispose();\n      planeMesh = undefined;\n    }\n  }\n  return {\n    getClearColor: function () {\n      return clearColor;\n    },\n    setClearColor: function (color) {\n      let alpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      clearColor.set(color);\n      clearAlpha = alpha;\n      setClear(clearColor, clearAlpha);\n    },\n    getClearAlpha: function () {\n      return clearAlpha;\n    },\n    setClearAlpha: function (alpha) {\n      clearAlpha = alpha;\n      setClear(clearColor, clearAlpha);\n    },\n    render: render,\n    addToRenderList: addToRenderList,\n    dispose: dispose\n  };\n}\nfunction WebGLBindingStates(gl, attributes) {\n  const maxVertexAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n  const bindingStates = {};\n  const defaultState = createBindingState(null);\n  let currentState = defaultState;\n  let forceUpdate = false;\n  function setup(object, material, program, geometry, index) {\n    let updateBuffers = false;\n    const state = getBindingState(geometry, program, material);\n    if (currentState !== state) {\n      currentState = state;\n      bindVertexArrayObject(currentState.object);\n    }\n    updateBuffers = needsUpdate(object, geometry, program, index);\n    if (updateBuffers) saveCache(object, geometry, program, index);\n    if (index !== null) {\n      attributes.update(index, gl.ELEMENT_ARRAY_BUFFER);\n    }\n    if (updateBuffers || forceUpdate) {\n      forceUpdate = false;\n      setupVertexAttributes(object, material, program, geometry);\n      if (index !== null) {\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, attributes.get(index).buffer);\n      }\n    }\n  }\n  function createVertexArrayObject() {\n    return gl.createVertexArray();\n  }\n  function bindVertexArrayObject(vao) {\n    return gl.bindVertexArray(vao);\n  }\n  function deleteVertexArrayObject(vao) {\n    return gl.deleteVertexArray(vao);\n  }\n  function getBindingState(geometry, program, material) {\n    const wireframe = material.wireframe === true;\n    let programMap = bindingStates[geometry.id];\n    if (programMap === undefined) {\n      programMap = {};\n      bindingStates[geometry.id] = programMap;\n    }\n    let stateMap = programMap[program.id];\n    if (stateMap === undefined) {\n      stateMap = {};\n      programMap[program.id] = stateMap;\n    }\n    let state = stateMap[wireframe];\n    if (state === undefined) {\n      state = createBindingState(createVertexArrayObject());\n      stateMap[wireframe] = state;\n    }\n    return state;\n  }\n  function createBindingState(vao) {\n    const newAttributes = [];\n    const enabledAttributes = [];\n    const attributeDivisors = [];\n    for (let i = 0; i < maxVertexAttributes; i++) {\n      newAttributes[i] = 0;\n      enabledAttributes[i] = 0;\n      attributeDivisors[i] = 0;\n    }\n    return {\n      // for backward compatibility on non-VAO support browser\n      geometry: null,\n      program: null,\n      wireframe: false,\n      newAttributes: newAttributes,\n      enabledAttributes: enabledAttributes,\n      attributeDivisors: attributeDivisors,\n      object: vao,\n      attributes: {},\n      index: null\n    };\n  }\n  function needsUpdate(object, geometry, program, index) {\n    const cachedAttributes = currentState.attributes;\n    const geometryAttributes = geometry.attributes;\n    let attributesNum = 0;\n    const programAttributes = program.getAttributes();\n    for (const name in programAttributes) {\n      const programAttribute = programAttributes[name];\n      if (programAttribute.location >= 0) {\n        const cachedAttribute = cachedAttributes[name];\n        let geometryAttribute = geometryAttributes[name];\n        if (geometryAttribute === undefined) {\n          if (name === 'instanceMatrix' && object.instanceMatrix) geometryAttribute = object.instanceMatrix;\n          if (name === 'instanceColor' && object.instanceColor) geometryAttribute = object.instanceColor;\n        }\n        if (cachedAttribute === undefined) return true;\n        if (cachedAttribute.attribute !== geometryAttribute) return true;\n        if (geometryAttribute && cachedAttribute.data !== geometryAttribute.data) return true;\n        attributesNum++;\n      }\n    }\n    if (currentState.attributesNum !== attributesNum) return true;\n    if (currentState.index !== index) return true;\n    return false;\n  }\n  function saveCache(object, geometry, program, index) {\n    const cache = {};\n    const attributes = geometry.attributes;\n    let attributesNum = 0;\n    const programAttributes = program.getAttributes();\n    for (const name in programAttributes) {\n      const programAttribute = programAttributes[name];\n      if (programAttribute.location >= 0) {\n        let attribute = attributes[name];\n        if (attribute === undefined) {\n          if (name === 'instanceMatrix' && object.instanceMatrix) attribute = object.instanceMatrix;\n          if (name === 'instanceColor' && object.instanceColor) attribute = object.instanceColor;\n        }\n        const data = {};\n        data.attribute = attribute;\n        if (attribute && attribute.data) {\n          data.data = attribute.data;\n        }\n        cache[name] = data;\n        attributesNum++;\n      }\n    }\n    currentState.attributes = cache;\n    currentState.attributesNum = attributesNum;\n    currentState.index = index;\n  }\n  function initAttributes() {\n    const newAttributes = currentState.newAttributes;\n    for (let i = 0, il = newAttributes.length; i < il; i++) {\n      newAttributes[i] = 0;\n    }\n  }\n  function enableAttribute(attribute) {\n    enableAttributeAndDivisor(attribute, 0);\n  }\n  function enableAttributeAndDivisor(attribute, meshPerAttribute) {\n    const newAttributes = currentState.newAttributes;\n    const enabledAttributes = currentState.enabledAttributes;\n    const attributeDivisors = currentState.attributeDivisors;\n    newAttributes[attribute] = 1;\n    if (enabledAttributes[attribute] === 0) {\n      gl.enableVertexAttribArray(attribute);\n      enabledAttributes[attribute] = 1;\n    }\n    if (attributeDivisors[attribute] !== meshPerAttribute) {\n      gl.vertexAttribDivisor(attribute, meshPerAttribute);\n      attributeDivisors[attribute] = meshPerAttribute;\n    }\n  }\n  function disableUnusedAttributes() {\n    const newAttributes = currentState.newAttributes;\n    const enabledAttributes = currentState.enabledAttributes;\n    for (let i = 0, il = enabledAttributes.length; i < il; i++) {\n      if (enabledAttributes[i] !== newAttributes[i]) {\n        gl.disableVertexAttribArray(i);\n        enabledAttributes[i] = 0;\n      }\n    }\n  }\n  function vertexAttribPointer(index, size, type, normalized, stride, offset, integer) {\n    if (integer === true) {\n      gl.vertexAttribIPointer(index, size, type, stride, offset);\n    } else {\n      gl.vertexAttribPointer(index, size, type, normalized, stride, offset);\n    }\n  }\n  function setupVertexAttributes(object, material, program, geometry) {\n    initAttributes();\n    const geometryAttributes = geometry.attributes;\n    const programAttributes = program.getAttributes();\n    const materialDefaultAttributeValues = material.defaultAttributeValues;\n    for (const name in programAttributes) {\n      const programAttribute = programAttributes[name];\n      if (programAttribute.location >= 0) {\n        let geometryAttribute = geometryAttributes[name];\n        if (geometryAttribute === undefined) {\n          if (name === 'instanceMatrix' && object.instanceMatrix) geometryAttribute = object.instanceMatrix;\n          if (name === 'instanceColor' && object.instanceColor) geometryAttribute = object.instanceColor;\n        }\n        if (geometryAttribute !== undefined) {\n          const normalized = geometryAttribute.normalized;\n          const size = geometryAttribute.itemSize;\n          const attribute = attributes.get(geometryAttribute);\n\n          // TODO Attribute may not be available on context restore\n\n          if (attribute === undefined) continue;\n          const buffer = attribute.buffer;\n          const type = attribute.type;\n          const bytesPerElement = attribute.bytesPerElement;\n\n          // check for integer attributes\n\n          const integer = type === gl.INT || type === gl.UNSIGNED_INT || geometryAttribute.gpuType === IntType;\n          if (geometryAttribute.isInterleavedBufferAttribute) {\n            const data = geometryAttribute.data;\n            const stride = data.stride;\n            const offset = geometryAttribute.offset;\n            if (data.isInstancedInterleavedBuffer) {\n              for (let i = 0; i < programAttribute.locationSize; i++) {\n                enableAttributeAndDivisor(programAttribute.location + i, data.meshPerAttribute);\n              }\n              if (object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined) {\n                geometry._maxInstanceCount = data.meshPerAttribute * data.count;\n              }\n            } else {\n              for (let i = 0; i < programAttribute.locationSize; i++) {\n                enableAttribute(programAttribute.location + i);\n              }\n            }\n            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n            for (let i = 0; i < programAttribute.locationSize; i++) {\n              vertexAttribPointer(programAttribute.location + i, size / programAttribute.locationSize, type, normalized, stride * bytesPerElement, (offset + size / programAttribute.locationSize * i) * bytesPerElement, integer);\n            }\n          } else {\n            if (geometryAttribute.isInstancedBufferAttribute) {\n              for (let i = 0; i < programAttribute.locationSize; i++) {\n                enableAttributeAndDivisor(programAttribute.location + i, geometryAttribute.meshPerAttribute);\n              }\n              if (object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined) {\n                geometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n              }\n            } else {\n              for (let i = 0; i < programAttribute.locationSize; i++) {\n                enableAttribute(programAttribute.location + i);\n              }\n            }\n            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n            for (let i = 0; i < programAttribute.locationSize; i++) {\n              vertexAttribPointer(programAttribute.location + i, size / programAttribute.locationSize, type, normalized, size * bytesPerElement, size / programAttribute.locationSize * i * bytesPerElement, integer);\n            }\n          }\n        } else if (materialDefaultAttributeValues !== undefined) {\n          const value = materialDefaultAttributeValues[name];\n          if (value !== undefined) {\n            switch (value.length) {\n              case 2:\n                gl.vertexAttrib2fv(programAttribute.location, value);\n                break;\n              case 3:\n                gl.vertexAttrib3fv(programAttribute.location, value);\n                break;\n              case 4:\n                gl.vertexAttrib4fv(programAttribute.location, value);\n                break;\n              default:\n                gl.vertexAttrib1fv(programAttribute.location, value);\n            }\n          }\n        }\n      }\n    }\n    disableUnusedAttributes();\n  }\n  function dispose() {\n    reset();\n    for (const geometryId in bindingStates) {\n      const programMap = bindingStates[geometryId];\n      for (const programId in programMap) {\n        const stateMap = programMap[programId];\n        for (const wireframe in stateMap) {\n          deleteVertexArrayObject(stateMap[wireframe].object);\n          delete stateMap[wireframe];\n        }\n        delete programMap[programId];\n      }\n      delete bindingStates[geometryId];\n    }\n  }\n  function releaseStatesOfGeometry(geometry) {\n    if (bindingStates[geometry.id] === undefined) return;\n    const programMap = bindingStates[geometry.id];\n    for (const programId in programMap) {\n      const stateMap = programMap[programId];\n      for (const wireframe in stateMap) {\n        deleteVertexArrayObject(stateMap[wireframe].object);\n        delete stateMap[wireframe];\n      }\n      delete programMap[programId];\n    }\n    delete bindingStates[geometry.id];\n  }\n  function releaseStatesOfProgram(program) {\n    for (const geometryId in bindingStates) {\n      const programMap = bindingStates[geometryId];\n      if (programMap[program.id] === undefined) continue;\n      const stateMap = programMap[program.id];\n      for (const wireframe in stateMap) {\n        deleteVertexArrayObject(stateMap[wireframe].object);\n        delete stateMap[wireframe];\n      }\n      delete programMap[program.id];\n    }\n  }\n  function reset() {\n    resetDefaultState();\n    forceUpdate = true;\n    if (currentState === defaultState) return;\n    currentState = defaultState;\n    bindVertexArrayObject(currentState.object);\n  }\n\n  // for backward-compatibility\n\n  function resetDefaultState() {\n    defaultState.geometry = null;\n    defaultState.program = null;\n    defaultState.wireframe = false;\n  }\n  return {\n    setup: setup,\n    reset: reset,\n    resetDefaultState: resetDefaultState,\n    dispose: dispose,\n    releaseStatesOfGeometry: releaseStatesOfGeometry,\n    releaseStatesOfProgram: releaseStatesOfProgram,\n    initAttributes: initAttributes,\n    enableAttribute: enableAttribute,\n    disableUnusedAttributes: disableUnusedAttributes\n  };\n}\nfunction WebGLBufferRenderer(gl, extensions, info) {\n  let mode;\n  function setMode(value) {\n    mode = value;\n  }\n  function render(start, count) {\n    gl.drawArrays(mode, start, count);\n    info.update(count, mode, 1);\n  }\n  function renderInstances(start, count, primcount) {\n    if (primcount === 0) return;\n    gl.drawArraysInstanced(mode, start, count, primcount);\n    info.update(count, mode, primcount);\n  }\n  function renderMultiDraw(starts, counts, drawCount) {\n    if (drawCount === 0) return;\n    const extension = extensions.get('WEBGL_multi_draw');\n    extension.multiDrawArraysWEBGL(mode, starts, 0, counts, 0, drawCount);\n    let elementCount = 0;\n    for (let i = 0; i < drawCount; i++) {\n      elementCount += counts[i];\n    }\n    info.update(elementCount, mode, 1);\n  }\n  function renderMultiDrawInstances(starts, counts, drawCount, primcount) {\n    if (drawCount === 0) return;\n    const extension = extensions.get('WEBGL_multi_draw');\n    if (extension === null) {\n      for (let i = 0; i < starts.length; i++) {\n        renderInstances(starts[i], counts[i], primcount[i]);\n      }\n    } else {\n      extension.multiDrawArraysInstancedWEBGL(mode, starts, 0, counts, 0, primcount, 0, drawCount);\n      let elementCount = 0;\n      for (let i = 0; i < drawCount; i++) {\n        elementCount += counts[i] * primcount[i];\n      }\n      info.update(elementCount, mode, 1);\n    }\n  }\n\n  //\n\n  this.setMode = setMode;\n  this.render = render;\n  this.renderInstances = renderInstances;\n  this.renderMultiDraw = renderMultiDraw;\n  this.renderMultiDrawInstances = renderMultiDrawInstances;\n}\nfunction WebGLCapabilities(gl, extensions, parameters, utils) {\n  let maxAnisotropy;\n  function getMaxAnisotropy() {\n    if (maxAnisotropy !== undefined) return maxAnisotropy;\n    if (extensions.has('EXT_texture_filter_anisotropic') === true) {\n      const extension = extensions.get('EXT_texture_filter_anisotropic');\n      maxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n    } else {\n      maxAnisotropy = 0;\n    }\n    return maxAnisotropy;\n  }\n  function textureFormatReadable(textureFormat) {\n    if (textureFormat !== RGBAFormat && utils.convert(textureFormat) !== gl.getParameter(gl.IMPLEMENTATION_COLOR_READ_FORMAT)) {\n      return false;\n    }\n    return true;\n  }\n  function textureTypeReadable(textureType) {\n    const halfFloatSupportedByExt = textureType === HalfFloatType && (extensions.has('EXT_color_buffer_half_float') || extensions.has('EXT_color_buffer_float'));\n    if (textureType !== UnsignedByteType && utils.convert(textureType) !== gl.getParameter(gl.IMPLEMENTATION_COLOR_READ_TYPE) &&\n    // Edge and Chrome Mac < 52 (#9513)\n    textureType !== FloatType && !halfFloatSupportedByExt) {\n      return false;\n    }\n    return true;\n  }\n  function getMaxPrecision(precision) {\n    if (precision === 'highp') {\n      if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision > 0) {\n        return 'highp';\n      }\n      precision = 'mediump';\n    }\n    if (precision === 'mediump') {\n      if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision > 0) {\n        return 'mediump';\n      }\n    }\n    return 'lowp';\n  }\n  let precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n  const maxPrecision = getMaxPrecision(precision);\n  if (maxPrecision !== precision) {\n    console.warn('THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.');\n    precision = maxPrecision;\n  }\n  const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n  const reverseDepthBuffer = parameters.reverseDepthBuffer === true && extensions.has('EXT_clip_control');\n  const maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n  const maxVertexTextures = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);\n  const maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n  const maxCubemapSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n  const maxAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n  const maxVertexUniforms = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n  const maxVaryings = gl.getParameter(gl.MAX_VARYING_VECTORS);\n  const maxFragmentUniforms = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);\n  const vertexTextures = maxVertexTextures > 0;\n  const maxSamples = gl.getParameter(gl.MAX_SAMPLES);\n  return {\n    isWebGL2: true,\n    // keeping this for backwards compatibility\n\n    getMaxAnisotropy: getMaxAnisotropy,\n    getMaxPrecision: getMaxPrecision,\n    textureFormatReadable: textureFormatReadable,\n    textureTypeReadable: textureTypeReadable,\n    precision: precision,\n    logarithmicDepthBuffer: logarithmicDepthBuffer,\n    reverseDepthBuffer: reverseDepthBuffer,\n    maxTextures: maxTextures,\n    maxVertexTextures: maxVertexTextures,\n    maxTextureSize: maxTextureSize,\n    maxCubemapSize: maxCubemapSize,\n    maxAttributes: maxAttributes,\n    maxVertexUniforms: maxVertexUniforms,\n    maxVaryings: maxVaryings,\n    maxFragmentUniforms: maxFragmentUniforms,\n    vertexTextures: vertexTextures,\n    maxSamples: maxSamples\n  };\n}\nfunction WebGLClipping(properties) {\n  const scope = this;\n  let globalState = null,\n    numGlobalPlanes = 0,\n    localClippingEnabled = false,\n    renderingShadows = false;\n  const plane = new Plane(),\n    viewNormalMatrix = new Matrix3(),\n    uniform = {\n      value: null,\n      needsUpdate: false\n    };\n  this.uniform = uniform;\n  this.numPlanes = 0;\n  this.numIntersection = 0;\n  this.init = function (planes, enableLocalClipping) {\n    const enabled = planes.length !== 0 || enableLocalClipping ||\n    // enable state of previous frame - the clipping code has to\n    // run another frame in order to reset the state:\n    numGlobalPlanes !== 0 || localClippingEnabled;\n    localClippingEnabled = enableLocalClipping;\n    numGlobalPlanes = planes.length;\n    return enabled;\n  };\n  this.beginShadows = function () {\n    renderingShadows = true;\n    projectPlanes(null);\n  };\n  this.endShadows = function () {\n    renderingShadows = false;\n  };\n  this.setGlobalState = function (planes, camera) {\n    globalState = projectPlanes(planes, camera, 0);\n  };\n  this.setState = function (material, camera, useCache) {\n    const planes = material.clippingPlanes,\n      clipIntersection = material.clipIntersection,\n      clipShadows = material.clipShadows;\n    const materialProperties = properties.get(material);\n    if (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {\n      // there's no local clipping\n\n      if (renderingShadows) {\n        // there's no global clipping\n\n        projectPlanes(null);\n      } else {\n        resetGlobalState();\n      }\n    } else {\n      const nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n        lGlobal = nGlobal * 4;\n      let dstArray = materialProperties.clippingState || null;\n      uniform.value = dstArray; // ensure unique state\n\n      dstArray = projectPlanes(planes, camera, lGlobal, useCache);\n      for (let i = 0; i !== lGlobal; ++i) {\n        dstArray[i] = globalState[i];\n      }\n      materialProperties.clippingState = dstArray;\n      this.numIntersection = clipIntersection ? this.numPlanes : 0;\n      this.numPlanes += nGlobal;\n    }\n  };\n  function resetGlobalState() {\n    if (uniform.value !== globalState) {\n      uniform.value = globalState;\n      uniform.needsUpdate = numGlobalPlanes > 0;\n    }\n    scope.numPlanes = numGlobalPlanes;\n    scope.numIntersection = 0;\n  }\n  function projectPlanes(planes, camera, dstOffset, skipTransform) {\n    const nPlanes = planes !== null ? planes.length : 0;\n    let dstArray = null;\n    if (nPlanes !== 0) {\n      dstArray = uniform.value;\n      if (skipTransform !== true || dstArray === null) {\n        const flatSize = dstOffset + nPlanes * 4,\n          viewMatrix = camera.matrixWorldInverse;\n        viewNormalMatrix.getNormalMatrix(viewMatrix);\n        if (dstArray === null || dstArray.length < flatSize) {\n          dstArray = new Float32Array(flatSize);\n        }\n        for (let i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4) {\n          plane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);\n          plane.normal.toArray(dstArray, i4);\n          dstArray[i4 + 3] = plane.constant;\n        }\n      }\n      uniform.value = dstArray;\n      uniform.needsUpdate = true;\n    }\n    scope.numPlanes = nPlanes;\n    scope.numIntersection = 0;\n    return dstArray;\n  }\n}\nfunction WebGLCubeMaps(renderer) {\n  let cubemaps = new WeakMap();\n  function mapTextureMapping(texture, mapping) {\n    if (mapping === EquirectangularReflectionMapping) {\n      texture.mapping = CubeReflectionMapping;\n    } else if (mapping === EquirectangularRefractionMapping) {\n      texture.mapping = CubeRefractionMapping;\n    }\n    return texture;\n  }\n  function get(texture) {\n    if (texture && texture.isTexture) {\n      const mapping = texture.mapping;\n      if (mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping) {\n        if (cubemaps.has(texture)) {\n          const cubemap = cubemaps.get(texture).texture;\n          return mapTextureMapping(cubemap, texture.mapping);\n        } else {\n          const image = texture.image;\n          if (image && image.height > 0) {\n            const renderTarget = new WebGLCubeRenderTarget(image.height);\n            renderTarget.fromEquirectangularTexture(renderer, texture);\n            cubemaps.set(texture, renderTarget);\n            texture.addEventListener('dispose', onTextureDispose);\n            return mapTextureMapping(renderTarget.texture, texture.mapping);\n          } else {\n            // image not yet ready. try the conversion next frame\n\n            return null;\n          }\n        }\n      }\n    }\n    return texture;\n  }\n  function onTextureDispose(event) {\n    const texture = event.target;\n    texture.removeEventListener('dispose', onTextureDispose);\n    const cubemap = cubemaps.get(texture);\n    if (cubemap !== undefined) {\n      cubemaps.delete(texture);\n      cubemap.dispose();\n    }\n  }\n  function dispose() {\n    cubemaps = new WeakMap();\n  }\n  return {\n    get: get,\n    dispose: dispose\n  };\n}\nconst LOD_MIN = 4;\n\n// The standard deviations (radians) associated with the extra mips. These are\n// chosen to approximate a Trowbridge-Reitz distribution function times the\n// geometric shadowing function. These sigma values squared must match the\n// variance #defines in cube_uv_reflection_fragment.glsl.js.\nconst EXTRA_LOD_SIGMA = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];\n\n// The maximum length of the blur for loop. Smaller sigmas will use fewer\n// samples and exit early, but not recompile the shader.\nconst MAX_SAMPLES = 20;\nconst _flatCamera = /*@__PURE__*/new OrthographicCamera();\nconst _clearColor = /*@__PURE__*/new Color();\nlet _oldTarget = null;\nlet _oldActiveCubeFace = 0;\nlet _oldActiveMipmapLevel = 0;\nlet _oldXrEnabled = false;\n\n// Golden Ratio\nconst PHI = (1 + Math.sqrt(5)) / 2;\nconst INV_PHI = 1 / PHI;\n\n// Vertices of a dodecahedron (except the opposites, which represent the\n// same axis), used as axis directions evenly spread on a sphere.\nconst _axisDirections = [/*@__PURE__*/new Vector3(-PHI, INV_PHI, 0), /*@__PURE__*/new Vector3(PHI, INV_PHI, 0), /*@__PURE__*/new Vector3(-INV_PHI, 0, PHI), /*@__PURE__*/new Vector3(INV_PHI, 0, PHI), /*@__PURE__*/new Vector3(0, PHI, -INV_PHI), /*@__PURE__*/new Vector3(0, PHI, INV_PHI), /*@__PURE__*/new Vector3(-1, 1, -1), /*@__PURE__*/new Vector3(1, 1, -1), /*@__PURE__*/new Vector3(-1, 1, 1), /*@__PURE__*/new Vector3(1, 1, 1)];\nconst _origin = /*@__PURE__*/new Vector3();\n\n/**\n * This class generates a Prefiltered, Mipmapped Radiance Environment Map\n * (PMREM) from a cubeMap environment texture. This allows different levels of\n * blur to be quickly accessed based on material roughness. It is packed into a\n * special CubeUV format that allows us to perform custom interpolation so that\n * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\n * chain, it only goes down to the LOD_MIN level (above), and then creates extra\n * even more filtered 'mips' at the same LOD_MIN resolution, associated with\n * higher roughness levels. In this way we maintain resolution to smoothly\n * interpolate diffuse lighting while limiting sampling computation.\n *\n * Paper: Fast, Accurate Image-Based Lighting:\n * {@link https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view}\n*/\nclass PMREMGenerator {\n  /**\n   * Constructs a new PMREM generator.\n   *\n   * @param {WebGLRenderer} renderer - The renderer.\n   */\n  constructor(renderer) {\n    this._renderer = renderer;\n    this._pingPongRenderTarget = null;\n    this._lodMax = 0;\n    this._cubeSize = 0;\n    this._lodPlanes = [];\n    this._sizeLods = [];\n    this._sigmas = [];\n    this._blurMaterial = null;\n    this._cubemapMaterial = null;\n    this._equirectMaterial = null;\n    this._compileMaterial(this._blurMaterial);\n  }\n\n  /**\n   * Generates a PMREM from a supplied Scene, which can be faster than using an\n   * image if networking bandwidth is low. Optional sigma specifies a blur radius\n   * in radians to be applied to the scene before PMREM generation. Optional near\n   * and far planes ensure the scene is rendered in its entirety.\n   *\n   * @param {Scene} scene - The scene to be captured.\n   * @param {number} [sigma=0] - The blur radius in radians.\n   * @param {number} [near=0.1] - The near plane distance.\n   * @param {number} [far=100] - The far plane distance.\n   * @param {Object} [options={}] - The configuration options.\n   * @param {number} [options.size=256] - The texture size of the PMREM.\n   * @param {Vector3} [options.renderTarget=origin] - The position of the internal cube camera that renders the scene.\n   * @return {WebGLRenderTarget} The resulting PMREM.\n   */\n  fromScene(scene) {\n    let sigma = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let near = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.1;\n    let far = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 100;\n    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    const {\n      size = 256,\n      position = _origin\n    } = options;\n    _oldTarget = this._renderer.getRenderTarget();\n    _oldActiveCubeFace = this._renderer.getActiveCubeFace();\n    _oldActiveMipmapLevel = this._renderer.getActiveMipmapLevel();\n    _oldXrEnabled = this._renderer.xr.enabled;\n    this._renderer.xr.enabled = false;\n    this._setSize(size);\n    const cubeUVRenderTarget = this._allocateTargets();\n    cubeUVRenderTarget.depthBuffer = true;\n    this._sceneToCubeUV(scene, near, far, cubeUVRenderTarget, position);\n    if (sigma > 0) {\n      this._blur(cubeUVRenderTarget, 0, 0, sigma);\n    }\n    this._applyPMREM(cubeUVRenderTarget);\n    this._cleanup(cubeUVRenderTarget);\n    return cubeUVRenderTarget;\n  }\n\n  /**\n   * Generates a PMREM from an equirectangular texture, which can be either LDR\n   * or HDR. The ideal input image size is 1k (1024 x 512),\n   * as this matches best with the 256 x 256 cubemap output.\n   *\n   * @param {Texture} equirectangular - The equirectangular texture to be converted.\n   * @param {?WebGLRenderTarget} [renderTarget=null] - The render target to use.\n   * @return {WebGLRenderTarget} The resulting PMREM.\n   */\n  fromEquirectangular(equirectangular) {\n    let renderTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return this._fromTexture(equirectangular, renderTarget);\n  }\n\n  /**\n   * Generates a PMREM from an cubemap texture, which can be either LDR\n   * or HDR. The ideal input cube size is 256 x 256,\n   * as this matches best with the 256 x 256 cubemap output.\n   *\n   * @param {Texture} cubemap - The cubemap texture to be converted.\n   * @param {?WebGLRenderTarget} [renderTarget=null] - The render target to use.\n   * @return {WebGLRenderTarget} The resulting PMREM.\n   */\n  fromCubemap(cubemap) {\n    let renderTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return this._fromTexture(cubemap, renderTarget);\n  }\n\n  /**\n   * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\n   * your texture's network fetch for increased concurrency.\n   */\n  compileCubemapShader() {\n    if (this._cubemapMaterial === null) {\n      this._cubemapMaterial = _getCubemapMaterial();\n      this._compileMaterial(this._cubemapMaterial);\n    }\n  }\n\n  /**\n   * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\n   * your texture's network fetch for increased concurrency.\n   */\n  compileEquirectangularShader() {\n    if (this._equirectMaterial === null) {\n      this._equirectMaterial = _getEquirectMaterial();\n      this._compileMaterial(this._equirectMaterial);\n    }\n  }\n\n  /**\n   * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\n   * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\n   * one of them will cause any others to also become unusable.\n   */\n  dispose() {\n    this._dispose();\n    if (this._cubemapMaterial !== null) this._cubemapMaterial.dispose();\n    if (this._equirectMaterial !== null) this._equirectMaterial.dispose();\n  }\n\n  // private interface\n\n  _setSize(cubeSize) {\n    this._lodMax = Math.floor(Math.log2(cubeSize));\n    this._cubeSize = Math.pow(2, this._lodMax);\n  }\n  _dispose() {\n    if (this._blurMaterial !== null) this._blurMaterial.dispose();\n    if (this._pingPongRenderTarget !== null) this._pingPongRenderTarget.dispose();\n    for (let i = 0; i < this._lodPlanes.length; i++) {\n      this._lodPlanes[i].dispose();\n    }\n  }\n  _cleanup(outputTarget) {\n    this._renderer.setRenderTarget(_oldTarget, _oldActiveCubeFace, _oldActiveMipmapLevel);\n    this._renderer.xr.enabled = _oldXrEnabled;\n    outputTarget.scissorTest = false;\n    _setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);\n  }\n  _fromTexture(texture, renderTarget) {\n    if (texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping) {\n      this._setSize(texture.image.length === 0 ? 16 : texture.image[0].width || texture.image[0].image.width);\n    } else {\n      // Equirectangular\n\n      this._setSize(texture.image.width / 4);\n    }\n    _oldTarget = this._renderer.getRenderTarget();\n    _oldActiveCubeFace = this._renderer.getActiveCubeFace();\n    _oldActiveMipmapLevel = this._renderer.getActiveMipmapLevel();\n    _oldXrEnabled = this._renderer.xr.enabled;\n    this._renderer.xr.enabled = false;\n    const cubeUVRenderTarget = renderTarget || this._allocateTargets();\n    this._textureToCubeUV(texture, cubeUVRenderTarget);\n    this._applyPMREM(cubeUVRenderTarget);\n    this._cleanup(cubeUVRenderTarget);\n    return cubeUVRenderTarget;\n  }\n  _allocateTargets() {\n    const width = 3 * Math.max(this._cubeSize, 16 * 7);\n    const height = 4 * this._cubeSize;\n    const params = {\n      magFilter: LinearFilter,\n      minFilter: LinearFilter,\n      generateMipmaps: false,\n      type: HalfFloatType,\n      format: RGBAFormat,\n      colorSpace: LinearSRGBColorSpace,\n      depthBuffer: false\n    };\n    const cubeUVRenderTarget = _createRenderTarget(width, height, params);\n    if (this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== width || this._pingPongRenderTarget.height !== height) {\n      if (this._pingPongRenderTarget !== null) {\n        this._dispose();\n      }\n      this._pingPongRenderTarget = _createRenderTarget(width, height, params);\n      const {\n        _lodMax\n      } = this;\n      ({\n        sizeLods: this._sizeLods,\n        lodPlanes: this._lodPlanes,\n        sigmas: this._sigmas\n      } = _createPlanes(_lodMax));\n      this._blurMaterial = _getBlurShader(_lodMax, width, height);\n    }\n    return cubeUVRenderTarget;\n  }\n  _compileMaterial(material) {\n    const tmpMesh = new Mesh(this._lodPlanes[0], material);\n    this._renderer.compile(tmpMesh, _flatCamera);\n  }\n  _sceneToCubeUV(scene, near, far, cubeUVRenderTarget, position) {\n    const fov = 90;\n    const aspect = 1;\n    const cubeCamera = new PerspectiveCamera(fov, aspect, near, far);\n    const upSign = [1, -1, 1, 1, 1, 1];\n    const forwardSign = [1, 1, 1, -1, -1, -1];\n    const renderer = this._renderer;\n    const originalAutoClear = renderer.autoClear;\n    const toneMapping = renderer.toneMapping;\n    renderer.getClearColor(_clearColor);\n    renderer.toneMapping = NoToneMapping;\n    renderer.autoClear = false;\n    const backgroundMaterial = new MeshBasicMaterial({\n      name: 'PMREM.Background',\n      side: BackSide,\n      depthWrite: false,\n      depthTest: false\n    });\n    const backgroundBox = new Mesh(new BoxGeometry(), backgroundMaterial);\n    let useSolidColor = false;\n    const background = scene.background;\n    if (background) {\n      if (background.isColor) {\n        backgroundMaterial.color.copy(background);\n        scene.background = null;\n        useSolidColor = true;\n      }\n    } else {\n      backgroundMaterial.color.copy(_clearColor);\n      useSolidColor = true;\n    }\n    for (let i = 0; i < 6; i++) {\n      const col = i % 3;\n      if (col === 0) {\n        cubeCamera.up.set(0, upSign[i], 0);\n        cubeCamera.position.set(position.x, position.y, position.z);\n        cubeCamera.lookAt(position.x + forwardSign[i], position.y, position.z);\n      } else if (col === 1) {\n        cubeCamera.up.set(0, 0, upSign[i]);\n        cubeCamera.position.set(position.x, position.y, position.z);\n        cubeCamera.lookAt(position.x, position.y + forwardSign[i], position.z);\n      } else {\n        cubeCamera.up.set(0, upSign[i], 0);\n        cubeCamera.position.set(position.x, position.y, position.z);\n        cubeCamera.lookAt(position.x, position.y, position.z + forwardSign[i]);\n      }\n      const size = this._cubeSize;\n      _setViewport(cubeUVRenderTarget, col * size, i > 2 ? size : 0, size, size);\n      renderer.setRenderTarget(cubeUVRenderTarget);\n      if (useSolidColor) {\n        renderer.render(backgroundBox, cubeCamera);\n      }\n      renderer.render(scene, cubeCamera);\n    }\n    backgroundBox.geometry.dispose();\n    backgroundBox.material.dispose();\n    renderer.toneMapping = toneMapping;\n    renderer.autoClear = originalAutoClear;\n    scene.background = background;\n  }\n  _textureToCubeUV(texture, cubeUVRenderTarget) {\n    const renderer = this._renderer;\n    const isCubeTexture = texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping;\n    if (isCubeTexture) {\n      if (this._cubemapMaterial === null) {\n        this._cubemapMaterial = _getCubemapMaterial();\n      }\n      this._cubemapMaterial.uniforms.flipEnvMap.value = texture.isRenderTargetTexture === false ? -1 : 1;\n    } else {\n      if (this._equirectMaterial === null) {\n        this._equirectMaterial = _getEquirectMaterial();\n      }\n    }\n    const material = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;\n    const mesh = new Mesh(this._lodPlanes[0], material);\n    const uniforms = material.uniforms;\n    uniforms['envMap'].value = texture;\n    const size = this._cubeSize;\n    _setViewport(cubeUVRenderTarget, 0, 0, 3 * size, 2 * size);\n    renderer.setRenderTarget(cubeUVRenderTarget);\n    renderer.render(mesh, _flatCamera);\n  }\n  _applyPMREM(cubeUVRenderTarget) {\n    const renderer = this._renderer;\n    const autoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    const n = this._lodPlanes.length;\n    for (let i = 1; i < n; i++) {\n      const sigma = Math.sqrt(this._sigmas[i] * this._sigmas[i] - this._sigmas[i - 1] * this._sigmas[i - 1]);\n      const poleAxis = _axisDirections[(n - i - 1) % _axisDirections.length];\n      this._blur(cubeUVRenderTarget, i - 1, i, sigma, poleAxis);\n    }\n    renderer.autoClear = autoClear;\n  }\n\n  /**\n   * This is a two-pass Gaussian blur for a cubemap. Normally this is done\n   * vertically and horizontally, but this breaks down on a cube. Here we apply\n   * the blur latitudinally (around the poles), and then longitudinally (towards\n   * the poles) to approximate the orthogonally-separable blur. It is least\n   * accurate at the poles, but still does a decent job.\n   *\n   * @private\n   * @param {WebGLRenderTarget} cubeUVRenderTarget\n   * @param {number} lodIn\n   * @param {number} lodOut\n   * @param {number} sigma\n   * @param {Vector3} [poleAxis]\n   */\n  _blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {\n    const pingPongRenderTarget = this._pingPongRenderTarget;\n    this._halfBlur(cubeUVRenderTarget, pingPongRenderTarget, lodIn, lodOut, sigma, 'latitudinal', poleAxis);\n    this._halfBlur(pingPongRenderTarget, cubeUVRenderTarget, lodOut, lodOut, sigma, 'longitudinal', poleAxis);\n  }\n  _halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis) {\n    const renderer = this._renderer;\n    const blurMaterial = this._blurMaterial;\n    if (direction !== 'latitudinal' && direction !== 'longitudinal') {\n      console.error('blur direction must be either latitudinal or longitudinal!');\n    }\n\n    // Number of standard deviations at which to cut off the discrete approximation.\n    const STANDARD_DEVIATIONS = 3;\n    const blurMesh = new Mesh(this._lodPlanes[lodOut], blurMaterial);\n    const blurUniforms = blurMaterial.uniforms;\n    const pixels = this._sizeLods[lodIn] - 1;\n    const radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * MAX_SAMPLES - 1);\n    const sigmaPixels = sigmaRadians / radiansPerPixel;\n    const samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : MAX_SAMPLES;\n    if (samples > MAX_SAMPLES) {\n      console.warn(`sigmaRadians, ${sigmaRadians}, is too large and will clip, as it requested ${samples} samples when the maximum is set to ${MAX_SAMPLES}`);\n    }\n    const weights = [];\n    let sum = 0;\n    for (let i = 0; i < MAX_SAMPLES; ++i) {\n      const x = i / sigmaPixels;\n      const weight = Math.exp(-x * x / 2);\n      weights.push(weight);\n      if (i === 0) {\n        sum += weight;\n      } else if (i < samples) {\n        sum += 2 * weight;\n      }\n    }\n    for (let i = 0; i < weights.length; i++) {\n      weights[i] = weights[i] / sum;\n    }\n    blurUniforms['envMap'].value = targetIn.texture;\n    blurUniforms['samples'].value = samples;\n    blurUniforms['weights'].value = weights;\n    blurUniforms['latitudinal'].value = direction === 'latitudinal';\n    if (poleAxis) {\n      blurUniforms['poleAxis'].value = poleAxis;\n    }\n    const {\n      _lodMax\n    } = this;\n    blurUniforms['dTheta'].value = radiansPerPixel;\n    blurUniforms['mipInt'].value = _lodMax - lodIn;\n    const outputSize = this._sizeLods[lodOut];\n    const x = 3 * outputSize * (lodOut > _lodMax - LOD_MIN ? lodOut - _lodMax + LOD_MIN : 0);\n    const y = 4 * (this._cubeSize - outputSize);\n    _setViewport(targetOut, x, y, 3 * outputSize, 2 * outputSize);\n    renderer.setRenderTarget(targetOut);\n    renderer.render(blurMesh, _flatCamera);\n  }\n}\nfunction _createPlanes(lodMax) {\n  const lodPlanes = [];\n  const sizeLods = [];\n  const sigmas = [];\n  let lod = lodMax;\n  const totalLods = lodMax - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;\n  for (let i = 0; i < totalLods; i++) {\n    const sizeLod = Math.pow(2, lod);\n    sizeLods.push(sizeLod);\n    let sigma = 1.0 / sizeLod;\n    if (i > lodMax - LOD_MIN) {\n      sigma = EXTRA_LOD_SIGMA[i - lodMax + LOD_MIN - 1];\n    } else if (i === 0) {\n      sigma = 0;\n    }\n    sigmas.push(sigma);\n    const texelSize = 1.0 / (sizeLod - 2);\n    const min = -texelSize;\n    const max = 1 + texelSize;\n    const uv1 = [min, min, max, min, max, max, min, min, max, max, min, max];\n    const cubeFaces = 6;\n    const vertices = 6;\n    const positionSize = 3;\n    const uvSize = 2;\n    const faceIndexSize = 1;\n    const position = new Float32Array(positionSize * vertices * cubeFaces);\n    const uv = new Float32Array(uvSize * vertices * cubeFaces);\n    const faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);\n    for (let face = 0; face < cubeFaces; face++) {\n      const x = face % 3 * 2 / 3 - 1;\n      const y = face > 2 ? 0 : -1;\n      const coordinates = [x, y, 0, x + 2 / 3, y, 0, x + 2 / 3, y + 1, 0, x, y, 0, x + 2 / 3, y + 1, 0, x, y + 1, 0];\n      position.set(coordinates, positionSize * vertices * face);\n      uv.set(uv1, uvSize * vertices * face);\n      const fill = [face, face, face, face, face, face];\n      faceIndex.set(fill, faceIndexSize * vertices * face);\n    }\n    const planes = new BufferGeometry();\n    planes.setAttribute('position', new BufferAttribute(position, positionSize));\n    planes.setAttribute('uv', new BufferAttribute(uv, uvSize));\n    planes.setAttribute('faceIndex', new BufferAttribute(faceIndex, faceIndexSize));\n    lodPlanes.push(planes);\n    if (lod > LOD_MIN) {\n      lod--;\n    }\n  }\n  return {\n    lodPlanes,\n    sizeLods,\n    sigmas\n  };\n}\nfunction _createRenderTarget(width, height, params) {\n  const cubeUVRenderTarget = new WebGLRenderTarget(width, height, params);\n  cubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\n  cubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\n  cubeUVRenderTarget.scissorTest = true;\n  return cubeUVRenderTarget;\n}\nfunction _setViewport(target, x, y, width, height) {\n  target.viewport.set(x, y, width, height);\n  target.scissor.set(x, y, width, height);\n}\nfunction _getBlurShader(lodMax, width, height) {\n  const weights = new Float32Array(MAX_SAMPLES);\n  const poleAxis = new Vector3(0, 1, 0);\n  const shaderMaterial = new ShaderMaterial({\n    name: 'SphericalGaussianBlur',\n    defines: {\n      'n': MAX_SAMPLES,\n      'CUBEUV_TEXEL_WIDTH': 1.0 / width,\n      'CUBEUV_TEXEL_HEIGHT': 1.0 / height,\n      'CUBEUV_MAX_MIP': `${lodMax}.0`\n    },\n    uniforms: {\n      'envMap': {\n        value: null\n      },\n      'samples': {\n        value: 1\n      },\n      'weights': {\n        value: weights\n      },\n      'latitudinal': {\n        value: false\n      },\n      'dTheta': {\n        value: 0\n      },\n      'mipInt': {\n        value: 0\n      },\n      'poleAxis': {\n        value: poleAxis\n      }\n    },\n    vertexShader: _getCommonVertexShader(),\n    fragmentShader: /* glsl */`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t`,\n    blending: NoBlending,\n    depthTest: false,\n    depthWrite: false\n  });\n  return shaderMaterial;\n}\nfunction _getEquirectMaterial() {\n  return new ShaderMaterial({\n    name: 'EquirectangularToCubeUV',\n    uniforms: {\n      'envMap': {\n        value: null\n      }\n    },\n    vertexShader: _getCommonVertexShader(),\n    fragmentShader: /* glsl */`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tgl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );\n\n\t\t\t}\n\t\t`,\n    blending: NoBlending,\n    depthTest: false,\n    depthWrite: false\n  });\n}\nfunction _getCubemapMaterial() {\n  return new ShaderMaterial({\n    name: 'CubemapToCubeUV',\n    uniforms: {\n      'envMap': {\n        value: null\n      },\n      'flipEnvMap': {\n        value: -1\n      }\n    },\n    vertexShader: _getCommonVertexShader(),\n    fragmentShader: /* glsl */`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tuniform float flipEnvMap;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );\n\n\t\t\t}\n\t\t`,\n    blending: NoBlending,\n    depthTest: false,\n    depthWrite: false\n  });\n}\nfunction _getCommonVertexShader() {\n  return /* glsl */`\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t`;\n}\nfunction WebGLCubeUVMaps(renderer) {\n  let cubeUVmaps = new WeakMap();\n  let pmremGenerator = null;\n  function get(texture) {\n    if (texture && texture.isTexture) {\n      const mapping = texture.mapping;\n      const isEquirectMap = mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping;\n      const isCubeMap = mapping === CubeReflectionMapping || mapping === CubeRefractionMapping;\n\n      // equirect/cube map to cubeUV conversion\n\n      if (isEquirectMap || isCubeMap) {\n        let renderTarget = cubeUVmaps.get(texture);\n        const currentPMREMVersion = renderTarget !== undefined ? renderTarget.texture.pmremVersion : 0;\n        if (texture.isRenderTargetTexture && texture.pmremVersion !== currentPMREMVersion) {\n          if (pmremGenerator === null) pmremGenerator = new PMREMGenerator(renderer);\n          renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular(texture, renderTarget) : pmremGenerator.fromCubemap(texture, renderTarget);\n          renderTarget.texture.pmremVersion = texture.pmremVersion;\n          cubeUVmaps.set(texture, renderTarget);\n          return renderTarget.texture;\n        } else {\n          if (renderTarget !== undefined) {\n            return renderTarget.texture;\n          } else {\n            const image = texture.image;\n            if (isEquirectMap && image && image.height > 0 || isCubeMap && image && isCubeTextureComplete(image)) {\n              if (pmremGenerator === null) pmremGenerator = new PMREMGenerator(renderer);\n              renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular(texture) : pmremGenerator.fromCubemap(texture);\n              renderTarget.texture.pmremVersion = texture.pmremVersion;\n              cubeUVmaps.set(texture, renderTarget);\n              texture.addEventListener('dispose', onTextureDispose);\n              return renderTarget.texture;\n            } else {\n              // image not yet ready. try the conversion next frame\n\n              return null;\n            }\n          }\n        }\n      }\n    }\n    return texture;\n  }\n  function isCubeTextureComplete(image) {\n    let count = 0;\n    const length = 6;\n    for (let i = 0; i < length; i++) {\n      if (image[i] !== undefined) count++;\n    }\n    return count === length;\n  }\n  function onTextureDispose(event) {\n    const texture = event.target;\n    texture.removeEventListener('dispose', onTextureDispose);\n    const cubemapUV = cubeUVmaps.get(texture);\n    if (cubemapUV !== undefined) {\n      cubeUVmaps.delete(texture);\n      cubemapUV.dispose();\n    }\n  }\n  function dispose() {\n    cubeUVmaps = new WeakMap();\n    if (pmremGenerator !== null) {\n      pmremGenerator.dispose();\n      pmremGenerator = null;\n    }\n  }\n  return {\n    get: get,\n    dispose: dispose\n  };\n}\nfunction WebGLExtensions(gl) {\n  const extensions = {};\n  function getExtension(name) {\n    if (extensions[name] !== undefined) {\n      return extensions[name];\n    }\n    let extension;\n    switch (name) {\n      case 'WEBGL_depth_texture':\n        extension = gl.getExtension('WEBGL_depth_texture') || gl.getExtension('MOZ_WEBGL_depth_texture') || gl.getExtension('WEBKIT_WEBGL_depth_texture');\n        break;\n      case 'EXT_texture_filter_anisotropic':\n        extension = gl.getExtension('EXT_texture_filter_anisotropic') || gl.getExtension('MOZ_EXT_texture_filter_anisotropic') || gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');\n        break;\n      case 'WEBGL_compressed_texture_s3tc':\n        extension = gl.getExtension('WEBGL_compressed_texture_s3tc') || gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');\n        break;\n      case 'WEBGL_compressed_texture_pvrtc':\n        extension = gl.getExtension('WEBGL_compressed_texture_pvrtc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');\n        break;\n      default:\n        extension = gl.getExtension(name);\n    }\n    extensions[name] = extension;\n    return extension;\n  }\n  return {\n    has: function (name) {\n      return getExtension(name) !== null;\n    },\n    init: function () {\n      getExtension('EXT_color_buffer_float');\n      getExtension('WEBGL_clip_cull_distance');\n      getExtension('OES_texture_float_linear');\n      getExtension('EXT_color_buffer_half_float');\n      getExtension('WEBGL_multisampled_render_to_texture');\n      getExtension('WEBGL_render_shared_exponent');\n    },\n    get: function (name) {\n      const extension = getExtension(name);\n      if (extension === null) {\n        warnOnce('THREE.WebGLRenderer: ' + name + ' extension not supported.');\n      }\n      return extension;\n    }\n  };\n}\nfunction WebGLGeometries(gl, attributes, info, bindingStates) {\n  const geometries = {};\n  const wireframeAttributes = new WeakMap();\n  function onGeometryDispose(event) {\n    const geometry = event.target;\n    if (geometry.index !== null) {\n      attributes.remove(geometry.index);\n    }\n    for (const name in geometry.attributes) {\n      attributes.remove(geometry.attributes[name]);\n    }\n    geometry.removeEventListener('dispose', onGeometryDispose);\n    delete geometries[geometry.id];\n    const attribute = wireframeAttributes.get(geometry);\n    if (attribute) {\n      attributes.remove(attribute);\n      wireframeAttributes.delete(geometry);\n    }\n    bindingStates.releaseStatesOfGeometry(geometry);\n    if (geometry.isInstancedBufferGeometry === true) {\n      delete geometry._maxInstanceCount;\n    }\n\n    //\n\n    info.memory.geometries--;\n  }\n  function get(object, geometry) {\n    if (geometries[geometry.id] === true) return geometry;\n    geometry.addEventListener('dispose', onGeometryDispose);\n    geometries[geometry.id] = true;\n    info.memory.geometries++;\n    return geometry;\n  }\n  function update(geometry) {\n    const geometryAttributes = geometry.attributes;\n\n    // Updating index buffer in VAO now. See WebGLBindingStates.\n\n    for (const name in geometryAttributes) {\n      attributes.update(geometryAttributes[name], gl.ARRAY_BUFFER);\n    }\n  }\n  function updateWireframeAttribute(geometry) {\n    const indices = [];\n    const geometryIndex = geometry.index;\n    const geometryPosition = geometry.attributes.position;\n    let version = 0;\n    if (geometryIndex !== null) {\n      const array = geometryIndex.array;\n      version = geometryIndex.version;\n      for (let i = 0, l = array.length; i < l; i += 3) {\n        const a = array[i + 0];\n        const b = array[i + 1];\n        const c = array[i + 2];\n        indices.push(a, b, b, c, c, a);\n      }\n    } else if (geometryPosition !== undefined) {\n      const array = geometryPosition.array;\n      version = geometryPosition.version;\n      for (let i = 0, l = array.length / 3 - 1; i < l; i += 3) {\n        const a = i + 0;\n        const b = i + 1;\n        const c = i + 2;\n        indices.push(a, b, b, c, c, a);\n      }\n    } else {\n      return;\n    }\n    const attribute = new (arrayNeedsUint32(indices) ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);\n    attribute.version = version;\n\n    // Updating index buffer in VAO now. See WebGLBindingStates\n\n    //\n\n    const previousAttribute = wireframeAttributes.get(geometry);\n    if (previousAttribute) attributes.remove(previousAttribute);\n\n    //\n\n    wireframeAttributes.set(geometry, attribute);\n  }\n  function getWireframeAttribute(geometry) {\n    const currentAttribute = wireframeAttributes.get(geometry);\n    if (currentAttribute) {\n      const geometryIndex = geometry.index;\n      if (geometryIndex !== null) {\n        // if the attribute is obsolete, create a new one\n\n        if (currentAttribute.version < geometryIndex.version) {\n          updateWireframeAttribute(geometry);\n        }\n      }\n    } else {\n      updateWireframeAttribute(geometry);\n    }\n    return wireframeAttributes.get(geometry);\n  }\n  return {\n    get: get,\n    update: update,\n    getWireframeAttribute: getWireframeAttribute\n  };\n}\nfunction WebGLIndexedBufferRenderer(gl, extensions, info) {\n  let mode;\n  function setMode(value) {\n    mode = value;\n  }\n  let type, bytesPerElement;\n  function setIndex(value) {\n    type = value.type;\n    bytesPerElement = value.bytesPerElement;\n  }\n  function render(start, count) {\n    gl.drawElements(mode, count, type, start * bytesPerElement);\n    info.update(count, mode, 1);\n  }\n  function renderInstances(start, count, primcount) {\n    if (primcount === 0) return;\n    gl.drawElementsInstanced(mode, count, type, start * bytesPerElement, primcount);\n    info.update(count, mode, primcount);\n  }\n  function renderMultiDraw(starts, counts, drawCount) {\n    if (drawCount === 0) return;\n    const extension = extensions.get('WEBGL_multi_draw');\n    extension.multiDrawElementsWEBGL(mode, counts, 0, type, starts, 0, drawCount);\n    let elementCount = 0;\n    for (let i = 0; i < drawCount; i++) {\n      elementCount += counts[i];\n    }\n    info.update(elementCount, mode, 1);\n  }\n  function renderMultiDrawInstances(starts, counts, drawCount, primcount) {\n    if (drawCount === 0) return;\n    const extension = extensions.get('WEBGL_multi_draw');\n    if (extension === null) {\n      for (let i = 0; i < starts.length; i++) {\n        renderInstances(starts[i] / bytesPerElement, counts[i], primcount[i]);\n      }\n    } else {\n      extension.multiDrawElementsInstancedWEBGL(mode, counts, 0, type, starts, 0, primcount, 0, drawCount);\n      let elementCount = 0;\n      for (let i = 0; i < drawCount; i++) {\n        elementCount += counts[i] * primcount[i];\n      }\n      info.update(elementCount, mode, 1);\n    }\n  }\n\n  //\n\n  this.setMode = setMode;\n  this.setIndex = setIndex;\n  this.render = render;\n  this.renderInstances = renderInstances;\n  this.renderMultiDraw = renderMultiDraw;\n  this.renderMultiDrawInstances = renderMultiDrawInstances;\n}\nfunction WebGLInfo(gl) {\n  const memory = {\n    geometries: 0,\n    textures: 0\n  };\n  const render = {\n    frame: 0,\n    calls: 0,\n    triangles: 0,\n    points: 0,\n    lines: 0\n  };\n  function update(count, mode, instanceCount) {\n    render.calls++;\n    switch (mode) {\n      case gl.TRIANGLES:\n        render.triangles += instanceCount * (count / 3);\n        break;\n      case gl.LINES:\n        render.lines += instanceCount * (count / 2);\n        break;\n      case gl.LINE_STRIP:\n        render.lines += instanceCount * (count - 1);\n        break;\n      case gl.LINE_LOOP:\n        render.lines += instanceCount * count;\n        break;\n      case gl.POINTS:\n        render.points += instanceCount * count;\n        break;\n      default:\n        console.error('THREE.WebGLInfo: Unknown draw mode:', mode);\n        break;\n    }\n  }\n  function reset() {\n    render.calls = 0;\n    render.triangles = 0;\n    render.points = 0;\n    render.lines = 0;\n  }\n  return {\n    memory: memory,\n    render: render,\n    programs: null,\n    autoReset: true,\n    reset: reset,\n    update: update\n  };\n}\nfunction WebGLMorphtargets(gl, capabilities, textures) {\n  const morphTextures = new WeakMap();\n  const morph = new Vector4();\n  function update(object, geometry, program) {\n    const objectInfluences = object.morphTargetInfluences;\n\n    // the following encodes morph targets into an array of data textures. Each layer represents a single morph target.\n\n    const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;\n    const morphTargetsCount = morphAttribute !== undefined ? morphAttribute.length : 0;\n    let entry = morphTextures.get(geometry);\n    if (entry === undefined || entry.count !== morphTargetsCount) {\n      if (entry !== undefined) entry.texture.dispose();\n      const hasMorphPosition = geometry.morphAttributes.position !== undefined;\n      const hasMorphNormals = geometry.morphAttributes.normal !== undefined;\n      const hasMorphColors = geometry.morphAttributes.color !== undefined;\n      const morphTargets = geometry.morphAttributes.position || [];\n      const morphNormals = geometry.morphAttributes.normal || [];\n      const morphColors = geometry.morphAttributes.color || [];\n      let vertexDataCount = 0;\n      if (hasMorphPosition === true) vertexDataCount = 1;\n      if (hasMorphNormals === true) vertexDataCount = 2;\n      if (hasMorphColors === true) vertexDataCount = 3;\n      let width = geometry.attributes.position.count * vertexDataCount;\n      let height = 1;\n      if (width > capabilities.maxTextureSize) {\n        height = Math.ceil(width / capabilities.maxTextureSize);\n        width = capabilities.maxTextureSize;\n      }\n      const buffer = new Float32Array(width * height * 4 * morphTargetsCount);\n      const texture = new DataArrayTexture(buffer, width, height, morphTargetsCount);\n      texture.type = FloatType;\n      texture.needsUpdate = true;\n\n      // fill buffer\n\n      const vertexDataStride = vertexDataCount * 4;\n      for (let i = 0; i < morphTargetsCount; i++) {\n        const morphTarget = morphTargets[i];\n        const morphNormal = morphNormals[i];\n        const morphColor = morphColors[i];\n        const offset = width * height * 4 * i;\n        for (let j = 0; j < morphTarget.count; j++) {\n          const stride = j * vertexDataStride;\n          if (hasMorphPosition === true) {\n            morph.fromBufferAttribute(morphTarget, j);\n            buffer[offset + stride + 0] = morph.x;\n            buffer[offset + stride + 1] = morph.y;\n            buffer[offset + stride + 2] = morph.z;\n            buffer[offset + stride + 3] = 0;\n          }\n          if (hasMorphNormals === true) {\n            morph.fromBufferAttribute(morphNormal, j);\n            buffer[offset + stride + 4] = morph.x;\n            buffer[offset + stride + 5] = morph.y;\n            buffer[offset + stride + 6] = morph.z;\n            buffer[offset + stride + 7] = 0;\n          }\n          if (hasMorphColors === true) {\n            morph.fromBufferAttribute(morphColor, j);\n            buffer[offset + stride + 8] = morph.x;\n            buffer[offset + stride + 9] = morph.y;\n            buffer[offset + stride + 10] = morph.z;\n            buffer[offset + stride + 11] = morphColor.itemSize === 4 ? morph.w : 1;\n          }\n        }\n      }\n      entry = {\n        count: morphTargetsCount,\n        texture: texture,\n        size: new Vector2(width, height)\n      };\n      morphTextures.set(geometry, entry);\n      function disposeTexture() {\n        texture.dispose();\n        morphTextures.delete(geometry);\n        geometry.removeEventListener('dispose', disposeTexture);\n      }\n      geometry.addEventListener('dispose', disposeTexture);\n    }\n\n    //\n    if (object.isInstancedMesh === true && object.morphTexture !== null) {\n      program.getUniforms().setValue(gl, 'morphTexture', object.morphTexture, textures);\n    } else {\n      let morphInfluencesSum = 0;\n      for (let i = 0; i < objectInfluences.length; i++) {\n        morphInfluencesSum += objectInfluences[i];\n      }\n      const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n      program.getUniforms().setValue(gl, 'morphTargetBaseInfluence', morphBaseInfluence);\n      program.getUniforms().setValue(gl, 'morphTargetInfluences', objectInfluences);\n    }\n    program.getUniforms().setValue(gl, 'morphTargetsTexture', entry.texture, textures);\n    program.getUniforms().setValue(gl, 'morphTargetsTextureSize', entry.size);\n  }\n  return {\n    update: update\n  };\n}\nfunction WebGLObjects(gl, geometries, attributes, info) {\n  let updateMap = new WeakMap();\n  function update(object) {\n    const frame = info.render.frame;\n    const geometry = object.geometry;\n    const buffergeometry = geometries.get(object, geometry);\n\n    // Update once per frame\n\n    if (updateMap.get(buffergeometry) !== frame) {\n      geometries.update(buffergeometry);\n      updateMap.set(buffergeometry, frame);\n    }\n    if (object.isInstancedMesh) {\n      if (object.hasEventListener('dispose', onInstancedMeshDispose) === false) {\n        object.addEventListener('dispose', onInstancedMeshDispose);\n      }\n      if (updateMap.get(object) !== frame) {\n        attributes.update(object.instanceMatrix, gl.ARRAY_BUFFER);\n        if (object.instanceColor !== null) {\n          attributes.update(object.instanceColor, gl.ARRAY_BUFFER);\n        }\n        updateMap.set(object, frame);\n      }\n    }\n    if (object.isSkinnedMesh) {\n      const skeleton = object.skeleton;\n      if (updateMap.get(skeleton) !== frame) {\n        skeleton.update();\n        updateMap.set(skeleton, frame);\n      }\n    }\n    return buffergeometry;\n  }\n  function dispose() {\n    updateMap = new WeakMap();\n  }\n  function onInstancedMeshDispose(event) {\n    const instancedMesh = event.target;\n    instancedMesh.removeEventListener('dispose', onInstancedMeshDispose);\n    attributes.remove(instancedMesh.instanceMatrix);\n    if (instancedMesh.instanceColor !== null) attributes.remove(instancedMesh.instanceColor);\n  }\n  return {\n    update: update,\n    dispose: dispose\n  };\n}\n\n/**\n * Uniforms of a program.\n * Those form a tree structure with a special top-level container for the root,\n * which you get by calling 'new WebGLUniforms( gl, program )'.\n *\n *\n * Properties of inner nodes including the top-level container:\n *\n * .seq - array of nested uniforms\n * .map - nested uniforms by name\n *\n *\n * Methods of all nodes except the top-level container:\n *\n * .setValue( gl, value, [textures] )\n *\n * \t\tuploads a uniform value(s)\n *  \tthe 'textures' parameter is needed for sampler uniforms\n *\n *\n * Static methods of the top-level container (textures factorizations):\n *\n * .upload( gl, seq, values, textures )\n *\n * \t\tsets uniforms in 'seq' to 'values[id].value'\n *\n * .seqWithValue( seq, values ) : filteredSeq\n *\n * \t\tfilters 'seq' entries with corresponding entry in values\n *\n *\n * Methods of the top-level container (textures factorizations):\n *\n * .setValue( gl, name, value, textures )\n *\n * \t\tsets uniform with  name 'name' to 'value'\n *\n * .setOptional( gl, obj, prop )\n *\n * \t\tlike .set for an optional property of the object\n *\n */\n\nconst emptyTexture = /*@__PURE__*/new Texture();\nconst emptyShadowTexture = /*@__PURE__*/new DepthTexture(1, 1);\nconst emptyArrayTexture = /*@__PURE__*/new DataArrayTexture();\nconst empty3dTexture = /*@__PURE__*/new Data3DTexture();\nconst emptyCubeTexture = /*@__PURE__*/new CubeTexture();\n\n// --- Utilities ---\n\n// Array Caches (provide typed arrays for temporary by size)\n\nconst arrayCacheF32 = [];\nconst arrayCacheI32 = [];\n\n// Float32Array caches used for uploading Matrix uniforms\n\nconst mat4array = new Float32Array(16);\nconst mat3array = new Float32Array(9);\nconst mat2array = new Float32Array(4);\n\n// Flattening for arrays of vectors and matrices\n\nfunction flatten(array, nBlocks, blockSize) {\n  const firstElem = array[0];\n  if (firstElem <= 0 || firstElem > 0) return array;\n  // unoptimized: ! isNaN( firstElem )\n  // see http://jacksondunstan.com/articles/983\n\n  const n = nBlocks * blockSize;\n  let r = arrayCacheF32[n];\n  if (r === undefined) {\n    r = new Float32Array(n);\n    arrayCacheF32[n] = r;\n  }\n  if (nBlocks !== 0) {\n    firstElem.toArray(r, 0);\n    for (let i = 1, offset = 0; i !== nBlocks; ++i) {\n      offset += blockSize;\n      array[i].toArray(r, offset);\n    }\n  }\n  return r;\n}\nfunction arraysEqual(a, b) {\n  if (a.length !== b.length) return false;\n  for (let i = 0, l = a.length; i < l; i++) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n}\nfunction copyArray(a, b) {\n  for (let i = 0, l = b.length; i < l; i++) {\n    a[i] = b[i];\n  }\n}\n\n// Texture unit allocation\n\nfunction allocTexUnits(textures, n) {\n  let r = arrayCacheI32[n];\n  if (r === undefined) {\n    r = new Int32Array(n);\n    arrayCacheI32[n] = r;\n  }\n  for (let i = 0; i !== n; ++i) {\n    r[i] = textures.allocateTextureUnit();\n  }\n  return r;\n}\n\n// --- Setters ---\n\n// Note: Defining these methods externally, because they come in a bunch\n// and this way their names minify.\n\n// Single scalar\n\nfunction setValueV1f(gl, v) {\n  const cache = this.cache;\n  if (cache[0] === v) return;\n  gl.uniform1f(this.addr, v);\n  cache[0] = v;\n}\n\n// Single float vector (from flat array or THREE.VectorN)\n\nfunction setValueV2f(gl, v) {\n  const cache = this.cache;\n  if (v.x !== undefined) {\n    if (cache[0] !== v.x || cache[1] !== v.y) {\n      gl.uniform2f(this.addr, v.x, v.y);\n      cache[0] = v.x;\n      cache[1] = v.y;\n    }\n  } else {\n    if (arraysEqual(cache, v)) return;\n    gl.uniform2fv(this.addr, v);\n    copyArray(cache, v);\n  }\n}\nfunction setValueV3f(gl, v) {\n  const cache = this.cache;\n  if (v.x !== undefined) {\n    if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {\n      gl.uniform3f(this.addr, v.x, v.y, v.z);\n      cache[0] = v.x;\n      cache[1] = v.y;\n      cache[2] = v.z;\n    }\n  } else if (v.r !== undefined) {\n    if (cache[0] !== v.r || cache[1] !== v.g || cache[2] !== v.b) {\n      gl.uniform3f(this.addr, v.r, v.g, v.b);\n      cache[0] = v.r;\n      cache[1] = v.g;\n      cache[2] = v.b;\n    }\n  } else {\n    if (arraysEqual(cache, v)) return;\n    gl.uniform3fv(this.addr, v);\n    copyArray(cache, v);\n  }\n}\nfunction setValueV4f(gl, v) {\n  const cache = this.cache;\n  if (v.x !== undefined) {\n    if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {\n      gl.uniform4f(this.addr, v.x, v.y, v.z, v.w);\n      cache[0] = v.x;\n      cache[1] = v.y;\n      cache[2] = v.z;\n      cache[3] = v.w;\n    }\n  } else {\n    if (arraysEqual(cache, v)) return;\n    gl.uniform4fv(this.addr, v);\n    copyArray(cache, v);\n  }\n}\n\n// Single matrix (from flat array or THREE.MatrixN)\n\nfunction setValueM2(gl, v) {\n  const cache = this.cache;\n  const elements = v.elements;\n  if (elements === undefined) {\n    if (arraysEqual(cache, v)) return;\n    gl.uniformMatrix2fv(this.addr, false, v);\n    copyArray(cache, v);\n  } else {\n    if (arraysEqual(cache, elements)) return;\n    mat2array.set(elements);\n    gl.uniformMatrix2fv(this.addr, false, mat2array);\n    copyArray(cache, elements);\n  }\n}\nfunction setValueM3(gl, v) {\n  const cache = this.cache;\n  const elements = v.elements;\n  if (elements === undefined) {\n    if (arraysEqual(cache, v)) return;\n    gl.uniformMatrix3fv(this.addr, false, v);\n    copyArray(cache, v);\n  } else {\n    if (arraysEqual(cache, elements)) return;\n    mat3array.set(elements);\n    gl.uniformMatrix3fv(this.addr, false, mat3array);\n    copyArray(cache, elements);\n  }\n}\nfunction setValueM4(gl, v) {\n  const cache = this.cache;\n  const elements = v.elements;\n  if (elements === undefined) {\n    if (arraysEqual(cache, v)) return;\n    gl.uniformMatrix4fv(this.addr, false, v);\n    copyArray(cache, v);\n  } else {\n    if (arraysEqual(cache, elements)) return;\n    mat4array.set(elements);\n    gl.uniformMatrix4fv(this.addr, false, mat4array);\n    copyArray(cache, elements);\n  }\n}\n\n// Single integer / boolean\n\nfunction setValueV1i(gl, v) {\n  const cache = this.cache;\n  if (cache[0] === v) return;\n  gl.uniform1i(this.addr, v);\n  cache[0] = v;\n}\n\n// Single integer / boolean vector (from flat array or THREE.VectorN)\n\nfunction setValueV2i(gl, v) {\n  const cache = this.cache;\n  if (v.x !== undefined) {\n    if (cache[0] !== v.x || cache[1] !== v.y) {\n      gl.uniform2i(this.addr, v.x, v.y);\n      cache[0] = v.x;\n      cache[1] = v.y;\n    }\n  } else {\n    if (arraysEqual(cache, v)) return;\n    gl.uniform2iv(this.addr, v);\n    copyArray(cache, v);\n  }\n}\nfunction setValueV3i(gl, v) {\n  const cache = this.cache;\n  if (v.x !== undefined) {\n    if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {\n      gl.uniform3i(this.addr, v.x, v.y, v.z);\n      cache[0] = v.x;\n      cache[1] = v.y;\n      cache[2] = v.z;\n    }\n  } else {\n    if (arraysEqual(cache, v)) return;\n    gl.uniform3iv(this.addr, v);\n    copyArray(cache, v);\n  }\n}\nfunction setValueV4i(gl, v) {\n  const cache = this.cache;\n  if (v.x !== undefined) {\n    if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {\n      gl.uniform4i(this.addr, v.x, v.y, v.z, v.w);\n      cache[0] = v.x;\n      cache[1] = v.y;\n      cache[2] = v.z;\n      cache[3] = v.w;\n    }\n  } else {\n    if (arraysEqual(cache, v)) return;\n    gl.uniform4iv(this.addr, v);\n    copyArray(cache, v);\n  }\n}\n\n// Single unsigned integer\n\nfunction setValueV1ui(gl, v) {\n  const cache = this.cache;\n  if (cache[0] === v) return;\n  gl.uniform1ui(this.addr, v);\n  cache[0] = v;\n}\n\n// Single unsigned integer vector (from flat array or THREE.VectorN)\n\nfunction setValueV2ui(gl, v) {\n  const cache = this.cache;\n  if (v.x !== undefined) {\n    if (cache[0] !== v.x || cache[1] !== v.y) {\n      gl.uniform2ui(this.addr, v.x, v.y);\n      cache[0] = v.x;\n      cache[1] = v.y;\n    }\n  } else {\n    if (arraysEqual(cache, v)) return;\n    gl.uniform2uiv(this.addr, v);\n    copyArray(cache, v);\n  }\n}\nfunction setValueV3ui(gl, v) {\n  const cache = this.cache;\n  if (v.x !== undefined) {\n    if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {\n      gl.uniform3ui(this.addr, v.x, v.y, v.z);\n      cache[0] = v.x;\n      cache[1] = v.y;\n      cache[2] = v.z;\n    }\n  } else {\n    if (arraysEqual(cache, v)) return;\n    gl.uniform3uiv(this.addr, v);\n    copyArray(cache, v);\n  }\n}\nfunction setValueV4ui(gl, v) {\n  const cache = this.cache;\n  if (v.x !== undefined) {\n    if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {\n      gl.uniform4ui(this.addr, v.x, v.y, v.z, v.w);\n      cache[0] = v.x;\n      cache[1] = v.y;\n      cache[2] = v.z;\n      cache[3] = v.w;\n    }\n  } else {\n    if (arraysEqual(cache, v)) return;\n    gl.uniform4uiv(this.addr, v);\n    copyArray(cache, v);\n  }\n}\n\n// Single texture (2D / Cube)\n\nfunction setValueT1(gl, v, textures) {\n  const cache = this.cache;\n  const unit = textures.allocateTextureUnit();\n  if (cache[0] !== unit) {\n    gl.uniform1i(this.addr, unit);\n    cache[0] = unit;\n  }\n  let emptyTexture2D;\n  if (this.type === gl.SAMPLER_2D_SHADOW) {\n    emptyShadowTexture.compareFunction = LessEqualCompare; // #28670\n    emptyTexture2D = emptyShadowTexture;\n  } else {\n    emptyTexture2D = emptyTexture;\n  }\n  textures.setTexture2D(v || emptyTexture2D, unit);\n}\nfunction setValueT3D1(gl, v, textures) {\n  const cache = this.cache;\n  const unit = textures.allocateTextureUnit();\n  if (cache[0] !== unit) {\n    gl.uniform1i(this.addr, unit);\n    cache[0] = unit;\n  }\n  textures.setTexture3D(v || empty3dTexture, unit);\n}\nfunction setValueT6(gl, v, textures) {\n  const cache = this.cache;\n  const unit = textures.allocateTextureUnit();\n  if (cache[0] !== unit) {\n    gl.uniform1i(this.addr, unit);\n    cache[0] = unit;\n  }\n  textures.setTextureCube(v || emptyCubeTexture, unit);\n}\nfunction setValueT2DArray1(gl, v, textures) {\n  const cache = this.cache;\n  const unit = textures.allocateTextureUnit();\n  if (cache[0] !== unit) {\n    gl.uniform1i(this.addr, unit);\n    cache[0] = unit;\n  }\n  textures.setTexture2DArray(v || emptyArrayTexture, unit);\n}\n\n// Helper to pick the right setter for the singular case\n\nfunction getSingularSetter(type) {\n  switch (type) {\n    case 0x1406:\n      return setValueV1f;\n    // FLOAT\n    case 0x8b50:\n      return setValueV2f;\n    // _VEC2\n    case 0x8b51:\n      return setValueV3f;\n    // _VEC3\n    case 0x8b52:\n      return setValueV4f;\n    // _VEC4\n\n    case 0x8b5a:\n      return setValueM2;\n    // _MAT2\n    case 0x8b5b:\n      return setValueM3;\n    // _MAT3\n    case 0x8b5c:\n      return setValueM4;\n    // _MAT4\n\n    case 0x1404:\n    case 0x8b56:\n      return setValueV1i;\n    // INT, BOOL\n    case 0x8b53:\n    case 0x8b57:\n      return setValueV2i;\n    // _VEC2\n    case 0x8b54:\n    case 0x8b58:\n      return setValueV3i;\n    // _VEC3\n    case 0x8b55:\n    case 0x8b59:\n      return setValueV4i;\n    // _VEC4\n\n    case 0x1405:\n      return setValueV1ui;\n    // UINT\n    case 0x8dc6:\n      return setValueV2ui;\n    // _VEC2\n    case 0x8dc7:\n      return setValueV3ui;\n    // _VEC3\n    case 0x8dc8:\n      return setValueV4ui;\n    // _VEC4\n\n    case 0x8b5e: // SAMPLER_2D\n    case 0x8d66: // SAMPLER_EXTERNAL_OES\n    case 0x8dca: // INT_SAMPLER_2D\n    case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n    case 0x8b62:\n      // SAMPLER_2D_SHADOW\n      return setValueT1;\n    case 0x8b5f: // SAMPLER_3D\n    case 0x8dcb: // INT_SAMPLER_3D\n    case 0x8dd3:\n      // UNSIGNED_INT_SAMPLER_3D\n      return setValueT3D1;\n    case 0x8b60: // SAMPLER_CUBE\n    case 0x8dcc: // INT_SAMPLER_CUBE\n    case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n    case 0x8dc5:\n      // SAMPLER_CUBE_SHADOW\n      return setValueT6;\n    case 0x8dc1: // SAMPLER_2D_ARRAY\n    case 0x8dcf: // INT_SAMPLER_2D_ARRAY\n    case 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n    case 0x8dc4:\n      // SAMPLER_2D_ARRAY_SHADOW\n      return setValueT2DArray1;\n  }\n}\n\n// Array of scalars\n\nfunction setValueV1fArray(gl, v) {\n  gl.uniform1fv(this.addr, v);\n}\n\n// Array of vectors (from flat array or array of THREE.VectorN)\n\nfunction setValueV2fArray(gl, v) {\n  const data = flatten(v, this.size, 2);\n  gl.uniform2fv(this.addr, data);\n}\nfunction setValueV3fArray(gl, v) {\n  const data = flatten(v, this.size, 3);\n  gl.uniform3fv(this.addr, data);\n}\nfunction setValueV4fArray(gl, v) {\n  const data = flatten(v, this.size, 4);\n  gl.uniform4fv(this.addr, data);\n}\n\n// Array of matrices (from flat array or array of THREE.MatrixN)\n\nfunction setValueM2Array(gl, v) {\n  const data = flatten(v, this.size, 4);\n  gl.uniformMatrix2fv(this.addr, false, data);\n}\nfunction setValueM3Array(gl, v) {\n  const data = flatten(v, this.size, 9);\n  gl.uniformMatrix3fv(this.addr, false, data);\n}\nfunction setValueM4Array(gl, v) {\n  const data = flatten(v, this.size, 16);\n  gl.uniformMatrix4fv(this.addr, false, data);\n}\n\n// Array of integer / boolean\n\nfunction setValueV1iArray(gl, v) {\n  gl.uniform1iv(this.addr, v);\n}\n\n// Array of integer / boolean vectors (from flat array)\n\nfunction setValueV2iArray(gl, v) {\n  gl.uniform2iv(this.addr, v);\n}\nfunction setValueV3iArray(gl, v) {\n  gl.uniform3iv(this.addr, v);\n}\nfunction setValueV4iArray(gl, v) {\n  gl.uniform4iv(this.addr, v);\n}\n\n// Array of unsigned integer\n\nfunction setValueV1uiArray(gl, v) {\n  gl.uniform1uiv(this.addr, v);\n}\n\n// Array of unsigned integer vectors (from flat array)\n\nfunction setValueV2uiArray(gl, v) {\n  gl.uniform2uiv(this.addr, v);\n}\nfunction setValueV3uiArray(gl, v) {\n  gl.uniform3uiv(this.addr, v);\n}\nfunction setValueV4uiArray(gl, v) {\n  gl.uniform4uiv(this.addr, v);\n}\n\n// Array of textures (2D / 3D / Cube / 2DArray)\n\nfunction setValueT1Array(gl, v, textures) {\n  const cache = this.cache;\n  const n = v.length;\n  const units = allocTexUnits(textures, n);\n  if (!arraysEqual(cache, units)) {\n    gl.uniform1iv(this.addr, units);\n    copyArray(cache, units);\n  }\n  for (let i = 0; i !== n; ++i) {\n    textures.setTexture2D(v[i] || emptyTexture, units[i]);\n  }\n}\nfunction setValueT3DArray(gl, v, textures) {\n  const cache = this.cache;\n  const n = v.length;\n  const units = allocTexUnits(textures, n);\n  if (!arraysEqual(cache, units)) {\n    gl.uniform1iv(this.addr, units);\n    copyArray(cache, units);\n  }\n  for (let i = 0; i !== n; ++i) {\n    textures.setTexture3D(v[i] || empty3dTexture, units[i]);\n  }\n}\nfunction setValueT6Array(gl, v, textures) {\n  const cache = this.cache;\n  const n = v.length;\n  const units = allocTexUnits(textures, n);\n  if (!arraysEqual(cache, units)) {\n    gl.uniform1iv(this.addr, units);\n    copyArray(cache, units);\n  }\n  for (let i = 0; i !== n; ++i) {\n    textures.setTextureCube(v[i] || emptyCubeTexture, units[i]);\n  }\n}\nfunction setValueT2DArrayArray(gl, v, textures) {\n  const cache = this.cache;\n  const n = v.length;\n  const units = allocTexUnits(textures, n);\n  if (!arraysEqual(cache, units)) {\n    gl.uniform1iv(this.addr, units);\n    copyArray(cache, units);\n  }\n  for (let i = 0; i !== n; ++i) {\n    textures.setTexture2DArray(v[i] || emptyArrayTexture, units[i]);\n  }\n}\n\n// Helper to pick the right setter for a pure (bottom-level) array\n\nfunction getPureArraySetter(type) {\n  switch (type) {\n    case 0x1406:\n      return setValueV1fArray;\n    // FLOAT\n    case 0x8b50:\n      return setValueV2fArray;\n    // _VEC2\n    case 0x8b51:\n      return setValueV3fArray;\n    // _VEC3\n    case 0x8b52:\n      return setValueV4fArray;\n    // _VEC4\n\n    case 0x8b5a:\n      return setValueM2Array;\n    // _MAT2\n    case 0x8b5b:\n      return setValueM3Array;\n    // _MAT3\n    case 0x8b5c:\n      return setValueM4Array;\n    // _MAT4\n\n    case 0x1404:\n    case 0x8b56:\n      return setValueV1iArray;\n    // INT, BOOL\n    case 0x8b53:\n    case 0x8b57:\n      return setValueV2iArray;\n    // _VEC2\n    case 0x8b54:\n    case 0x8b58:\n      return setValueV3iArray;\n    // _VEC3\n    case 0x8b55:\n    case 0x8b59:\n      return setValueV4iArray;\n    // _VEC4\n\n    case 0x1405:\n      return setValueV1uiArray;\n    // UINT\n    case 0x8dc6:\n      return setValueV2uiArray;\n    // _VEC2\n    case 0x8dc7:\n      return setValueV3uiArray;\n    // _VEC3\n    case 0x8dc8:\n      return setValueV4uiArray;\n    // _VEC4\n\n    case 0x8b5e: // SAMPLER_2D\n    case 0x8d66: // SAMPLER_EXTERNAL_OES\n    case 0x8dca: // INT_SAMPLER_2D\n    case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n    case 0x8b62:\n      // SAMPLER_2D_SHADOW\n      return setValueT1Array;\n    case 0x8b5f: // SAMPLER_3D\n    case 0x8dcb: // INT_SAMPLER_3D\n    case 0x8dd3:\n      // UNSIGNED_INT_SAMPLER_3D\n      return setValueT3DArray;\n    case 0x8b60: // SAMPLER_CUBE\n    case 0x8dcc: // INT_SAMPLER_CUBE\n    case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n    case 0x8dc5:\n      // SAMPLER_CUBE_SHADOW\n      return setValueT6Array;\n    case 0x8dc1: // SAMPLER_2D_ARRAY\n    case 0x8dcf: // INT_SAMPLER_2D_ARRAY\n    case 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n    case 0x8dc4:\n      // SAMPLER_2D_ARRAY_SHADOW\n      return setValueT2DArrayArray;\n  }\n}\n\n// --- Uniform Classes ---\n\nclass SingleUniform {\n  constructor(id, activeInfo, addr) {\n    this.id = id;\n    this.addr = addr;\n    this.cache = [];\n    this.type = activeInfo.type;\n    this.setValue = getSingularSetter(activeInfo.type);\n\n    // this.path = activeInfo.name; // DEBUG\n  }\n}\nclass PureArrayUniform {\n  constructor(id, activeInfo, addr) {\n    this.id = id;\n    this.addr = addr;\n    this.cache = [];\n    this.type = activeInfo.type;\n    this.size = activeInfo.size;\n    this.setValue = getPureArraySetter(activeInfo.type);\n\n    // this.path = activeInfo.name; // DEBUG\n  }\n}\nclass StructuredUniform {\n  constructor(id) {\n    this.id = id;\n    this.seq = [];\n    this.map = {};\n  }\n  setValue(gl, value, textures) {\n    const seq = this.seq;\n    for (let i = 0, n = seq.length; i !== n; ++i) {\n      const u = seq[i];\n      u.setValue(gl, value[u.id], textures);\n    }\n  }\n}\n\n// --- Top-level ---\n\n// Parser - builds up the property tree from the path strings\n\nconst RePathPart = /(\\w+)(\\])?(\\[|\\.)?/g;\n\n// extracts\n// \t- the identifier (member name or array index)\n//  - followed by an optional right bracket (found when array index)\n//  - followed by an optional left bracket or dot (type of subscript)\n//\n// Note: These portions can be read in a non-overlapping fashion and\n// allow straightforward parsing of the hierarchy that WebGL encodes\n// in the uniform names.\n\nfunction addUniform(container, uniformObject) {\n  container.seq.push(uniformObject);\n  container.map[uniformObject.id] = uniformObject;\n}\nfunction parseUniform(activeInfo, addr, container) {\n  const path = activeInfo.name,\n    pathLength = path.length;\n\n  // reset RegExp object, because of the early exit of a previous run\n  RePathPart.lastIndex = 0;\n  while (true) {\n    const match = RePathPart.exec(path),\n      matchEnd = RePathPart.lastIndex;\n    let id = match[1];\n    const idIsIndex = match[2] === ']',\n      subscript = match[3];\n    if (idIsIndex) id = id | 0; // convert to integer\n\n    if (subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength) {\n      // bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n      addUniform(container, subscript === undefined ? new SingleUniform(id, activeInfo, addr) : new PureArrayUniform(id, activeInfo, addr));\n      break;\n    } else {\n      // step into inner node / create it in case it doesn't exist\n\n      const map = container.map;\n      let next = map[id];\n      if (next === undefined) {\n        next = new StructuredUniform(id);\n        addUniform(container, next);\n      }\n      container = next;\n    }\n  }\n}\n\n// Root Container\n\nclass WebGLUniforms {\n  constructor(gl, program) {\n    this.seq = [];\n    this.map = {};\n    const n = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n    for (let i = 0; i < n; ++i) {\n      const info = gl.getActiveUniform(program, i),\n        addr = gl.getUniformLocation(program, info.name);\n      parseUniform(info, addr, this);\n    }\n  }\n  setValue(gl, name, value, textures) {\n    const u = this.map[name];\n    if (u !== undefined) u.setValue(gl, value, textures);\n  }\n  setOptional(gl, object, name) {\n    const v = object[name];\n    if (v !== undefined) this.setValue(gl, name, v);\n  }\n  static upload(gl, seq, values, textures) {\n    for (let i = 0, n = seq.length; i !== n; ++i) {\n      const u = seq[i],\n        v = values[u.id];\n      if (v.needsUpdate !== false) {\n        // note: always updating when .needsUpdate is undefined\n        u.setValue(gl, v.value, textures);\n      }\n    }\n  }\n  static seqWithValue(seq, values) {\n    const r = [];\n    for (let i = 0, n = seq.length; i !== n; ++i) {\n      const u = seq[i];\n      if (u.id in values) r.push(u);\n    }\n    return r;\n  }\n}\nfunction WebGLShader(gl, type, string) {\n  const shader = gl.createShader(type);\n  gl.shaderSource(shader, string);\n  gl.compileShader(shader);\n  return shader;\n}\n\n// From https://www.khronos.org/registry/webgl/extensions/KHR_parallel_shader_compile/\nconst COMPLETION_STATUS_KHR = 0x91B1;\nlet programIdCount = 0;\nfunction handleSource(string, errorLine) {\n  const lines = string.split('\\n');\n  const lines2 = [];\n  const from = Math.max(errorLine - 6, 0);\n  const to = Math.min(errorLine + 6, lines.length);\n  for (let i = from; i < to; i++) {\n    const line = i + 1;\n    lines2.push(`${line === errorLine ? '>' : ' '} ${line}: ${lines[i]}`);\n  }\n  return lines2.join('\\n');\n}\nconst _m0 = /*@__PURE__*/new Matrix3();\nfunction getEncodingComponents(colorSpace) {\n  ColorManagement._getMatrix(_m0, ColorManagement.workingColorSpace, colorSpace);\n  const encodingMatrix = `mat3( ${_m0.elements.map(v => v.toFixed(4))} )`;\n  switch (ColorManagement.getTransfer(colorSpace)) {\n    case LinearTransfer:\n      return [encodingMatrix, 'LinearTransferOETF'];\n    case SRGBTransfer:\n      return [encodingMatrix, 'sRGBTransferOETF'];\n    default:\n      console.warn('THREE.WebGLProgram: Unsupported color space: ', colorSpace);\n      return [encodingMatrix, 'LinearTransferOETF'];\n  }\n}\nfunction getShaderErrors(gl, shader, type) {\n  const status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n  const errors = gl.getShaderInfoLog(shader).trim();\n  if (status && errors === '') return '';\n  const errorMatches = /ERROR: 0:(\\d+)/.exec(errors);\n  if (errorMatches) {\n    // --enable-privileged-webgl-extension\n    // console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n    const errorLine = parseInt(errorMatches[1]);\n    return type.toUpperCase() + '\\n\\n' + errors + '\\n\\n' + handleSource(gl.getShaderSource(shader), errorLine);\n  } else {\n    return errors;\n  }\n}\nfunction getTexelEncodingFunction(functionName, colorSpace) {\n  const components = getEncodingComponents(colorSpace);\n  return [`vec4 ${functionName}( vec4 value ) {`, `\treturn ${components[1]}( vec4( value.rgb * ${components[0]}, value.a ) );`, '}'].join('\\n');\n}\nfunction getToneMappingFunction(functionName, toneMapping) {\n  let toneMappingName;\n  switch (toneMapping) {\n    case LinearToneMapping:\n      toneMappingName = 'Linear';\n      break;\n    case ReinhardToneMapping:\n      toneMappingName = 'Reinhard';\n      break;\n    case CineonToneMapping:\n      toneMappingName = 'Cineon';\n      break;\n    case ACESFilmicToneMapping:\n      toneMappingName = 'ACESFilmic';\n      break;\n    case AgXToneMapping:\n      toneMappingName = 'AgX';\n      break;\n    case NeutralToneMapping:\n      toneMappingName = 'Neutral';\n      break;\n    case CustomToneMapping:\n      toneMappingName = 'Custom';\n      break;\n    default:\n      console.warn('THREE.WebGLProgram: Unsupported toneMapping:', toneMapping);\n      toneMappingName = 'Linear';\n  }\n  return 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n}\nconst _v0 = /*@__PURE__*/new Vector3();\nfunction getLuminanceFunction() {\n  ColorManagement.getLuminanceCoefficients(_v0);\n  const r = _v0.x.toFixed(4);\n  const g = _v0.y.toFixed(4);\n  const b = _v0.z.toFixed(4);\n  return ['float luminance( const in vec3 rgb ) {', `\tconst vec3 weights = vec3( ${r}, ${g}, ${b} );`, '\treturn dot( weights, rgb );', '}'].join('\\n');\n}\nfunction generateVertexExtensions(parameters) {\n  const chunks = [parameters.extensionClipCullDistance ? '#extension GL_ANGLE_clip_cull_distance : require' : '', parameters.extensionMultiDraw ? '#extension GL_ANGLE_multi_draw : require' : ''];\n  return chunks.filter(filterEmptyLine).join('\\n');\n}\nfunction generateDefines(defines) {\n  const chunks = [];\n  for (const name in defines) {\n    const value = defines[name];\n    if (value === false) continue;\n    chunks.push('#define ' + name + ' ' + value);\n  }\n  return chunks.join('\\n');\n}\nfunction fetchAttributeLocations(gl, program) {\n  const attributes = {};\n  const n = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n  for (let i = 0; i < n; i++) {\n    const info = gl.getActiveAttrib(program, i);\n    const name = info.name;\n    let locationSize = 1;\n    if (info.type === gl.FLOAT_MAT2) locationSize = 2;\n    if (info.type === gl.FLOAT_MAT3) locationSize = 3;\n    if (info.type === gl.FLOAT_MAT4) locationSize = 4;\n\n    // console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n    attributes[name] = {\n      type: info.type,\n      location: gl.getAttribLocation(program, name),\n      locationSize: locationSize\n    };\n  }\n  return attributes;\n}\nfunction filterEmptyLine(string) {\n  return string !== '';\n}\nfunction replaceLightNums(string, parameters) {\n  const numSpotLightCoords = parameters.numSpotLightShadows + parameters.numSpotLightMaps - parameters.numSpotLightShadowsWithMaps;\n  return string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g, parameters.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g, numSpotLightCoords).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, parameters.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);\n}\nfunction replaceClippingPlaneNums(string, parameters) {\n  return string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection);\n}\n\n// Resolve Includes\n\nconst includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\nfunction resolveIncludes(string) {\n  return string.replace(includePattern, includeReplacer);\n}\nconst shaderChunkMap = new Map();\nfunction includeReplacer(match, include) {\n  let string = ShaderChunk[include];\n  if (string === undefined) {\n    const newInclude = shaderChunkMap.get(include);\n    if (newInclude !== undefined) {\n      string = ShaderChunk[newInclude];\n      console.warn('THREE.WebGLRenderer: Shader chunk \"%s\" has been deprecated. Use \"%s\" instead.', include, newInclude);\n    } else {\n      throw new Error('Can not resolve #include <' + include + '>');\n    }\n  }\n  return resolveIncludes(string);\n}\n\n// Unroll Loops\n\nconst unrollLoopPattern = /#pragma unroll_loop_start\\s+for\\s*\\(\\s*int\\s+i\\s*=\\s*(\\d+)\\s*;\\s*i\\s*<\\s*(\\d+)\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{([\\s\\S]+?)}\\s+#pragma unroll_loop_end/g;\nfunction unrollLoops(string) {\n  return string.replace(unrollLoopPattern, loopReplacer);\n}\nfunction loopReplacer(match, start, end, snippet) {\n  let string = '';\n  for (let i = parseInt(start); i < parseInt(end); i++) {\n    string += snippet.replace(/\\[\\s*i\\s*\\]/g, '[ ' + i + ' ]').replace(/UNROLLED_LOOP_INDEX/g, i);\n  }\n  return string;\n}\n\n//\n\nfunction generatePrecision(parameters) {\n  let precisionstring = `precision ${parameters.precision} float;\n\tprecision ${parameters.precision} int;\n\tprecision ${parameters.precision} sampler2D;\n\tprecision ${parameters.precision} samplerCube;\n\tprecision ${parameters.precision} sampler3D;\n\tprecision ${parameters.precision} sampler2DArray;\n\tprecision ${parameters.precision} sampler2DShadow;\n\tprecision ${parameters.precision} samplerCubeShadow;\n\tprecision ${parameters.precision} sampler2DArrayShadow;\n\tprecision ${parameters.precision} isampler2D;\n\tprecision ${parameters.precision} isampler3D;\n\tprecision ${parameters.precision} isamplerCube;\n\tprecision ${parameters.precision} isampler2DArray;\n\tprecision ${parameters.precision} usampler2D;\n\tprecision ${parameters.precision} usampler3D;\n\tprecision ${parameters.precision} usamplerCube;\n\tprecision ${parameters.precision} usampler2DArray;\n\t`;\n  if (parameters.precision === 'highp') {\n    precisionstring += '\\n#define HIGH_PRECISION';\n  } else if (parameters.precision === 'mediump') {\n    precisionstring += '\\n#define MEDIUM_PRECISION';\n  } else if (parameters.precision === 'lowp') {\n    precisionstring += '\\n#define LOW_PRECISION';\n  }\n  return precisionstring;\n}\nfunction generateShadowMapTypeDefine(parameters) {\n  let shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n  if (parameters.shadowMapType === PCFShadowMap) {\n    shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n  } else if (parameters.shadowMapType === PCFSoftShadowMap) {\n    shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n  } else if (parameters.shadowMapType === VSMShadowMap) {\n    shadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\n  }\n  return shadowMapTypeDefine;\n}\nfunction generateEnvMapTypeDefine(parameters) {\n  let envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n  if (parameters.envMap) {\n    switch (parameters.envMapMode) {\n      case CubeReflectionMapping:\n      case CubeRefractionMapping:\n        envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n        break;\n      case CubeUVReflectionMapping:\n        envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n        break;\n    }\n  }\n  return envMapTypeDefine;\n}\nfunction generateEnvMapModeDefine(parameters) {\n  let envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n  if (parameters.envMap) {\n    switch (parameters.envMapMode) {\n      case CubeRefractionMapping:\n        envMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n        break;\n    }\n  }\n  return envMapModeDefine;\n}\nfunction generateEnvMapBlendingDefine(parameters) {\n  let envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';\n  if (parameters.envMap) {\n    switch (parameters.combine) {\n      case MultiplyOperation:\n        envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n        break;\n      case MixOperation:\n        envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n        break;\n      case AddOperation:\n        envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n        break;\n    }\n  }\n  return envMapBlendingDefine;\n}\nfunction generateCubeUVSize(parameters) {\n  const imageHeight = parameters.envMapCubeUVHeight;\n  if (imageHeight === null) return null;\n  const maxMip = Math.log2(imageHeight) - 2;\n  const texelHeight = 1.0 / imageHeight;\n  const texelWidth = 1.0 / (3 * Math.max(Math.pow(2, maxMip), 7 * 16));\n  return {\n    texelWidth,\n    texelHeight,\n    maxMip\n  };\n}\nfunction WebGLProgram(renderer, cacheKey, parameters, bindingStates) {\n  // TODO Send this event to Three.js DevTools\n  // console.log( 'WebGLProgram', cacheKey );\n\n  const gl = renderer.getContext();\n  const defines = parameters.defines;\n  let vertexShader = parameters.vertexShader;\n  let fragmentShader = parameters.fragmentShader;\n  const shadowMapTypeDefine = generateShadowMapTypeDefine(parameters);\n  const envMapTypeDefine = generateEnvMapTypeDefine(parameters);\n  const envMapModeDefine = generateEnvMapModeDefine(parameters);\n  const envMapBlendingDefine = generateEnvMapBlendingDefine(parameters);\n  const envMapCubeUVSize = generateCubeUVSize(parameters);\n  const customVertexExtensions = generateVertexExtensions(parameters);\n  const customDefines = generateDefines(defines);\n  const program = gl.createProgram();\n  let prefixVertex, prefixFragment;\n  let versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\\n' : '';\n  if (parameters.isRawShaderMaterial) {\n    prefixVertex = ['#define SHADER_TYPE ' + parameters.shaderType, '#define SHADER_NAME ' + parameters.shaderName, customDefines].filter(filterEmptyLine).join('\\n');\n    if (prefixVertex.length > 0) {\n      prefixVertex += '\\n';\n    }\n    prefixFragment = ['#define SHADER_TYPE ' + parameters.shaderType, '#define SHADER_NAME ' + parameters.shaderName, customDefines].filter(filterEmptyLine).join('\\n');\n    if (prefixFragment.length > 0) {\n      prefixFragment += '\\n';\n    }\n  } else {\n    prefixVertex = [generatePrecision(parameters), '#define SHADER_TYPE ' + parameters.shaderType, '#define SHADER_NAME ' + parameters.shaderName, customDefines, parameters.extensionClipCullDistance ? '#define USE_CLIP_DISTANCE' : '', parameters.batching ? '#define USE_BATCHING' : '', parameters.batchingColor ? '#define USE_BATCHING_COLOR' : '', parameters.instancing ? '#define USE_INSTANCING' : '', parameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '', parameters.instancingMorph ? '#define USE_INSTANCING_MORPH' : '', parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMapObjectSpace ? '#define USE_NORMALMAP_OBJECTSPACE' : '', parameters.normalMapTangentSpace ? '#define USE_NORMALMAP_TANGENTSPACE' : '', parameters.displacementMap ? '#define USE_DISPLACEMENTMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.anisotropy ? '#define USE_ANISOTROPY' : '', parameters.anisotropyMap ? '#define USE_ANISOTROPYMAP' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.iridescenceMap ? '#define USE_IRIDESCENCEMAP' : '', parameters.iridescenceThicknessMap ? '#define USE_IRIDESCENCE_THICKNESSMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.specularColorMap ? '#define USE_SPECULAR_COLORMAP' : '', parameters.specularIntensityMap ? '#define USE_SPECULAR_INTENSITYMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.alphaHash ? '#define USE_ALPHAHASH' : '', parameters.transmission ? '#define USE_TRANSMISSION' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '', parameters.sheenColorMap ? '#define USE_SHEEN_COLORMAP' : '', parameters.sheenRoughnessMap ? '#define USE_SHEEN_ROUGHNESSMAP' : '',\n    //\n\n    parameters.mapUv ? '#define MAP_UV ' + parameters.mapUv : '', parameters.alphaMapUv ? '#define ALPHAMAP_UV ' + parameters.alphaMapUv : '', parameters.lightMapUv ? '#define LIGHTMAP_UV ' + parameters.lightMapUv : '', parameters.aoMapUv ? '#define AOMAP_UV ' + parameters.aoMapUv : '', parameters.emissiveMapUv ? '#define EMISSIVEMAP_UV ' + parameters.emissiveMapUv : '', parameters.bumpMapUv ? '#define BUMPMAP_UV ' + parameters.bumpMapUv : '', parameters.normalMapUv ? '#define NORMALMAP_UV ' + parameters.normalMapUv : '', parameters.displacementMapUv ? '#define DISPLACEMENTMAP_UV ' + parameters.displacementMapUv : '', parameters.metalnessMapUv ? '#define METALNESSMAP_UV ' + parameters.metalnessMapUv : '', parameters.roughnessMapUv ? '#define ROUGHNESSMAP_UV ' + parameters.roughnessMapUv : '', parameters.anisotropyMapUv ? '#define ANISOTROPYMAP_UV ' + parameters.anisotropyMapUv : '', parameters.clearcoatMapUv ? '#define CLEARCOATMAP_UV ' + parameters.clearcoatMapUv : '', parameters.clearcoatNormalMapUv ? '#define CLEARCOAT_NORMALMAP_UV ' + parameters.clearcoatNormalMapUv : '', parameters.clearcoatRoughnessMapUv ? '#define CLEARCOAT_ROUGHNESSMAP_UV ' + parameters.clearcoatRoughnessMapUv : '', parameters.iridescenceMapUv ? '#define IRIDESCENCEMAP_UV ' + parameters.iridescenceMapUv : '', parameters.iridescenceThicknessMapUv ? '#define IRIDESCENCE_THICKNESSMAP_UV ' + parameters.iridescenceThicknessMapUv : '', parameters.sheenColorMapUv ? '#define SHEEN_COLORMAP_UV ' + parameters.sheenColorMapUv : '', parameters.sheenRoughnessMapUv ? '#define SHEEN_ROUGHNESSMAP_UV ' + parameters.sheenRoughnessMapUv : '', parameters.specularMapUv ? '#define SPECULARMAP_UV ' + parameters.specularMapUv : '', parameters.specularColorMapUv ? '#define SPECULAR_COLORMAP_UV ' + parameters.specularColorMapUv : '', parameters.specularIntensityMapUv ? '#define SPECULAR_INTENSITYMAP_UV ' + parameters.specularIntensityMapUv : '', parameters.transmissionMapUv ? '#define TRANSMISSIONMAP_UV ' + parameters.transmissionMapUv : '', parameters.thicknessMapUv ? '#define THICKNESSMAP_UV ' + parameters.thicknessMapUv : '',\n    //\n\n    parameters.vertexTangents && parameters.flatShading === false ? '#define USE_TANGENT' : '', parameters.vertexColors ? '#define USE_COLOR' : '', parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '', parameters.vertexUv1s ? '#define USE_UV1' : '', parameters.vertexUv2s ? '#define USE_UV2' : '', parameters.vertexUv3s ? '#define USE_UV3' : '', parameters.pointsUvs ? '#define USE_POINTS_UV' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.skinning ? '#define USE_SKINNING' : '', parameters.morphTargets ? '#define USE_MORPHTARGETS' : '', parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '', parameters.morphColors ? '#define USE_MORPHCOLORS' : '', parameters.morphTargetsCount > 0 ? '#define MORPHTARGETS_TEXTURE_STRIDE ' + parameters.morphTextureStride : '', parameters.morphTargetsCount > 0 ? '#define MORPHTARGETS_COUNT ' + parameters.morphTargetsCount : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '', parameters.numLightProbes > 0 ? '#define USE_LIGHT_PROBES' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.reverseDepthBuffer ? '#define USE_REVERSEDEPTHBUF' : '', 'uniform mat4 modelMatrix;', 'uniform mat4 modelViewMatrix;', 'uniform mat4 projectionMatrix;', 'uniform mat4 viewMatrix;', 'uniform mat3 normalMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', '#ifdef USE_INSTANCING', '\tattribute mat4 instanceMatrix;', '#endif', '#ifdef USE_INSTANCING_COLOR', '\tattribute vec3 instanceColor;', '#endif', '#ifdef USE_INSTANCING_MORPH', '\tuniform sampler2D morphTexture;', '#endif', 'attribute vec3 position;', 'attribute vec3 normal;', 'attribute vec2 uv;', '#ifdef USE_UV1', '\tattribute vec2 uv1;', '#endif', '#ifdef USE_UV2', '\tattribute vec2 uv2;', '#endif', '#ifdef USE_UV3', '\tattribute vec2 uv3;', '#endif', '#ifdef USE_TANGENT', '\tattribute vec4 tangent;', '#endif', '#if defined( USE_COLOR_ALPHA )', '\tattribute vec4 color;', '#elif defined( USE_COLOR )', '\tattribute vec3 color;', '#endif', '#ifdef USE_SKINNING', '\tattribute vec4 skinIndex;', '\tattribute vec4 skinWeight;', '#endif', '\\n'].filter(filterEmptyLine).join('\\n');\n    prefixFragment = [generatePrecision(parameters), '#define SHADER_TYPE ' + parameters.shaderType, '#define SHADER_NAME ' + parameters.shaderName, customDefines, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.alphaToCoverage ? '#define ALPHA_TO_COVERAGE' : '', parameters.map ? '#define USE_MAP' : '', parameters.matcap ? '#define USE_MATCAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapTypeDefine : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.envMap ? '#define ' + envMapBlendingDefine : '', envMapCubeUVSize ? '#define CUBEUV_TEXEL_WIDTH ' + envMapCubeUVSize.texelWidth : '', envMapCubeUVSize ? '#define CUBEUV_TEXEL_HEIGHT ' + envMapCubeUVSize.texelHeight : '', envMapCubeUVSize ? '#define CUBEUV_MAX_MIP ' + envMapCubeUVSize.maxMip + '.0' : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMapObjectSpace ? '#define USE_NORMALMAP_OBJECTSPACE' : '', parameters.normalMapTangentSpace ? '#define USE_NORMALMAP_TANGENTSPACE' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.anisotropy ? '#define USE_ANISOTROPY' : '', parameters.anisotropyMap ? '#define USE_ANISOTROPYMAP' : '', parameters.clearcoat ? '#define USE_CLEARCOAT' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.dispersion ? '#define USE_DISPERSION' : '', parameters.iridescence ? '#define USE_IRIDESCENCE' : '', parameters.iridescenceMap ? '#define USE_IRIDESCENCEMAP' : '', parameters.iridescenceThicknessMap ? '#define USE_IRIDESCENCE_THICKNESSMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.specularColorMap ? '#define USE_SPECULAR_COLORMAP' : '', parameters.specularIntensityMap ? '#define USE_SPECULAR_INTENSITYMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.alphaTest ? '#define USE_ALPHATEST' : '', parameters.alphaHash ? '#define USE_ALPHAHASH' : '', parameters.sheen ? '#define USE_SHEEN' : '', parameters.sheenColorMap ? '#define USE_SHEEN_COLORMAP' : '', parameters.sheenRoughnessMap ? '#define USE_SHEEN_ROUGHNESSMAP' : '', parameters.transmission ? '#define USE_TRANSMISSION' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '', parameters.vertexTangents && parameters.flatShading === false ? '#define USE_TANGENT' : '', parameters.vertexColors || parameters.instancingColor || parameters.batchingColor ? '#define USE_COLOR' : '', parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '', parameters.vertexUv1s ? '#define USE_UV1' : '', parameters.vertexUv2s ? '#define USE_UV2' : '', parameters.vertexUv3s ? '#define USE_UV3' : '', parameters.pointsUvs ? '#define USE_POINTS_UV' : '', parameters.gradientMap ? '#define USE_GRADIENTMAP' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '', parameters.numLightProbes > 0 ? '#define USE_LIGHT_PROBES' : '', parameters.decodeVideoTexture ? '#define DECODE_VIDEO_TEXTURE' : '', parameters.decodeVideoTextureEmissive ? '#define DECODE_VIDEO_TEXTURE_EMISSIVE' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.reverseDepthBuffer ? '#define USE_REVERSEDEPTHBUF' : '', 'uniform mat4 viewMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', parameters.toneMapping !== NoToneMapping ? '#define TONE_MAPPING' : '', parameters.toneMapping !== NoToneMapping ? ShaderChunk['tonemapping_pars_fragment'] : '',\n    // this code is required here because it is used by the toneMapping() function defined below\n    parameters.toneMapping !== NoToneMapping ? getToneMappingFunction('toneMapping', parameters.toneMapping) : '', parameters.dithering ? '#define DITHERING' : '', parameters.opaque ? '#define OPAQUE' : '', ShaderChunk['colorspace_pars_fragment'],\n    // this code is required here because it is used by the various encoding/decoding function defined below\n    getTexelEncodingFunction('linearToOutputTexel', parameters.outputColorSpace), getLuminanceFunction(), parameters.useDepthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '', '\\n'].filter(filterEmptyLine).join('\\n');\n  }\n  vertexShader = resolveIncludes(vertexShader);\n  vertexShader = replaceLightNums(vertexShader, parameters);\n  vertexShader = replaceClippingPlaneNums(vertexShader, parameters);\n  fragmentShader = resolveIncludes(fragmentShader);\n  fragmentShader = replaceLightNums(fragmentShader, parameters);\n  fragmentShader = replaceClippingPlaneNums(fragmentShader, parameters);\n  vertexShader = unrollLoops(vertexShader);\n  fragmentShader = unrollLoops(fragmentShader);\n  if (parameters.isRawShaderMaterial !== true) {\n    // GLSL 3.0 conversion for built-in materials and ShaderMaterial\n\n    versionString = '#version 300 es\\n';\n    prefixVertex = [customVertexExtensions, '#define attribute in', '#define varying out', '#define texture2D texture'].join('\\n') + '\\n' + prefixVertex;\n    prefixFragment = ['#define varying in', parameters.glslVersion === GLSL3 ? '' : 'layout(location = 0) out highp vec4 pc_fragColor;', parameters.glslVersion === GLSL3 ? '' : '#define gl_FragColor pc_fragColor', '#define gl_FragDepthEXT gl_FragDepth', '#define texture2D texture', '#define textureCube texture', '#define texture2DProj textureProj', '#define texture2DLodEXT textureLod', '#define texture2DProjLodEXT textureProjLod', '#define textureCubeLodEXT textureLod', '#define texture2DGradEXT textureGrad', '#define texture2DProjGradEXT textureProjGrad', '#define textureCubeGradEXT textureGrad'].join('\\n') + '\\n' + prefixFragment;\n  }\n  const vertexGlsl = versionString + prefixVertex + vertexShader;\n  const fragmentGlsl = versionString + prefixFragment + fragmentShader;\n\n  // console.log( '*VERTEX*', vertexGlsl );\n  // console.log( '*FRAGMENT*', fragmentGlsl );\n\n  const glVertexShader = WebGLShader(gl, gl.VERTEX_SHADER, vertexGlsl);\n  const glFragmentShader = WebGLShader(gl, gl.FRAGMENT_SHADER, fragmentGlsl);\n  gl.attachShader(program, glVertexShader);\n  gl.attachShader(program, glFragmentShader);\n\n  // Force a particular attribute to index 0.\n\n  if (parameters.index0AttributeName !== undefined) {\n    gl.bindAttribLocation(program, 0, parameters.index0AttributeName);\n  } else if (parameters.morphTargets === true) {\n    // programs with morphTargets displace position out of attribute 0\n    gl.bindAttribLocation(program, 0, 'position');\n  }\n  gl.linkProgram(program);\n  function onFirstUse(self) {\n    // check for link errors\n    if (renderer.debug.checkShaderErrors) {\n      const programLog = gl.getProgramInfoLog(program).trim();\n      const vertexLog = gl.getShaderInfoLog(glVertexShader).trim();\n      const fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();\n      let runnable = true;\n      let haveDiagnostics = true;\n      if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\n        runnable = false;\n        if (typeof renderer.debug.onShaderError === 'function') {\n          renderer.debug.onShaderError(gl, program, glVertexShader, glFragmentShader);\n        } else {\n          // default error reporting\n\n          const vertexErrors = getShaderErrors(gl, glVertexShader, 'vertex');\n          const fragmentErrors = getShaderErrors(gl, glFragmentShader, 'fragment');\n          console.error('THREE.WebGLProgram: Shader Error ' + gl.getError() + ' - ' + 'VALIDATE_STATUS ' + gl.getProgramParameter(program, gl.VALIDATE_STATUS) + '\\n\\n' + 'Material Name: ' + self.name + '\\n' + 'Material Type: ' + self.type + '\\n\\n' + 'Program Info Log: ' + programLog + '\\n' + vertexErrors + '\\n' + fragmentErrors);\n        }\n      } else if (programLog !== '') {\n        console.warn('THREE.WebGLProgram: Program Info Log:', programLog);\n      } else if (vertexLog === '' || fragmentLog === '') {\n        haveDiagnostics = false;\n      }\n      if (haveDiagnostics) {\n        self.diagnostics = {\n          runnable: runnable,\n          programLog: programLog,\n          vertexShader: {\n            log: vertexLog,\n            prefix: prefixVertex\n          },\n          fragmentShader: {\n            log: fragmentLog,\n            prefix: prefixFragment\n          }\n        };\n      }\n    }\n\n    // Clean up\n\n    // Crashes in iOS9 and iOS10. #18402\n    // gl.detachShader( program, glVertexShader );\n    // gl.detachShader( program, glFragmentShader );\n\n    gl.deleteShader(glVertexShader);\n    gl.deleteShader(glFragmentShader);\n    cachedUniforms = new WebGLUniforms(gl, program);\n    cachedAttributes = fetchAttributeLocations(gl, program);\n  }\n\n  // set up caching for uniform locations\n\n  let cachedUniforms;\n  this.getUniforms = function () {\n    if (cachedUniforms === undefined) {\n      // Populates cachedUniforms and cachedAttributes\n      onFirstUse(this);\n    }\n    return cachedUniforms;\n  };\n\n  // set up caching for attribute locations\n\n  let cachedAttributes;\n  this.getAttributes = function () {\n    if (cachedAttributes === undefined) {\n      // Populates cachedAttributes and cachedUniforms\n      onFirstUse(this);\n    }\n    return cachedAttributes;\n  };\n\n  // indicate when the program is ready to be used. if the KHR_parallel_shader_compile extension isn't supported,\n  // flag the program as ready immediately. It may cause a stall when it's first used.\n\n  let programReady = parameters.rendererExtensionParallelShaderCompile === false;\n  this.isReady = function () {\n    if (programReady === false) {\n      programReady = gl.getProgramParameter(program, COMPLETION_STATUS_KHR);\n    }\n    return programReady;\n  };\n\n  // free resource\n\n  this.destroy = function () {\n    bindingStates.releaseStatesOfProgram(this);\n    gl.deleteProgram(program);\n    this.program = undefined;\n  };\n\n  //\n\n  this.type = parameters.shaderType;\n  this.name = parameters.shaderName;\n  this.id = programIdCount++;\n  this.cacheKey = cacheKey;\n  this.usedTimes = 1;\n  this.program = program;\n  this.vertexShader = glVertexShader;\n  this.fragmentShader = glFragmentShader;\n  return this;\n}\nlet _id = 0;\nclass WebGLShaderCache {\n  constructor() {\n    this.shaderCache = new Map();\n    this.materialCache = new Map();\n  }\n  update(material) {\n    const vertexShader = material.vertexShader;\n    const fragmentShader = material.fragmentShader;\n    const vertexShaderStage = this._getShaderStage(vertexShader);\n    const fragmentShaderStage = this._getShaderStage(fragmentShader);\n    const materialShaders = this._getShaderCacheForMaterial(material);\n    if (materialShaders.has(vertexShaderStage) === false) {\n      materialShaders.add(vertexShaderStage);\n      vertexShaderStage.usedTimes++;\n    }\n    if (materialShaders.has(fragmentShaderStage) === false) {\n      materialShaders.add(fragmentShaderStage);\n      fragmentShaderStage.usedTimes++;\n    }\n    return this;\n  }\n  remove(material) {\n    const materialShaders = this.materialCache.get(material);\n    for (const shaderStage of materialShaders) {\n      shaderStage.usedTimes--;\n      if (shaderStage.usedTimes === 0) this.shaderCache.delete(shaderStage.code);\n    }\n    this.materialCache.delete(material);\n    return this;\n  }\n  getVertexShaderID(material) {\n    return this._getShaderStage(material.vertexShader).id;\n  }\n  getFragmentShaderID(material) {\n    return this._getShaderStage(material.fragmentShader).id;\n  }\n  dispose() {\n    this.shaderCache.clear();\n    this.materialCache.clear();\n  }\n  _getShaderCacheForMaterial(material) {\n    const cache = this.materialCache;\n    let set = cache.get(material);\n    if (set === undefined) {\n      set = new Set();\n      cache.set(material, set);\n    }\n    return set;\n  }\n  _getShaderStage(code) {\n    const cache = this.shaderCache;\n    let stage = cache.get(code);\n    if (stage === undefined) {\n      stage = new WebGLShaderStage(code);\n      cache.set(code, stage);\n    }\n    return stage;\n  }\n}\nclass WebGLShaderStage {\n  constructor(code) {\n    this.id = _id++;\n    this.code = code;\n    this.usedTimes = 0;\n  }\n}\nfunction WebGLPrograms(renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping) {\n  const _programLayers = new Layers();\n  const _customShaders = new WebGLShaderCache();\n  const _activeChannels = new Set();\n  const programs = [];\n  const logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n  const SUPPORTS_VERTEX_TEXTURES = capabilities.vertexTextures;\n  let precision = capabilities.precision;\n  const shaderIDs = {\n    MeshDepthMaterial: 'depth',\n    MeshDistanceMaterial: 'distanceRGBA',\n    MeshNormalMaterial: 'normal',\n    MeshBasicMaterial: 'basic',\n    MeshLambertMaterial: 'lambert',\n    MeshPhongMaterial: 'phong',\n    MeshToonMaterial: 'toon',\n    MeshStandardMaterial: 'physical',\n    MeshPhysicalMaterial: 'physical',\n    MeshMatcapMaterial: 'matcap',\n    LineBasicMaterial: 'basic',\n    LineDashedMaterial: 'dashed',\n    PointsMaterial: 'points',\n    ShadowMaterial: 'shadow',\n    SpriteMaterial: 'sprite'\n  };\n  function getChannel(value) {\n    _activeChannels.add(value);\n    if (value === 0) return 'uv';\n    return `uv${value}`;\n  }\n  function getParameters(material, lights, shadows, scene, object) {\n    const fog = scene.fog;\n    const geometry = object.geometry;\n    const environment = material.isMeshStandardMaterial ? scene.environment : null;\n    const envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);\n    const envMapCubeUVHeight = !!envMap && envMap.mapping === CubeUVReflectionMapping ? envMap.image.height : null;\n    const shaderID = shaderIDs[material.type];\n\n    // heuristics to create shader parameters according to lights in the scene\n    // (not to blow over maxLights budget)\n\n    if (material.precision !== null) {\n      precision = capabilities.getMaxPrecision(material.precision);\n      if (precision !== material.precision) {\n        console.warn('THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.');\n      }\n    }\n\n    //\n\n    const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;\n    const morphTargetsCount = morphAttribute !== undefined ? morphAttribute.length : 0;\n    let morphTextureStride = 0;\n    if (geometry.morphAttributes.position !== undefined) morphTextureStride = 1;\n    if (geometry.morphAttributes.normal !== undefined) morphTextureStride = 2;\n    if (geometry.morphAttributes.color !== undefined) morphTextureStride = 3;\n\n    //\n\n    let vertexShader, fragmentShader;\n    let customVertexShaderID, customFragmentShaderID;\n    if (shaderID) {\n      const shader = ShaderLib[shaderID];\n      vertexShader = shader.vertexShader;\n      fragmentShader = shader.fragmentShader;\n    } else {\n      vertexShader = material.vertexShader;\n      fragmentShader = material.fragmentShader;\n      _customShaders.update(material);\n      customVertexShaderID = _customShaders.getVertexShaderID(material);\n      customFragmentShaderID = _customShaders.getFragmentShaderID(material);\n    }\n    const currentRenderTarget = renderer.getRenderTarget();\n    const reverseDepthBuffer = renderer.state.buffers.depth.getReversed();\n    const IS_INSTANCEDMESH = object.isInstancedMesh === true;\n    const IS_BATCHEDMESH = object.isBatchedMesh === true;\n    const HAS_MAP = !!material.map;\n    const HAS_MATCAP = !!material.matcap;\n    const HAS_ENVMAP = !!envMap;\n    const HAS_AOMAP = !!material.aoMap;\n    const HAS_LIGHTMAP = !!material.lightMap;\n    const HAS_BUMPMAP = !!material.bumpMap;\n    const HAS_NORMALMAP = !!material.normalMap;\n    const HAS_DISPLACEMENTMAP = !!material.displacementMap;\n    const HAS_EMISSIVEMAP = !!material.emissiveMap;\n    const HAS_METALNESSMAP = !!material.metalnessMap;\n    const HAS_ROUGHNESSMAP = !!material.roughnessMap;\n    const HAS_ANISOTROPY = material.anisotropy > 0;\n    const HAS_CLEARCOAT = material.clearcoat > 0;\n    const HAS_DISPERSION = material.dispersion > 0;\n    const HAS_IRIDESCENCE = material.iridescence > 0;\n    const HAS_SHEEN = material.sheen > 0;\n    const HAS_TRANSMISSION = material.transmission > 0;\n    const HAS_ANISOTROPYMAP = HAS_ANISOTROPY && !!material.anisotropyMap;\n    const HAS_CLEARCOATMAP = HAS_CLEARCOAT && !!material.clearcoatMap;\n    const HAS_CLEARCOAT_NORMALMAP = HAS_CLEARCOAT && !!material.clearcoatNormalMap;\n    const HAS_CLEARCOAT_ROUGHNESSMAP = HAS_CLEARCOAT && !!material.clearcoatRoughnessMap;\n    const HAS_IRIDESCENCEMAP = HAS_IRIDESCENCE && !!material.iridescenceMap;\n    const HAS_IRIDESCENCE_THICKNESSMAP = HAS_IRIDESCENCE && !!material.iridescenceThicknessMap;\n    const HAS_SHEEN_COLORMAP = HAS_SHEEN && !!material.sheenColorMap;\n    const HAS_SHEEN_ROUGHNESSMAP = HAS_SHEEN && !!material.sheenRoughnessMap;\n    const HAS_SPECULARMAP = !!material.specularMap;\n    const HAS_SPECULAR_COLORMAP = !!material.specularColorMap;\n    const HAS_SPECULAR_INTENSITYMAP = !!material.specularIntensityMap;\n    const HAS_TRANSMISSIONMAP = HAS_TRANSMISSION && !!material.transmissionMap;\n    const HAS_THICKNESSMAP = HAS_TRANSMISSION && !!material.thicknessMap;\n    const HAS_GRADIENTMAP = !!material.gradientMap;\n    const HAS_ALPHAMAP = !!material.alphaMap;\n    const HAS_ALPHATEST = material.alphaTest > 0;\n    const HAS_ALPHAHASH = !!material.alphaHash;\n    const HAS_EXTENSIONS = !!material.extensions;\n    let toneMapping = NoToneMapping;\n    if (material.toneMapped) {\n      if (currentRenderTarget === null || currentRenderTarget.isXRRenderTarget === true) {\n        toneMapping = renderer.toneMapping;\n      }\n    }\n    const parameters = {\n      shaderID: shaderID,\n      shaderType: material.type,\n      shaderName: material.name,\n      vertexShader: vertexShader,\n      fragmentShader: fragmentShader,\n      defines: material.defines,\n      customVertexShaderID: customVertexShaderID,\n      customFragmentShaderID: customFragmentShaderID,\n      isRawShaderMaterial: material.isRawShaderMaterial === true,\n      glslVersion: material.glslVersion,\n      precision: precision,\n      batching: IS_BATCHEDMESH,\n      batchingColor: IS_BATCHEDMESH && object._colorsTexture !== null,\n      instancing: IS_INSTANCEDMESH,\n      instancingColor: IS_INSTANCEDMESH && object.instanceColor !== null,\n      instancingMorph: IS_INSTANCEDMESH && object.morphTexture !== null,\n      supportsVertexTextures: SUPPORTS_VERTEX_TEXTURES,\n      outputColorSpace: currentRenderTarget === null ? renderer.outputColorSpace : currentRenderTarget.isXRRenderTarget === true ? currentRenderTarget.texture.colorSpace : LinearSRGBColorSpace,\n      alphaToCoverage: !!material.alphaToCoverage,\n      map: HAS_MAP,\n      matcap: HAS_MATCAP,\n      envMap: HAS_ENVMAP,\n      envMapMode: HAS_ENVMAP && envMap.mapping,\n      envMapCubeUVHeight: envMapCubeUVHeight,\n      aoMap: HAS_AOMAP,\n      lightMap: HAS_LIGHTMAP,\n      bumpMap: HAS_BUMPMAP,\n      normalMap: HAS_NORMALMAP,\n      displacementMap: SUPPORTS_VERTEX_TEXTURES && HAS_DISPLACEMENTMAP,\n      emissiveMap: HAS_EMISSIVEMAP,\n      normalMapObjectSpace: HAS_NORMALMAP && material.normalMapType === ObjectSpaceNormalMap,\n      normalMapTangentSpace: HAS_NORMALMAP && material.normalMapType === TangentSpaceNormalMap,\n      metalnessMap: HAS_METALNESSMAP,\n      roughnessMap: HAS_ROUGHNESSMAP,\n      anisotropy: HAS_ANISOTROPY,\n      anisotropyMap: HAS_ANISOTROPYMAP,\n      clearcoat: HAS_CLEARCOAT,\n      clearcoatMap: HAS_CLEARCOATMAP,\n      clearcoatNormalMap: HAS_CLEARCOAT_NORMALMAP,\n      clearcoatRoughnessMap: HAS_CLEARCOAT_ROUGHNESSMAP,\n      dispersion: HAS_DISPERSION,\n      iridescence: HAS_IRIDESCENCE,\n      iridescenceMap: HAS_IRIDESCENCEMAP,\n      iridescenceThicknessMap: HAS_IRIDESCENCE_THICKNESSMAP,\n      sheen: HAS_SHEEN,\n      sheenColorMap: HAS_SHEEN_COLORMAP,\n      sheenRoughnessMap: HAS_SHEEN_ROUGHNESSMAP,\n      specularMap: HAS_SPECULARMAP,\n      specularColorMap: HAS_SPECULAR_COLORMAP,\n      specularIntensityMap: HAS_SPECULAR_INTENSITYMAP,\n      transmission: HAS_TRANSMISSION,\n      transmissionMap: HAS_TRANSMISSIONMAP,\n      thicknessMap: HAS_THICKNESSMAP,\n      gradientMap: HAS_GRADIENTMAP,\n      opaque: material.transparent === false && material.blending === NormalBlending && material.alphaToCoverage === false,\n      alphaMap: HAS_ALPHAMAP,\n      alphaTest: HAS_ALPHATEST,\n      alphaHash: HAS_ALPHAHASH,\n      combine: material.combine,\n      //\n\n      mapUv: HAS_MAP && getChannel(material.map.channel),\n      aoMapUv: HAS_AOMAP && getChannel(material.aoMap.channel),\n      lightMapUv: HAS_LIGHTMAP && getChannel(material.lightMap.channel),\n      bumpMapUv: HAS_BUMPMAP && getChannel(material.bumpMap.channel),\n      normalMapUv: HAS_NORMALMAP && getChannel(material.normalMap.channel),\n      displacementMapUv: HAS_DISPLACEMENTMAP && getChannel(material.displacementMap.channel),\n      emissiveMapUv: HAS_EMISSIVEMAP && getChannel(material.emissiveMap.channel),\n      metalnessMapUv: HAS_METALNESSMAP && getChannel(material.metalnessMap.channel),\n      roughnessMapUv: HAS_ROUGHNESSMAP && getChannel(material.roughnessMap.channel),\n      anisotropyMapUv: HAS_ANISOTROPYMAP && getChannel(material.anisotropyMap.channel),\n      clearcoatMapUv: HAS_CLEARCOATMAP && getChannel(material.clearcoatMap.channel),\n      clearcoatNormalMapUv: HAS_CLEARCOAT_NORMALMAP && getChannel(material.clearcoatNormalMap.channel),\n      clearcoatRoughnessMapUv: HAS_CLEARCOAT_ROUGHNESSMAP && getChannel(material.clearcoatRoughnessMap.channel),\n      iridescenceMapUv: HAS_IRIDESCENCEMAP && getChannel(material.iridescenceMap.channel),\n      iridescenceThicknessMapUv: HAS_IRIDESCENCE_THICKNESSMAP && getChannel(material.iridescenceThicknessMap.channel),\n      sheenColorMapUv: HAS_SHEEN_COLORMAP && getChannel(material.sheenColorMap.channel),\n      sheenRoughnessMapUv: HAS_SHEEN_ROUGHNESSMAP && getChannel(material.sheenRoughnessMap.channel),\n      specularMapUv: HAS_SPECULARMAP && getChannel(material.specularMap.channel),\n      specularColorMapUv: HAS_SPECULAR_COLORMAP && getChannel(material.specularColorMap.channel),\n      specularIntensityMapUv: HAS_SPECULAR_INTENSITYMAP && getChannel(material.specularIntensityMap.channel),\n      transmissionMapUv: HAS_TRANSMISSIONMAP && getChannel(material.transmissionMap.channel),\n      thicknessMapUv: HAS_THICKNESSMAP && getChannel(material.thicknessMap.channel),\n      alphaMapUv: HAS_ALPHAMAP && getChannel(material.alphaMap.channel),\n      //\n\n      vertexTangents: !!geometry.attributes.tangent && (HAS_NORMALMAP || HAS_ANISOTROPY),\n      vertexColors: material.vertexColors,\n      vertexAlphas: material.vertexColors === true && !!geometry.attributes.color && geometry.attributes.color.itemSize === 4,\n      pointsUvs: object.isPoints === true && !!geometry.attributes.uv && (HAS_MAP || HAS_ALPHAMAP),\n      fog: !!fog,\n      useFog: material.fog === true,\n      fogExp2: !!fog && fog.isFogExp2,\n      flatShading: material.flatShading === true,\n      sizeAttenuation: material.sizeAttenuation === true,\n      logarithmicDepthBuffer: logarithmicDepthBuffer,\n      reverseDepthBuffer: reverseDepthBuffer,\n      skinning: object.isSkinnedMesh === true,\n      morphTargets: geometry.morphAttributes.position !== undefined,\n      morphNormals: geometry.morphAttributes.normal !== undefined,\n      morphColors: geometry.morphAttributes.color !== undefined,\n      morphTargetsCount: morphTargetsCount,\n      morphTextureStride: morphTextureStride,\n      numDirLights: lights.directional.length,\n      numPointLights: lights.point.length,\n      numSpotLights: lights.spot.length,\n      numSpotLightMaps: lights.spotLightMap.length,\n      numRectAreaLights: lights.rectArea.length,\n      numHemiLights: lights.hemi.length,\n      numDirLightShadows: lights.directionalShadowMap.length,\n      numPointLightShadows: lights.pointShadowMap.length,\n      numSpotLightShadows: lights.spotShadowMap.length,\n      numSpotLightShadowsWithMaps: lights.numSpotLightShadowsWithMaps,\n      numLightProbes: lights.numLightProbes,\n      numClippingPlanes: clipping.numPlanes,\n      numClipIntersection: clipping.numIntersection,\n      dithering: material.dithering,\n      shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n      shadowMapType: renderer.shadowMap.type,\n      toneMapping: toneMapping,\n      decodeVideoTexture: HAS_MAP && material.map.isVideoTexture === true && ColorManagement.getTransfer(material.map.colorSpace) === SRGBTransfer,\n      decodeVideoTextureEmissive: HAS_EMISSIVEMAP && material.emissiveMap.isVideoTexture === true && ColorManagement.getTransfer(material.emissiveMap.colorSpace) === SRGBTransfer,\n      premultipliedAlpha: material.premultipliedAlpha,\n      doubleSided: material.side === DoubleSide,\n      flipSided: material.side === BackSide,\n      useDepthPacking: material.depthPacking >= 0,\n      depthPacking: material.depthPacking || 0,\n      index0AttributeName: material.index0AttributeName,\n      extensionClipCullDistance: HAS_EXTENSIONS && material.extensions.clipCullDistance === true && extensions.has('WEBGL_clip_cull_distance'),\n      extensionMultiDraw: (HAS_EXTENSIONS && material.extensions.multiDraw === true || IS_BATCHEDMESH) && extensions.has('WEBGL_multi_draw'),\n      rendererExtensionParallelShaderCompile: extensions.has('KHR_parallel_shader_compile'),\n      customProgramCacheKey: material.customProgramCacheKey()\n    };\n\n    // the usage of getChannel() determines the active texture channels for this shader\n\n    parameters.vertexUv1s = _activeChannels.has(1);\n    parameters.vertexUv2s = _activeChannels.has(2);\n    parameters.vertexUv3s = _activeChannels.has(3);\n    _activeChannels.clear();\n    return parameters;\n  }\n  function getProgramCacheKey(parameters) {\n    const array = [];\n    if (parameters.shaderID) {\n      array.push(parameters.shaderID);\n    } else {\n      array.push(parameters.customVertexShaderID);\n      array.push(parameters.customFragmentShaderID);\n    }\n    if (parameters.defines !== undefined) {\n      for (const name in parameters.defines) {\n        array.push(name);\n        array.push(parameters.defines[name]);\n      }\n    }\n    if (parameters.isRawShaderMaterial === false) {\n      getProgramCacheKeyParameters(array, parameters);\n      getProgramCacheKeyBooleans(array, parameters);\n      array.push(renderer.outputColorSpace);\n    }\n    array.push(parameters.customProgramCacheKey);\n    return array.join();\n  }\n  function getProgramCacheKeyParameters(array, parameters) {\n    array.push(parameters.precision);\n    array.push(parameters.outputColorSpace);\n    array.push(parameters.envMapMode);\n    array.push(parameters.envMapCubeUVHeight);\n    array.push(parameters.mapUv);\n    array.push(parameters.alphaMapUv);\n    array.push(parameters.lightMapUv);\n    array.push(parameters.aoMapUv);\n    array.push(parameters.bumpMapUv);\n    array.push(parameters.normalMapUv);\n    array.push(parameters.displacementMapUv);\n    array.push(parameters.emissiveMapUv);\n    array.push(parameters.metalnessMapUv);\n    array.push(parameters.roughnessMapUv);\n    array.push(parameters.anisotropyMapUv);\n    array.push(parameters.clearcoatMapUv);\n    array.push(parameters.clearcoatNormalMapUv);\n    array.push(parameters.clearcoatRoughnessMapUv);\n    array.push(parameters.iridescenceMapUv);\n    array.push(parameters.iridescenceThicknessMapUv);\n    array.push(parameters.sheenColorMapUv);\n    array.push(parameters.sheenRoughnessMapUv);\n    array.push(parameters.specularMapUv);\n    array.push(parameters.specularColorMapUv);\n    array.push(parameters.specularIntensityMapUv);\n    array.push(parameters.transmissionMapUv);\n    array.push(parameters.thicknessMapUv);\n    array.push(parameters.combine);\n    array.push(parameters.fogExp2);\n    array.push(parameters.sizeAttenuation);\n    array.push(parameters.morphTargetsCount);\n    array.push(parameters.morphAttributeCount);\n    array.push(parameters.numDirLights);\n    array.push(parameters.numPointLights);\n    array.push(parameters.numSpotLights);\n    array.push(parameters.numSpotLightMaps);\n    array.push(parameters.numHemiLights);\n    array.push(parameters.numRectAreaLights);\n    array.push(parameters.numDirLightShadows);\n    array.push(parameters.numPointLightShadows);\n    array.push(parameters.numSpotLightShadows);\n    array.push(parameters.numSpotLightShadowsWithMaps);\n    array.push(parameters.numLightProbes);\n    array.push(parameters.shadowMapType);\n    array.push(parameters.toneMapping);\n    array.push(parameters.numClippingPlanes);\n    array.push(parameters.numClipIntersection);\n    array.push(parameters.depthPacking);\n  }\n  function getProgramCacheKeyBooleans(array, parameters) {\n    _programLayers.disableAll();\n    if (parameters.supportsVertexTextures) _programLayers.enable(0);\n    if (parameters.instancing) _programLayers.enable(1);\n    if (parameters.instancingColor) _programLayers.enable(2);\n    if (parameters.instancingMorph) _programLayers.enable(3);\n    if (parameters.matcap) _programLayers.enable(4);\n    if (parameters.envMap) _programLayers.enable(5);\n    if (parameters.normalMapObjectSpace) _programLayers.enable(6);\n    if (parameters.normalMapTangentSpace) _programLayers.enable(7);\n    if (parameters.clearcoat) _programLayers.enable(8);\n    if (parameters.iridescence) _programLayers.enable(9);\n    if (parameters.alphaTest) _programLayers.enable(10);\n    if (parameters.vertexColors) _programLayers.enable(11);\n    if (parameters.vertexAlphas) _programLayers.enable(12);\n    if (parameters.vertexUv1s) _programLayers.enable(13);\n    if (parameters.vertexUv2s) _programLayers.enable(14);\n    if (parameters.vertexUv3s) _programLayers.enable(15);\n    if (parameters.vertexTangents) _programLayers.enable(16);\n    if (parameters.anisotropy) _programLayers.enable(17);\n    if (parameters.alphaHash) _programLayers.enable(18);\n    if (parameters.batching) _programLayers.enable(19);\n    if (parameters.dispersion) _programLayers.enable(20);\n    if (parameters.batchingColor) _programLayers.enable(21);\n    array.push(_programLayers.mask);\n    _programLayers.disableAll();\n    if (parameters.fog) _programLayers.enable(0);\n    if (parameters.useFog) _programLayers.enable(1);\n    if (parameters.flatShading) _programLayers.enable(2);\n    if (parameters.logarithmicDepthBuffer) _programLayers.enable(3);\n    if (parameters.reverseDepthBuffer) _programLayers.enable(4);\n    if (parameters.skinning) _programLayers.enable(5);\n    if (parameters.morphTargets) _programLayers.enable(6);\n    if (parameters.morphNormals) _programLayers.enable(7);\n    if (parameters.morphColors) _programLayers.enable(8);\n    if (parameters.premultipliedAlpha) _programLayers.enable(9);\n    if (parameters.shadowMapEnabled) _programLayers.enable(10);\n    if (parameters.doubleSided) _programLayers.enable(11);\n    if (parameters.flipSided) _programLayers.enable(12);\n    if (parameters.useDepthPacking) _programLayers.enable(13);\n    if (parameters.dithering) _programLayers.enable(14);\n    if (parameters.transmission) _programLayers.enable(15);\n    if (parameters.sheen) _programLayers.enable(16);\n    if (parameters.opaque) _programLayers.enable(17);\n    if (parameters.pointsUvs) _programLayers.enable(18);\n    if (parameters.decodeVideoTexture) _programLayers.enable(19);\n    if (parameters.decodeVideoTextureEmissive) _programLayers.enable(20);\n    if (parameters.alphaToCoverage) _programLayers.enable(21);\n    array.push(_programLayers.mask);\n  }\n  function getUniforms(material) {\n    const shaderID = shaderIDs[material.type];\n    let uniforms;\n    if (shaderID) {\n      const shader = ShaderLib[shaderID];\n      uniforms = UniformsUtils.clone(shader.uniforms);\n    } else {\n      uniforms = material.uniforms;\n    }\n    return uniforms;\n  }\n  function acquireProgram(parameters, cacheKey) {\n    let program;\n\n    // Check if code has been already compiled\n    for (let p = 0, pl = programs.length; p < pl; p++) {\n      const preexistingProgram = programs[p];\n      if (preexistingProgram.cacheKey === cacheKey) {\n        program = preexistingProgram;\n        ++program.usedTimes;\n        break;\n      }\n    }\n    if (program === undefined) {\n      program = new WebGLProgram(renderer, cacheKey, parameters, bindingStates);\n      programs.push(program);\n    }\n    return program;\n  }\n  function releaseProgram(program) {\n    if (--program.usedTimes === 0) {\n      // Remove from unordered set\n      const i = programs.indexOf(program);\n      programs[i] = programs[programs.length - 1];\n      programs.pop();\n\n      // Free WebGL resources\n      program.destroy();\n    }\n  }\n  function releaseShaderCache(material) {\n    _customShaders.remove(material);\n  }\n  function dispose() {\n    _customShaders.dispose();\n  }\n  return {\n    getParameters: getParameters,\n    getProgramCacheKey: getProgramCacheKey,\n    getUniforms: getUniforms,\n    acquireProgram: acquireProgram,\n    releaseProgram: releaseProgram,\n    releaseShaderCache: releaseShaderCache,\n    // Exposed for resource monitoring & error feedback via renderer.info:\n    programs: programs,\n    dispose: dispose\n  };\n}\nfunction WebGLProperties() {\n  let properties = new WeakMap();\n  function has(object) {\n    return properties.has(object);\n  }\n  function get(object) {\n    let map = properties.get(object);\n    if (map === undefined) {\n      map = {};\n      properties.set(object, map);\n    }\n    return map;\n  }\n  function remove(object) {\n    properties.delete(object);\n  }\n  function update(object, key, value) {\n    properties.get(object)[key] = value;\n  }\n  function dispose() {\n    properties = new WeakMap();\n  }\n  return {\n    has: has,\n    get: get,\n    remove: remove,\n    update: update,\n    dispose: dispose\n  };\n}\nfunction painterSortStable(a, b) {\n  if (a.groupOrder !== b.groupOrder) {\n    return a.groupOrder - b.groupOrder;\n  } else if (a.renderOrder !== b.renderOrder) {\n    return a.renderOrder - b.renderOrder;\n  } else if (a.material.id !== b.material.id) {\n    return a.material.id - b.material.id;\n  } else if (a.z !== b.z) {\n    return a.z - b.z;\n  } else {\n    return a.id - b.id;\n  }\n}\nfunction reversePainterSortStable(a, b) {\n  if (a.groupOrder !== b.groupOrder) {\n    return a.groupOrder - b.groupOrder;\n  } else if (a.renderOrder !== b.renderOrder) {\n    return a.renderOrder - b.renderOrder;\n  } else if (a.z !== b.z) {\n    return b.z - a.z;\n  } else {\n    return a.id - b.id;\n  }\n}\nfunction WebGLRenderList() {\n  const renderItems = [];\n  let renderItemsIndex = 0;\n  const opaque = [];\n  const transmissive = [];\n  const transparent = [];\n  function init() {\n    renderItemsIndex = 0;\n    opaque.length = 0;\n    transmissive.length = 0;\n    transparent.length = 0;\n  }\n  function getNextRenderItem(object, geometry, material, groupOrder, z, group) {\n    let renderItem = renderItems[renderItemsIndex];\n    if (renderItem === undefined) {\n      renderItem = {\n        id: object.id,\n        object: object,\n        geometry: geometry,\n        material: material,\n        groupOrder: groupOrder,\n        renderOrder: object.renderOrder,\n        z: z,\n        group: group\n      };\n      renderItems[renderItemsIndex] = renderItem;\n    } else {\n      renderItem.id = object.id;\n      renderItem.object = object;\n      renderItem.geometry = geometry;\n      renderItem.material = material;\n      renderItem.groupOrder = groupOrder;\n      renderItem.renderOrder = object.renderOrder;\n      renderItem.z = z;\n      renderItem.group = group;\n    }\n    renderItemsIndex++;\n    return renderItem;\n  }\n  function push(object, geometry, material, groupOrder, z, group) {\n    const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);\n    if (material.transmission > 0.0) {\n      transmissive.push(renderItem);\n    } else if (material.transparent === true) {\n      transparent.push(renderItem);\n    } else {\n      opaque.push(renderItem);\n    }\n  }\n  function unshift(object, geometry, material, groupOrder, z, group) {\n    const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);\n    if (material.transmission > 0.0) {\n      transmissive.unshift(renderItem);\n    } else if (material.transparent === true) {\n      transparent.unshift(renderItem);\n    } else {\n      opaque.unshift(renderItem);\n    }\n  }\n  function sort(customOpaqueSort, customTransparentSort) {\n    if (opaque.length > 1) opaque.sort(customOpaqueSort || painterSortStable);\n    if (transmissive.length > 1) transmissive.sort(customTransparentSort || reversePainterSortStable);\n    if (transparent.length > 1) transparent.sort(customTransparentSort || reversePainterSortStable);\n  }\n  function finish() {\n    // Clear references from inactive renderItems in the list\n\n    for (let i = renderItemsIndex, il = renderItems.length; i < il; i++) {\n      const renderItem = renderItems[i];\n      if (renderItem.id === null) break;\n      renderItem.id = null;\n      renderItem.object = null;\n      renderItem.geometry = null;\n      renderItem.material = null;\n      renderItem.group = null;\n    }\n  }\n  return {\n    opaque: opaque,\n    transmissive: transmissive,\n    transparent: transparent,\n    init: init,\n    push: push,\n    unshift: unshift,\n    finish: finish,\n    sort: sort\n  };\n}\nfunction WebGLRenderLists() {\n  let lists = new WeakMap();\n  function get(scene, renderCallDepth) {\n    const listArray = lists.get(scene);\n    let list;\n    if (listArray === undefined) {\n      list = new WebGLRenderList();\n      lists.set(scene, [list]);\n    } else {\n      if (renderCallDepth >= listArray.length) {\n        list = new WebGLRenderList();\n        listArray.push(list);\n      } else {\n        list = listArray[renderCallDepth];\n      }\n    }\n    return list;\n  }\n  function dispose() {\n    lists = new WeakMap();\n  }\n  return {\n    get: get,\n    dispose: dispose\n  };\n}\nfunction UniformsCache() {\n  const lights = {};\n  return {\n    get: function (light) {\n      if (lights[light.id] !== undefined) {\n        return lights[light.id];\n      }\n      let uniforms;\n      switch (light.type) {\n        case 'DirectionalLight':\n          uniforms = {\n            direction: new Vector3(),\n            color: new Color()\n          };\n          break;\n        case 'SpotLight':\n          uniforms = {\n            position: new Vector3(),\n            direction: new Vector3(),\n            color: new Color(),\n            distance: 0,\n            coneCos: 0,\n            penumbraCos: 0,\n            decay: 0\n          };\n          break;\n        case 'PointLight':\n          uniforms = {\n            position: new Vector3(),\n            color: new Color(),\n            distance: 0,\n            decay: 0\n          };\n          break;\n        case 'HemisphereLight':\n          uniforms = {\n            direction: new Vector3(),\n            skyColor: new Color(),\n            groundColor: new Color()\n          };\n          break;\n        case 'RectAreaLight':\n          uniforms = {\n            color: new Color(),\n            position: new Vector3(),\n            halfWidth: new Vector3(),\n            halfHeight: new Vector3()\n          };\n          break;\n      }\n      lights[light.id] = uniforms;\n      return uniforms;\n    }\n  };\n}\nfunction ShadowUniformsCache() {\n  const lights = {};\n  return {\n    get: function (light) {\n      if (lights[light.id] !== undefined) {\n        return lights[light.id];\n      }\n      let uniforms;\n      switch (light.type) {\n        case 'DirectionalLight':\n          uniforms = {\n            shadowIntensity: 1,\n            shadowBias: 0,\n            shadowNormalBias: 0,\n            shadowRadius: 1,\n            shadowMapSize: new Vector2()\n          };\n          break;\n        case 'SpotLight':\n          uniforms = {\n            shadowIntensity: 1,\n            shadowBias: 0,\n            shadowNormalBias: 0,\n            shadowRadius: 1,\n            shadowMapSize: new Vector2()\n          };\n          break;\n        case 'PointLight':\n          uniforms = {\n            shadowIntensity: 1,\n            shadowBias: 0,\n            shadowNormalBias: 0,\n            shadowRadius: 1,\n            shadowMapSize: new Vector2(),\n            shadowCameraNear: 1,\n            shadowCameraFar: 1000\n          };\n          break;\n\n        // TODO (abelnation): set RectAreaLight shadow uniforms\n      }\n      lights[light.id] = uniforms;\n      return uniforms;\n    }\n  };\n}\nlet nextVersion = 0;\nfunction shadowCastingAndTexturingLightsFirst(lightA, lightB) {\n  return (lightB.castShadow ? 2 : 0) - (lightA.castShadow ? 2 : 0) + (lightB.map ? 1 : 0) - (lightA.map ? 1 : 0);\n}\nfunction WebGLLights(extensions) {\n  const cache = new UniformsCache();\n  const shadowCache = ShadowUniformsCache();\n  const state = {\n    version: 0,\n    hash: {\n      directionalLength: -1,\n      pointLength: -1,\n      spotLength: -1,\n      rectAreaLength: -1,\n      hemiLength: -1,\n      numDirectionalShadows: -1,\n      numPointShadows: -1,\n      numSpotShadows: -1,\n      numSpotMaps: -1,\n      numLightProbes: -1\n    },\n    ambient: [0, 0, 0],\n    probe: [],\n    directional: [],\n    directionalShadow: [],\n    directionalShadowMap: [],\n    directionalShadowMatrix: [],\n    spot: [],\n    spotLightMap: [],\n    spotShadow: [],\n    spotShadowMap: [],\n    spotLightMatrix: [],\n    rectArea: [],\n    rectAreaLTC1: null,\n    rectAreaLTC2: null,\n    point: [],\n    pointShadow: [],\n    pointShadowMap: [],\n    pointShadowMatrix: [],\n    hemi: [],\n    numSpotLightShadowsWithMaps: 0,\n    numLightProbes: 0\n  };\n  for (let i = 0; i < 9; i++) state.probe.push(new Vector3());\n  const vector3 = new Vector3();\n  const matrix4 = new Matrix4();\n  const matrix42 = new Matrix4();\n  function setup(lights) {\n    let r = 0,\n      g = 0,\n      b = 0;\n    for (let i = 0; i < 9; i++) state.probe[i].set(0, 0, 0);\n    let directionalLength = 0;\n    let pointLength = 0;\n    let spotLength = 0;\n    let rectAreaLength = 0;\n    let hemiLength = 0;\n    let numDirectionalShadows = 0;\n    let numPointShadows = 0;\n    let numSpotShadows = 0;\n    let numSpotMaps = 0;\n    let numSpotShadowsWithMaps = 0;\n    let numLightProbes = 0;\n\n    // ordering : [shadow casting + map texturing, map texturing, shadow casting, none ]\n    lights.sort(shadowCastingAndTexturingLightsFirst);\n    for (let i = 0, l = lights.length; i < l; i++) {\n      const light = lights[i];\n      const color = light.color;\n      const intensity = light.intensity;\n      const distance = light.distance;\n      const shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;\n      if (light.isAmbientLight) {\n        r += color.r * intensity;\n        g += color.g * intensity;\n        b += color.b * intensity;\n      } else if (light.isLightProbe) {\n        for (let j = 0; j < 9; j++) {\n          state.probe[j].addScaledVector(light.sh.coefficients[j], intensity);\n        }\n        numLightProbes++;\n      } else if (light.isDirectionalLight) {\n        const uniforms = cache.get(light);\n        uniforms.color.copy(light.color).multiplyScalar(light.intensity);\n        if (light.castShadow) {\n          const shadow = light.shadow;\n          const shadowUniforms = shadowCache.get(light);\n          shadowUniforms.shadowIntensity = shadow.intensity;\n          shadowUniforms.shadowBias = shadow.bias;\n          shadowUniforms.shadowNormalBias = shadow.normalBias;\n          shadowUniforms.shadowRadius = shadow.radius;\n          shadowUniforms.shadowMapSize = shadow.mapSize;\n          state.directionalShadow[directionalLength] = shadowUniforms;\n          state.directionalShadowMap[directionalLength] = shadowMap;\n          state.directionalShadowMatrix[directionalLength] = light.shadow.matrix;\n          numDirectionalShadows++;\n        }\n        state.directional[directionalLength] = uniforms;\n        directionalLength++;\n      } else if (light.isSpotLight) {\n        const uniforms = cache.get(light);\n        uniforms.position.setFromMatrixPosition(light.matrixWorld);\n        uniforms.color.copy(color).multiplyScalar(intensity);\n        uniforms.distance = distance;\n        uniforms.coneCos = Math.cos(light.angle);\n        uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));\n        uniforms.decay = light.decay;\n        state.spot[spotLength] = uniforms;\n        const shadow = light.shadow;\n        if (light.map) {\n          state.spotLightMap[numSpotMaps] = light.map;\n          numSpotMaps++;\n\n          // make sure the lightMatrix is up to date\n          // TODO : do it if required only\n          shadow.updateMatrices(light);\n          if (light.castShadow) numSpotShadowsWithMaps++;\n        }\n        state.spotLightMatrix[spotLength] = shadow.matrix;\n        if (light.castShadow) {\n          const shadowUniforms = shadowCache.get(light);\n          shadowUniforms.shadowIntensity = shadow.intensity;\n          shadowUniforms.shadowBias = shadow.bias;\n          shadowUniforms.shadowNormalBias = shadow.normalBias;\n          shadowUniforms.shadowRadius = shadow.radius;\n          shadowUniforms.shadowMapSize = shadow.mapSize;\n          state.spotShadow[spotLength] = shadowUniforms;\n          state.spotShadowMap[spotLength] = shadowMap;\n          numSpotShadows++;\n        }\n        spotLength++;\n      } else if (light.isRectAreaLight) {\n        const uniforms = cache.get(light);\n        uniforms.color.copy(color).multiplyScalar(intensity);\n        uniforms.halfWidth.set(light.width * 0.5, 0.0, 0.0);\n        uniforms.halfHeight.set(0.0, light.height * 0.5, 0.0);\n        state.rectArea[rectAreaLength] = uniforms;\n        rectAreaLength++;\n      } else if (light.isPointLight) {\n        const uniforms = cache.get(light);\n        uniforms.color.copy(light.color).multiplyScalar(light.intensity);\n        uniforms.distance = light.distance;\n        uniforms.decay = light.decay;\n        if (light.castShadow) {\n          const shadow = light.shadow;\n          const shadowUniforms = shadowCache.get(light);\n          shadowUniforms.shadowIntensity = shadow.intensity;\n          shadowUniforms.shadowBias = shadow.bias;\n          shadowUniforms.shadowNormalBias = shadow.normalBias;\n          shadowUniforms.shadowRadius = shadow.radius;\n          shadowUniforms.shadowMapSize = shadow.mapSize;\n          shadowUniforms.shadowCameraNear = shadow.camera.near;\n          shadowUniforms.shadowCameraFar = shadow.camera.far;\n          state.pointShadow[pointLength] = shadowUniforms;\n          state.pointShadowMap[pointLength] = shadowMap;\n          state.pointShadowMatrix[pointLength] = light.shadow.matrix;\n          numPointShadows++;\n        }\n        state.point[pointLength] = uniforms;\n        pointLength++;\n      } else if (light.isHemisphereLight) {\n        const uniforms = cache.get(light);\n        uniforms.skyColor.copy(light.color).multiplyScalar(intensity);\n        uniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity);\n        state.hemi[hemiLength] = uniforms;\n        hemiLength++;\n      }\n    }\n    if (rectAreaLength > 0) {\n      if (extensions.has('OES_texture_float_linear') === true) {\n        state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n        state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n      } else {\n        state.rectAreaLTC1 = UniformsLib.LTC_HALF_1;\n        state.rectAreaLTC2 = UniformsLib.LTC_HALF_2;\n      }\n    }\n    state.ambient[0] = r;\n    state.ambient[1] = g;\n    state.ambient[2] = b;\n    const hash = state.hash;\n    if (hash.directionalLength !== directionalLength || hash.pointLength !== pointLength || hash.spotLength !== spotLength || hash.rectAreaLength !== rectAreaLength || hash.hemiLength !== hemiLength || hash.numDirectionalShadows !== numDirectionalShadows || hash.numPointShadows !== numPointShadows || hash.numSpotShadows !== numSpotShadows || hash.numSpotMaps !== numSpotMaps || hash.numLightProbes !== numLightProbes) {\n      state.directional.length = directionalLength;\n      state.spot.length = spotLength;\n      state.rectArea.length = rectAreaLength;\n      state.point.length = pointLength;\n      state.hemi.length = hemiLength;\n      state.directionalShadow.length = numDirectionalShadows;\n      state.directionalShadowMap.length = numDirectionalShadows;\n      state.pointShadow.length = numPointShadows;\n      state.pointShadowMap.length = numPointShadows;\n      state.spotShadow.length = numSpotShadows;\n      state.spotShadowMap.length = numSpotShadows;\n      state.directionalShadowMatrix.length = numDirectionalShadows;\n      state.pointShadowMatrix.length = numPointShadows;\n      state.spotLightMatrix.length = numSpotShadows + numSpotMaps - numSpotShadowsWithMaps;\n      state.spotLightMap.length = numSpotMaps;\n      state.numSpotLightShadowsWithMaps = numSpotShadowsWithMaps;\n      state.numLightProbes = numLightProbes;\n      hash.directionalLength = directionalLength;\n      hash.pointLength = pointLength;\n      hash.spotLength = spotLength;\n      hash.rectAreaLength = rectAreaLength;\n      hash.hemiLength = hemiLength;\n      hash.numDirectionalShadows = numDirectionalShadows;\n      hash.numPointShadows = numPointShadows;\n      hash.numSpotShadows = numSpotShadows;\n      hash.numSpotMaps = numSpotMaps;\n      hash.numLightProbes = numLightProbes;\n      state.version = nextVersion++;\n    }\n  }\n  function setupView(lights, camera) {\n    let directionalLength = 0;\n    let pointLength = 0;\n    let spotLength = 0;\n    let rectAreaLength = 0;\n    let hemiLength = 0;\n    const viewMatrix = camera.matrixWorldInverse;\n    for (let i = 0, l = lights.length; i < l; i++) {\n      const light = lights[i];\n      if (light.isDirectionalLight) {\n        const uniforms = state.directional[directionalLength];\n        uniforms.direction.setFromMatrixPosition(light.matrixWorld);\n        vector3.setFromMatrixPosition(light.target.matrixWorld);\n        uniforms.direction.sub(vector3);\n        uniforms.direction.transformDirection(viewMatrix);\n        directionalLength++;\n      } else if (light.isSpotLight) {\n        const uniforms = state.spot[spotLength];\n        uniforms.position.setFromMatrixPosition(light.matrixWorld);\n        uniforms.position.applyMatrix4(viewMatrix);\n        uniforms.direction.setFromMatrixPosition(light.matrixWorld);\n        vector3.setFromMatrixPosition(light.target.matrixWorld);\n        uniforms.direction.sub(vector3);\n        uniforms.direction.transformDirection(viewMatrix);\n        spotLength++;\n      } else if (light.isRectAreaLight) {\n        const uniforms = state.rectArea[rectAreaLength];\n        uniforms.position.setFromMatrixPosition(light.matrixWorld);\n        uniforms.position.applyMatrix4(viewMatrix);\n\n        // extract local rotation of light to derive width/height half vectors\n        matrix42.identity();\n        matrix4.copy(light.matrixWorld);\n        matrix4.premultiply(viewMatrix);\n        matrix42.extractRotation(matrix4);\n        uniforms.halfWidth.set(light.width * 0.5, 0.0, 0.0);\n        uniforms.halfHeight.set(0.0, light.height * 0.5, 0.0);\n        uniforms.halfWidth.applyMatrix4(matrix42);\n        uniforms.halfHeight.applyMatrix4(matrix42);\n        rectAreaLength++;\n      } else if (light.isPointLight) {\n        const uniforms = state.point[pointLength];\n        uniforms.position.setFromMatrixPosition(light.matrixWorld);\n        uniforms.position.applyMatrix4(viewMatrix);\n        pointLength++;\n      } else if (light.isHemisphereLight) {\n        const uniforms = state.hemi[hemiLength];\n        uniforms.direction.setFromMatrixPosition(light.matrixWorld);\n        uniforms.direction.transformDirection(viewMatrix);\n        hemiLength++;\n      }\n    }\n  }\n  return {\n    setup: setup,\n    setupView: setupView,\n    state: state\n  };\n}\nfunction WebGLRenderState(extensions) {\n  const lights = new WebGLLights(extensions);\n  const lightsArray = [];\n  const shadowsArray = [];\n  function init(camera) {\n    state.camera = camera;\n    lightsArray.length = 0;\n    shadowsArray.length = 0;\n  }\n  function pushLight(light) {\n    lightsArray.push(light);\n  }\n  function pushShadow(shadowLight) {\n    shadowsArray.push(shadowLight);\n  }\n  function setupLights() {\n    lights.setup(lightsArray);\n  }\n  function setupLightsView(camera) {\n    lights.setupView(lightsArray, camera);\n  }\n  const state = {\n    lightsArray: lightsArray,\n    shadowsArray: shadowsArray,\n    camera: null,\n    lights: lights,\n    transmissionRenderTarget: {}\n  };\n  return {\n    init: init,\n    state: state,\n    setupLights: setupLights,\n    setupLightsView: setupLightsView,\n    pushLight: pushLight,\n    pushShadow: pushShadow\n  };\n}\nfunction WebGLRenderStates(extensions) {\n  let renderStates = new WeakMap();\n  function get(scene) {\n    let renderCallDepth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const renderStateArray = renderStates.get(scene);\n    let renderState;\n    if (renderStateArray === undefined) {\n      renderState = new WebGLRenderState(extensions);\n      renderStates.set(scene, [renderState]);\n    } else {\n      if (renderCallDepth >= renderStateArray.length) {\n        renderState = new WebGLRenderState(extensions);\n        renderStateArray.push(renderState);\n      } else {\n        renderState = renderStateArray[renderCallDepth];\n      }\n    }\n    return renderState;\n  }\n  function dispose() {\n    renderStates = new WeakMap();\n  }\n  return {\n    get: get,\n    dispose: dispose\n  };\n}\nconst vertex = \"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\";\nconst fragment = \"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n\\tconst float samples = float( VSM_SAMPLES );\\n\\tfloat mean = 0.0;\\n\\tfloat squared_mean = 0.0;\\n\\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\\n\\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\\n\\tfor ( float i = 0.0; i < samples; i ++ ) {\\n\\t\\tfloat uvOffset = uvStart + i * uvStride;\\n\\t\\t#ifdef HORIZONTAL_PASS\\n\\t\\t\\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\\n\\t\\t\\tmean += distribution.x;\\n\\t\\t\\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n\\t\\t#else\\n\\t\\t\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\\n\\t\\t\\tmean += depth;\\n\\t\\t\\tsquared_mean += depth * depth;\\n\\t\\t#endif\\n\\t}\\n\\tmean = mean / samples;\\n\\tsquared_mean = squared_mean / samples;\\n\\tfloat std_dev = sqrt( squared_mean - mean * mean );\\n\\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\";\nfunction WebGLShadowMap(renderer, objects, capabilities) {\n  let _frustum = new Frustum();\n  const _shadowMapSize = new Vector2(),\n    _viewportSize = new Vector2(),\n    _viewport = new Vector4(),\n    _depthMaterial = new MeshDepthMaterial({\n      depthPacking: RGBADepthPacking\n    }),\n    _distanceMaterial = new MeshDistanceMaterial(),\n    _materialCache = {},\n    _maxTextureSize = capabilities.maxTextureSize;\n  const shadowSide = {\n    [FrontSide]: BackSide,\n    [BackSide]: FrontSide,\n    [DoubleSide]: DoubleSide\n  };\n  const shadowMaterialVertical = new ShaderMaterial({\n    defines: {\n      VSM_SAMPLES: 8\n    },\n    uniforms: {\n      shadow_pass: {\n        value: null\n      },\n      resolution: {\n        value: new Vector2()\n      },\n      radius: {\n        value: 4.0\n      }\n    },\n    vertexShader: vertex,\n    fragmentShader: fragment\n  });\n  const shadowMaterialHorizontal = shadowMaterialVertical.clone();\n  shadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;\n  const fullScreenTri = new BufferGeometry();\n  fullScreenTri.setAttribute('position', new BufferAttribute(new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]), 3));\n  const fullScreenMesh = new Mesh(fullScreenTri, shadowMaterialVertical);\n  const scope = this;\n  this.enabled = false;\n  this.autoUpdate = true;\n  this.needsUpdate = false;\n  this.type = PCFShadowMap;\n  let _previousType = this.type;\n  this.render = function (lights, scene, camera) {\n    if (scope.enabled === false) return;\n    if (scope.autoUpdate === false && scope.needsUpdate === false) return;\n    if (lights.length === 0) return;\n    const currentRenderTarget = renderer.getRenderTarget();\n    const activeCubeFace = renderer.getActiveCubeFace();\n    const activeMipmapLevel = renderer.getActiveMipmapLevel();\n    const _state = renderer.state;\n\n    // Set GL state for depth map.\n    _state.setBlending(NoBlending);\n    _state.buffers.color.setClear(1, 1, 1, 1);\n    _state.buffers.depth.setTest(true);\n    _state.setScissorTest(false);\n\n    // check for shadow map type changes\n\n    const toVSM = _previousType !== VSMShadowMap && this.type === VSMShadowMap;\n    const fromVSM = _previousType === VSMShadowMap && this.type !== VSMShadowMap;\n\n    // render depth map\n\n    for (let i = 0, il = lights.length; i < il; i++) {\n      const light = lights[i];\n      const shadow = light.shadow;\n      if (shadow === undefined) {\n        console.warn('THREE.WebGLShadowMap:', light, 'has no shadow.');\n        continue;\n      }\n      if (shadow.autoUpdate === false && shadow.needsUpdate === false) continue;\n      _shadowMapSize.copy(shadow.mapSize);\n      const shadowFrameExtents = shadow.getFrameExtents();\n      _shadowMapSize.multiply(shadowFrameExtents);\n      _viewportSize.copy(shadow.mapSize);\n      if (_shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize) {\n        if (_shadowMapSize.x > _maxTextureSize) {\n          _viewportSize.x = Math.floor(_maxTextureSize / shadowFrameExtents.x);\n          _shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\n          shadow.mapSize.x = _viewportSize.x;\n        }\n        if (_shadowMapSize.y > _maxTextureSize) {\n          _viewportSize.y = Math.floor(_maxTextureSize / shadowFrameExtents.y);\n          _shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\n          shadow.mapSize.y = _viewportSize.y;\n        }\n      }\n      if (shadow.map === null || toVSM === true || fromVSM === true) {\n        const pars = this.type !== VSMShadowMap ? {\n          minFilter: NearestFilter,\n          magFilter: NearestFilter\n        } : {};\n        if (shadow.map !== null) {\n          shadow.map.dispose();\n        }\n        shadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\n        shadow.map.texture.name = light.name + '.shadowMap';\n        shadow.camera.updateProjectionMatrix();\n      }\n      renderer.setRenderTarget(shadow.map);\n      renderer.clear();\n      const viewportCount = shadow.getViewportCount();\n      for (let vp = 0; vp < viewportCount; vp++) {\n        const viewport = shadow.getViewport(vp);\n        _viewport.set(_viewportSize.x * viewport.x, _viewportSize.y * viewport.y, _viewportSize.x * viewport.z, _viewportSize.y * viewport.w);\n        _state.viewport(_viewport);\n        shadow.updateMatrices(light, vp);\n        _frustum = shadow.getFrustum();\n        renderObject(scene, camera, shadow.camera, light, this.type);\n      }\n\n      // do blur pass for VSM\n\n      if (shadow.isPointLightShadow !== true && this.type === VSMShadowMap) {\n        VSMPass(shadow, camera);\n      }\n      shadow.needsUpdate = false;\n    }\n    _previousType = this.type;\n    scope.needsUpdate = false;\n    renderer.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);\n  };\n  function VSMPass(shadow, camera) {\n    const geometry = objects.update(fullScreenMesh);\n    if (shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples) {\n      shadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;\n      shadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;\n      shadowMaterialVertical.needsUpdate = true;\n      shadowMaterialHorizontal.needsUpdate = true;\n    }\n    if (shadow.mapPass === null) {\n      shadow.mapPass = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y);\n    }\n\n    // vertical pass\n\n    shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\n    shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\n    shadowMaterialVertical.uniforms.radius.value = shadow.radius;\n    renderer.setRenderTarget(shadow.mapPass);\n    renderer.clear();\n    renderer.renderBufferDirect(camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null);\n\n    // horizontal pass\n\n    shadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;\n    shadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;\n    shadowMaterialHorizontal.uniforms.radius.value = shadow.radius;\n    renderer.setRenderTarget(shadow.map);\n    renderer.clear();\n    renderer.renderBufferDirect(camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null);\n  }\n  function getDepthMaterial(object, material, light, type) {\n    let result = null;\n    const customMaterial = light.isPointLight === true ? object.customDistanceMaterial : object.customDepthMaterial;\n    if (customMaterial !== undefined) {\n      result = customMaterial;\n    } else {\n      result = light.isPointLight === true ? _distanceMaterial : _depthMaterial;\n      if (renderer.localClippingEnabled && material.clipShadows === true && Array.isArray(material.clippingPlanes) && material.clippingPlanes.length !== 0 || material.displacementMap && material.displacementScale !== 0 || material.alphaMap && material.alphaTest > 0 || material.map && material.alphaTest > 0 || material.alphaToCoverage === true) {\n        // in this case we need a unique material instance reflecting the\n        // appropriate state\n\n        const keyA = result.uuid,\n          keyB = material.uuid;\n        let materialsForVariant = _materialCache[keyA];\n        if (materialsForVariant === undefined) {\n          materialsForVariant = {};\n          _materialCache[keyA] = materialsForVariant;\n        }\n        let cachedMaterial = materialsForVariant[keyB];\n        if (cachedMaterial === undefined) {\n          cachedMaterial = result.clone();\n          materialsForVariant[keyB] = cachedMaterial;\n          material.addEventListener('dispose', onMaterialDispose);\n        }\n        result = cachedMaterial;\n      }\n    }\n    result.visible = material.visible;\n    result.wireframe = material.wireframe;\n    if (type === VSMShadowMap) {\n      result.side = material.shadowSide !== null ? material.shadowSide : material.side;\n    } else {\n      result.side = material.shadowSide !== null ? material.shadowSide : shadowSide[material.side];\n    }\n    result.alphaMap = material.alphaMap;\n    result.alphaTest = material.alphaToCoverage === true ? 0.5 : material.alphaTest; // approximate alphaToCoverage by using a fixed alphaTest value\n    result.map = material.map;\n    result.clipShadows = material.clipShadows;\n    result.clippingPlanes = material.clippingPlanes;\n    result.clipIntersection = material.clipIntersection;\n    result.displacementMap = material.displacementMap;\n    result.displacementScale = material.displacementScale;\n    result.displacementBias = material.displacementBias;\n    result.wireframeLinewidth = material.wireframeLinewidth;\n    result.linewidth = material.linewidth;\n    if (light.isPointLight === true && result.isMeshDistanceMaterial === true) {\n      const materialProperties = renderer.properties.get(result);\n      materialProperties.light = light;\n    }\n    return result;\n  }\n  function renderObject(object, camera, shadowCamera, light, type) {\n    if (object.visible === false) return;\n    const visible = object.layers.test(camera.layers);\n    if (visible && (object.isMesh || object.isLine || object.isPoints)) {\n      if ((object.castShadow || object.receiveShadow && type === VSMShadowMap) && (!object.frustumCulled || _frustum.intersectsObject(object))) {\n        object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);\n        const geometry = objects.update(object);\n        const material = object.material;\n        if (Array.isArray(material)) {\n          const groups = geometry.groups;\n          for (let k = 0, kl = groups.length; k < kl; k++) {\n            const group = groups[k];\n            const groupMaterial = material[group.materialIndex];\n            if (groupMaterial && groupMaterial.visible) {\n              const depthMaterial = getDepthMaterial(object, groupMaterial, light, type);\n              object.onBeforeShadow(renderer, object, camera, shadowCamera, geometry, depthMaterial, group);\n              renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);\n              object.onAfterShadow(renderer, object, camera, shadowCamera, geometry, depthMaterial, group);\n            }\n          }\n        } else if (material.visible) {\n          const depthMaterial = getDepthMaterial(object, material, light, type);\n          object.onBeforeShadow(renderer, object, camera, shadowCamera, geometry, depthMaterial, null);\n          renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, null);\n          object.onAfterShadow(renderer, object, camera, shadowCamera, geometry, depthMaterial, null);\n        }\n      }\n    }\n    const children = object.children;\n    for (let i = 0, l = children.length; i < l; i++) {\n      renderObject(children[i], camera, shadowCamera, light, type);\n    }\n  }\n  function onMaterialDispose(event) {\n    const material = event.target;\n    material.removeEventListener('dispose', onMaterialDispose);\n\n    // make sure to remove the unique distance/depth materials used for shadow map rendering\n\n    for (const id in _materialCache) {\n      const cache = _materialCache[id];\n      const uuid = event.target.uuid;\n      if (uuid in cache) {\n        const shadowMaterial = cache[uuid];\n        shadowMaterial.dispose();\n        delete cache[uuid];\n      }\n    }\n  }\n}\nconst reversedFuncs = {\n  [NeverDepth]: AlwaysDepth,\n  [LessDepth]: GreaterDepth,\n  [EqualDepth]: NotEqualDepth,\n  [LessEqualDepth]: GreaterEqualDepth,\n  [AlwaysDepth]: NeverDepth,\n  [GreaterDepth]: LessDepth,\n  [NotEqualDepth]: EqualDepth,\n  [GreaterEqualDepth]: LessEqualDepth\n};\nfunction WebGLState(gl, extensions) {\n  function ColorBuffer() {\n    let locked = false;\n    const color = new Vector4();\n    let currentColorMask = null;\n    const currentColorClear = new Vector4(0, 0, 0, 0);\n    return {\n      setMask: function (colorMask) {\n        if (currentColorMask !== colorMask && !locked) {\n          gl.colorMask(colorMask, colorMask, colorMask, colorMask);\n          currentColorMask = colorMask;\n        }\n      },\n      setLocked: function (lock) {\n        locked = lock;\n      },\n      setClear: function (r, g, b, a, premultipliedAlpha) {\n        if (premultipliedAlpha === true) {\n          r *= a;\n          g *= a;\n          b *= a;\n        }\n        color.set(r, g, b, a);\n        if (currentColorClear.equals(color) === false) {\n          gl.clearColor(r, g, b, a);\n          currentColorClear.copy(color);\n        }\n      },\n      reset: function () {\n        locked = false;\n        currentColorMask = null;\n        currentColorClear.set(-1, 0, 0, 0); // set to invalid state\n      }\n    };\n  }\n  function DepthBuffer() {\n    let locked = false;\n    let currentReversed = false;\n    let currentDepthMask = null;\n    let currentDepthFunc = null;\n    let currentDepthClear = null;\n    return {\n      setReversed: function (reversed) {\n        if (currentReversed !== reversed) {\n          const ext = extensions.get('EXT_clip_control');\n          if (reversed) {\n            ext.clipControlEXT(ext.LOWER_LEFT_EXT, ext.ZERO_TO_ONE_EXT);\n          } else {\n            ext.clipControlEXT(ext.LOWER_LEFT_EXT, ext.NEGATIVE_ONE_TO_ONE_EXT);\n          }\n          currentReversed = reversed;\n          const oldDepth = currentDepthClear;\n          currentDepthClear = null;\n          this.setClear(oldDepth);\n        }\n      },\n      getReversed: function () {\n        return currentReversed;\n      },\n      setTest: function (depthTest) {\n        if (depthTest) {\n          enable(gl.DEPTH_TEST);\n        } else {\n          disable(gl.DEPTH_TEST);\n        }\n      },\n      setMask: function (depthMask) {\n        if (currentDepthMask !== depthMask && !locked) {\n          gl.depthMask(depthMask);\n          currentDepthMask = depthMask;\n        }\n      },\n      setFunc: function (depthFunc) {\n        if (currentReversed) depthFunc = reversedFuncs[depthFunc];\n        if (currentDepthFunc !== depthFunc) {\n          switch (depthFunc) {\n            case NeverDepth:\n              gl.depthFunc(gl.NEVER);\n              break;\n            case AlwaysDepth:\n              gl.depthFunc(gl.ALWAYS);\n              break;\n            case LessDepth:\n              gl.depthFunc(gl.LESS);\n              break;\n            case LessEqualDepth:\n              gl.depthFunc(gl.LEQUAL);\n              break;\n            case EqualDepth:\n              gl.depthFunc(gl.EQUAL);\n              break;\n            case GreaterEqualDepth:\n              gl.depthFunc(gl.GEQUAL);\n              break;\n            case GreaterDepth:\n              gl.depthFunc(gl.GREATER);\n              break;\n            case NotEqualDepth:\n              gl.depthFunc(gl.NOTEQUAL);\n              break;\n            default:\n              gl.depthFunc(gl.LEQUAL);\n          }\n          currentDepthFunc = depthFunc;\n        }\n      },\n      setLocked: function (lock) {\n        locked = lock;\n      },\n      setClear: function (depth) {\n        if (currentDepthClear !== depth) {\n          if (currentReversed) {\n            depth = 1 - depth;\n          }\n          gl.clearDepth(depth);\n          currentDepthClear = depth;\n        }\n      },\n      reset: function () {\n        locked = false;\n        currentDepthMask = null;\n        currentDepthFunc = null;\n        currentDepthClear = null;\n        currentReversed = false;\n      }\n    };\n  }\n  function StencilBuffer() {\n    let locked = false;\n    let currentStencilMask = null;\n    let currentStencilFunc = null;\n    let currentStencilRef = null;\n    let currentStencilFuncMask = null;\n    let currentStencilFail = null;\n    let currentStencilZFail = null;\n    let currentStencilZPass = null;\n    let currentStencilClear = null;\n    return {\n      setTest: function (stencilTest) {\n        if (!locked) {\n          if (stencilTest) {\n            enable(gl.STENCIL_TEST);\n          } else {\n            disable(gl.STENCIL_TEST);\n          }\n        }\n      },\n      setMask: function (stencilMask) {\n        if (currentStencilMask !== stencilMask && !locked) {\n          gl.stencilMask(stencilMask);\n          currentStencilMask = stencilMask;\n        }\n      },\n      setFunc: function (stencilFunc, stencilRef, stencilMask) {\n        if (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {\n          gl.stencilFunc(stencilFunc, stencilRef, stencilMask);\n          currentStencilFunc = stencilFunc;\n          currentStencilRef = stencilRef;\n          currentStencilFuncMask = stencilMask;\n        }\n      },\n      setOp: function (stencilFail, stencilZFail, stencilZPass) {\n        if (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {\n          gl.stencilOp(stencilFail, stencilZFail, stencilZPass);\n          currentStencilFail = stencilFail;\n          currentStencilZFail = stencilZFail;\n          currentStencilZPass = stencilZPass;\n        }\n      },\n      setLocked: function (lock) {\n        locked = lock;\n      },\n      setClear: function (stencil) {\n        if (currentStencilClear !== stencil) {\n          gl.clearStencil(stencil);\n          currentStencilClear = stencil;\n        }\n      },\n      reset: function () {\n        locked = false;\n        currentStencilMask = null;\n        currentStencilFunc = null;\n        currentStencilRef = null;\n        currentStencilFuncMask = null;\n        currentStencilFail = null;\n        currentStencilZFail = null;\n        currentStencilZPass = null;\n        currentStencilClear = null;\n      }\n    };\n  }\n\n  //\n\n  const colorBuffer = new ColorBuffer();\n  const depthBuffer = new DepthBuffer();\n  const stencilBuffer = new StencilBuffer();\n  const uboBindings = new WeakMap();\n  const uboProgramMap = new WeakMap();\n  let enabledCapabilities = {};\n  let currentBoundFramebuffers = {};\n  let currentDrawbuffers = new WeakMap();\n  let defaultDrawbuffers = [];\n  let currentProgram = null;\n  let currentBlendingEnabled = false;\n  let currentBlending = null;\n  let currentBlendEquation = null;\n  let currentBlendSrc = null;\n  let currentBlendDst = null;\n  let currentBlendEquationAlpha = null;\n  let currentBlendSrcAlpha = null;\n  let currentBlendDstAlpha = null;\n  let currentBlendColor = new Color(0, 0, 0);\n  let currentBlendAlpha = 0;\n  let currentPremultipledAlpha = false;\n  let currentFlipSided = null;\n  let currentCullFace = null;\n  let currentLineWidth = null;\n  let currentPolygonOffsetFactor = null;\n  let currentPolygonOffsetUnits = null;\n  const maxTextures = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n  let lineWidthAvailable = false;\n  let version = 0;\n  const glVersion = gl.getParameter(gl.VERSION);\n  if (glVersion.indexOf('WebGL') !== -1) {\n    version = parseFloat(/^WebGL (\\d)/.exec(glVersion)[1]);\n    lineWidthAvailable = version >= 1.0;\n  } else if (glVersion.indexOf('OpenGL ES') !== -1) {\n    version = parseFloat(/^OpenGL ES (\\d)/.exec(glVersion)[1]);\n    lineWidthAvailable = version >= 2.0;\n  }\n  let currentTextureSlot = null;\n  let currentBoundTextures = {};\n  const scissorParam = gl.getParameter(gl.SCISSOR_BOX);\n  const viewportParam = gl.getParameter(gl.VIEWPORT);\n  const currentScissor = new Vector4().fromArray(scissorParam);\n  const currentViewport = new Vector4().fromArray(viewportParam);\n  function createTexture(type, target, count, dimensions) {\n    const data = new Uint8Array(4); // 4 is required to match default unpack alignment of 4.\n    const texture = gl.createTexture();\n    gl.bindTexture(type, texture);\n    gl.texParameteri(type, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(type, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    for (let i = 0; i < count; i++) {\n      if (type === gl.TEXTURE_3D || type === gl.TEXTURE_2D_ARRAY) {\n        gl.texImage3D(target, 0, gl.RGBA, 1, 1, dimensions, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);\n      } else {\n        gl.texImage2D(target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);\n      }\n    }\n    return texture;\n  }\n  const emptyTextures = {};\n  emptyTextures[gl.TEXTURE_2D] = createTexture(gl.TEXTURE_2D, gl.TEXTURE_2D, 1);\n  emptyTextures[gl.TEXTURE_CUBE_MAP] = createTexture(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6);\n  emptyTextures[gl.TEXTURE_2D_ARRAY] = createTexture(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_2D_ARRAY, 1, 1);\n  emptyTextures[gl.TEXTURE_3D] = createTexture(gl.TEXTURE_3D, gl.TEXTURE_3D, 1, 1);\n\n  // init\n\n  colorBuffer.setClear(0, 0, 0, 1);\n  depthBuffer.setClear(1);\n  stencilBuffer.setClear(0);\n  enable(gl.DEPTH_TEST);\n  depthBuffer.setFunc(LessEqualDepth);\n  setFlipSided(false);\n  setCullFace(CullFaceBack);\n  enable(gl.CULL_FACE);\n  setBlending(NoBlending);\n\n  //\n\n  function enable(id) {\n    if (enabledCapabilities[id] !== true) {\n      gl.enable(id);\n      enabledCapabilities[id] = true;\n    }\n  }\n  function disable(id) {\n    if (enabledCapabilities[id] !== false) {\n      gl.disable(id);\n      enabledCapabilities[id] = false;\n    }\n  }\n  function bindFramebuffer(target, framebuffer) {\n    if (currentBoundFramebuffers[target] !== framebuffer) {\n      gl.bindFramebuffer(target, framebuffer);\n      currentBoundFramebuffers[target] = framebuffer;\n\n      // gl.DRAW_FRAMEBUFFER is equivalent to gl.FRAMEBUFFER\n\n      if (target === gl.DRAW_FRAMEBUFFER) {\n        currentBoundFramebuffers[gl.FRAMEBUFFER] = framebuffer;\n      }\n      if (target === gl.FRAMEBUFFER) {\n        currentBoundFramebuffers[gl.DRAW_FRAMEBUFFER] = framebuffer;\n      }\n      return true;\n    }\n    return false;\n  }\n  function drawBuffers(renderTarget, framebuffer) {\n    let drawBuffers = defaultDrawbuffers;\n    let needsUpdate = false;\n    if (renderTarget) {\n      drawBuffers = currentDrawbuffers.get(framebuffer);\n      if (drawBuffers === undefined) {\n        drawBuffers = [];\n        currentDrawbuffers.set(framebuffer, drawBuffers);\n      }\n      const textures = renderTarget.textures;\n      if (drawBuffers.length !== textures.length || drawBuffers[0] !== gl.COLOR_ATTACHMENT0) {\n        for (let i = 0, il = textures.length; i < il; i++) {\n          drawBuffers[i] = gl.COLOR_ATTACHMENT0 + i;\n        }\n        drawBuffers.length = textures.length;\n        needsUpdate = true;\n      }\n    } else {\n      if (drawBuffers[0] !== gl.BACK) {\n        drawBuffers[0] = gl.BACK;\n        needsUpdate = true;\n      }\n    }\n    if (needsUpdate) {\n      gl.drawBuffers(drawBuffers);\n    }\n  }\n  function useProgram(program) {\n    if (currentProgram !== program) {\n      gl.useProgram(program);\n      currentProgram = program;\n      return true;\n    }\n    return false;\n  }\n  const equationToGL = {\n    [AddEquation]: gl.FUNC_ADD,\n    [SubtractEquation]: gl.FUNC_SUBTRACT,\n    [ReverseSubtractEquation]: gl.FUNC_REVERSE_SUBTRACT\n  };\n  equationToGL[MinEquation] = gl.MIN;\n  equationToGL[MaxEquation] = gl.MAX;\n  const factorToGL = {\n    [ZeroFactor]: gl.ZERO,\n    [OneFactor]: gl.ONE,\n    [SrcColorFactor]: gl.SRC_COLOR,\n    [SrcAlphaFactor]: gl.SRC_ALPHA,\n    [SrcAlphaSaturateFactor]: gl.SRC_ALPHA_SATURATE,\n    [DstColorFactor]: gl.DST_COLOR,\n    [DstAlphaFactor]: gl.DST_ALPHA,\n    [OneMinusSrcColorFactor]: gl.ONE_MINUS_SRC_COLOR,\n    [OneMinusSrcAlphaFactor]: gl.ONE_MINUS_SRC_ALPHA,\n    [OneMinusDstColorFactor]: gl.ONE_MINUS_DST_COLOR,\n    [OneMinusDstAlphaFactor]: gl.ONE_MINUS_DST_ALPHA,\n    [ConstantColorFactor]: gl.CONSTANT_COLOR,\n    [OneMinusConstantColorFactor]: gl.ONE_MINUS_CONSTANT_COLOR,\n    [ConstantAlphaFactor]: gl.CONSTANT_ALPHA,\n    [OneMinusConstantAlphaFactor]: gl.ONE_MINUS_CONSTANT_ALPHA\n  };\n  function setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, blendColor, blendAlpha, premultipliedAlpha) {\n    if (blending === NoBlending) {\n      if (currentBlendingEnabled === true) {\n        disable(gl.BLEND);\n        currentBlendingEnabled = false;\n      }\n      return;\n    }\n    if (currentBlendingEnabled === false) {\n      enable(gl.BLEND);\n      currentBlendingEnabled = true;\n    }\n    if (blending !== CustomBlending) {\n      if (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {\n        if (currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation) {\n          gl.blendEquation(gl.FUNC_ADD);\n          currentBlendEquation = AddEquation;\n          currentBlendEquationAlpha = AddEquation;\n        }\n        if (premultipliedAlpha) {\n          switch (blending) {\n            case NormalBlending:\n              gl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n              break;\n            case AdditiveBlending:\n              gl.blendFunc(gl.ONE, gl.ONE);\n              break;\n            case SubtractiveBlending:\n              gl.blendFuncSeparate(gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE);\n              break;\n            case MultiplyBlending:\n              gl.blendFuncSeparate(gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA);\n              break;\n            default:\n              console.error('THREE.WebGLState: Invalid blending: ', blending);\n              break;\n          }\n        } else {\n          switch (blending) {\n            case NormalBlending:\n              gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n              break;\n            case AdditiveBlending:\n              gl.blendFunc(gl.SRC_ALPHA, gl.ONE);\n              break;\n            case SubtractiveBlending:\n              gl.blendFuncSeparate(gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE);\n              break;\n            case MultiplyBlending:\n              gl.blendFunc(gl.ZERO, gl.SRC_COLOR);\n              break;\n            default:\n              console.error('THREE.WebGLState: Invalid blending: ', blending);\n              break;\n          }\n        }\n        currentBlendSrc = null;\n        currentBlendDst = null;\n        currentBlendSrcAlpha = null;\n        currentBlendDstAlpha = null;\n        currentBlendColor.set(0, 0, 0);\n        currentBlendAlpha = 0;\n        currentBlending = blending;\n        currentPremultipledAlpha = premultipliedAlpha;\n      }\n      return;\n    }\n\n    // custom blending\n\n    blendEquationAlpha = blendEquationAlpha || blendEquation;\n    blendSrcAlpha = blendSrcAlpha || blendSrc;\n    blendDstAlpha = blendDstAlpha || blendDst;\n    if (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {\n      gl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);\n      currentBlendEquation = blendEquation;\n      currentBlendEquationAlpha = blendEquationAlpha;\n    }\n    if (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {\n      gl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);\n      currentBlendSrc = blendSrc;\n      currentBlendDst = blendDst;\n      currentBlendSrcAlpha = blendSrcAlpha;\n      currentBlendDstAlpha = blendDstAlpha;\n    }\n    if (blendColor.equals(currentBlendColor) === false || blendAlpha !== currentBlendAlpha) {\n      gl.blendColor(blendColor.r, blendColor.g, blendColor.b, blendAlpha);\n      currentBlendColor.copy(blendColor);\n      currentBlendAlpha = blendAlpha;\n    }\n    currentBlending = blending;\n    currentPremultipledAlpha = false;\n  }\n  function setMaterial(material, frontFaceCW) {\n    material.side === DoubleSide ? disable(gl.CULL_FACE) : enable(gl.CULL_FACE);\n    let flipSided = material.side === BackSide;\n    if (frontFaceCW) flipSided = !flipSided;\n    setFlipSided(flipSided);\n    material.blending === NormalBlending && material.transparent === false ? setBlending(NoBlending) : setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.blendColor, material.blendAlpha, material.premultipliedAlpha);\n    depthBuffer.setFunc(material.depthFunc);\n    depthBuffer.setTest(material.depthTest);\n    depthBuffer.setMask(material.depthWrite);\n    colorBuffer.setMask(material.colorWrite);\n    const stencilWrite = material.stencilWrite;\n    stencilBuffer.setTest(stencilWrite);\n    if (stencilWrite) {\n      stencilBuffer.setMask(material.stencilWriteMask);\n      stencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);\n      stencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);\n    }\n    setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);\n    material.alphaToCoverage === true ? enable(gl.SAMPLE_ALPHA_TO_COVERAGE) : disable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n  }\n\n  //\n\n  function setFlipSided(flipSided) {\n    if (currentFlipSided !== flipSided) {\n      if (flipSided) {\n        gl.frontFace(gl.CW);\n      } else {\n        gl.frontFace(gl.CCW);\n      }\n      currentFlipSided = flipSided;\n    }\n  }\n  function setCullFace(cullFace) {\n    if (cullFace !== CullFaceNone) {\n      enable(gl.CULL_FACE);\n      if (cullFace !== currentCullFace) {\n        if (cullFace === CullFaceBack) {\n          gl.cullFace(gl.BACK);\n        } else if (cullFace === CullFaceFront) {\n          gl.cullFace(gl.FRONT);\n        } else {\n          gl.cullFace(gl.FRONT_AND_BACK);\n        }\n      }\n    } else {\n      disable(gl.CULL_FACE);\n    }\n    currentCullFace = cullFace;\n  }\n  function setLineWidth(width) {\n    if (width !== currentLineWidth) {\n      if (lineWidthAvailable) gl.lineWidth(width);\n      currentLineWidth = width;\n    }\n  }\n  function setPolygonOffset(polygonOffset, factor, units) {\n    if (polygonOffset) {\n      enable(gl.POLYGON_OFFSET_FILL);\n      if (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {\n        gl.polygonOffset(factor, units);\n        currentPolygonOffsetFactor = factor;\n        currentPolygonOffsetUnits = units;\n      }\n    } else {\n      disable(gl.POLYGON_OFFSET_FILL);\n    }\n  }\n  function setScissorTest(scissorTest) {\n    if (scissorTest) {\n      enable(gl.SCISSOR_TEST);\n    } else {\n      disable(gl.SCISSOR_TEST);\n    }\n  }\n\n  // texture\n\n  function activeTexture(webglSlot) {\n    if (webglSlot === undefined) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n    if (currentTextureSlot !== webglSlot) {\n      gl.activeTexture(webglSlot);\n      currentTextureSlot = webglSlot;\n    }\n  }\n  function bindTexture(webglType, webglTexture, webglSlot) {\n    if (webglSlot === undefined) {\n      if (currentTextureSlot === null) {\n        webglSlot = gl.TEXTURE0 + maxTextures - 1;\n      } else {\n        webglSlot = currentTextureSlot;\n      }\n    }\n    let boundTexture = currentBoundTextures[webglSlot];\n    if (boundTexture === undefined) {\n      boundTexture = {\n        type: undefined,\n        texture: undefined\n      };\n      currentBoundTextures[webglSlot] = boundTexture;\n    }\n    if (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {\n      if (currentTextureSlot !== webglSlot) {\n        gl.activeTexture(webglSlot);\n        currentTextureSlot = webglSlot;\n      }\n      gl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);\n      boundTexture.type = webglType;\n      boundTexture.texture = webglTexture;\n    }\n  }\n  function unbindTexture() {\n    const boundTexture = currentBoundTextures[currentTextureSlot];\n    if (boundTexture !== undefined && boundTexture.type !== undefined) {\n      gl.bindTexture(boundTexture.type, null);\n      boundTexture.type = undefined;\n      boundTexture.texture = undefined;\n    }\n  }\n  function compressedTexImage2D() {\n    try {\n      gl.compressedTexImage2D(...arguments);\n    } catch (error) {\n      console.error('THREE.WebGLState:', error);\n    }\n  }\n  function compressedTexImage3D() {\n    try {\n      gl.compressedTexImage3D(...arguments);\n    } catch (error) {\n      console.error('THREE.WebGLState:', error);\n    }\n  }\n  function texSubImage2D() {\n    try {\n      gl.texSubImage2D(...arguments);\n    } catch (error) {\n      console.error('THREE.WebGLState:', error);\n    }\n  }\n  function texSubImage3D() {\n    try {\n      gl.texSubImage3D(...arguments);\n    } catch (error) {\n      console.error('THREE.WebGLState:', error);\n    }\n  }\n  function compressedTexSubImage2D() {\n    try {\n      gl.compressedTexSubImage2D(...arguments);\n    } catch (error) {\n      console.error('THREE.WebGLState:', error);\n    }\n  }\n  function compressedTexSubImage3D() {\n    try {\n      gl.compressedTexSubImage3D(...arguments);\n    } catch (error) {\n      console.error('THREE.WebGLState:', error);\n    }\n  }\n  function texStorage2D() {\n    try {\n      gl.texStorage2D(...arguments);\n    } catch (error) {\n      console.error('THREE.WebGLState:', error);\n    }\n  }\n  function texStorage3D() {\n    try {\n      gl.texStorage3D(...arguments);\n    } catch (error) {\n      console.error('THREE.WebGLState:', error);\n    }\n  }\n  function texImage2D() {\n    try {\n      gl.texImage2D(...arguments);\n    } catch (error) {\n      console.error('THREE.WebGLState:', error);\n    }\n  }\n  function texImage3D() {\n    try {\n      gl.texImage3D(...arguments);\n    } catch (error) {\n      console.error('THREE.WebGLState:', error);\n    }\n  }\n\n  //\n\n  function scissor(scissor) {\n    if (currentScissor.equals(scissor) === false) {\n      gl.scissor(scissor.x, scissor.y, scissor.z, scissor.w);\n      currentScissor.copy(scissor);\n    }\n  }\n  function viewport(viewport) {\n    if (currentViewport.equals(viewport) === false) {\n      gl.viewport(viewport.x, viewport.y, viewport.z, viewport.w);\n      currentViewport.copy(viewport);\n    }\n  }\n  function updateUBOMapping(uniformsGroup, program) {\n    let mapping = uboProgramMap.get(program);\n    if (mapping === undefined) {\n      mapping = new WeakMap();\n      uboProgramMap.set(program, mapping);\n    }\n    let blockIndex = mapping.get(uniformsGroup);\n    if (blockIndex === undefined) {\n      blockIndex = gl.getUniformBlockIndex(program, uniformsGroup.name);\n      mapping.set(uniformsGroup, blockIndex);\n    }\n  }\n  function uniformBlockBinding(uniformsGroup, program) {\n    const mapping = uboProgramMap.get(program);\n    const blockIndex = mapping.get(uniformsGroup);\n    if (uboBindings.get(program) !== blockIndex) {\n      // bind shader specific block index to global block point\n      gl.uniformBlockBinding(program, blockIndex, uniformsGroup.__bindingPointIndex);\n      uboBindings.set(program, blockIndex);\n    }\n  }\n\n  //\n\n  function reset() {\n    // reset state\n\n    gl.disable(gl.BLEND);\n    gl.disable(gl.CULL_FACE);\n    gl.disable(gl.DEPTH_TEST);\n    gl.disable(gl.POLYGON_OFFSET_FILL);\n    gl.disable(gl.SCISSOR_TEST);\n    gl.disable(gl.STENCIL_TEST);\n    gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n    gl.blendEquation(gl.FUNC_ADD);\n    gl.blendFunc(gl.ONE, gl.ZERO);\n    gl.blendFuncSeparate(gl.ONE, gl.ZERO, gl.ONE, gl.ZERO);\n    gl.blendColor(0, 0, 0, 0);\n    gl.colorMask(true, true, true, true);\n    gl.clearColor(0, 0, 0, 0);\n    gl.depthMask(true);\n    gl.depthFunc(gl.LESS);\n    depthBuffer.setReversed(false);\n    gl.clearDepth(1);\n    gl.stencilMask(0xffffffff);\n    gl.stencilFunc(gl.ALWAYS, 0, 0xffffffff);\n    gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\n    gl.clearStencil(0);\n    gl.cullFace(gl.BACK);\n    gl.frontFace(gl.CCW);\n    gl.polygonOffset(0, 0);\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);\n    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);\n    gl.useProgram(null);\n    gl.lineWidth(1);\n    gl.scissor(0, 0, gl.canvas.width, gl.canvas.height);\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n\n    // reset internals\n\n    enabledCapabilities = {};\n    currentTextureSlot = null;\n    currentBoundTextures = {};\n    currentBoundFramebuffers = {};\n    currentDrawbuffers = new WeakMap();\n    defaultDrawbuffers = [];\n    currentProgram = null;\n    currentBlendingEnabled = false;\n    currentBlending = null;\n    currentBlendEquation = null;\n    currentBlendSrc = null;\n    currentBlendDst = null;\n    currentBlendEquationAlpha = null;\n    currentBlendSrcAlpha = null;\n    currentBlendDstAlpha = null;\n    currentBlendColor = new Color(0, 0, 0);\n    currentBlendAlpha = 0;\n    currentPremultipledAlpha = false;\n    currentFlipSided = null;\n    currentCullFace = null;\n    currentLineWidth = null;\n    currentPolygonOffsetFactor = null;\n    currentPolygonOffsetUnits = null;\n    currentScissor.set(0, 0, gl.canvas.width, gl.canvas.height);\n    currentViewport.set(0, 0, gl.canvas.width, gl.canvas.height);\n    colorBuffer.reset();\n    depthBuffer.reset();\n    stencilBuffer.reset();\n  }\n  return {\n    buffers: {\n      color: colorBuffer,\n      depth: depthBuffer,\n      stencil: stencilBuffer\n    },\n    enable: enable,\n    disable: disable,\n    bindFramebuffer: bindFramebuffer,\n    drawBuffers: drawBuffers,\n    useProgram: useProgram,\n    setBlending: setBlending,\n    setMaterial: setMaterial,\n    setFlipSided: setFlipSided,\n    setCullFace: setCullFace,\n    setLineWidth: setLineWidth,\n    setPolygonOffset: setPolygonOffset,\n    setScissorTest: setScissorTest,\n    activeTexture: activeTexture,\n    bindTexture: bindTexture,\n    unbindTexture: unbindTexture,\n    compressedTexImage2D: compressedTexImage2D,\n    compressedTexImage3D: compressedTexImage3D,\n    texImage2D: texImage2D,\n    texImage3D: texImage3D,\n    updateUBOMapping: updateUBOMapping,\n    uniformBlockBinding: uniformBlockBinding,\n    texStorage2D: texStorage2D,\n    texStorage3D: texStorage3D,\n    texSubImage2D: texSubImage2D,\n    texSubImage3D: texSubImage3D,\n    compressedTexSubImage2D: compressedTexSubImage2D,\n    compressedTexSubImage3D: compressedTexSubImage3D,\n    scissor: scissor,\n    viewport: viewport,\n    reset: reset\n  };\n}\nfunction WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {\n  const multisampledRTTExt = extensions.has('WEBGL_multisampled_render_to_texture') ? extensions.get('WEBGL_multisampled_render_to_texture') : null;\n  const supportsInvalidateFramebuffer = typeof navigator === 'undefined' ? false : /OculusBrowser/g.test(navigator.userAgent);\n  const _imageDimensions = new Vector2();\n  const _videoTextures = new WeakMap();\n  let _canvas;\n  const _sources = new WeakMap(); // maps WebglTexture objects to instances of Source\n\n  // cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n  // also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n  // Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n  let useOffscreenCanvas = false;\n  try {\n    useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'\n    // eslint-disable-next-line compat/compat\n    && new OffscreenCanvas(1, 1).getContext('2d') !== null;\n  } catch (err) {\n\n    // Ignore any errors\n  }\n  function createCanvas(width, height) {\n    // Use OffscreenCanvas when available. Specially needed in web workers\n\n    return useOffscreenCanvas ?\n    // eslint-disable-next-line compat/compat\n    new OffscreenCanvas(width, height) : createElementNS('canvas');\n  }\n  function resizeImage(image, needsNewCanvas, maxSize) {\n    let scale = 1;\n    const dimensions = getDimensions(image);\n\n    // handle case if texture exceeds max size\n\n    if (dimensions.width > maxSize || dimensions.height > maxSize) {\n      scale = maxSize / Math.max(dimensions.width, dimensions.height);\n    }\n\n    // only perform resize if necessary\n\n    if (scale < 1) {\n      // only perform resize for certain image types\n\n      if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap || typeof VideoFrame !== 'undefined' && image instanceof VideoFrame) {\n        const width = Math.floor(scale * dimensions.width);\n        const height = Math.floor(scale * dimensions.height);\n        if (_canvas === undefined) _canvas = createCanvas(width, height);\n\n        // cube textures can't reuse the same canvas\n\n        const canvas = needsNewCanvas ? createCanvas(width, height) : _canvas;\n        canvas.width = width;\n        canvas.height = height;\n        const context = canvas.getContext('2d');\n        context.drawImage(image, 0, 0, width, height);\n        console.warn('THREE.WebGLRenderer: Texture has been resized from (' + dimensions.width + 'x' + dimensions.height + ') to (' + width + 'x' + height + ').');\n        return canvas;\n      } else {\n        if ('data' in image) {\n          console.warn('THREE.WebGLRenderer: Image in DataTexture is too big (' + dimensions.width + 'x' + dimensions.height + ').');\n        }\n        return image;\n      }\n    }\n    return image;\n  }\n  function textureNeedsGenerateMipmaps(texture) {\n    return texture.generateMipmaps;\n  }\n  function generateMipmap(target) {\n    _gl.generateMipmap(target);\n  }\n  function getTargetType(texture) {\n    if (texture.isWebGLCubeRenderTarget) return _gl.TEXTURE_CUBE_MAP;\n    if (texture.isWebGL3DRenderTarget) return _gl.TEXTURE_3D;\n    if (texture.isWebGLArrayRenderTarget || texture.isCompressedArrayTexture) return _gl.TEXTURE_2D_ARRAY;\n    return _gl.TEXTURE_2D;\n  }\n  function getInternalFormat(internalFormatName, glFormat, glType, colorSpace) {\n    let forceLinearTransfer = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    if (internalFormatName !== null) {\n      if (_gl[internalFormatName] !== undefined) return _gl[internalFormatName];\n      console.warn('THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'');\n    }\n    let internalFormat = glFormat;\n    if (glFormat === _gl.RED) {\n      if (glType === _gl.FLOAT) internalFormat = _gl.R32F;\n      if (glType === _gl.HALF_FLOAT) internalFormat = _gl.R16F;\n      if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.R8;\n    }\n    if (glFormat === _gl.RED_INTEGER) {\n      if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.R8UI;\n      if (glType === _gl.UNSIGNED_SHORT) internalFormat = _gl.R16UI;\n      if (glType === _gl.UNSIGNED_INT) internalFormat = _gl.R32UI;\n      if (glType === _gl.BYTE) internalFormat = _gl.R8I;\n      if (glType === _gl.SHORT) internalFormat = _gl.R16I;\n      if (glType === _gl.INT) internalFormat = _gl.R32I;\n    }\n    if (glFormat === _gl.RG) {\n      if (glType === _gl.FLOAT) internalFormat = _gl.RG32F;\n      if (glType === _gl.HALF_FLOAT) internalFormat = _gl.RG16F;\n      if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RG8;\n    }\n    if (glFormat === _gl.RG_INTEGER) {\n      if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RG8UI;\n      if (glType === _gl.UNSIGNED_SHORT) internalFormat = _gl.RG16UI;\n      if (glType === _gl.UNSIGNED_INT) internalFormat = _gl.RG32UI;\n      if (glType === _gl.BYTE) internalFormat = _gl.RG8I;\n      if (glType === _gl.SHORT) internalFormat = _gl.RG16I;\n      if (glType === _gl.INT) internalFormat = _gl.RG32I;\n    }\n    if (glFormat === _gl.RGB_INTEGER) {\n      if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RGB8UI;\n      if (glType === _gl.UNSIGNED_SHORT) internalFormat = _gl.RGB16UI;\n      if (glType === _gl.UNSIGNED_INT) internalFormat = _gl.RGB32UI;\n      if (glType === _gl.BYTE) internalFormat = _gl.RGB8I;\n      if (glType === _gl.SHORT) internalFormat = _gl.RGB16I;\n      if (glType === _gl.INT) internalFormat = _gl.RGB32I;\n    }\n    if (glFormat === _gl.RGBA_INTEGER) {\n      if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RGBA8UI;\n      if (glType === _gl.UNSIGNED_SHORT) internalFormat = _gl.RGBA16UI;\n      if (glType === _gl.UNSIGNED_INT) internalFormat = _gl.RGBA32UI;\n      if (glType === _gl.BYTE) internalFormat = _gl.RGBA8I;\n      if (glType === _gl.SHORT) internalFormat = _gl.RGBA16I;\n      if (glType === _gl.INT) internalFormat = _gl.RGBA32I;\n    }\n    if (glFormat === _gl.RGB) {\n      if (glType === _gl.UNSIGNED_INT_5_9_9_9_REV) internalFormat = _gl.RGB9_E5;\n    }\n    if (glFormat === _gl.RGBA) {\n      const transfer = forceLinearTransfer ? LinearTransfer : ColorManagement.getTransfer(colorSpace);\n      if (glType === _gl.FLOAT) internalFormat = _gl.RGBA32F;\n      if (glType === _gl.HALF_FLOAT) internalFormat = _gl.RGBA16F;\n      if (glType === _gl.UNSIGNED_BYTE) internalFormat = transfer === SRGBTransfer ? _gl.SRGB8_ALPHA8 : _gl.RGBA8;\n      if (glType === _gl.UNSIGNED_SHORT_4_4_4_4) internalFormat = _gl.RGBA4;\n      if (glType === _gl.UNSIGNED_SHORT_5_5_5_1) internalFormat = _gl.RGB5_A1;\n    }\n    if (internalFormat === _gl.R16F || internalFormat === _gl.R32F || internalFormat === _gl.RG16F || internalFormat === _gl.RG32F || internalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F) {\n      extensions.get('EXT_color_buffer_float');\n    }\n    return internalFormat;\n  }\n  function getInternalDepthFormat(useStencil, depthType) {\n    let glInternalFormat;\n    if (useStencil) {\n      if (depthType === null || depthType === UnsignedIntType || depthType === UnsignedInt248Type) {\n        glInternalFormat = _gl.DEPTH24_STENCIL8;\n      } else if (depthType === FloatType) {\n        glInternalFormat = _gl.DEPTH32F_STENCIL8;\n      } else if (depthType === UnsignedShortType) {\n        glInternalFormat = _gl.DEPTH24_STENCIL8;\n        console.warn('DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.');\n      }\n    } else {\n      if (depthType === null || depthType === UnsignedIntType || depthType === UnsignedInt248Type) {\n        glInternalFormat = _gl.DEPTH_COMPONENT24;\n      } else if (depthType === FloatType) {\n        glInternalFormat = _gl.DEPTH_COMPONENT32F;\n      } else if (depthType === UnsignedShortType) {\n        glInternalFormat = _gl.DEPTH_COMPONENT16;\n      }\n    }\n    return glInternalFormat;\n  }\n  function getMipLevels(texture, image) {\n    if (textureNeedsGenerateMipmaps(texture) === true || texture.isFramebufferTexture && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {\n      return Math.log2(Math.max(image.width, image.height)) + 1;\n    } else if (texture.mipmaps !== undefined && texture.mipmaps.length > 0) {\n      // user-defined mipmaps\n\n      return texture.mipmaps.length;\n    } else if (texture.isCompressedTexture && Array.isArray(texture.image)) {\n      return image.mipmaps.length;\n    } else {\n      // texture without mipmaps (only base level)\n\n      return 1;\n    }\n  }\n\n  //\n\n  function onTextureDispose(event) {\n    const texture = event.target;\n    texture.removeEventListener('dispose', onTextureDispose);\n    deallocateTexture(texture);\n    if (texture.isVideoTexture) {\n      _videoTextures.delete(texture);\n    }\n  }\n  function onRenderTargetDispose(event) {\n    const renderTarget = event.target;\n    renderTarget.removeEventListener('dispose', onRenderTargetDispose);\n    deallocateRenderTarget(renderTarget);\n  }\n\n  //\n\n  function deallocateTexture(texture) {\n    const textureProperties = properties.get(texture);\n    if (textureProperties.__webglInit === undefined) return;\n\n    // check if it's necessary to remove the WebGLTexture object\n\n    const source = texture.source;\n    const webglTextures = _sources.get(source);\n    if (webglTextures) {\n      const webglTexture = webglTextures[textureProperties.__cacheKey];\n      webglTexture.usedTimes--;\n\n      // the WebGLTexture object is not used anymore, remove it\n\n      if (webglTexture.usedTimes === 0) {\n        deleteTexture(texture);\n      }\n\n      // remove the weak map entry if no WebGLTexture uses the source anymore\n\n      if (Object.keys(webglTextures).length === 0) {\n        _sources.delete(source);\n      }\n    }\n    properties.remove(texture);\n  }\n  function deleteTexture(texture) {\n    const textureProperties = properties.get(texture);\n    _gl.deleteTexture(textureProperties.__webglTexture);\n    const source = texture.source;\n    const webglTextures = _sources.get(source);\n    delete webglTextures[textureProperties.__cacheKey];\n    info.memory.textures--;\n  }\n  function deallocateRenderTarget(renderTarget) {\n    const renderTargetProperties = properties.get(renderTarget);\n    if (renderTarget.depthTexture) {\n      renderTarget.depthTexture.dispose();\n      properties.remove(renderTarget.depthTexture);\n    }\n    if (renderTarget.isWebGLCubeRenderTarget) {\n      for (let i = 0; i < 6; i++) {\n        if (Array.isArray(renderTargetProperties.__webglFramebuffer[i])) {\n          for (let level = 0; level < renderTargetProperties.__webglFramebuffer[i].length; level++) _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i][level]);\n        } else {\n          _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);\n        }\n        if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);\n      }\n    } else {\n      if (Array.isArray(renderTargetProperties.__webglFramebuffer)) {\n        for (let level = 0; level < renderTargetProperties.__webglFramebuffer.length; level++) _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[level]);\n      } else {\n        _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);\n      }\n      if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);\n      if (renderTargetProperties.__webglMultisampledFramebuffer) _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);\n      if (renderTargetProperties.__webglColorRenderbuffer) {\n        for (let i = 0; i < renderTargetProperties.__webglColorRenderbuffer.length; i++) {\n          if (renderTargetProperties.__webglColorRenderbuffer[i]) _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer[i]);\n        }\n      }\n      if (renderTargetProperties.__webglDepthRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);\n    }\n    const textures = renderTarget.textures;\n    for (let i = 0, il = textures.length; i < il; i++) {\n      const attachmentProperties = properties.get(textures[i]);\n      if (attachmentProperties.__webglTexture) {\n        _gl.deleteTexture(attachmentProperties.__webglTexture);\n        info.memory.textures--;\n      }\n      properties.remove(textures[i]);\n    }\n    properties.remove(renderTarget);\n  }\n\n  //\n\n  let textureUnits = 0;\n  function resetTextureUnits() {\n    textureUnits = 0;\n  }\n  function allocateTextureUnit() {\n    const textureUnit = textureUnits;\n    if (textureUnit >= capabilities.maxTextures) {\n      console.warn('THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures);\n    }\n    textureUnits += 1;\n    return textureUnit;\n  }\n  function getTextureCacheKey(texture) {\n    const array = [];\n    array.push(texture.wrapS);\n    array.push(texture.wrapT);\n    array.push(texture.wrapR || 0);\n    array.push(texture.magFilter);\n    array.push(texture.minFilter);\n    array.push(texture.anisotropy);\n    array.push(texture.internalFormat);\n    array.push(texture.format);\n    array.push(texture.type);\n    array.push(texture.generateMipmaps);\n    array.push(texture.premultiplyAlpha);\n    array.push(texture.flipY);\n    array.push(texture.unpackAlignment);\n    array.push(texture.colorSpace);\n    return array.join();\n  }\n\n  //\n\n  function setTexture2D(texture, slot) {\n    const textureProperties = properties.get(texture);\n    if (texture.isVideoTexture) updateVideoTexture(texture);\n    if (texture.isRenderTargetTexture === false && texture.version > 0 && textureProperties.__version !== texture.version) {\n      const image = texture.image;\n      if (image === null) {\n        console.warn('THREE.WebGLRenderer: Texture marked for update but no image data found.');\n      } else if (image.complete === false) {\n        console.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete');\n      } else {\n        uploadTexture(textureProperties, texture, slot);\n        return;\n      }\n    }\n    state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);\n  }\n  function setTexture2DArray(texture, slot) {\n    const textureProperties = properties.get(texture);\n    if (texture.version > 0 && textureProperties.__version !== texture.version) {\n      uploadTexture(textureProperties, texture, slot);\n      return;\n    }\n    state.bindTexture(_gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);\n  }\n  function setTexture3D(texture, slot) {\n    const textureProperties = properties.get(texture);\n    if (texture.version > 0 && textureProperties.__version !== texture.version) {\n      uploadTexture(textureProperties, texture, slot);\n      return;\n    }\n    state.bindTexture(_gl.TEXTURE_3D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);\n  }\n  function setTextureCube(texture, slot) {\n    const textureProperties = properties.get(texture);\n    if (texture.version > 0 && textureProperties.__version !== texture.version) {\n      uploadCubeTexture(textureProperties, texture, slot);\n      return;\n    }\n    state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);\n  }\n  const wrappingToGL = {\n    [RepeatWrapping]: _gl.REPEAT,\n    [ClampToEdgeWrapping]: _gl.CLAMP_TO_EDGE,\n    [MirroredRepeatWrapping]: _gl.MIRRORED_REPEAT\n  };\n  const filterToGL = {\n    [NearestFilter]: _gl.NEAREST,\n    [NearestMipmapNearestFilter]: _gl.NEAREST_MIPMAP_NEAREST,\n    [NearestMipmapLinearFilter]: _gl.NEAREST_MIPMAP_LINEAR,\n    [LinearFilter]: _gl.LINEAR,\n    [LinearMipmapNearestFilter]: _gl.LINEAR_MIPMAP_NEAREST,\n    [LinearMipmapLinearFilter]: _gl.LINEAR_MIPMAP_LINEAR\n  };\n  const compareToGL = {\n    [NeverCompare]: _gl.NEVER,\n    [AlwaysCompare]: _gl.ALWAYS,\n    [LessCompare]: _gl.LESS,\n    [LessEqualCompare]: _gl.LEQUAL,\n    [EqualCompare]: _gl.EQUAL,\n    [GreaterEqualCompare]: _gl.GEQUAL,\n    [GreaterCompare]: _gl.GREATER,\n    [NotEqualCompare]: _gl.NOTEQUAL\n  };\n  function setTextureParameters(textureType, texture) {\n    if (texture.type === FloatType && extensions.has('OES_texture_float_linear') === false && (texture.magFilter === LinearFilter || texture.magFilter === LinearMipmapNearestFilter || texture.magFilter === NearestMipmapLinearFilter || texture.magFilter === LinearMipmapLinearFilter || texture.minFilter === LinearFilter || texture.minFilter === LinearMipmapNearestFilter || texture.minFilter === NearestMipmapLinearFilter || texture.minFilter === LinearMipmapLinearFilter)) {\n      console.warn('THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device.');\n    }\n    _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[texture.wrapS]);\n    _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[texture.wrapT]);\n    if (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {\n      _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[texture.wrapR]);\n    }\n    _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[texture.magFilter]);\n    _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[texture.minFilter]);\n    if (texture.compareFunction) {\n      _gl.texParameteri(textureType, _gl.TEXTURE_COMPARE_MODE, _gl.COMPARE_REF_TO_TEXTURE);\n      _gl.texParameteri(textureType, _gl.TEXTURE_COMPARE_FUNC, compareToGL[texture.compareFunction]);\n    }\n    if (extensions.has('EXT_texture_filter_anisotropic') === true) {\n      if (texture.magFilter === NearestFilter) return;\n      if (texture.minFilter !== NearestMipmapLinearFilter && texture.minFilter !== LinearMipmapLinearFilter) return;\n      if (texture.type === FloatType && extensions.has('OES_texture_float_linear') === false) return; // verify extension\n\n      if (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {\n        const extension = extensions.get('EXT_texture_filter_anisotropic');\n        _gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));\n        properties.get(texture).__currentAnisotropy = texture.anisotropy;\n      }\n    }\n  }\n  function initTexture(textureProperties, texture) {\n    let forceUpload = false;\n    if (textureProperties.__webglInit === undefined) {\n      textureProperties.__webglInit = true;\n      texture.addEventListener('dispose', onTextureDispose);\n    }\n\n    // create Source <-> WebGLTextures mapping if necessary\n\n    const source = texture.source;\n    let webglTextures = _sources.get(source);\n    if (webglTextures === undefined) {\n      webglTextures = {};\n      _sources.set(source, webglTextures);\n    }\n\n    // check if there is already a WebGLTexture object for the given texture parameters\n\n    const textureCacheKey = getTextureCacheKey(texture);\n    if (textureCacheKey !== textureProperties.__cacheKey) {\n      // if not, create a new instance of WebGLTexture\n\n      if (webglTextures[textureCacheKey] === undefined) {\n        // create new entry\n\n        webglTextures[textureCacheKey] = {\n          texture: _gl.createTexture(),\n          usedTimes: 0\n        };\n        info.memory.textures++;\n\n        // when a new instance of WebGLTexture was created, a texture upload is required\n        // even if the image contents are identical\n\n        forceUpload = true;\n      }\n      webglTextures[textureCacheKey].usedTimes++;\n\n      // every time the texture cache key changes, it's necessary to check if an instance of\n      // WebGLTexture can be deleted in order to avoid a memory leak.\n\n      const webglTexture = webglTextures[textureProperties.__cacheKey];\n      if (webglTexture !== undefined) {\n        webglTextures[textureProperties.__cacheKey].usedTimes--;\n        if (webglTexture.usedTimes === 0) {\n          deleteTexture(texture);\n        }\n      }\n\n      // store references to cache key and WebGLTexture object\n\n      textureProperties.__cacheKey = textureCacheKey;\n      textureProperties.__webglTexture = webglTextures[textureCacheKey].texture;\n    }\n    return forceUpload;\n  }\n  function uploadTexture(textureProperties, texture, slot) {\n    let textureType = _gl.TEXTURE_2D;\n    if (texture.isDataArrayTexture || texture.isCompressedArrayTexture) textureType = _gl.TEXTURE_2D_ARRAY;\n    if (texture.isData3DTexture) textureType = _gl.TEXTURE_3D;\n    const forceUpload = initTexture(textureProperties, texture);\n    const source = texture.source;\n    state.bindTexture(textureType, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);\n    const sourceProperties = properties.get(source);\n    if (source.version !== sourceProperties.__version || forceUpload === true) {\n      state.activeTexture(_gl.TEXTURE0 + slot);\n      const workingPrimaries = ColorManagement.getPrimaries(ColorManagement.workingColorSpace);\n      const texturePrimaries = texture.colorSpace === NoColorSpace ? null : ColorManagement.getPrimaries(texture.colorSpace);\n      const unpackConversion = texture.colorSpace === NoColorSpace || workingPrimaries === texturePrimaries ? _gl.NONE : _gl.BROWSER_DEFAULT_WEBGL;\n      _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n      _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\n      _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\n      _gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, unpackConversion);\n      let image = resizeImage(texture.image, false, capabilities.maxTextureSize);\n      image = verifyColorSpace(texture, image);\n      const glFormat = utils.convert(texture.format, texture.colorSpace);\n      const glType = utils.convert(texture.type);\n      let glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace, texture.isVideoTexture);\n      setTextureParameters(textureType, texture);\n      let mipmap;\n      const mipmaps = texture.mipmaps;\n      const useTexStorage = texture.isVideoTexture !== true;\n      const allocateMemory = sourceProperties.__version === undefined || forceUpload === true;\n      const dataReady = source.dataReady;\n      const levels = getMipLevels(texture, image);\n      if (texture.isDepthTexture) {\n        glInternalFormat = getInternalDepthFormat(texture.format === DepthStencilFormat, texture.type);\n\n        //\n\n        if (allocateMemory) {\n          if (useTexStorage) {\n            state.texStorage2D(_gl.TEXTURE_2D, 1, glInternalFormat, image.width, image.height);\n          } else {\n            state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);\n          }\n        }\n      } else if (texture.isDataTexture) {\n        // use manually created mipmaps if available\n        // if there are no manual mipmaps\n        // set 0 level mipmap and then use GL to generate other mipmap levels\n\n        if (mipmaps.length > 0) {\n          if (useTexStorage && allocateMemory) {\n            state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);\n          }\n          for (let i = 0, il = mipmaps.length; i < il; i++) {\n            mipmap = mipmaps[i];\n            if (useTexStorage) {\n              if (dataReady) {\n                state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);\n              }\n            } else {\n              state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n            }\n          }\n          texture.generateMipmaps = false;\n        } else {\n          if (useTexStorage) {\n            if (allocateMemory) {\n              state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);\n            }\n            if (dataReady) {\n              state.texSubImage2D(_gl.TEXTURE_2D, 0, 0, 0, image.width, image.height, glFormat, glType, image.data);\n            }\n          } else {\n            state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);\n          }\n        }\n      } else if (texture.isCompressedTexture) {\n        if (texture.isCompressedArrayTexture) {\n          if (useTexStorage && allocateMemory) {\n            state.texStorage3D(_gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height, image.depth);\n          }\n          for (let i = 0, il = mipmaps.length; i < il; i++) {\n            mipmap = mipmaps[i];\n            if (texture.format !== RGBAFormat) {\n              if (glFormat !== null) {\n                if (useTexStorage) {\n                  if (dataReady) {\n                    if (texture.layerUpdates.size > 0) {\n                      const layerByteLength = getByteLength(mipmap.width, mipmap.height, texture.format, texture.type);\n                      for (const layerIndex of texture.layerUpdates) {\n                        const layerData = mipmap.data.subarray(layerIndex * layerByteLength / mipmap.data.BYTES_PER_ELEMENT, (layerIndex + 1) * layerByteLength / mipmap.data.BYTES_PER_ELEMENT);\n                        state.compressedTexSubImage3D(_gl.TEXTURE_2D_ARRAY, i, 0, 0, layerIndex, mipmap.width, mipmap.height, 1, glFormat, layerData);\n                      }\n                      texture.clearLayerUpdates();\n                    } else {\n                      state.compressedTexSubImage3D(_gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, mipmap.data);\n                    }\n                  }\n                } else {\n                  state.compressedTexImage3D(_gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, mipmap.data, 0, 0);\n                }\n              } else {\n                console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()');\n              }\n            } else {\n              if (useTexStorage) {\n                if (dataReady) {\n                  state.texSubImage3D(_gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, glType, mipmap.data);\n                }\n              } else {\n                state.texImage3D(_gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, glFormat, glType, mipmap.data);\n              }\n            }\n          }\n        } else {\n          if (useTexStorage && allocateMemory) {\n            state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);\n          }\n          for (let i = 0, il = mipmaps.length; i < il; i++) {\n            mipmap = mipmaps[i];\n            if (texture.format !== RGBAFormat) {\n              if (glFormat !== null) {\n                if (useTexStorage) {\n                  if (dataReady) {\n                    state.compressedTexSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);\n                  }\n                } else {\n                  state.compressedTexImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n                }\n              } else {\n                console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()');\n              }\n            } else {\n              if (useTexStorage) {\n                if (dataReady) {\n                  state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);\n                }\n              } else {\n                state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n              }\n            }\n          }\n        }\n      } else if (texture.isDataArrayTexture) {\n        if (useTexStorage) {\n          if (allocateMemory) {\n            state.texStorage3D(_gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, image.width, image.height, image.depth);\n          }\n          if (dataReady) {\n            if (texture.layerUpdates.size > 0) {\n              const layerByteLength = getByteLength(image.width, image.height, texture.format, texture.type);\n              for (const layerIndex of texture.layerUpdates) {\n                const layerData = image.data.subarray(layerIndex * layerByteLength / image.data.BYTES_PER_ELEMENT, (layerIndex + 1) * layerByteLength / image.data.BYTES_PER_ELEMENT);\n                state.texSubImage3D(_gl.TEXTURE_2D_ARRAY, 0, 0, 0, layerIndex, image.width, image.height, 1, glFormat, glType, layerData);\n              }\n              texture.clearLayerUpdates();\n            } else {\n              state.texSubImage3D(_gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);\n            }\n          }\n        } else {\n          state.texImage3D(_gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n        }\n      } else if (texture.isData3DTexture) {\n        if (useTexStorage) {\n          if (allocateMemory) {\n            state.texStorage3D(_gl.TEXTURE_3D, levels, glInternalFormat, image.width, image.height, image.depth);\n          }\n          if (dataReady) {\n            state.texSubImage3D(_gl.TEXTURE_3D, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);\n          }\n        } else {\n          state.texImage3D(_gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n        }\n      } else if (texture.isFramebufferTexture) {\n        if (allocateMemory) {\n          if (useTexStorage) {\n            state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);\n          } else {\n            let width = image.width,\n              height = image.height;\n            for (let i = 0; i < levels; i++) {\n              state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, width, height, 0, glFormat, glType, null);\n              width >>= 1;\n              height >>= 1;\n            }\n          }\n        }\n      } else {\n        // regular Texture (image, video, canvas)\n\n        // use manually created mipmaps if available\n        // if there are no manual mipmaps\n        // set 0 level mipmap and then use GL to generate other mipmap levels\n\n        if (mipmaps.length > 0) {\n          if (useTexStorage && allocateMemory) {\n            const dimensions = getDimensions(mipmaps[0]);\n            state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, dimensions.width, dimensions.height);\n          }\n          for (let i = 0, il = mipmaps.length; i < il; i++) {\n            mipmap = mipmaps[i];\n            if (useTexStorage) {\n              if (dataReady) {\n                state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, glFormat, glType, mipmap);\n              }\n            } else {\n              state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap);\n            }\n          }\n          texture.generateMipmaps = false;\n        } else {\n          if (useTexStorage) {\n            if (allocateMemory) {\n              const dimensions = getDimensions(image);\n              state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, dimensions.width, dimensions.height);\n            }\n            if (dataReady) {\n              state.texSubImage2D(_gl.TEXTURE_2D, 0, 0, 0, glFormat, glType, image);\n            }\n          } else {\n            state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image);\n          }\n        }\n      }\n      if (textureNeedsGenerateMipmaps(texture)) {\n        generateMipmap(textureType);\n      }\n      sourceProperties.__version = source.version;\n      if (texture.onUpdate) texture.onUpdate(texture);\n    }\n    textureProperties.__version = texture.version;\n  }\n  function uploadCubeTexture(textureProperties, texture, slot) {\n    if (texture.image.length !== 6) return;\n    const forceUpload = initTexture(textureProperties, texture);\n    const source = texture.source;\n    state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);\n    const sourceProperties = properties.get(source);\n    if (source.version !== sourceProperties.__version || forceUpload === true) {\n      state.activeTexture(_gl.TEXTURE0 + slot);\n      const workingPrimaries = ColorManagement.getPrimaries(ColorManagement.workingColorSpace);\n      const texturePrimaries = texture.colorSpace === NoColorSpace ? null : ColorManagement.getPrimaries(texture.colorSpace);\n      const unpackConversion = texture.colorSpace === NoColorSpace || workingPrimaries === texturePrimaries ? _gl.NONE : _gl.BROWSER_DEFAULT_WEBGL;\n      _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n      _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\n      _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\n      _gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, unpackConversion);\n      const isCompressed = texture.isCompressedTexture || texture.image[0].isCompressedTexture;\n      const isDataTexture = texture.image[0] && texture.image[0].isDataTexture;\n      const cubeImage = [];\n      for (let i = 0; i < 6; i++) {\n        if (!isCompressed && !isDataTexture) {\n          cubeImage[i] = resizeImage(texture.image[i], true, capabilities.maxCubemapSize);\n        } else {\n          cubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];\n        }\n        cubeImage[i] = verifyColorSpace(texture, cubeImage[i]);\n      }\n      const image = cubeImage[0],\n        glFormat = utils.convert(texture.format, texture.colorSpace),\n        glType = utils.convert(texture.type),\n        glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace);\n      const useTexStorage = texture.isVideoTexture !== true;\n      const allocateMemory = sourceProperties.__version === undefined || forceUpload === true;\n      const dataReady = source.dataReady;\n      let levels = getMipLevels(texture, image);\n      setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture);\n      let mipmaps;\n      if (isCompressed) {\n        if (useTexStorage && allocateMemory) {\n          state.texStorage2D(_gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, image.width, image.height);\n        }\n        for (let i = 0; i < 6; i++) {\n          mipmaps = cubeImage[i].mipmaps;\n          for (let j = 0; j < mipmaps.length; j++) {\n            const mipmap = mipmaps[j];\n            if (texture.format !== RGBAFormat) {\n              if (glFormat !== null) {\n                if (useTexStorage) {\n                  if (dataReady) {\n                    state.compressedTexSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);\n                  }\n                } else {\n                  state.compressedTexImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n                }\n              } else {\n                console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()');\n              }\n            } else {\n              if (useTexStorage) {\n                if (dataReady) {\n                  state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);\n                }\n              } else {\n                state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n              }\n            }\n          }\n        }\n      } else {\n        mipmaps = texture.mipmaps;\n        if (useTexStorage && allocateMemory) {\n          // TODO: Uniformly handle mipmap definitions\n          // Normal textures and compressed cube textures define base level + mips with their mipmap array\n          // Uncompressed cube textures use their mipmap array only for mips (no base level)\n\n          if (mipmaps.length > 0) levels++;\n          const dimensions = getDimensions(cubeImage[0]);\n          state.texStorage2D(_gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, dimensions.width, dimensions.height);\n        }\n        for (let i = 0; i < 6; i++) {\n          if (isDataTexture) {\n            if (useTexStorage) {\n              if (dataReady) {\n                state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, cubeImage[i].width, cubeImage[i].height, glFormat, glType, cubeImage[i].data);\n              }\n            } else {\n              state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[i].width, cubeImage[i].height, 0, glFormat, glType, cubeImage[i].data);\n            }\n            for (let j = 0; j < mipmaps.length; j++) {\n              const mipmap = mipmaps[j];\n              const mipmapImage = mipmap.image[i].image;\n              if (useTexStorage) {\n                if (dataReady) {\n                  state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data);\n                }\n              } else {\n                state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);\n              }\n            }\n          } else {\n            if (useTexStorage) {\n              if (dataReady) {\n                state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, glFormat, glType, cubeImage[i]);\n              }\n            } else {\n              state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[i]);\n            }\n            for (let j = 0; j < mipmaps.length; j++) {\n              const mipmap = mipmaps[j];\n              if (useTexStorage) {\n                if (dataReady) {\n                  state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, glFormat, glType, mipmap.image[i]);\n                }\n              } else {\n                state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[i]);\n              }\n            }\n          }\n        }\n      }\n      if (textureNeedsGenerateMipmaps(texture)) {\n        // We assume images for cube map have the same size.\n        generateMipmap(_gl.TEXTURE_CUBE_MAP);\n      }\n      sourceProperties.__version = source.version;\n      if (texture.onUpdate) texture.onUpdate(texture);\n    }\n    textureProperties.__version = texture.version;\n  }\n\n  // Render targets\n\n  // Setup storage for target texture and bind it to correct framebuffer\n  function setupFrameBufferTexture(framebuffer, renderTarget, texture, attachment, textureTarget, level) {\n    const glFormat = utils.convert(texture.format, texture.colorSpace);\n    const glType = utils.convert(texture.type);\n    const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace);\n    const renderTargetProperties = properties.get(renderTarget);\n    const textureProperties = properties.get(texture);\n    textureProperties.__renderTarget = renderTarget;\n    if (!renderTargetProperties.__hasExternalTextures) {\n      const width = Math.max(1, renderTarget.width >> level);\n      const height = Math.max(1, renderTarget.height >> level);\n      if (textureTarget === _gl.TEXTURE_3D || textureTarget === _gl.TEXTURE_2D_ARRAY) {\n        state.texImage3D(textureTarget, level, glInternalFormat, width, height, renderTarget.depth, 0, glFormat, glType, null);\n      } else {\n        state.texImage2D(textureTarget, level, glInternalFormat, width, height, 0, glFormat, glType, null);\n      }\n    }\n    state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n    if (useMultisampledRTT(renderTarget)) {\n      multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, attachment, textureTarget, textureProperties.__webglTexture, 0, getRenderTargetSamples(renderTarget));\n    } else if (textureTarget === _gl.TEXTURE_2D || textureTarget >= _gl.TEXTURE_CUBE_MAP_POSITIVE_X && textureTarget <= _gl.TEXTURE_CUBE_MAP_NEGATIVE_Z) {\n      // see #24753\n\n      _gl.framebufferTexture2D(_gl.FRAMEBUFFER, attachment, textureTarget, textureProperties.__webglTexture, level);\n    }\n    state.bindFramebuffer(_gl.FRAMEBUFFER, null);\n  }\n\n  // Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n  function setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {\n    _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);\n    if (renderTarget.depthBuffer) {\n      // retrieve the depth attachment types\n      const depthTexture = renderTarget.depthTexture;\n      const depthType = depthTexture && depthTexture.isDepthTexture ? depthTexture.type : null;\n      const glInternalFormat = getInternalDepthFormat(renderTarget.stencilBuffer, depthType);\n      const glAttachmentType = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;\n\n      // set up the attachment\n      const samples = getRenderTargetSamples(renderTarget);\n      const isUseMultisampledRTT = useMultisampledRTT(renderTarget);\n      if (isUseMultisampledRTT) {\n        multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n      } else if (isMultisample) {\n        _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n      } else {\n        _gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);\n      }\n      _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, glAttachmentType, _gl.RENDERBUFFER, renderbuffer);\n    } else {\n      const textures = renderTarget.textures;\n      for (let i = 0; i < textures.length; i++) {\n        const texture = textures[i];\n        const glFormat = utils.convert(texture.format, texture.colorSpace);\n        const glType = utils.convert(texture.type);\n        const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace);\n        const samples = getRenderTargetSamples(renderTarget);\n        if (isMultisample && useMultisampledRTT(renderTarget) === false) {\n          _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n        } else if (useMultisampledRTT(renderTarget)) {\n          multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n        } else {\n          _gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);\n        }\n      }\n    }\n    _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);\n  }\n\n  // Setup resources for a Depth Texture for a FBO (needs an extension)\n  function setupDepthTexture(framebuffer, renderTarget) {\n    const isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;\n    if (isCube) throw new Error('Depth Texture with cube render targets is not supported');\n    state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n    if (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {\n      throw new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n    }\n    const textureProperties = properties.get(renderTarget.depthTexture);\n    textureProperties.__renderTarget = renderTarget;\n\n    // upload an empty depth texture with framebuffer size\n    if (!textureProperties.__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {\n      renderTarget.depthTexture.image.width = renderTarget.width;\n      renderTarget.depthTexture.image.height = renderTarget.height;\n      renderTarget.depthTexture.needsUpdate = true;\n    }\n    setTexture2D(renderTarget.depthTexture, 0);\n    const webglDepthTexture = textureProperties.__webglTexture;\n    const samples = getRenderTargetSamples(renderTarget);\n    if (renderTarget.depthTexture.format === DepthFormat) {\n      if (useMultisampledRTT(renderTarget)) {\n        multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples);\n      } else {\n        _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);\n      }\n    } else if (renderTarget.depthTexture.format === DepthStencilFormat) {\n      if (useMultisampledRTT(renderTarget)) {\n        multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples);\n      } else {\n        _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);\n      }\n    } else {\n      throw new Error('Unknown depthTexture format');\n    }\n  }\n\n  // Setup GL resources for a non-texture depth buffer\n  function setupDepthRenderbuffer(renderTarget) {\n    const renderTargetProperties = properties.get(renderTarget);\n    const isCube = renderTarget.isWebGLCubeRenderTarget === true;\n\n    // if the bound depth texture has changed\n    if (renderTargetProperties.__boundDepthTexture !== renderTarget.depthTexture) {\n      // fire the dispose event to get rid of stored state associated with the previously bound depth buffer\n      const depthTexture = renderTarget.depthTexture;\n      if (renderTargetProperties.__depthDisposeCallback) {\n        renderTargetProperties.__depthDisposeCallback();\n      }\n\n      // set up dispose listeners to track when the currently attached buffer is implicitly unbound\n      if (depthTexture) {\n        const disposeEvent = () => {\n          delete renderTargetProperties.__boundDepthTexture;\n          delete renderTargetProperties.__depthDisposeCallback;\n          depthTexture.removeEventListener('dispose', disposeEvent);\n        };\n        depthTexture.addEventListener('dispose', disposeEvent);\n        renderTargetProperties.__depthDisposeCallback = disposeEvent;\n      }\n      renderTargetProperties.__boundDepthTexture = depthTexture;\n    }\n    if (renderTarget.depthTexture && !renderTargetProperties.__autoAllocateDepthBuffer) {\n      if (isCube) throw new Error('target.depthTexture not supported in Cube render targets');\n      const mipmaps = renderTarget.texture.mipmaps;\n      if (mipmaps && mipmaps.length > 0) {\n        setupDepthTexture(renderTargetProperties.__webglFramebuffer[0], renderTarget);\n      } else {\n        setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);\n      }\n    } else {\n      if (isCube) {\n        renderTargetProperties.__webglDepthbuffer = [];\n        for (let i = 0; i < 6; i++) {\n          state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[i]);\n          if (renderTargetProperties.__webglDepthbuffer[i] === undefined) {\n            renderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();\n            setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget, false);\n          } else {\n            // attach buffer if it's been created already\n            const glAttachmentType = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;\n            const renderbuffer = renderTargetProperties.__webglDepthbuffer[i];\n            _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);\n            _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, glAttachmentType, _gl.RENDERBUFFER, renderbuffer);\n          }\n        }\n      } else {\n        const mipmaps = renderTarget.texture.mipmaps;\n        if (mipmaps && mipmaps.length > 0) {\n          state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[0]);\n        } else {\n          state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n        }\n        if (renderTargetProperties.__webglDepthbuffer === undefined) {\n          renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n          setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);\n        } else {\n          // attach buffer if it's been created already\n          const glAttachmentType = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;\n          const renderbuffer = renderTargetProperties.__webglDepthbuffer;\n          _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);\n          _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, glAttachmentType, _gl.RENDERBUFFER, renderbuffer);\n        }\n      }\n    }\n    state.bindFramebuffer(_gl.FRAMEBUFFER, null);\n  }\n\n  // rebind framebuffer with external textures\n  function rebindTextures(renderTarget, colorTexture, depthTexture) {\n    const renderTargetProperties = properties.get(renderTarget);\n    if (colorTexture !== undefined) {\n      setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, 0);\n    }\n    if (depthTexture !== undefined) {\n      setupDepthRenderbuffer(renderTarget);\n    }\n  }\n\n  // Set up GL resources for the render target\n  function setupRenderTarget(renderTarget) {\n    const texture = renderTarget.texture;\n    const renderTargetProperties = properties.get(renderTarget);\n    const textureProperties = properties.get(texture);\n    renderTarget.addEventListener('dispose', onRenderTargetDispose);\n    const textures = renderTarget.textures;\n    const isCube = renderTarget.isWebGLCubeRenderTarget === true;\n    const isMultipleRenderTargets = textures.length > 1;\n    if (!isMultipleRenderTargets) {\n      if (textureProperties.__webglTexture === undefined) {\n        textureProperties.__webglTexture = _gl.createTexture();\n      }\n      textureProperties.__version = texture.version;\n      info.memory.textures++;\n    }\n\n    // Setup framebuffer\n\n    if (isCube) {\n      renderTargetProperties.__webglFramebuffer = [];\n      for (let i = 0; i < 6; i++) {\n        if (texture.mipmaps && texture.mipmaps.length > 0) {\n          renderTargetProperties.__webglFramebuffer[i] = [];\n          for (let level = 0; level < texture.mipmaps.length; level++) {\n            renderTargetProperties.__webglFramebuffer[i][level] = _gl.createFramebuffer();\n          }\n        } else {\n          renderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();\n        }\n      }\n    } else {\n      if (texture.mipmaps && texture.mipmaps.length > 0) {\n        renderTargetProperties.__webglFramebuffer = [];\n        for (let level = 0; level < texture.mipmaps.length; level++) {\n          renderTargetProperties.__webglFramebuffer[level] = _gl.createFramebuffer();\n        }\n      } else {\n        renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n      }\n      if (isMultipleRenderTargets) {\n        for (let i = 0, il = textures.length; i < il; i++) {\n          const attachmentProperties = properties.get(textures[i]);\n          if (attachmentProperties.__webglTexture === undefined) {\n            attachmentProperties.__webglTexture = _gl.createTexture();\n            info.memory.textures++;\n          }\n        }\n      }\n      if (renderTarget.samples > 0 && useMultisampledRTT(renderTarget) === false) {\n        renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n        renderTargetProperties.__webglColorRenderbuffer = [];\n        state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n        for (let i = 0; i < textures.length; i++) {\n          const texture = textures[i];\n          renderTargetProperties.__webglColorRenderbuffer[i] = _gl.createRenderbuffer();\n          _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);\n          const glFormat = utils.convert(texture.format, texture.colorSpace);\n          const glType = utils.convert(texture.type);\n          const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace, renderTarget.isXRRenderTarget === true);\n          const samples = getRenderTargetSamples(renderTarget);\n          _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n          _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);\n        }\n        _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);\n        if (renderTarget.depthBuffer) {\n          renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n          setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);\n        }\n        state.bindFramebuffer(_gl.FRAMEBUFFER, null);\n      }\n    }\n\n    // Setup color buffer\n\n    if (isCube) {\n      state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n      setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture);\n      for (let i = 0; i < 6; i++) {\n        if (texture.mipmaps && texture.mipmaps.length > 0) {\n          for (let level = 0; level < texture.mipmaps.length; level++) {\n            setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i][level], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, level);\n          }\n        } else {\n          setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0);\n        }\n      }\n      if (textureNeedsGenerateMipmaps(texture)) {\n        generateMipmap(_gl.TEXTURE_CUBE_MAP);\n      }\n      state.unbindTexture();\n    } else if (isMultipleRenderTargets) {\n      for (let i = 0, il = textures.length; i < il; i++) {\n        const attachment = textures[i];\n        const attachmentProperties = properties.get(attachment);\n        state.bindTexture(_gl.TEXTURE_2D, attachmentProperties.__webglTexture);\n        setTextureParameters(_gl.TEXTURE_2D, attachment);\n        setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, attachment, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, 0);\n        if (textureNeedsGenerateMipmaps(attachment)) {\n          generateMipmap(_gl.TEXTURE_2D);\n        }\n      }\n      state.unbindTexture();\n    } else {\n      let glTextureType = _gl.TEXTURE_2D;\n      if (renderTarget.isWebGL3DRenderTarget || renderTarget.isWebGLArrayRenderTarget) {\n        glTextureType = renderTarget.isWebGL3DRenderTarget ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;\n      }\n      state.bindTexture(glTextureType, textureProperties.__webglTexture);\n      setTextureParameters(glTextureType, texture);\n      if (texture.mipmaps && texture.mipmaps.length > 0) {\n        for (let level = 0; level < texture.mipmaps.length; level++) {\n          setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[level], renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType, level);\n        }\n      } else {\n        setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType, 0);\n      }\n      if (textureNeedsGenerateMipmaps(texture)) {\n        generateMipmap(glTextureType);\n      }\n      state.unbindTexture();\n    }\n\n    // Setup depth and stencil buffers\n\n    if (renderTarget.depthBuffer) {\n      setupDepthRenderbuffer(renderTarget);\n    }\n  }\n  function updateRenderTargetMipmap(renderTarget) {\n    const textures = renderTarget.textures;\n    for (let i = 0, il = textures.length; i < il; i++) {\n      const texture = textures[i];\n      if (textureNeedsGenerateMipmaps(texture)) {\n        const targetType = getTargetType(renderTarget);\n        const webglTexture = properties.get(texture).__webglTexture;\n        state.bindTexture(targetType, webglTexture);\n        generateMipmap(targetType);\n        state.unbindTexture();\n      }\n    }\n  }\n  const invalidationArrayRead = [];\n  const invalidationArrayDraw = [];\n  function updateMultisampleRenderTarget(renderTarget) {\n    if (renderTarget.samples > 0) {\n      if (useMultisampledRTT(renderTarget) === false) {\n        const textures = renderTarget.textures;\n        const width = renderTarget.width;\n        const height = renderTarget.height;\n        let mask = _gl.COLOR_BUFFER_BIT;\n        const depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;\n        const renderTargetProperties = properties.get(renderTarget);\n        const isMultipleRenderTargets = textures.length > 1;\n\n        // If MRT we need to remove FBO attachments\n        if (isMultipleRenderTargets) {\n          for (let i = 0; i < textures.length; i++) {\n            state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n            _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, null);\n            state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n            _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, null, 0);\n          }\n        }\n        state.bindFramebuffer(_gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n        const mipmaps = renderTarget.texture.mipmaps;\n        if (mipmaps && mipmaps.length > 0) {\n          state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[0]);\n        } else {\n          state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n        }\n        for (let i = 0; i < textures.length; i++) {\n          if (renderTarget.resolveDepthBuffer) {\n            if (renderTarget.depthBuffer) mask |= _gl.DEPTH_BUFFER_BIT;\n\n            // resolving stencil is slow with a D3D backend. disable it for all transmission render targets (see #27799)\n\n            if (renderTarget.stencilBuffer && renderTarget.resolveStencilBuffer) mask |= _gl.STENCIL_BUFFER_BIT;\n          }\n          if (isMultipleRenderTargets) {\n            _gl.framebufferRenderbuffer(_gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);\n            const webglTexture = properties.get(textures[i]).__webglTexture;\n            _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, webglTexture, 0);\n          }\n          _gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST);\n          if (supportsInvalidateFramebuffer === true) {\n            invalidationArrayRead.length = 0;\n            invalidationArrayDraw.length = 0;\n            invalidationArrayRead.push(_gl.COLOR_ATTACHMENT0 + i);\n            if (renderTarget.depthBuffer && renderTarget.resolveDepthBuffer === false) {\n              invalidationArrayRead.push(depthStyle);\n              invalidationArrayDraw.push(depthStyle);\n              _gl.invalidateFramebuffer(_gl.DRAW_FRAMEBUFFER, invalidationArrayDraw);\n            }\n            _gl.invalidateFramebuffer(_gl.READ_FRAMEBUFFER, invalidationArrayRead);\n          }\n        }\n        state.bindFramebuffer(_gl.READ_FRAMEBUFFER, null);\n        state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, null);\n\n        // If MRT since pre-blit we removed the FBO we need to reconstruct the attachments\n        if (isMultipleRenderTargets) {\n          for (let i = 0; i < textures.length; i++) {\n            state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n            _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);\n            const webglTexture = properties.get(textures[i]).__webglTexture;\n            state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n            _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, webglTexture, 0);\n          }\n        }\n        state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n      } else {\n        if (renderTarget.depthBuffer && renderTarget.resolveDepthBuffer === false && supportsInvalidateFramebuffer) {\n          const depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;\n          _gl.invalidateFramebuffer(_gl.DRAW_FRAMEBUFFER, [depthStyle]);\n        }\n      }\n    }\n  }\n  function getRenderTargetSamples(renderTarget) {\n    return Math.min(capabilities.maxSamples, renderTarget.samples);\n  }\n  function useMultisampledRTT(renderTarget) {\n    const renderTargetProperties = properties.get(renderTarget);\n    return renderTarget.samples > 0 && extensions.has('WEBGL_multisampled_render_to_texture') === true && renderTargetProperties.__useRenderToTexture !== false;\n  }\n  function updateVideoTexture(texture) {\n    const frame = info.render.frame;\n\n    // Check the last frame we updated the VideoTexture\n\n    if (_videoTextures.get(texture) !== frame) {\n      _videoTextures.set(texture, frame);\n      texture.update();\n    }\n  }\n  function verifyColorSpace(texture, image) {\n    const colorSpace = texture.colorSpace;\n    const format = texture.format;\n    const type = texture.type;\n    if (texture.isCompressedTexture === true || texture.isVideoTexture === true) return image;\n    if (colorSpace !== LinearSRGBColorSpace && colorSpace !== NoColorSpace) {\n      // sRGB\n\n      if (ColorManagement.getTransfer(colorSpace) === SRGBTransfer) {\n        // in WebGL 2 uncompressed textures can only be sRGB encoded if they have the RGBA8 format\n\n        if (format !== RGBAFormat || type !== UnsignedByteType) {\n          console.warn('THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.');\n        }\n      } else {\n        console.error('THREE.WebGLTextures: Unsupported texture color space:', colorSpace);\n      }\n    }\n    return image;\n  }\n  function getDimensions(image) {\n    if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement) {\n      // if intrinsic data are not available, fallback to width/height\n\n      _imageDimensions.width = image.naturalWidth || image.width;\n      _imageDimensions.height = image.naturalHeight || image.height;\n    } else if (typeof VideoFrame !== 'undefined' && image instanceof VideoFrame) {\n      _imageDimensions.width = image.displayWidth;\n      _imageDimensions.height = image.displayHeight;\n    } else {\n      _imageDimensions.width = image.width;\n      _imageDimensions.height = image.height;\n    }\n    return _imageDimensions;\n  }\n\n  //\n\n  this.allocateTextureUnit = allocateTextureUnit;\n  this.resetTextureUnits = resetTextureUnits;\n  this.setTexture2D = setTexture2D;\n  this.setTexture2DArray = setTexture2DArray;\n  this.setTexture3D = setTexture3D;\n  this.setTextureCube = setTextureCube;\n  this.rebindTextures = rebindTextures;\n  this.setupRenderTarget = setupRenderTarget;\n  this.updateRenderTargetMipmap = updateRenderTargetMipmap;\n  this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n  this.setupDepthRenderbuffer = setupDepthRenderbuffer;\n  this.setupFrameBufferTexture = setupFrameBufferTexture;\n  this.useMultisampledRTT = useMultisampledRTT;\n}\nfunction WebGLUtils(gl, extensions) {\n  function convert(p) {\n    let colorSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : NoColorSpace;\n    let extension;\n    const transfer = ColorManagement.getTransfer(colorSpace);\n    if (p === UnsignedByteType) return gl.UNSIGNED_BYTE;\n    if (p === UnsignedShort4444Type) return gl.UNSIGNED_SHORT_4_4_4_4;\n    if (p === UnsignedShort5551Type) return gl.UNSIGNED_SHORT_5_5_5_1;\n    if (p === UnsignedInt5999Type) return gl.UNSIGNED_INT_5_9_9_9_REV;\n    if (p === ByteType) return gl.BYTE;\n    if (p === ShortType) return gl.SHORT;\n    if (p === UnsignedShortType) return gl.UNSIGNED_SHORT;\n    if (p === IntType) return gl.INT;\n    if (p === UnsignedIntType) return gl.UNSIGNED_INT;\n    if (p === FloatType) return gl.FLOAT;\n    if (p === HalfFloatType) return gl.HALF_FLOAT;\n    if (p === AlphaFormat) return gl.ALPHA;\n    if (p === RGBFormat) return gl.RGB;\n    if (p === RGBAFormat) return gl.RGBA;\n    if (p === DepthFormat) return gl.DEPTH_COMPONENT;\n    if (p === DepthStencilFormat) return gl.DEPTH_STENCIL;\n\n    // WebGL2 formats.\n\n    if (p === RedFormat) return gl.RED;\n    if (p === RedIntegerFormat) return gl.RED_INTEGER;\n    if (p === RGFormat) return gl.RG;\n    if (p === RGIntegerFormat) return gl.RG_INTEGER;\n    if (p === RGBAIntegerFormat) return gl.RGBA_INTEGER;\n\n    // S3TC\n\n    if (p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format) {\n      if (transfer === SRGBTransfer) {\n        extension = extensions.get('WEBGL_compressed_texture_s3tc_srgb');\n        if (extension !== null) {\n          if (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;\n          if (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;\n          if (p === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;\n          if (p === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;\n        } else {\n          return null;\n        }\n      } else {\n        extension = extensions.get('WEBGL_compressed_texture_s3tc');\n        if (extension !== null) {\n          if (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n          if (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n          if (p === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n          if (p === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n        } else {\n          return null;\n        }\n      }\n    }\n\n    // PVRTC\n\n    if (p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format) {\n      extension = extensions.get('WEBGL_compressed_texture_pvrtc');\n      if (extension !== null) {\n        if (p === RGB_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n        if (p === RGB_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n        if (p === RGBA_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n        if (p === RGBA_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n      } else {\n        return null;\n      }\n    }\n\n    // ETC\n\n    if (p === RGB_ETC1_Format || p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format) {\n      extension = extensions.get('WEBGL_compressed_texture_etc');\n      if (extension !== null) {\n        if (p === RGB_ETC1_Format || p === RGB_ETC2_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;\n        if (p === RGBA_ETC2_EAC_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;\n      } else {\n        return null;\n      }\n    }\n\n    // ASTC\n\n    if (p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format || p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format || p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format || p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format || p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format) {\n      extension = extensions.get('WEBGL_compressed_texture_astc');\n      if (extension !== null) {\n        if (p === RGBA_ASTC_4x4_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;\n        if (p === RGBA_ASTC_5x4_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;\n        if (p === RGBA_ASTC_5x5_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension.COMPRESSED_RGBA_ASTC_5x5_KHR;\n        if (p === RGBA_ASTC_6x5_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension.COMPRESSED_RGBA_ASTC_6x5_KHR;\n        if (p === RGBA_ASTC_6x6_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension.COMPRESSED_RGBA_ASTC_6x6_KHR;\n        if (p === RGBA_ASTC_8x5_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension.COMPRESSED_RGBA_ASTC_8x5_KHR;\n        if (p === RGBA_ASTC_8x6_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension.COMPRESSED_RGBA_ASTC_8x6_KHR;\n        if (p === RGBA_ASTC_8x8_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension.COMPRESSED_RGBA_ASTC_8x8_KHR;\n        if (p === RGBA_ASTC_10x5_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension.COMPRESSED_RGBA_ASTC_10x5_KHR;\n        if (p === RGBA_ASTC_10x6_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension.COMPRESSED_RGBA_ASTC_10x6_KHR;\n        if (p === RGBA_ASTC_10x8_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension.COMPRESSED_RGBA_ASTC_10x8_KHR;\n        if (p === RGBA_ASTC_10x10_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension.COMPRESSED_RGBA_ASTC_10x10_KHR;\n        if (p === RGBA_ASTC_12x10_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension.COMPRESSED_RGBA_ASTC_12x10_KHR;\n        if (p === RGBA_ASTC_12x12_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension.COMPRESSED_RGBA_ASTC_12x12_KHR;\n      } else {\n        return null;\n      }\n    }\n\n    // BPTC\n\n    if (p === RGBA_BPTC_Format || p === RGB_BPTC_SIGNED_Format || p === RGB_BPTC_UNSIGNED_Format) {\n      extension = extensions.get('EXT_texture_compression_bptc');\n      if (extension !== null) {\n        if (p === RGBA_BPTC_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;\n        if (p === RGB_BPTC_SIGNED_Format) return extension.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;\n        if (p === RGB_BPTC_UNSIGNED_Format) return extension.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;\n      } else {\n        return null;\n      }\n    }\n\n    // RGTC\n\n    if (p === RED_RGTC1_Format || p === SIGNED_RED_RGTC1_Format || p === RED_GREEN_RGTC2_Format || p === SIGNED_RED_GREEN_RGTC2_Format) {\n      extension = extensions.get('EXT_texture_compression_rgtc');\n      if (extension !== null) {\n        if (p === RGBA_BPTC_Format) return extension.COMPRESSED_RED_RGTC1_EXT;\n        if (p === SIGNED_RED_RGTC1_Format) return extension.COMPRESSED_SIGNED_RED_RGTC1_EXT;\n        if (p === RED_GREEN_RGTC2_Format) return extension.COMPRESSED_RED_GREEN_RGTC2_EXT;\n        if (p === SIGNED_RED_GREEN_RGTC2_Format) return extension.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;\n      } else {\n        return null;\n      }\n    }\n\n    //\n\n    if (p === UnsignedInt248Type) return gl.UNSIGNED_INT_24_8;\n\n    // if \"p\" can't be resolved, assume the user defines a WebGL constant as a string (fallback/workaround for packed RGB formats)\n\n    return gl[p] !== undefined ? gl[p] : null;\n  }\n  return {\n    convert: convert\n  };\n}\nconst _occlusion_vertex = `\nvoid main() {\n\n\tgl_Position = vec4( position, 1.0 );\n\n}`;\nconst _occlusion_fragment = `\nuniform sampler2DArray depthColor;\nuniform float depthWidth;\nuniform float depthHeight;\n\nvoid main() {\n\n\tvec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );\n\n\tif ( coord.x >= 1.0 ) {\n\n\t\tgl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;\n\n\t} else {\n\n\t\tgl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;\n\n\t}\n\n}`;\n\n/**\n * A XR module that manages the access to the Depth Sensing API.\n */\nclass WebXRDepthSensing {\n  /**\n   * Constructs a new depth sensing module.\n   */\n  constructor() {\n    /**\n     * A texture representing the depth of the user's environment.\n     *\n     * @type {?Texture}\n     */\n    this.texture = null;\n\n    /**\n     * A plane mesh for visualizing the depth texture.\n     *\n     * @type {?Mesh}\n     */\n    this.mesh = null;\n\n    /**\n     * The depth near value.\n     *\n     * @type {number}\n     */\n    this.depthNear = 0;\n\n    /**\n     * The depth near far.\n     *\n     * @type {number}\n     */\n    this.depthFar = 0;\n  }\n\n  /**\n   * Inits the depth sensing module\n   *\n   * @param {WebGLRenderer} renderer - The renderer.\n   * @param {XRWebGLDepthInformation} depthData - The XR depth data.\n   * @param {XRRenderState} renderState - The XR render state.\n   */\n  init(renderer, depthData, renderState) {\n    if (this.texture === null) {\n      const texture = new Texture();\n      const texProps = renderer.properties.get(texture);\n      texProps.__webglTexture = depthData.texture;\n      if (depthData.depthNear !== renderState.depthNear || depthData.depthFar !== renderState.depthFar) {\n        this.depthNear = depthData.depthNear;\n        this.depthFar = depthData.depthFar;\n      }\n      this.texture = texture;\n    }\n  }\n\n  /**\n   * Returns a plane mesh that visualizes the depth texture.\n   *\n   * @param {ArrayCamera} cameraXR - The XR camera.\n   * @return {?Mesh} The plane mesh.\n   */\n  getMesh(cameraXR) {\n    if (this.texture !== null) {\n      if (this.mesh === null) {\n        const viewport = cameraXR.cameras[0].viewport;\n        const material = new ShaderMaterial({\n          vertexShader: _occlusion_vertex,\n          fragmentShader: _occlusion_fragment,\n          uniforms: {\n            depthColor: {\n              value: this.texture\n            },\n            depthWidth: {\n              value: viewport.z\n            },\n            depthHeight: {\n              value: viewport.w\n            }\n          }\n        });\n        this.mesh = new Mesh(new PlaneGeometry(20, 20), material);\n      }\n    }\n    return this.mesh;\n  }\n\n  /**\n   * Resets the module\n   */\n  reset() {\n    this.texture = null;\n    this.mesh = null;\n  }\n\n  /**\n   * Returns a texture representing the depth of the user's environment.\n   *\n   * @return {?Texture} The depth texture.\n   */\n  getDepthTexture() {\n    return this.texture;\n  }\n}\n\n/**\n * This class represents an abstraction of the WebXR Device API and is\n * internally used by {@link WebGLRenderer}. `WebXRManager` also provides a public\n * interface that allows users to enable/disable XR and perform XR related\n * tasks like for instance retrieving controllers.\n *\n * @augments EventDispatcher\n * @hideconstructor\n */\nclass WebXRManager extends EventDispatcher {\n  /**\n   * Constructs a new WebGL renderer.\n   *\n   * @param {WebGLRenderer} renderer - The renderer.\n   * @param {WebGL2RenderingContext} gl - The rendering context.\n   */\n  constructor(renderer, gl) {\n    super();\n    const scope = this;\n    let session = null;\n    let framebufferScaleFactor = 1.0;\n    let referenceSpace = null;\n    let referenceSpaceType = 'local-floor';\n    // Set default foveation to maximum.\n    let foveation = 1.0;\n    let customReferenceSpace = null;\n    let pose = null;\n    let glBinding = null;\n    let glProjLayer = null;\n    let glBaseLayer = null;\n    let xrFrame = null;\n    const depthSensing = new WebXRDepthSensing();\n    const attributes = gl.getContextAttributes();\n    let initialRenderTarget = null;\n    let newRenderTarget = null;\n    const controllers = [];\n    const controllerInputSources = [];\n    const currentSize = new Vector2();\n    let currentPixelRatio = null;\n\n    //\n\n    const cameraL = new PerspectiveCamera();\n    cameraL.viewport = new Vector4();\n    const cameraR = new PerspectiveCamera();\n    cameraR.viewport = new Vector4();\n    const cameras = [cameraL, cameraR];\n    const cameraXR = new ArrayCamera();\n    let _currentDepthNear = null;\n    let _currentDepthFar = null;\n\n    //\n\n    /**\n     * Whether the manager's XR camera should be automatically updated or not.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.cameraAutoUpdate = true;\n\n    /**\n     * This flag notifies the renderer to be ready for XR rendering. Set it to `true`\n     * if you are going to use XR in your app.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.enabled = false;\n\n    /**\n     * Whether XR presentation is active or not.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default false\n     */\n    this.isPresenting = false;\n\n    /**\n     * Returns a group representing the `target ray` space of the XR controller.\n     * Use this space for visualizing 3D objects that support the user in pointing\n     * tasks like UI interaction.\n     *\n     * @param {number} index - The index of the controller.\n     * @return {Group} A group representing the `target ray` space.\n     */\n    this.getController = function (index) {\n      let controller = controllers[index];\n      if (controller === undefined) {\n        controller = new WebXRController();\n        controllers[index] = controller;\n      }\n      return controller.getTargetRaySpace();\n    };\n\n    /**\n     * Returns a group representing the `grip` space of the XR controller.\n     * Use this space for visualizing 3D objects that support the user in pointing\n     * tasks like UI interaction.\n     *\n     * Note: If you want to show something in the user's hand AND offer a\n     * pointing ray at the same time, you'll want to attached the handheld object\n     * to the group returned by `getControllerGrip()` and the ray to the\n     * group returned by `getController()`. The idea is to have two\n     * different groups in two different coordinate spaces for the same WebXR\n     * controller.\n     *\n     * @param {number} index - The index of the controller.\n     * @return {Group} A group representing the `grip` space.\n     */\n    this.getControllerGrip = function (index) {\n      let controller = controllers[index];\n      if (controller === undefined) {\n        controller = new WebXRController();\n        controllers[index] = controller;\n      }\n      return controller.getGripSpace();\n    };\n\n    /**\n     * Returns a group representing the `hand` space of the XR controller.\n     * Use this space for visualizing 3D objects that support the user in pointing\n     * tasks like UI interaction.\n     *\n     * @param {number} index - The index of the controller.\n     * @return {Group} A group representing the `hand` space.\n     */\n    this.getHand = function (index) {\n      let controller = controllers[index];\n      if (controller === undefined) {\n        controller = new WebXRController();\n        controllers[index] = controller;\n      }\n      return controller.getHandSpace();\n    };\n\n    //\n\n    function onSessionEvent(event) {\n      const controllerIndex = controllerInputSources.indexOf(event.inputSource);\n      if (controllerIndex === -1) {\n        return;\n      }\n      const controller = controllers[controllerIndex];\n      if (controller !== undefined) {\n        controller.update(event.inputSource, event.frame, customReferenceSpace || referenceSpace);\n        controller.dispatchEvent({\n          type: event.type,\n          data: event.inputSource\n        });\n      }\n    }\n    function onSessionEnd() {\n      session.removeEventListener('select', onSessionEvent);\n      session.removeEventListener('selectstart', onSessionEvent);\n      session.removeEventListener('selectend', onSessionEvent);\n      session.removeEventListener('squeeze', onSessionEvent);\n      session.removeEventListener('squeezestart', onSessionEvent);\n      session.removeEventListener('squeezeend', onSessionEvent);\n      session.removeEventListener('end', onSessionEnd);\n      session.removeEventListener('inputsourceschange', onInputSourcesChange);\n      for (let i = 0; i < controllers.length; i++) {\n        const inputSource = controllerInputSources[i];\n        if (inputSource === null) continue;\n        controllerInputSources[i] = null;\n        controllers[i].disconnect(inputSource);\n      }\n      _currentDepthNear = null;\n      _currentDepthFar = null;\n      depthSensing.reset();\n\n      // restore framebuffer/rendering state\n\n      renderer.setRenderTarget(initialRenderTarget);\n      glBaseLayer = null;\n      glProjLayer = null;\n      glBinding = null;\n      session = null;\n      newRenderTarget = null;\n\n      //\n\n      animation.stop();\n      scope.isPresenting = false;\n      renderer.setPixelRatio(currentPixelRatio);\n      renderer.setSize(currentSize.width, currentSize.height, false);\n      scope.dispatchEvent({\n        type: 'sessionend'\n      });\n    }\n\n    /**\n     * Sets the framebuffer scale factor.\n     *\n     * This method can not be used during a XR session.\n     *\n     * @param {number} value - The framebuffer scale factor.\n     */\n    this.setFramebufferScaleFactor = function (value) {\n      framebufferScaleFactor = value;\n      if (scope.isPresenting === true) {\n        console.warn('THREE.WebXRManager: Cannot change framebuffer scale while presenting.');\n      }\n    };\n\n    /**\n     * Sets the reference space type. Can be used to configure a spatial relationship with the user's physical\n     * environment. Depending on how the user moves in 3D space, setting an appropriate reference space can\n     * improve tracking. Default is `local-floor`. Valid values can be found here\n     * https://developer.mozilla.org/en-US/docs/Web/API/XRReferenceSpace#reference_space_types.\n     *\n     * This method can not be used during a XR session.\n     *\n     * @param {string} value - The reference space type.\n     */\n    this.setReferenceSpaceType = function (value) {\n      referenceSpaceType = value;\n      if (scope.isPresenting === true) {\n        console.warn('THREE.WebXRManager: Cannot change reference space type while presenting.');\n      }\n    };\n\n    /**\n     * Returns the XR reference space.\n     *\n     * @return {XRReferenceSpace} The XR reference space.\n     */\n    this.getReferenceSpace = function () {\n      return customReferenceSpace || referenceSpace;\n    };\n\n    /**\n     * Sets a custom XR reference space.\n     *\n     * @param {XRReferenceSpace} space - The XR reference space.\n     */\n    this.setReferenceSpace = function (space) {\n      customReferenceSpace = space;\n    };\n\n    /**\n     * Returns the current base layer.\n     *\n     * @return {?(XRWebGLLayer|XRProjectionLayer)} The XR base layer.\n     */\n    this.getBaseLayer = function () {\n      return glProjLayer !== null ? glProjLayer : glBaseLayer;\n    };\n\n    /**\n     * Returns the current XR binding.\n     *\n     * @return {?XRWebGLBinding} The XR binding.\n     */\n    this.getBinding = function () {\n      return glBinding;\n    };\n\n    /**\n     * Returns the current XR frame.\n     *\n     * @return {?XRFrame} The XR frame. Returns `null` when used outside a XR session.\n     */\n    this.getFrame = function () {\n      return xrFrame;\n    };\n\n    /**\n     * Returns the current XR session.\n     *\n     * @return {?XRSession} The XR session. Returns `null` when used outside a XR session.\n     */\n    this.getSession = function () {\n      return session;\n    };\n\n    /**\n     * After a XR session has been requested usually with one of the `*Button` modules, it\n     * is injected into the renderer with this method. This method triggers the start of\n     * the actual XR rendering.\n     *\n     * @async\n     * @param {XRSession} value - The XR session to set.\n     * @return {Promise} A Promise that resolves when the session has been set.\n     */\n    this.setSession = async function (value) {\n      session = value;\n      if (session !== null) {\n        initialRenderTarget = renderer.getRenderTarget();\n        session.addEventListener('select', onSessionEvent);\n        session.addEventListener('selectstart', onSessionEvent);\n        session.addEventListener('selectend', onSessionEvent);\n        session.addEventListener('squeeze', onSessionEvent);\n        session.addEventListener('squeezestart', onSessionEvent);\n        session.addEventListener('squeezeend', onSessionEvent);\n        session.addEventListener('end', onSessionEnd);\n        session.addEventListener('inputsourceschange', onInputSourcesChange);\n        if (attributes.xrCompatible !== true) {\n          await gl.makeXRCompatible();\n        }\n        currentPixelRatio = renderer.getPixelRatio();\n        renderer.getSize(currentSize);\n\n        // Check that the browser implements the necessary APIs to use an\n        // XRProjectionLayer rather than an XRWebGLLayer\n        const useLayers = typeof XRWebGLBinding !== 'undefined' && 'createProjectionLayer' in XRWebGLBinding.prototype;\n        if (!useLayers) {\n          const layerInit = {\n            antialias: attributes.antialias,\n            alpha: true,\n            depth: attributes.depth,\n            stencil: attributes.stencil,\n            framebufferScaleFactor: framebufferScaleFactor\n          };\n          glBaseLayer = new XRWebGLLayer(session, gl, layerInit);\n          session.updateRenderState({\n            baseLayer: glBaseLayer\n          });\n          renderer.setPixelRatio(1);\n          renderer.setSize(glBaseLayer.framebufferWidth, glBaseLayer.framebufferHeight, false);\n          newRenderTarget = new WebGLRenderTarget(glBaseLayer.framebufferWidth, glBaseLayer.framebufferHeight, {\n            format: RGBAFormat,\n            type: UnsignedByteType,\n            colorSpace: renderer.outputColorSpace,\n            stencilBuffer: attributes.stencil,\n            resolveDepthBuffer: glBaseLayer.ignoreDepthValues === false,\n            resolveStencilBuffer: glBaseLayer.ignoreDepthValues === false\n          });\n        } else {\n          let depthFormat = null;\n          let depthType = null;\n          let glDepthFormat = null;\n          if (attributes.depth) {\n            glDepthFormat = attributes.stencil ? gl.DEPTH24_STENCIL8 : gl.DEPTH_COMPONENT24;\n            depthFormat = attributes.stencil ? DepthStencilFormat : DepthFormat;\n            depthType = attributes.stencil ? UnsignedInt248Type : UnsignedIntType;\n          }\n          const projectionlayerInit = {\n            colorFormat: gl.RGBA8,\n            depthFormat: glDepthFormat,\n            scaleFactor: framebufferScaleFactor\n          };\n          glBinding = new XRWebGLBinding(session, gl);\n          glProjLayer = glBinding.createProjectionLayer(projectionlayerInit);\n          session.updateRenderState({\n            layers: [glProjLayer]\n          });\n          renderer.setPixelRatio(1);\n          renderer.setSize(glProjLayer.textureWidth, glProjLayer.textureHeight, false);\n          newRenderTarget = new WebGLRenderTarget(glProjLayer.textureWidth, glProjLayer.textureHeight, {\n            format: RGBAFormat,\n            type: UnsignedByteType,\n            depthTexture: new DepthTexture(glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, undefined, undefined, undefined, undefined, undefined, undefined, depthFormat),\n            stencilBuffer: attributes.stencil,\n            colorSpace: renderer.outputColorSpace,\n            samples: attributes.antialias ? 4 : 0,\n            resolveDepthBuffer: glProjLayer.ignoreDepthValues === false,\n            resolveStencilBuffer: glProjLayer.ignoreDepthValues === false\n          });\n        }\n        newRenderTarget.isXRRenderTarget = true; // TODO Remove this when possible, see #23278\n\n        this.setFoveation(foveation);\n        customReferenceSpace = null;\n        referenceSpace = await session.requestReferenceSpace(referenceSpaceType);\n        animation.setContext(session);\n        animation.start();\n        scope.isPresenting = true;\n        scope.dispatchEvent({\n          type: 'sessionstart'\n        });\n      }\n    };\n\n    /**\n     * Returns the environment blend mode from the current XR session.\n     *\n     * @return {'opaque'|'additive'|'alpha-blend'|undefined} The environment blend mode. Returns `undefined` when used outside of a XR session.\n     */\n    this.getEnvironmentBlendMode = function () {\n      if (session !== null) {\n        return session.environmentBlendMode;\n      }\n    };\n\n    /**\n     * Returns the current depth texture computed via depth sensing.\n     *\n     * @return {?Texture} The depth texture.\n     */\n    this.getDepthTexture = function () {\n      return depthSensing.getDepthTexture();\n    };\n    function onInputSourcesChange(event) {\n      // Notify disconnected\n\n      for (let i = 0; i < event.removed.length; i++) {\n        const inputSource = event.removed[i];\n        const index = controllerInputSources.indexOf(inputSource);\n        if (index >= 0) {\n          controllerInputSources[index] = null;\n          controllers[index].disconnect(inputSource);\n        }\n      }\n\n      // Notify connected\n\n      for (let i = 0; i < event.added.length; i++) {\n        const inputSource = event.added[i];\n        let controllerIndex = controllerInputSources.indexOf(inputSource);\n        if (controllerIndex === -1) {\n          // Assign input source a controller that currently has no input source\n\n          for (let i = 0; i < controllers.length; i++) {\n            if (i >= controllerInputSources.length) {\n              controllerInputSources.push(inputSource);\n              controllerIndex = i;\n              break;\n            } else if (controllerInputSources[i] === null) {\n              controllerInputSources[i] = inputSource;\n              controllerIndex = i;\n              break;\n            }\n          }\n\n          // If all controllers do currently receive input we ignore new ones\n\n          if (controllerIndex === -1) break;\n        }\n        const controller = controllers[controllerIndex];\n        if (controller) {\n          controller.connect(inputSource);\n        }\n      }\n    }\n\n    //\n\n    const cameraLPos = new Vector3();\n    const cameraRPos = new Vector3();\n\n    /**\n     * Assumes 2 cameras that are parallel and share an X-axis, and that\n     * the cameras' projection and world matrices have already been set.\n     * And that near and far planes are identical for both cameras.\n     * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n     *\n     * @param {ArrayCamera} camera - The camera to update.\n     * @param {PerspectiveCamera} cameraL - The left camera.\n     * @param {PerspectiveCamera} cameraR - The right camera.\n     */\n    function setProjectionFromUnion(camera, cameraL, cameraR) {\n      cameraLPos.setFromMatrixPosition(cameraL.matrixWorld);\n      cameraRPos.setFromMatrixPosition(cameraR.matrixWorld);\n      const ipd = cameraLPos.distanceTo(cameraRPos);\n      const projL = cameraL.projectionMatrix.elements;\n      const projR = cameraR.projectionMatrix.elements;\n\n      // VR systems will have identical far and near planes, and\n      // most likely identical top and bottom frustum extents.\n      // Use the left camera for these values.\n      const near = projL[14] / (projL[10] - 1);\n      const far = projL[14] / (projL[10] + 1);\n      const topFov = (projL[9] + 1) / projL[5];\n      const bottomFov = (projL[9] - 1) / projL[5];\n      const leftFov = (projL[8] - 1) / projL[0];\n      const rightFov = (projR[8] + 1) / projR[0];\n      const left = near * leftFov;\n      const right = near * rightFov;\n\n      // Calculate the new camera's position offset from the\n      // left camera. xOffset should be roughly half `ipd`.\n      const zOffset = ipd / (-leftFov + rightFov);\n      const xOffset = zOffset * -leftFov;\n\n      // TODO: Better way to apply this offset?\n      cameraL.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);\n      camera.translateX(xOffset);\n      camera.translateZ(zOffset);\n      camera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);\n      camera.matrixWorldInverse.copy(camera.matrixWorld).invert();\n\n      // Check if the projection uses an infinite far plane.\n      if (projL[10] === -1) {\n        // Use the projection matrix from the left eye.\n        // The camera offset is sufficient to include the view volumes\n        // of both eyes (assuming symmetric projections).\n        camera.projectionMatrix.copy(cameraL.projectionMatrix);\n        camera.projectionMatrixInverse.copy(cameraL.projectionMatrixInverse);\n      } else {\n        // Find the union of the frustum values of the cameras and scale\n        // the values so that the near plane's position does not change in world space,\n        // although must now be relative to the new union camera.\n        const near2 = near + zOffset;\n        const far2 = far + zOffset;\n        const left2 = left - xOffset;\n        const right2 = right + (ipd - xOffset);\n        const top2 = topFov * far / far2 * near2;\n        const bottom2 = bottomFov * far / far2 * near2;\n        camera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);\n        camera.projectionMatrixInverse.copy(camera.projectionMatrix).invert();\n      }\n    }\n    function updateCamera(camera, parent) {\n      if (parent === null) {\n        camera.matrixWorld.copy(camera.matrix);\n      } else {\n        camera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);\n      }\n      camera.matrixWorldInverse.copy(camera.matrixWorld).invert();\n    }\n\n    /**\n     * Updates the state of the XR camera. Use this method on app level if you\n     * set cameraAutoUpdate` to `false`. The method requires the non-XR\n     * camera of the scene as a parameter. The passed in camera's transformation\n     * is automatically adjusted to the position of the XR camera when calling\n     * this method.\n     *\n     * @param {Camera} camera - The camera.\n     */\n    this.updateCamera = function (camera) {\n      if (session === null) return;\n      let depthNear = camera.near;\n      let depthFar = camera.far;\n      if (depthSensing.texture !== null) {\n        if (depthSensing.depthNear > 0) depthNear = depthSensing.depthNear;\n        if (depthSensing.depthFar > 0) depthFar = depthSensing.depthFar;\n      }\n      cameraXR.near = cameraR.near = cameraL.near = depthNear;\n      cameraXR.far = cameraR.far = cameraL.far = depthFar;\n      if (_currentDepthNear !== cameraXR.near || _currentDepthFar !== cameraXR.far) {\n        // Note that the new renderState won't apply until the next frame. See #18320\n\n        session.updateRenderState({\n          depthNear: cameraXR.near,\n          depthFar: cameraXR.far\n        });\n        _currentDepthNear = cameraXR.near;\n        _currentDepthFar = cameraXR.far;\n      }\n      cameraL.layers.mask = camera.layers.mask | 0b010;\n      cameraR.layers.mask = camera.layers.mask | 0b100;\n      cameraXR.layers.mask = cameraL.layers.mask | cameraR.layers.mask;\n      const parent = camera.parent;\n      const cameras = cameraXR.cameras;\n      updateCamera(cameraXR, parent);\n      for (let i = 0; i < cameras.length; i++) {\n        updateCamera(cameras[i], parent);\n      }\n\n      // update projection matrix for proper view frustum culling\n\n      if (cameras.length === 2) {\n        setProjectionFromUnion(cameraXR, cameraL, cameraR);\n      } else {\n        // assume single camera setup (AR)\n\n        cameraXR.projectionMatrix.copy(cameraL.projectionMatrix);\n      }\n\n      // update user camera and its children\n\n      updateUserCamera(camera, cameraXR, parent);\n    };\n    function updateUserCamera(camera, cameraXR, parent) {\n      if (parent === null) {\n        camera.matrix.copy(cameraXR.matrixWorld);\n      } else {\n        camera.matrix.copy(parent.matrixWorld);\n        camera.matrix.invert();\n        camera.matrix.multiply(cameraXR.matrixWorld);\n      }\n      camera.matrix.decompose(camera.position, camera.quaternion, camera.scale);\n      camera.updateMatrixWorld(true);\n      camera.projectionMatrix.copy(cameraXR.projectionMatrix);\n      camera.projectionMatrixInverse.copy(cameraXR.projectionMatrixInverse);\n      if (camera.isPerspectiveCamera) {\n        camera.fov = RAD2DEG * 2 * Math.atan(1 / camera.projectionMatrix.elements[5]);\n        camera.zoom = 1;\n      }\n    }\n\n    /**\n     * Returns an instance of {@link ArrayCamera} which represents the XR camera\n     * of the active XR session. For each view it holds a separate camera object.\n     *\n     * The camera's `fov` is currently not used and does not reflect the fov of\n     * the XR camera. If you need the fov on app level, you have to compute in\n     * manually from the XR camera's projection matrices.\n     *\n     * @return {ArrayCamera} The XR camera.\n     */\n    this.getCamera = function () {\n      return cameraXR;\n    };\n\n    /**\n     * Returns the amount of foveation used by the XR compositor for the projection layer.\n     *\n     * @return {number} The amount of foveation.\n     */\n    this.getFoveation = function () {\n      if (glProjLayer === null && glBaseLayer === null) {\n        return undefined;\n      }\n      return foveation;\n    };\n\n    /**\n     * Sets the foveation value.\n     *\n     * @param {number} value - A number in the range `[0,1]` where `0` means no foveation (full resolution)\n     * and `1` means maximum foveation (the edges render at lower resolution).\n     */\n    this.setFoveation = function (value) {\n      // 0 = no foveation = full resolution\n      // 1 = maximum foveation = the edges render at lower resolution\n\n      foveation = value;\n      if (glProjLayer !== null) {\n        glProjLayer.fixedFoveation = value;\n      }\n      if (glBaseLayer !== null && glBaseLayer.fixedFoveation !== undefined) {\n        glBaseLayer.fixedFoveation = value;\n      }\n    };\n\n    /**\n     * Returns `true` if depth sensing is supported.\n     *\n     * @return {boolean} Whether depth sensing is supported or not.\n     */\n    this.hasDepthSensing = function () {\n      return depthSensing.texture !== null;\n    };\n\n    /**\n     * Returns the depth sensing mesh.\n     *\n     * @return {Mesh} The depth sensing mesh.\n     */\n    this.getDepthSensingMesh = function () {\n      return depthSensing.getMesh(cameraXR);\n    };\n\n    // Animation Loop\n\n    let onAnimationFrameCallback = null;\n    function onAnimationFrame(time, frame) {\n      pose = frame.getViewerPose(customReferenceSpace || referenceSpace);\n      xrFrame = frame;\n      if (pose !== null) {\n        const views = pose.views;\n        if (glBaseLayer !== null) {\n          renderer.setRenderTargetFramebuffer(newRenderTarget, glBaseLayer.framebuffer);\n          renderer.setRenderTarget(newRenderTarget);\n        }\n        let cameraXRNeedsUpdate = false;\n\n        // check if it's necessary to rebuild cameraXR's camera list\n\n        if (views.length !== cameraXR.cameras.length) {\n          cameraXR.cameras.length = 0;\n          cameraXRNeedsUpdate = true;\n        }\n        for (let i = 0; i < views.length; i++) {\n          const view = views[i];\n          let viewport = null;\n          if (glBaseLayer !== null) {\n            viewport = glBaseLayer.getViewport(view);\n          } else {\n            const glSubImage = glBinding.getViewSubImage(glProjLayer, view);\n            viewport = glSubImage.viewport;\n\n            // For side-by-side projection, we only produce a single texture for both eyes.\n            if (i === 0) {\n              renderer.setRenderTargetTextures(newRenderTarget, glSubImage.colorTexture, glSubImage.depthStencilTexture);\n              renderer.setRenderTarget(newRenderTarget);\n            }\n          }\n          let camera = cameras[i];\n          if (camera === undefined) {\n            camera = new PerspectiveCamera();\n            camera.layers.enable(i);\n            camera.viewport = new Vector4();\n            cameras[i] = camera;\n          }\n          camera.matrix.fromArray(view.transform.matrix);\n          camera.matrix.decompose(camera.position, camera.quaternion, camera.scale);\n          camera.projectionMatrix.fromArray(view.projectionMatrix);\n          camera.projectionMatrixInverse.copy(camera.projectionMatrix).invert();\n          camera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);\n          if (i === 0) {\n            cameraXR.matrix.copy(camera.matrix);\n            cameraXR.matrix.decompose(cameraXR.position, cameraXR.quaternion, cameraXR.scale);\n          }\n          if (cameraXRNeedsUpdate === true) {\n            cameraXR.cameras.push(camera);\n          }\n        }\n\n        //\n\n        const enabledFeatures = session.enabledFeatures;\n        const gpuDepthSensingEnabled = enabledFeatures && enabledFeatures.includes('depth-sensing') && session.depthUsage == 'gpu-optimized';\n        if (gpuDepthSensingEnabled && glBinding) {\n          const depthData = glBinding.getDepthInformation(views[0]);\n          if (depthData && depthData.isValid && depthData.texture) {\n            depthSensing.init(renderer, depthData, session.renderState);\n          }\n        }\n      }\n\n      //\n\n      for (let i = 0; i < controllers.length; i++) {\n        const inputSource = controllerInputSources[i];\n        const controller = controllers[i];\n        if (inputSource !== null && controller !== undefined) {\n          controller.update(inputSource, frame, customReferenceSpace || referenceSpace);\n        }\n      }\n      if (onAnimationFrameCallback) onAnimationFrameCallback(time, frame);\n      if (frame.detectedPlanes) {\n        scope.dispatchEvent({\n          type: 'planesdetected',\n          data: frame\n        });\n      }\n      xrFrame = null;\n    }\n    const animation = new WebGLAnimation();\n    animation.setAnimationLoop(onAnimationFrame);\n    this.setAnimationLoop = function (callback) {\n      onAnimationFrameCallback = callback;\n    };\n    this.dispose = function () {};\n  }\n}\nconst _e1 = /*@__PURE__*/new Euler();\nconst _m1 = /*@__PURE__*/new Matrix4();\nfunction WebGLMaterials(renderer, properties) {\n  function refreshTransformUniform(map, uniform) {\n    if (map.matrixAutoUpdate === true) {\n      map.updateMatrix();\n    }\n    uniform.value.copy(map.matrix);\n  }\n  function refreshFogUniforms(uniforms, fog) {\n    fog.color.getRGB(uniforms.fogColor.value, getUnlitUniformColorSpace(renderer));\n    if (fog.isFog) {\n      uniforms.fogNear.value = fog.near;\n      uniforms.fogFar.value = fog.far;\n    } else if (fog.isFogExp2) {\n      uniforms.fogDensity.value = fog.density;\n    }\n  }\n  function refreshMaterialUniforms(uniforms, material, pixelRatio, height, transmissionRenderTarget) {\n    if (material.isMeshBasicMaterial) {\n      refreshUniformsCommon(uniforms, material);\n    } else if (material.isMeshLambertMaterial) {\n      refreshUniformsCommon(uniforms, material);\n    } else if (material.isMeshToonMaterial) {\n      refreshUniformsCommon(uniforms, material);\n      refreshUniformsToon(uniforms, material);\n    } else if (material.isMeshPhongMaterial) {\n      refreshUniformsCommon(uniforms, material);\n      refreshUniformsPhong(uniforms, material);\n    } else if (material.isMeshStandardMaterial) {\n      refreshUniformsCommon(uniforms, material);\n      refreshUniformsStandard(uniforms, material);\n      if (material.isMeshPhysicalMaterial) {\n        refreshUniformsPhysical(uniforms, material, transmissionRenderTarget);\n      }\n    } else if (material.isMeshMatcapMaterial) {\n      refreshUniformsCommon(uniforms, material);\n      refreshUniformsMatcap(uniforms, material);\n    } else if (material.isMeshDepthMaterial) {\n      refreshUniformsCommon(uniforms, material);\n    } else if (material.isMeshDistanceMaterial) {\n      refreshUniformsCommon(uniforms, material);\n      refreshUniformsDistance(uniforms, material);\n    } else if (material.isMeshNormalMaterial) {\n      refreshUniformsCommon(uniforms, material);\n    } else if (material.isLineBasicMaterial) {\n      refreshUniformsLine(uniforms, material);\n      if (material.isLineDashedMaterial) {\n        refreshUniformsDash(uniforms, material);\n      }\n    } else if (material.isPointsMaterial) {\n      refreshUniformsPoints(uniforms, material, pixelRatio, height);\n    } else if (material.isSpriteMaterial) {\n      refreshUniformsSprites(uniforms, material);\n    } else if (material.isShadowMaterial) {\n      uniforms.color.value.copy(material.color);\n      uniforms.opacity.value = material.opacity;\n    } else if (material.isShaderMaterial) {\n      material.uniformsNeedUpdate = false; // #15581\n    }\n  }\n  function refreshUniformsCommon(uniforms, material) {\n    uniforms.opacity.value = material.opacity;\n    if (material.color) {\n      uniforms.diffuse.value.copy(material.color);\n    }\n    if (material.emissive) {\n      uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);\n    }\n    if (material.map) {\n      uniforms.map.value = material.map;\n      refreshTransformUniform(material.map, uniforms.mapTransform);\n    }\n    if (material.alphaMap) {\n      uniforms.alphaMap.value = material.alphaMap;\n      refreshTransformUniform(material.alphaMap, uniforms.alphaMapTransform);\n    }\n    if (material.bumpMap) {\n      uniforms.bumpMap.value = material.bumpMap;\n      refreshTransformUniform(material.bumpMap, uniforms.bumpMapTransform);\n      uniforms.bumpScale.value = material.bumpScale;\n      if (material.side === BackSide) {\n        uniforms.bumpScale.value *= -1;\n      }\n    }\n    if (material.normalMap) {\n      uniforms.normalMap.value = material.normalMap;\n      refreshTransformUniform(material.normalMap, uniforms.normalMapTransform);\n      uniforms.normalScale.value.copy(material.normalScale);\n      if (material.side === BackSide) {\n        uniforms.normalScale.value.negate();\n      }\n    }\n    if (material.displacementMap) {\n      uniforms.displacementMap.value = material.displacementMap;\n      refreshTransformUniform(material.displacementMap, uniforms.displacementMapTransform);\n      uniforms.displacementScale.value = material.displacementScale;\n      uniforms.displacementBias.value = material.displacementBias;\n    }\n    if (material.emissiveMap) {\n      uniforms.emissiveMap.value = material.emissiveMap;\n      refreshTransformUniform(material.emissiveMap, uniforms.emissiveMapTransform);\n    }\n    if (material.specularMap) {\n      uniforms.specularMap.value = material.specularMap;\n      refreshTransformUniform(material.specularMap, uniforms.specularMapTransform);\n    }\n    if (material.alphaTest > 0) {\n      uniforms.alphaTest.value = material.alphaTest;\n    }\n    const materialProperties = properties.get(material);\n    const envMap = materialProperties.envMap;\n    const envMapRotation = materialProperties.envMapRotation;\n    if (envMap) {\n      uniforms.envMap.value = envMap;\n      _e1.copy(envMapRotation);\n\n      // accommodate left-handed frame\n      _e1.x *= -1;\n      _e1.y *= -1;\n      _e1.z *= -1;\n      if (envMap.isCubeTexture && envMap.isRenderTargetTexture === false) {\n        // environment maps which are not cube render targets or PMREMs follow a different convention\n        _e1.y *= -1;\n        _e1.z *= -1;\n      }\n      uniforms.envMapRotation.value.setFromMatrix4(_m1.makeRotationFromEuler(_e1));\n      uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap.isRenderTargetTexture === false ? -1 : 1;\n      uniforms.reflectivity.value = material.reflectivity;\n      uniforms.ior.value = material.ior;\n      uniforms.refractionRatio.value = material.refractionRatio;\n    }\n    if (material.lightMap) {\n      uniforms.lightMap.value = material.lightMap;\n      uniforms.lightMapIntensity.value = material.lightMapIntensity;\n      refreshTransformUniform(material.lightMap, uniforms.lightMapTransform);\n    }\n    if (material.aoMap) {\n      uniforms.aoMap.value = material.aoMap;\n      uniforms.aoMapIntensity.value = material.aoMapIntensity;\n      refreshTransformUniform(material.aoMap, uniforms.aoMapTransform);\n    }\n  }\n  function refreshUniformsLine(uniforms, material) {\n    uniforms.diffuse.value.copy(material.color);\n    uniforms.opacity.value = material.opacity;\n    if (material.map) {\n      uniforms.map.value = material.map;\n      refreshTransformUniform(material.map, uniforms.mapTransform);\n    }\n  }\n  function refreshUniformsDash(uniforms, material) {\n    uniforms.dashSize.value = material.dashSize;\n    uniforms.totalSize.value = material.dashSize + material.gapSize;\n    uniforms.scale.value = material.scale;\n  }\n  function refreshUniformsPoints(uniforms, material, pixelRatio, height) {\n    uniforms.diffuse.value.copy(material.color);\n    uniforms.opacity.value = material.opacity;\n    uniforms.size.value = material.size * pixelRatio;\n    uniforms.scale.value = height * 0.5;\n    if (material.map) {\n      uniforms.map.value = material.map;\n      refreshTransformUniform(material.map, uniforms.uvTransform);\n    }\n    if (material.alphaMap) {\n      uniforms.alphaMap.value = material.alphaMap;\n      refreshTransformUniform(material.alphaMap, uniforms.alphaMapTransform);\n    }\n    if (material.alphaTest > 0) {\n      uniforms.alphaTest.value = material.alphaTest;\n    }\n  }\n  function refreshUniformsSprites(uniforms, material) {\n    uniforms.diffuse.value.copy(material.color);\n    uniforms.opacity.value = material.opacity;\n    uniforms.rotation.value = material.rotation;\n    if (material.map) {\n      uniforms.map.value = material.map;\n      refreshTransformUniform(material.map, uniforms.mapTransform);\n    }\n    if (material.alphaMap) {\n      uniforms.alphaMap.value = material.alphaMap;\n      refreshTransformUniform(material.alphaMap, uniforms.alphaMapTransform);\n    }\n    if (material.alphaTest > 0) {\n      uniforms.alphaTest.value = material.alphaTest;\n    }\n  }\n  function refreshUniformsPhong(uniforms, material) {\n    uniforms.specular.value.copy(material.specular);\n    uniforms.shininess.value = Math.max(material.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )\n  }\n  function refreshUniformsToon(uniforms, material) {\n    if (material.gradientMap) {\n      uniforms.gradientMap.value = material.gradientMap;\n    }\n  }\n  function refreshUniformsStandard(uniforms, material) {\n    uniforms.metalness.value = material.metalness;\n    if (material.metalnessMap) {\n      uniforms.metalnessMap.value = material.metalnessMap;\n      refreshTransformUniform(material.metalnessMap, uniforms.metalnessMapTransform);\n    }\n    uniforms.roughness.value = material.roughness;\n    if (material.roughnessMap) {\n      uniforms.roughnessMap.value = material.roughnessMap;\n      refreshTransformUniform(material.roughnessMap, uniforms.roughnessMapTransform);\n    }\n    if (material.envMap) {\n      //uniforms.envMap.value = material.envMap; // part of uniforms common\n\n      uniforms.envMapIntensity.value = material.envMapIntensity;\n    }\n  }\n  function refreshUniformsPhysical(uniforms, material, transmissionRenderTarget) {\n    uniforms.ior.value = material.ior; // also part of uniforms common\n\n    if (material.sheen > 0) {\n      uniforms.sheenColor.value.copy(material.sheenColor).multiplyScalar(material.sheen);\n      uniforms.sheenRoughness.value = material.sheenRoughness;\n      if (material.sheenColorMap) {\n        uniforms.sheenColorMap.value = material.sheenColorMap;\n        refreshTransformUniform(material.sheenColorMap, uniforms.sheenColorMapTransform);\n      }\n      if (material.sheenRoughnessMap) {\n        uniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;\n        refreshTransformUniform(material.sheenRoughnessMap, uniforms.sheenRoughnessMapTransform);\n      }\n    }\n    if (material.clearcoat > 0) {\n      uniforms.clearcoat.value = material.clearcoat;\n      uniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n      if (material.clearcoatMap) {\n        uniforms.clearcoatMap.value = material.clearcoatMap;\n        refreshTransformUniform(material.clearcoatMap, uniforms.clearcoatMapTransform);\n      }\n      if (material.clearcoatRoughnessMap) {\n        uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n        refreshTransformUniform(material.clearcoatRoughnessMap, uniforms.clearcoatRoughnessMapTransform);\n      }\n      if (material.clearcoatNormalMap) {\n        uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n        refreshTransformUniform(material.clearcoatNormalMap, uniforms.clearcoatNormalMapTransform);\n        uniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);\n        if (material.side === BackSide) {\n          uniforms.clearcoatNormalScale.value.negate();\n        }\n      }\n    }\n    if (material.dispersion > 0) {\n      uniforms.dispersion.value = material.dispersion;\n    }\n    if (material.iridescence > 0) {\n      uniforms.iridescence.value = material.iridescence;\n      uniforms.iridescenceIOR.value = material.iridescenceIOR;\n      uniforms.iridescenceThicknessMinimum.value = material.iridescenceThicknessRange[0];\n      uniforms.iridescenceThicknessMaximum.value = material.iridescenceThicknessRange[1];\n      if (material.iridescenceMap) {\n        uniforms.iridescenceMap.value = material.iridescenceMap;\n        refreshTransformUniform(material.iridescenceMap, uniforms.iridescenceMapTransform);\n      }\n      if (material.iridescenceThicknessMap) {\n        uniforms.iridescenceThicknessMap.value = material.iridescenceThicknessMap;\n        refreshTransformUniform(material.iridescenceThicknessMap, uniforms.iridescenceThicknessMapTransform);\n      }\n    }\n    if (material.transmission > 0) {\n      uniforms.transmission.value = material.transmission;\n      uniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;\n      uniforms.transmissionSamplerSize.value.set(transmissionRenderTarget.width, transmissionRenderTarget.height);\n      if (material.transmissionMap) {\n        uniforms.transmissionMap.value = material.transmissionMap;\n        refreshTransformUniform(material.transmissionMap, uniforms.transmissionMapTransform);\n      }\n      uniforms.thickness.value = material.thickness;\n      if (material.thicknessMap) {\n        uniforms.thicknessMap.value = material.thicknessMap;\n        refreshTransformUniform(material.thicknessMap, uniforms.thicknessMapTransform);\n      }\n      uniforms.attenuationDistance.value = material.attenuationDistance;\n      uniforms.attenuationColor.value.copy(material.attenuationColor);\n    }\n    if (material.anisotropy > 0) {\n      uniforms.anisotropyVector.value.set(material.anisotropy * Math.cos(material.anisotropyRotation), material.anisotropy * Math.sin(material.anisotropyRotation));\n      if (material.anisotropyMap) {\n        uniforms.anisotropyMap.value = material.anisotropyMap;\n        refreshTransformUniform(material.anisotropyMap, uniforms.anisotropyMapTransform);\n      }\n    }\n    uniforms.specularIntensity.value = material.specularIntensity;\n    uniforms.specularColor.value.copy(material.specularColor);\n    if (material.specularColorMap) {\n      uniforms.specularColorMap.value = material.specularColorMap;\n      refreshTransformUniform(material.specularColorMap, uniforms.specularColorMapTransform);\n    }\n    if (material.specularIntensityMap) {\n      uniforms.specularIntensityMap.value = material.specularIntensityMap;\n      refreshTransformUniform(material.specularIntensityMap, uniforms.specularIntensityMapTransform);\n    }\n  }\n  function refreshUniformsMatcap(uniforms, material) {\n    if (material.matcap) {\n      uniforms.matcap.value = material.matcap;\n    }\n  }\n  function refreshUniformsDistance(uniforms, material) {\n    const light = properties.get(material).light;\n    uniforms.referencePosition.value.setFromMatrixPosition(light.matrixWorld);\n    uniforms.nearDistance.value = light.shadow.camera.near;\n    uniforms.farDistance.value = light.shadow.camera.far;\n  }\n  return {\n    refreshFogUniforms: refreshFogUniforms,\n    refreshMaterialUniforms: refreshMaterialUniforms\n  };\n}\nfunction WebGLUniformsGroups(gl, info, capabilities, state) {\n  let buffers = {};\n  let updateList = {};\n  let allocatedBindingPoints = [];\n  const maxBindingPoints = gl.getParameter(gl.MAX_UNIFORM_BUFFER_BINDINGS); // binding points are global whereas block indices are per shader program\n\n  function bind(uniformsGroup, program) {\n    const webglProgram = program.program;\n    state.uniformBlockBinding(uniformsGroup, webglProgram);\n  }\n  function update(uniformsGroup, program) {\n    let buffer = buffers[uniformsGroup.id];\n    if (buffer === undefined) {\n      prepareUniformsGroup(uniformsGroup);\n      buffer = createBuffer(uniformsGroup);\n      buffers[uniformsGroup.id] = buffer;\n      uniformsGroup.addEventListener('dispose', onUniformsGroupsDispose);\n    }\n\n    // ensure to update the binding points/block indices mapping for this program\n\n    const webglProgram = program.program;\n    state.updateUBOMapping(uniformsGroup, webglProgram);\n\n    // update UBO once per frame\n\n    const frame = info.render.frame;\n    if (updateList[uniformsGroup.id] !== frame) {\n      updateBufferData(uniformsGroup);\n      updateList[uniformsGroup.id] = frame;\n    }\n  }\n  function createBuffer(uniformsGroup) {\n    // the setup of an UBO is independent of a particular shader program but global\n\n    const bindingPointIndex = allocateBindingPointIndex();\n    uniformsGroup.__bindingPointIndex = bindingPointIndex;\n    const buffer = gl.createBuffer();\n    const size = uniformsGroup.__size;\n    const usage = uniformsGroup.usage;\n    gl.bindBuffer(gl.UNIFORM_BUFFER, buffer);\n    gl.bufferData(gl.UNIFORM_BUFFER, size, usage);\n    gl.bindBuffer(gl.UNIFORM_BUFFER, null);\n    gl.bindBufferBase(gl.UNIFORM_BUFFER, bindingPointIndex, buffer);\n    return buffer;\n  }\n  function allocateBindingPointIndex() {\n    for (let i = 0; i < maxBindingPoints; i++) {\n      if (allocatedBindingPoints.indexOf(i) === -1) {\n        allocatedBindingPoints.push(i);\n        return i;\n      }\n    }\n    console.error('THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached.');\n    return 0;\n  }\n  function updateBufferData(uniformsGroup) {\n    const buffer = buffers[uniformsGroup.id];\n    const uniforms = uniformsGroup.uniforms;\n    const cache = uniformsGroup.__cache;\n    gl.bindBuffer(gl.UNIFORM_BUFFER, buffer);\n    for (let i = 0, il = uniforms.length; i < il; i++) {\n      const uniformArray = Array.isArray(uniforms[i]) ? uniforms[i] : [uniforms[i]];\n      for (let j = 0, jl = uniformArray.length; j < jl; j++) {\n        const uniform = uniformArray[j];\n        if (hasUniformChanged(uniform, i, j, cache) === true) {\n          const offset = uniform.__offset;\n          const values = Array.isArray(uniform.value) ? uniform.value : [uniform.value];\n          let arrayOffset = 0;\n          for (let k = 0; k < values.length; k++) {\n            const value = values[k];\n            const info = getUniformSize(value);\n\n            // TODO add integer and struct support\n            if (typeof value === 'number' || typeof value === 'boolean') {\n              uniform.__data[0] = value;\n              gl.bufferSubData(gl.UNIFORM_BUFFER, offset + arrayOffset, uniform.__data);\n            } else if (value.isMatrix3) {\n              // manually converting 3x3 to 3x4\n\n              uniform.__data[0] = value.elements[0];\n              uniform.__data[1] = value.elements[1];\n              uniform.__data[2] = value.elements[2];\n              uniform.__data[3] = 0;\n              uniform.__data[4] = value.elements[3];\n              uniform.__data[5] = value.elements[4];\n              uniform.__data[6] = value.elements[5];\n              uniform.__data[7] = 0;\n              uniform.__data[8] = value.elements[6];\n              uniform.__data[9] = value.elements[7];\n              uniform.__data[10] = value.elements[8];\n              uniform.__data[11] = 0;\n            } else {\n              value.toArray(uniform.__data, arrayOffset);\n              arrayOffset += info.storage / Float32Array.BYTES_PER_ELEMENT;\n            }\n          }\n          gl.bufferSubData(gl.UNIFORM_BUFFER, offset, uniform.__data);\n        }\n      }\n    }\n    gl.bindBuffer(gl.UNIFORM_BUFFER, null);\n  }\n  function hasUniformChanged(uniform, index, indexArray, cache) {\n    const value = uniform.value;\n    const indexString = index + '_' + indexArray;\n    if (cache[indexString] === undefined) {\n      // cache entry does not exist so far\n\n      if (typeof value === 'number' || typeof value === 'boolean') {\n        cache[indexString] = value;\n      } else {\n        cache[indexString] = value.clone();\n      }\n      return true;\n    } else {\n      const cachedObject = cache[indexString];\n\n      // compare current value with cached entry\n\n      if (typeof value === 'number' || typeof value === 'boolean') {\n        if (cachedObject !== value) {\n          cache[indexString] = value;\n          return true;\n        }\n      } else {\n        if (cachedObject.equals(value) === false) {\n          cachedObject.copy(value);\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  function prepareUniformsGroup(uniformsGroup) {\n    // determine total buffer size according to the STD140 layout\n    // Hint: STD140 is the only supported layout in WebGL 2\n\n    const uniforms = uniformsGroup.uniforms;\n    let offset = 0; // global buffer offset in bytes\n    const chunkSize = 16; // size of a chunk in bytes\n\n    for (let i = 0, l = uniforms.length; i < l; i++) {\n      const uniformArray = Array.isArray(uniforms[i]) ? uniforms[i] : [uniforms[i]];\n      for (let j = 0, jl = uniformArray.length; j < jl; j++) {\n        const uniform = uniformArray[j];\n        const values = Array.isArray(uniform.value) ? uniform.value : [uniform.value];\n        for (let k = 0, kl = values.length; k < kl; k++) {\n          const value = values[k];\n          const info = getUniformSize(value);\n          const chunkOffset = offset % chunkSize; // offset in the current chunk\n          const chunkPadding = chunkOffset % info.boundary; // required padding to match boundary\n          const chunkStart = chunkOffset + chunkPadding; // the start position in the current chunk for the data\n\n          offset += chunkPadding;\n\n          // Check for chunk overflow\n          if (chunkStart !== 0 && chunkSize - chunkStart < info.storage) {\n            // Add padding and adjust offset\n            offset += chunkSize - chunkStart;\n          }\n\n          // the following two properties will be used for partial buffer updates\n          uniform.__data = new Float32Array(info.storage / Float32Array.BYTES_PER_ELEMENT);\n          uniform.__offset = offset;\n\n          // Update the global offset\n          offset += info.storage;\n        }\n      }\n    }\n\n    // ensure correct final padding\n\n    const chunkOffset = offset % chunkSize;\n    if (chunkOffset > 0) offset += chunkSize - chunkOffset;\n\n    //\n\n    uniformsGroup.__size = offset;\n    uniformsGroup.__cache = {};\n    return this;\n  }\n  function getUniformSize(value) {\n    const info = {\n      boundary: 0,\n      // bytes\n      storage: 0 // bytes\n    };\n\n    // determine sizes according to STD140\n\n    if (typeof value === 'number' || typeof value === 'boolean') {\n      // float/int/bool\n\n      info.boundary = 4;\n      info.storage = 4;\n    } else if (value.isVector2) {\n      // vec2\n\n      info.boundary = 8;\n      info.storage = 8;\n    } else if (value.isVector3 || value.isColor) {\n      // vec3\n\n      info.boundary = 16;\n      info.storage = 12; // evil: vec3 must start on a 16-byte boundary but it only consumes 12 bytes\n    } else if (value.isVector4) {\n      // vec4\n\n      info.boundary = 16;\n      info.storage = 16;\n    } else if (value.isMatrix3) {\n      // mat3 (in STD140 a 3x3 matrix is represented as 3x4)\n\n      info.boundary = 48;\n      info.storage = 48;\n    } else if (value.isMatrix4) {\n      // mat4\n\n      info.boundary = 64;\n      info.storage = 64;\n    } else if (value.isTexture) {\n      console.warn('THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.');\n    } else {\n      console.warn('THREE.WebGLRenderer: Unsupported uniform value type.', value);\n    }\n    return info;\n  }\n  function onUniformsGroupsDispose(event) {\n    const uniformsGroup = event.target;\n    uniformsGroup.removeEventListener('dispose', onUniformsGroupsDispose);\n    const index = allocatedBindingPoints.indexOf(uniformsGroup.__bindingPointIndex);\n    allocatedBindingPoints.splice(index, 1);\n    gl.deleteBuffer(buffers[uniformsGroup.id]);\n    delete buffers[uniformsGroup.id];\n    delete updateList[uniformsGroup.id];\n  }\n  function dispose() {\n    for (const id in buffers) {\n      gl.deleteBuffer(buffers[id]);\n    }\n    allocatedBindingPoints = [];\n    buffers = {};\n    updateList = {};\n  }\n  return {\n    bind: bind,\n    update: update,\n    dispose: dispose\n  };\n}\n\n/**\n * This renderer uses WebGL 2 to display scenes.\n *\n * WebGL 1 is not supported since `r163`.\n */\nclass WebGLRenderer {\n  /**\n   * Constructs a new WebGL renderer.\n   *\n   * @param {WebGLRenderer~Options} [parameters] - The configuration parameter.\n   */\n  constructor() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      canvas = createCanvasElement(),\n      context = null,\n      depth = true,\n      stencil = false,\n      alpha = false,\n      antialias = false,\n      premultipliedAlpha = true,\n      preserveDrawingBuffer = false,\n      powerPreference = 'default',\n      failIfMajorPerformanceCaveat = false,\n      reverseDepthBuffer = false\n    } = parameters;\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isWebGLRenderer = true;\n    let _alpha;\n    if (context !== null) {\n      if (typeof WebGLRenderingContext !== 'undefined' && context instanceof WebGLRenderingContext) {\n        throw new Error('THREE.WebGLRenderer: WebGL 1 is not supported since r163.');\n      }\n      _alpha = context.getContextAttributes().alpha;\n    } else {\n      _alpha = alpha;\n    }\n    const uintClearColor = new Uint32Array(4);\n    const intClearColor = new Int32Array(4);\n    let currentRenderList = null;\n    let currentRenderState = null;\n\n    // render() can be called from within a callback triggered by another render.\n    // We track this so that the nested render call gets its list and state isolated from the parent render call.\n\n    const renderListStack = [];\n    const renderStateStack = [];\n\n    // public properties\n\n    /**\n     * A canvas where the renderer draws its output.This is automatically created by the renderer\n     * in the constructor (if not provided already); you just need to add it to your page like so:\n     * ```js\n     * document.body.appendChild( renderer.domElement );\n     * ```\n     *\n     * @type {DOMElement}\n     */\n    this.domElement = canvas;\n\n    /**\n     * A object with debug configuration settings.\n     *\n     * - `checkShaderErrors`: If it is `true`, defines whether material shader programs are\n     * checked for errors during compilation and linkage process. It may be useful to disable\n     * this check in production for performance gain. It is strongly recommended to keep these\n     * checks enabled during development. If the shader does not compile and link - it will not\n     * work and associated material will not render.\n     * - `onShaderError(gl, program, glVertexShader,glFragmentShader)`: A callback function that\n     * can be used for custom error reporting. The callback receives the WebGL context, an instance\n     * of WebGLProgram as well two instances of WebGLShader representing the vertex and fragment shader.\n     * Assigning a custom function disables the default error reporting.\n     *\n     * @type {Object}\n     */\n    this.debug = {\n      /**\n       * Enables error checking and reporting when shader programs are being compiled.\n       * @type {boolean}\n       */\n      checkShaderErrors: true,\n      /**\n       * Callback for custom error reporting.\n       * @type {?Function}\n       */\n      onShaderError: null\n    };\n\n    // clearing\n\n    /**\n     * Whether the renderer should automatically clear its output before rendering a frame or not.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.autoClear = true;\n\n    /**\n     * If {@link WebGLRenderer#autoClear} set to `true`, whether the renderer should clear\n     * the color buffer or not.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.autoClearColor = true;\n\n    /**\n     * If {@link WebGLRenderer#autoClear} set to `true`, whether the renderer should clear\n     * the depth buffer or not.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.autoClearDepth = true;\n\n    /**\n     * If {@link WebGLRenderer#autoClear} set to `true`, whether the renderer should clear\n     * the stencil buffer or not.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.autoClearStencil = true;\n\n    // scene graph\n\n    /**\n     * Whether the renderer should sort objects or not.\n     *\n     * Note: Sorting is used to attempt to properly render objects that have some\n     * degree of transparency. By definition, sorting objects may not work in all\n     * cases. Depending on the needs of application, it may be necessary to turn\n     * off sorting and use other methods to deal with transparency rendering e.g.\n     * manually determining each object's rendering order.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.sortObjects = true;\n\n    // user-defined clipping\n\n    /**\n     * User-defined clipping planes specified in world space. These planes apply globally.\n     * Points in space whose dot product with the plane is negative are cut away.\n     *\n     * @type {Array<Plane>}\n     */\n    this.clippingPlanes = [];\n\n    /**\n     * Whether the renderer respects object-level clipping planes or not.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.localClippingEnabled = false;\n\n    // tone mapping\n\n    /**\n     * The tone mapping technique of the renderer.\n     *\n     * @type {(NoToneMapping|LinearToneMapping|ReinhardToneMapping|CineonToneMapping|ACESFilmicToneMapping|CustomToneMapping|AgXToneMapping|NeutralToneMapping)}\n     * @default NoToneMapping\n     */\n    this.toneMapping = NoToneMapping;\n\n    /**\n     * Exposure level of tone mapping.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.toneMappingExposure = 1.0;\n\n    // transmission\n\n    /**\n     * The normalized resolution scale for the transmission render target, measured in percentage\n     * of viewport dimensions. Lowering this value can result in significant performance improvements\n     * when using {@link MeshPhysicalMaterial#transmission}.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.transmissionResolutionScale = 1.0;\n\n    // internal properties\n\n    const _this = this;\n    let _isContextLost = false;\n\n    // internal state cache\n\n    this._outputColorSpace = SRGBColorSpace;\n    let _currentActiveCubeFace = 0;\n    let _currentActiveMipmapLevel = 0;\n    let _currentRenderTarget = null;\n    let _currentMaterialId = -1;\n    let _currentCamera = null;\n    const _currentViewport = new Vector4();\n    const _currentScissor = new Vector4();\n    let _currentScissorTest = null;\n    const _currentClearColor = new Color(0x000000);\n    let _currentClearAlpha = 0;\n\n    //\n\n    let _width = canvas.width;\n    let _height = canvas.height;\n    let _pixelRatio = 1;\n    let _opaqueSort = null;\n    let _transparentSort = null;\n    const _viewport = new Vector4(0, 0, _width, _height);\n    const _scissor = new Vector4(0, 0, _width, _height);\n    let _scissorTest = false;\n\n    // frustum\n\n    const _frustum = new Frustum();\n\n    // clipping\n\n    let _clippingEnabled = false;\n    let _localClippingEnabled = false;\n\n    // camera matrices cache\n\n    const _currentProjectionMatrix = new Matrix4();\n    const _projScreenMatrix = new Matrix4();\n    const _vector3 = new Vector3();\n    const _vector4 = new Vector4();\n    const _emptyScene = {\n      background: null,\n      fog: null,\n      environment: null,\n      overrideMaterial: null,\n      isScene: true\n    };\n    let _renderBackground = false;\n    function getTargetPixelRatio() {\n      return _currentRenderTarget === null ? _pixelRatio : 1;\n    }\n\n    // initialize\n\n    let _gl = context;\n    function getContext(contextName, contextAttributes) {\n      return canvas.getContext(contextName, contextAttributes);\n    }\n    try {\n      const contextAttributes = {\n        alpha: true,\n        depth,\n        stencil,\n        antialias,\n        premultipliedAlpha,\n        preserveDrawingBuffer,\n        powerPreference,\n        failIfMajorPerformanceCaveat\n      };\n\n      // OffscreenCanvas does not have setAttribute, see #22811\n      if ('setAttribute' in canvas) canvas.setAttribute('data-engine', `three.js r${REVISION}`);\n\n      // event listeners must be registered before WebGL context is created, see #12753\n      canvas.addEventListener('webglcontextlost', onContextLost, false);\n      canvas.addEventListener('webglcontextrestored', onContextRestore, false);\n      canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);\n      if (_gl === null) {\n        const contextName = 'webgl2';\n        _gl = getContext(contextName, contextAttributes);\n        if (_gl === null) {\n          if (getContext(contextName)) {\n            throw new Error('Error creating WebGL context with your selected attributes.');\n          } else {\n            throw new Error('Error creating WebGL context.');\n          }\n        }\n      }\n    } catch (error) {\n      console.error('THREE.WebGLRenderer: ' + error.message);\n      throw error;\n    }\n    let extensions, capabilities, state, info;\n    let properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;\n    let programCache, materials, renderLists, renderStates, clipping, shadowMap;\n    let background, morphtargets, bufferRenderer, indexedBufferRenderer;\n    let utils, bindingStates, uniformsGroups;\n    function initGLContext() {\n      extensions = new WebGLExtensions(_gl);\n      extensions.init();\n      utils = new WebGLUtils(_gl, extensions);\n      capabilities = new WebGLCapabilities(_gl, extensions, parameters, utils);\n      state = new WebGLState(_gl, extensions);\n      if (capabilities.reverseDepthBuffer && reverseDepthBuffer) {\n        state.buffers.depth.setReversed(true);\n      }\n      info = new WebGLInfo(_gl);\n      properties = new WebGLProperties();\n      textures = new WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info);\n      cubemaps = new WebGLCubeMaps(_this);\n      cubeuvmaps = new WebGLCubeUVMaps(_this);\n      attributes = new WebGLAttributes(_gl);\n      bindingStates = new WebGLBindingStates(_gl, attributes);\n      geometries = new WebGLGeometries(_gl, attributes, info, bindingStates);\n      objects = new WebGLObjects(_gl, geometries, attributes, info);\n      morphtargets = new WebGLMorphtargets(_gl, capabilities, textures);\n      clipping = new WebGLClipping(properties);\n      programCache = new WebGLPrograms(_this, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping);\n      materials = new WebGLMaterials(_this, properties);\n      renderLists = new WebGLRenderLists();\n      renderStates = new WebGLRenderStates(extensions);\n      background = new WebGLBackground(_this, cubemaps, cubeuvmaps, state, objects, _alpha, premultipliedAlpha);\n      shadowMap = new WebGLShadowMap(_this, objects, capabilities);\n      uniformsGroups = new WebGLUniformsGroups(_gl, info, capabilities, state);\n      bufferRenderer = new WebGLBufferRenderer(_gl, extensions, info);\n      indexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, info);\n      info.programs = programCache.programs;\n\n      /**\n       * Holds details about the capabilities of the current rendering context.\n       *\n       * @name WebGLRenderer#capabilities\n       * @type {WebGLRenderer~Capabilities}\n       */\n      _this.capabilities = capabilities;\n\n      /**\n       * Provides methods for retrieving and testing WebGL extensions.\n       *\n       * - `get(extensionName:string)`: Used to check whether a WebGL extension is supported\n       * and return the extension object if available.\n       * - `has(extensionName:string)`: returns `true` if the extension is supported.\n       *\n       * @name WebGLRenderer#extensions\n       * @type {Object}\n       */\n      _this.extensions = extensions;\n\n      /**\n       * Used to track properties of other objects like native WebGL objects.\n       *\n       * @name WebGLRenderer#properties\n       * @type {Object}\n       */\n      _this.properties = properties;\n\n      /**\n       * Manages the render lists of the renderer.\n       *\n       * @name WebGLRenderer#renderLists\n       * @type {Object}\n       */\n      _this.renderLists = renderLists;\n\n      /**\n       * Interface for managing shadows.\n       *\n       * @name WebGLRenderer#shadowMap\n       * @type {WebGLRenderer~ShadowMap}\n       */\n      _this.shadowMap = shadowMap;\n\n      /**\n       * Interface for managing the WebGL state.\n       *\n       * @name WebGLRenderer#state\n       * @type {Object}\n       */\n      _this.state = state;\n\n      /**\n       * Holds a series of statistical information about the GPU memory\n       * and the rendering process. Useful for debugging and monitoring.\n       *\n       * By default these data are reset at each render call but when having\n       * multiple render passes per frame (e.g. when using post processing) it can\n       * be preferred to reset with a custom pattern. First, set `autoReset` to\n       * `false`.\n       * ```js\n       * renderer.info.autoReset = false;\n       * ```\n       * Call `reset()` whenever you have finished to render a single frame.\n       * ```js\n       * renderer.info.reset();\n       * ```\n       *\n       * @name WebGLRenderer#info\n       * @type {WebGLRenderer~Info}\n       */\n      _this.info = info;\n    }\n    initGLContext();\n\n    // xr\n\n    const xr = new WebXRManager(_this, _gl);\n\n    /**\n     * A reference to the XR manager.\n     *\n     * @type {WebXRManager}\n     */\n    this.xr = xr;\n\n    /**\n     * Returns the rendering context.\n     *\n     * @return {WebGL2RenderingContext} The rendering context.\n     */\n    this.getContext = function () {\n      return _gl;\n    };\n\n    /**\n     * Returns the rendering context attributes.\n     *\n     * @return {WebGLContextAttributes} The rendering context attributes.\n     */\n    this.getContextAttributes = function () {\n      return _gl.getContextAttributes();\n    };\n\n    /**\n     * Simulates a loss of the WebGL context. This requires support for the `WEBGL_lose_context` extension.\n     */\n    this.forceContextLoss = function () {\n      const extension = extensions.get('WEBGL_lose_context');\n      if (extension) extension.loseContext();\n    };\n\n    /**\n     * Simulates a restore of the WebGL context. This requires support for the `WEBGL_lose_context` extension.\n     */\n    this.forceContextRestore = function () {\n      const extension = extensions.get('WEBGL_lose_context');\n      if (extension) extension.restoreContext();\n    };\n\n    /**\n     * Returns the pixel ratio.\n     *\n     * @return {number} The pixel ratio.\n     */\n    this.getPixelRatio = function () {\n      return _pixelRatio;\n    };\n\n    /**\n     * Sets the given pixel ratio and resizes the canvas if necessary.\n     *\n     * @param {number} value - The pixel ratio.\n     */\n    this.setPixelRatio = function (value) {\n      if (value === undefined) return;\n      _pixelRatio = value;\n      this.setSize(_width, _height, false);\n    };\n\n    /**\n     * Returns the renderer's size in logical pixels. This method does not honor the pixel ratio.\n     *\n     * @param {Vector2} target - The method writes the result in this target object.\n     * @return {Vector2} The renderer's size in logical pixels.\n     */\n    this.getSize = function (target) {\n      return target.set(_width, _height);\n    };\n\n    /**\n     * Resizes the output canvas to (width, height) with device pixel ratio taken\n     * into account, and also sets the viewport to fit that size, starting in (0,\n     * 0). Setting `updateStyle` to false prevents any style changes to the output canvas.\n     *\n     * @param {number} width - The width in logical pixels.\n     * @param {number} height - The height in logical pixels.\n     * @param {boolean} [updateStyle=true] - Whether to update the `style` attribute of the canvas or not.\n     */\n    this.setSize = function (width, height) {\n      let updateStyle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      if (xr.isPresenting) {\n        console.warn('THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.');\n        return;\n      }\n      _width = width;\n      _height = height;\n      canvas.width = Math.floor(width * _pixelRatio);\n      canvas.height = Math.floor(height * _pixelRatio);\n      if (updateStyle === true) {\n        canvas.style.width = width + 'px';\n        canvas.style.height = height + 'px';\n      }\n      this.setViewport(0, 0, width, height);\n    };\n\n    /**\n     * Returns the drawing buffer size in physical pixels. This method honors the pixel ratio.\n     *\n     * @param {Vector2} target - The method writes the result in this target object.\n     * @return {Vector2} The drawing buffer size.\n     */\n    this.getDrawingBufferSize = function (target) {\n      return target.set(_width * _pixelRatio, _height * _pixelRatio).floor();\n    };\n\n    /**\n     * This method allows to define the drawing buffer size by specifying\n     * width, height and pixel ratio all at once. The size of the drawing\n     * buffer is computed with this formula:\n     * ```js\n     * size.x = width * pixelRatio;\n     * size.y = height * pixelRatio;\n     * ```\n     *\n     * @param {number} width - The width in logical pixels.\n     * @param {number} height - The height in logical pixels.\n     * @param {number} pixelRatio - The pixel ratio.\n     */\n    this.setDrawingBufferSize = function (width, height, pixelRatio) {\n      _width = width;\n      _height = height;\n      _pixelRatio = pixelRatio;\n      canvas.width = Math.floor(width * pixelRatio);\n      canvas.height = Math.floor(height * pixelRatio);\n      this.setViewport(0, 0, width, height);\n    };\n\n    /**\n     * Returns the current viewport definition.\n     *\n     * @param {Vector2} target - The method writes the result in this target object.\n     * @return {Vector2} The current viewport definition.\n     */\n    this.getCurrentViewport = function (target) {\n      return target.copy(_currentViewport);\n    };\n\n    /**\n     * Returns the viewport definition.\n     *\n     * @param {Vector4} target - The method writes the result in this target object.\n     * @return {Vector4} The viewport definition.\n     */\n    this.getViewport = function (target) {\n      return target.copy(_viewport);\n    };\n\n    /**\n     * Sets the viewport to render from `(x, y)` to `(x + width, y + height)`.\n     *\n     * @param {number | Vector4} x - The horizontal coordinate for the lower left corner of the viewport origin in logical pixel unit.\n     * Or alternatively a four-component vector specifying all the parameters of the viewport.\n     * @param {number} y - The vertical coordinate for the lower left corner of the viewport origin  in logical pixel unit.\n     * @param {number} width - The width of the viewport in logical pixel unit.\n     * @param {number} height - The height of the viewport in logical pixel unit.\n     */\n    this.setViewport = function (x, y, width, height) {\n      if (x.isVector4) {\n        _viewport.set(x.x, x.y, x.z, x.w);\n      } else {\n        _viewport.set(x, y, width, height);\n      }\n      state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).round());\n    };\n\n    /**\n     * Returns the scissor region.\n     *\n     * @param {Vector4} target - The method writes the result in this target object.\n     * @return {Vector4} The scissor region.\n     */\n    this.getScissor = function (target) {\n      return target.copy(_scissor);\n    };\n\n    /**\n     * Sets the scissor region to render from `(x, y)` to `(x + width, y + height)`.\n     *\n     * @param {number | Vector4} x - The horizontal coordinate for the lower left corner of the scissor region origin in logical pixel unit.\n     * Or alternatively a four-component vector specifying all the parameters of the scissor region.\n     * @param {number} y - The vertical coordinate for the lower left corner of the scissor region origin  in logical pixel unit.\n     * @param {number} width - The width of the scissor region in logical pixel unit.\n     * @param {number} height - The height of the scissor region in logical pixel unit.\n     */\n    this.setScissor = function (x, y, width, height) {\n      if (x.isVector4) {\n        _scissor.set(x.x, x.y, x.z, x.w);\n      } else {\n        _scissor.set(x, y, width, height);\n      }\n      state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).round());\n    };\n\n    /**\n     * Returns `true` if the scissor test is enabled.\n     *\n     * @return {boolean} Whether the scissor test is enabled or not.\n     */\n    this.getScissorTest = function () {\n      return _scissorTest;\n    };\n\n    /**\n     * Enable or disable the scissor test. When this is enabled, only the pixels\n     * within the defined scissor area will be affected by further renderer\n     * actions.\n     *\n     * @param {boolean} boolean - Whether the scissor test is enabled or not.\n     */\n    this.setScissorTest = function (boolean) {\n      state.setScissorTest(_scissorTest = boolean);\n    };\n\n    /**\n     * Sets a custom opaque sort function for the render lists. Pass `null`\n     * to use the default `painterSortStable` function.\n     *\n     * @param {?Function} method - The opaque sort function.\n     */\n    this.setOpaqueSort = function (method) {\n      _opaqueSort = method;\n    };\n\n    /**\n     * Sets a custom transparent sort function for the render lists. Pass `null`\n     * to use the default `reversePainterSortStable` function.\n     *\n     * @param {?Function} method - The opaque sort function.\n     */\n    this.setTransparentSort = function (method) {\n      _transparentSort = method;\n    };\n\n    // Clearing\n\n    /**\n     * Returns the clear color.\n     *\n     * @param {Color} target - The method writes the result in this target object.\n     * @return {Color} The clear color.\n     */\n    this.getClearColor = function (target) {\n      return target.copy(background.getClearColor());\n    };\n\n    /**\n     * Sets the clear color and alpha.\n     *\n     * @param {Color} color - The clear color.\n     * @param {number} [alpha=1] - The clear alpha.\n     */\n    this.setClearColor = function () {\n      background.setClearColor(...arguments);\n    };\n\n    /**\n     * Returns the clear alpha. Ranges within `[0,1]`.\n     *\n     * @return {number} The clear alpha.\n     */\n    this.getClearAlpha = function () {\n      return background.getClearAlpha();\n    };\n\n    /**\n     * Sets the clear alpha.\n     *\n     * @param {number} alpha - The clear alpha.\n     */\n    this.setClearAlpha = function () {\n      background.setClearAlpha(...arguments);\n    };\n\n    /**\n     * Tells the renderer to clear its color, depth or stencil drawing buffer(s).\n     * This method initializes the buffers to the current clear color values.\n     *\n     * @param {boolean} [color=true] - Whether the color buffer should be cleared or not.\n     * @param {boolean} [depth=true] - Whether the depth buffer should be cleared or not.\n     * @param {boolean} [stencil=true] - Whether the stencil buffer should be cleared or not.\n     */\n    this.clear = function () {\n      let color = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      let depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      let stencil = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      let bits = 0;\n      if (color) {\n        // check if we're trying to clear an integer target\n        let isIntegerFormat = false;\n        if (_currentRenderTarget !== null) {\n          const targetFormat = _currentRenderTarget.texture.format;\n          isIntegerFormat = targetFormat === RGBAIntegerFormat || targetFormat === RGIntegerFormat || targetFormat === RedIntegerFormat;\n        }\n\n        // use the appropriate clear functions to clear the target if it's a signed\n        // or unsigned integer target\n        if (isIntegerFormat) {\n          const targetType = _currentRenderTarget.texture.type;\n          const isUnsignedType = targetType === UnsignedByteType || targetType === UnsignedIntType || targetType === UnsignedShortType || targetType === UnsignedInt248Type || targetType === UnsignedShort4444Type || targetType === UnsignedShort5551Type;\n          const clearColor = background.getClearColor();\n          const a = background.getClearAlpha();\n          const r = clearColor.r;\n          const g = clearColor.g;\n          const b = clearColor.b;\n          if (isUnsignedType) {\n            uintClearColor[0] = r;\n            uintClearColor[1] = g;\n            uintClearColor[2] = b;\n            uintClearColor[3] = a;\n            _gl.clearBufferuiv(_gl.COLOR, 0, uintClearColor);\n          } else {\n            intClearColor[0] = r;\n            intClearColor[1] = g;\n            intClearColor[2] = b;\n            intClearColor[3] = a;\n            _gl.clearBufferiv(_gl.COLOR, 0, intClearColor);\n          }\n        } else {\n          bits |= _gl.COLOR_BUFFER_BIT;\n        }\n      }\n      if (depth) {\n        bits |= _gl.DEPTH_BUFFER_BIT;\n      }\n      if (stencil) {\n        bits |= _gl.STENCIL_BUFFER_BIT;\n        this.state.buffers.stencil.setMask(0xffffffff);\n      }\n      _gl.clear(bits);\n    };\n\n    /**\n     * Clears the color buffer. Equivalent to calling `renderer.clear( true, false, false )`.\n     */\n    this.clearColor = function () {\n      this.clear(true, false, false);\n    };\n\n    /**\n     * Clears the depth buffer. Equivalent to calling `renderer.clear( false, true, false )`.\n     */\n    this.clearDepth = function () {\n      this.clear(false, true, false);\n    };\n\n    /**\n     * Clears the stencil buffer. Equivalent to calling `renderer.clear( false, false, true )`.\n     */\n    this.clearStencil = function () {\n      this.clear(false, false, true);\n    };\n\n    /**\n     * Frees the GPU-related resources allocated by this instance. Call this\n     * method whenever this instance is no longer used in your app.\n     */\n    this.dispose = function () {\n      canvas.removeEventListener('webglcontextlost', onContextLost, false);\n      canvas.removeEventListener('webglcontextrestored', onContextRestore, false);\n      canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);\n      background.dispose();\n      renderLists.dispose();\n      renderStates.dispose();\n      properties.dispose();\n      cubemaps.dispose();\n      cubeuvmaps.dispose();\n      objects.dispose();\n      bindingStates.dispose();\n      uniformsGroups.dispose();\n      programCache.dispose();\n      xr.dispose();\n      xr.removeEventListener('sessionstart', onXRSessionStart);\n      xr.removeEventListener('sessionend', onXRSessionEnd);\n      animation.stop();\n    };\n\n    // Events\n\n    function onContextLost(event) {\n      event.preventDefault();\n      console.log('THREE.WebGLRenderer: Context Lost.');\n      _isContextLost = true;\n    }\n    function onContextRestore(/* event */\n    ) {\n      console.log('THREE.WebGLRenderer: Context Restored.');\n      _isContextLost = false;\n      const infoAutoReset = info.autoReset;\n      const shadowMapEnabled = shadowMap.enabled;\n      const shadowMapAutoUpdate = shadowMap.autoUpdate;\n      const shadowMapNeedsUpdate = shadowMap.needsUpdate;\n      const shadowMapType = shadowMap.type;\n      initGLContext();\n      info.autoReset = infoAutoReset;\n      shadowMap.enabled = shadowMapEnabled;\n      shadowMap.autoUpdate = shadowMapAutoUpdate;\n      shadowMap.needsUpdate = shadowMapNeedsUpdate;\n      shadowMap.type = shadowMapType;\n    }\n    function onContextCreationError(event) {\n      console.error('THREE.WebGLRenderer: A WebGL context could not be created. Reason: ', event.statusMessage);\n    }\n    function onMaterialDispose(event) {\n      const material = event.target;\n      material.removeEventListener('dispose', onMaterialDispose);\n      deallocateMaterial(material);\n    }\n\n    // Buffer deallocation\n\n    function deallocateMaterial(material) {\n      releaseMaterialProgramReferences(material);\n      properties.remove(material);\n    }\n    function releaseMaterialProgramReferences(material) {\n      const programs = properties.get(material).programs;\n      if (programs !== undefined) {\n        programs.forEach(function (program) {\n          programCache.releaseProgram(program);\n        });\n        if (material.isShaderMaterial) {\n          programCache.releaseShaderCache(material);\n        }\n      }\n    }\n\n    // Buffer rendering\n\n    this.renderBufferDirect = function (camera, scene, geometry, material, object, group) {\n      if (scene === null) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)\n\n      const frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;\n      const program = setProgram(camera, scene, geometry, material, object);\n      state.setMaterial(material, frontFaceCW);\n\n      //\n\n      let index = geometry.index;\n      let rangeFactor = 1;\n      if (material.wireframe === true) {\n        index = geometries.getWireframeAttribute(geometry);\n        if (index === undefined) return;\n        rangeFactor = 2;\n      }\n\n      //\n\n      const drawRange = geometry.drawRange;\n      const position = geometry.attributes.position;\n      let drawStart = drawRange.start * rangeFactor;\n      let drawEnd = (drawRange.start + drawRange.count) * rangeFactor;\n      if (group !== null) {\n        drawStart = Math.max(drawStart, group.start * rangeFactor);\n        drawEnd = Math.min(drawEnd, (group.start + group.count) * rangeFactor);\n      }\n      if (index !== null) {\n        drawStart = Math.max(drawStart, 0);\n        drawEnd = Math.min(drawEnd, index.count);\n      } else if (position !== undefined && position !== null) {\n        drawStart = Math.max(drawStart, 0);\n        drawEnd = Math.min(drawEnd, position.count);\n      }\n      const drawCount = drawEnd - drawStart;\n      if (drawCount < 0 || drawCount === Infinity) return;\n\n      //\n\n      bindingStates.setup(object, material, program, geometry, index);\n      let attribute;\n      let renderer = bufferRenderer;\n      if (index !== null) {\n        attribute = attributes.get(index);\n        renderer = indexedBufferRenderer;\n        renderer.setIndex(attribute);\n      }\n\n      //\n\n      if (object.isMesh) {\n        if (material.wireframe === true) {\n          state.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());\n          renderer.setMode(_gl.LINES);\n        } else {\n          renderer.setMode(_gl.TRIANGLES);\n        }\n      } else if (object.isLine) {\n        let lineWidth = material.linewidth;\n        if (lineWidth === undefined) lineWidth = 1; // Not using Line*Material\n\n        state.setLineWidth(lineWidth * getTargetPixelRatio());\n        if (object.isLineSegments) {\n          renderer.setMode(_gl.LINES);\n        } else if (object.isLineLoop) {\n          renderer.setMode(_gl.LINE_LOOP);\n        } else {\n          renderer.setMode(_gl.LINE_STRIP);\n        }\n      } else if (object.isPoints) {\n        renderer.setMode(_gl.POINTS);\n      } else if (object.isSprite) {\n        renderer.setMode(_gl.TRIANGLES);\n      }\n      if (object.isBatchedMesh) {\n        if (object._multiDrawInstances !== null) {\n          // @deprecated, r174\n          warnOnce('THREE.WebGLRenderer: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection.');\n          renderer.renderMultiDrawInstances(object._multiDrawStarts, object._multiDrawCounts, object._multiDrawCount, object._multiDrawInstances);\n        } else {\n          if (!extensions.get('WEBGL_multi_draw')) {\n            const starts = object._multiDrawStarts;\n            const counts = object._multiDrawCounts;\n            const drawCount = object._multiDrawCount;\n            const bytesPerElement = index ? attributes.get(index).bytesPerElement : 1;\n            const uniforms = properties.get(material).currentProgram.getUniforms();\n            for (let i = 0; i < drawCount; i++) {\n              uniforms.setValue(_gl, '_gl_DrawID', i);\n              renderer.render(starts[i] / bytesPerElement, counts[i]);\n            }\n          } else {\n            renderer.renderMultiDraw(object._multiDrawStarts, object._multiDrawCounts, object._multiDrawCount);\n          }\n        }\n      } else if (object.isInstancedMesh) {\n        renderer.renderInstances(drawStart, drawCount, object.count);\n      } else if (geometry.isInstancedBufferGeometry) {\n        const maxInstanceCount = geometry._maxInstanceCount !== undefined ? geometry._maxInstanceCount : Infinity;\n        const instanceCount = Math.min(geometry.instanceCount, maxInstanceCount);\n        renderer.renderInstances(drawStart, drawCount, instanceCount);\n      } else {\n        renderer.render(drawStart, drawCount);\n      }\n    };\n\n    // Compile\n\n    function prepareMaterial(material, scene, object) {\n      if (material.transparent === true && material.side === DoubleSide && material.forceSinglePass === false) {\n        material.side = BackSide;\n        material.needsUpdate = true;\n        getProgram(material, scene, object);\n        material.side = FrontSide;\n        material.needsUpdate = true;\n        getProgram(material, scene, object);\n        material.side = DoubleSide;\n      } else {\n        getProgram(material, scene, object);\n      }\n    }\n\n    /**\n     * Compiles all materials in the scene with the camera. This is useful to precompile shaders\n     * before the first rendering. If you want to add a 3D object to an existing scene, use the third\n     * optional parameter for applying the target scene.\n     *\n     * Note that the (target) scene's lighting and environment must be configured before calling this method.\n     *\n     * @param {Object3D} scene - The scene or another type of 3D object to precompile.\n     * @param {Camera} camera - The camera.\n     * @param {?Scene} [targetScene=null] - The target scene.\n     * @return {Set<Material>} The precompiled materials.\n     */\n    this.compile = function (scene, camera) {\n      let targetScene = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      if (targetScene === null) targetScene = scene;\n      currentRenderState = renderStates.get(targetScene);\n      currentRenderState.init(camera);\n      renderStateStack.push(currentRenderState);\n\n      // gather lights from both the target scene and the new object that will be added to the scene.\n\n      targetScene.traverseVisible(function (object) {\n        if (object.isLight && object.layers.test(camera.layers)) {\n          currentRenderState.pushLight(object);\n          if (object.castShadow) {\n            currentRenderState.pushShadow(object);\n          }\n        }\n      });\n      if (scene !== targetScene) {\n        scene.traverseVisible(function (object) {\n          if (object.isLight && object.layers.test(camera.layers)) {\n            currentRenderState.pushLight(object);\n            if (object.castShadow) {\n              currentRenderState.pushShadow(object);\n            }\n          }\n        });\n      }\n      currentRenderState.setupLights();\n\n      // Only initialize materials in the new scene, not the targetScene.\n\n      const materials = new Set();\n      scene.traverse(function (object) {\n        if (!(object.isMesh || object.isPoints || object.isLine || object.isSprite)) {\n          return;\n        }\n        const material = object.material;\n        if (material) {\n          if (Array.isArray(material)) {\n            for (let i = 0; i < material.length; i++) {\n              const material2 = material[i];\n              prepareMaterial(material2, targetScene, object);\n              materials.add(material2);\n            }\n          } else {\n            prepareMaterial(material, targetScene, object);\n            materials.add(material);\n          }\n        }\n      });\n      currentRenderState = renderStateStack.pop();\n      return materials;\n    };\n\n    // compileAsync\n\n    /**\n     * Asynchronous version of {@link WebGLRenderer#compile}.\n     *\n     * This method makes use of the `KHR_parallel_shader_compile` WebGL extension. Hence,\n     * it is recommended to use this version of `compile()` whenever possible.\n     *\n     * @async\n     * @param {Object3D} scene - The scene or another type of 3D object to precompile.\n     * @param {Camera} camera - The camera.\n     * @param {?Scene} [targetScene=null] - The target scene.\n     * @return {Promise} A Promise that resolves when the given scene can be rendered without unnecessary stalling due to shader compilation.\n     */\n    this.compileAsync = function (scene, camera) {\n      let targetScene = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      const materials = this.compile(scene, camera, targetScene);\n\n      // Wait for all the materials in the new object to indicate that they're\n      // ready to be used before resolving the promise.\n\n      return new Promise(resolve => {\n        function checkMaterialsReady() {\n          materials.forEach(function (material) {\n            const materialProperties = properties.get(material);\n            const program = materialProperties.currentProgram;\n            if (program.isReady()) {\n              // remove any programs that report they're ready to use from the list\n              materials.delete(material);\n            }\n          });\n\n          // once the list of compiling materials is empty, call the callback\n\n          if (materials.size === 0) {\n            resolve(scene);\n            return;\n          }\n\n          // if some materials are still not ready, wait a bit and check again\n\n          setTimeout(checkMaterialsReady, 10);\n        }\n        if (extensions.get('KHR_parallel_shader_compile') !== null) {\n          // If we can check the compilation status of the materials without\n          // blocking then do so right away.\n\n          checkMaterialsReady();\n        } else {\n          // Otherwise start by waiting a bit to give the materials we just\n          // initialized a chance to finish.\n\n          setTimeout(checkMaterialsReady, 10);\n        }\n      });\n    };\n\n    // Animation Loop\n\n    let onAnimationFrameCallback = null;\n    function onAnimationFrame(time) {\n      if (onAnimationFrameCallback) onAnimationFrameCallback(time);\n    }\n    function onXRSessionStart() {\n      animation.stop();\n    }\n    function onXRSessionEnd() {\n      animation.start();\n    }\n    const animation = new WebGLAnimation();\n    animation.setAnimationLoop(onAnimationFrame);\n    if (typeof self !== 'undefined') animation.setContext(self);\n    this.setAnimationLoop = function (callback) {\n      onAnimationFrameCallback = callback;\n      xr.setAnimationLoop(callback);\n      callback === null ? animation.stop() : animation.start();\n    };\n    xr.addEventListener('sessionstart', onXRSessionStart);\n    xr.addEventListener('sessionend', onXRSessionEnd);\n\n    // Rendering\n\n    /**\n     * Renders the given scene (or other type of 3D object) using the given camera.\n     *\n     * The render is done to a previously specified render target set by calling {@link WebGLRenderer#setRenderTarget}\n     * or to the canvas as usual.\n     *\n     * By default render buffers are cleared before rendering but you can prevent\n     * this by setting the property `autoClear` to `false`. If you want to prevent\n     * only certain buffers being cleared you can `autoClearColor`, `autoClearDepth`\n     * or `autoClearStencil` to `false`. To force a clear, use {@link WebGLRenderer#clear}.\n     *\n     * @param {Object3D} scene - The scene to render.\n     * @param {Camera} camera - The camera.\n     */\n    this.render = function (scene, camera) {\n      if (camera !== undefined && camera.isCamera !== true) {\n        console.error('THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.');\n        return;\n      }\n      if (_isContextLost === true) return;\n\n      // update scene graph\n\n      if (scene.matrixWorldAutoUpdate === true) scene.updateMatrixWorld();\n\n      // update camera matrices and frustum\n\n      if (camera.parent === null && camera.matrixWorldAutoUpdate === true) camera.updateMatrixWorld();\n      if (xr.enabled === true && xr.isPresenting === true) {\n        if (xr.cameraAutoUpdate === true) xr.updateCamera(camera);\n        camera = xr.getCamera(); // use XR camera for rendering\n      }\n\n      //\n      if (scene.isScene === true) scene.onBeforeRender(_this, scene, camera, _currentRenderTarget);\n      currentRenderState = renderStates.get(scene, renderStateStack.length);\n      currentRenderState.init(camera);\n      renderStateStack.push(currentRenderState);\n      _projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n      _frustum.setFromProjectionMatrix(_projScreenMatrix);\n      _localClippingEnabled = this.localClippingEnabled;\n      _clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled);\n      currentRenderList = renderLists.get(scene, renderListStack.length);\n      currentRenderList.init();\n      renderListStack.push(currentRenderList);\n      if (xr.enabled === true && xr.isPresenting === true) {\n        const depthSensingMesh = _this.xr.getDepthSensingMesh();\n        if (depthSensingMesh !== null) {\n          projectObject(depthSensingMesh, camera, -Infinity, _this.sortObjects);\n        }\n      }\n      projectObject(scene, camera, 0, _this.sortObjects);\n      currentRenderList.finish();\n      if (_this.sortObjects === true) {\n        currentRenderList.sort(_opaqueSort, _transparentSort);\n      }\n      _renderBackground = xr.enabled === false || xr.isPresenting === false || xr.hasDepthSensing() === false;\n      if (_renderBackground) {\n        background.addToRenderList(currentRenderList, scene);\n      }\n\n      //\n\n      this.info.render.frame++;\n      if (_clippingEnabled === true) clipping.beginShadows();\n      const shadowsArray = currentRenderState.state.shadowsArray;\n      shadowMap.render(shadowsArray, scene, camera);\n      if (_clippingEnabled === true) clipping.endShadows();\n\n      //\n\n      if (this.info.autoReset === true) this.info.reset();\n\n      // render scene\n\n      const opaqueObjects = currentRenderList.opaque;\n      const transmissiveObjects = currentRenderList.transmissive;\n      currentRenderState.setupLights();\n      if (camera.isArrayCamera) {\n        const cameras = camera.cameras;\n        if (transmissiveObjects.length > 0) {\n          for (let i = 0, l = cameras.length; i < l; i++) {\n            const camera2 = cameras[i];\n            renderTransmissionPass(opaqueObjects, transmissiveObjects, scene, camera2);\n          }\n        }\n        if (_renderBackground) background.render(scene);\n        for (let i = 0, l = cameras.length; i < l; i++) {\n          const camera2 = cameras[i];\n          renderScene(currentRenderList, scene, camera2, camera2.viewport);\n        }\n      } else {\n        if (transmissiveObjects.length > 0) renderTransmissionPass(opaqueObjects, transmissiveObjects, scene, camera);\n        if (_renderBackground) background.render(scene);\n        renderScene(currentRenderList, scene, camera);\n      }\n\n      //\n\n      if (_currentRenderTarget !== null && _currentActiveMipmapLevel === 0) {\n        // resolve multisample renderbuffers to a single-sample texture if necessary\n\n        textures.updateMultisampleRenderTarget(_currentRenderTarget);\n\n        // Generate mipmap if we're using any kind of mipmap filtering\n\n        textures.updateRenderTargetMipmap(_currentRenderTarget);\n      }\n\n      //\n\n      if (scene.isScene === true) scene.onAfterRender(_this, scene, camera);\n\n      // _gl.finish();\n\n      bindingStates.resetDefaultState();\n      _currentMaterialId = -1;\n      _currentCamera = null;\n      renderStateStack.pop();\n      if (renderStateStack.length > 0) {\n        currentRenderState = renderStateStack[renderStateStack.length - 1];\n        if (_clippingEnabled === true) clipping.setGlobalState(_this.clippingPlanes, currentRenderState.state.camera);\n      } else {\n        currentRenderState = null;\n      }\n      renderListStack.pop();\n      if (renderListStack.length > 0) {\n        currentRenderList = renderListStack[renderListStack.length - 1];\n      } else {\n        currentRenderList = null;\n      }\n    };\n    function projectObject(object, camera, groupOrder, sortObjects) {\n      if (object.visible === false) return;\n      const visible = object.layers.test(camera.layers);\n      if (visible) {\n        if (object.isGroup) {\n          groupOrder = object.renderOrder;\n        } else if (object.isLOD) {\n          if (object.autoUpdate === true) object.update(camera);\n        } else if (object.isLight) {\n          currentRenderState.pushLight(object);\n          if (object.castShadow) {\n            currentRenderState.pushShadow(object);\n          }\n        } else if (object.isSprite) {\n          if (!object.frustumCulled || _frustum.intersectsSprite(object)) {\n            if (sortObjects) {\n              _vector4.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n            }\n            const geometry = objects.update(object);\n            const material = object.material;\n            if (material.visible) {\n              currentRenderList.push(object, geometry, material, groupOrder, _vector4.z, null);\n            }\n          }\n        } else if (object.isMesh || object.isLine || object.isPoints) {\n          if (!object.frustumCulled || _frustum.intersectsObject(object)) {\n            const geometry = objects.update(object);\n            const material = object.material;\n            if (sortObjects) {\n              if (object.boundingSphere !== undefined) {\n                if (object.boundingSphere === null) object.computeBoundingSphere();\n                _vector4.copy(object.boundingSphere.center);\n              } else {\n                if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n                _vector4.copy(geometry.boundingSphere.center);\n              }\n              _vector4.applyMatrix4(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n            }\n            if (Array.isArray(material)) {\n              const groups = geometry.groups;\n              for (let i = 0, l = groups.length; i < l; i++) {\n                const group = groups[i];\n                const groupMaterial = material[group.materialIndex];\n                if (groupMaterial && groupMaterial.visible) {\n                  currentRenderList.push(object, geometry, groupMaterial, groupOrder, _vector4.z, group);\n                }\n              }\n            } else if (material.visible) {\n              currentRenderList.push(object, geometry, material, groupOrder, _vector4.z, null);\n            }\n          }\n        }\n      }\n      const children = object.children;\n      for (let i = 0, l = children.length; i < l; i++) {\n        projectObject(children[i], camera, groupOrder, sortObjects);\n      }\n    }\n    function renderScene(currentRenderList, scene, camera, viewport) {\n      const opaqueObjects = currentRenderList.opaque;\n      const transmissiveObjects = currentRenderList.transmissive;\n      const transparentObjects = currentRenderList.transparent;\n      currentRenderState.setupLightsView(camera);\n      if (_clippingEnabled === true) clipping.setGlobalState(_this.clippingPlanes, camera);\n      if (viewport) state.viewport(_currentViewport.copy(viewport));\n      if (opaqueObjects.length > 0) renderObjects(opaqueObjects, scene, camera);\n      if (transmissiveObjects.length > 0) renderObjects(transmissiveObjects, scene, camera);\n      if (transparentObjects.length > 0) renderObjects(transparentObjects, scene, camera);\n\n      // Ensure depth buffer writing is enabled so it can be cleared on next render\n\n      state.buffers.depth.setTest(true);\n      state.buffers.depth.setMask(true);\n      state.buffers.color.setMask(true);\n      state.setPolygonOffset(false);\n    }\n    function renderTransmissionPass(opaqueObjects, transmissiveObjects, scene, camera) {\n      const overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;\n      if (overrideMaterial !== null) {\n        return;\n      }\n      if (currentRenderState.state.transmissionRenderTarget[camera.id] === undefined) {\n        currentRenderState.state.transmissionRenderTarget[camera.id] = new WebGLRenderTarget(1, 1, {\n          generateMipmaps: true,\n          type: extensions.has('EXT_color_buffer_half_float') || extensions.has('EXT_color_buffer_float') ? HalfFloatType : UnsignedByteType,\n          minFilter: LinearMipmapLinearFilter,\n          samples: 4,\n          stencilBuffer: stencil,\n          resolveDepthBuffer: false,\n          resolveStencilBuffer: false,\n          colorSpace: ColorManagement.workingColorSpace\n        });\n\n        // debug\n\n        /*\n        const geometry = new PlaneGeometry();\n        const material = new MeshBasicMaterial( { map: _transmissionRenderTarget.texture } );\n        \tconst mesh = new Mesh( geometry, material );\n        scene.add( mesh );\n        */\n      }\n      const transmissionRenderTarget = currentRenderState.state.transmissionRenderTarget[camera.id];\n      const activeViewport = camera.viewport || _currentViewport;\n      transmissionRenderTarget.setSize(activeViewport.z * _this.transmissionResolutionScale, activeViewport.w * _this.transmissionResolutionScale);\n\n      //\n\n      const currentRenderTarget = _this.getRenderTarget();\n      _this.setRenderTarget(transmissionRenderTarget);\n      _this.getClearColor(_currentClearColor);\n      _currentClearAlpha = _this.getClearAlpha();\n      if (_currentClearAlpha < 1) _this.setClearColor(0xffffff, 0.5);\n      _this.clear();\n      if (_renderBackground) background.render(scene);\n\n      // Turn off the features which can affect the frag color for opaque objects pass.\n      // Otherwise they are applied twice in opaque objects pass and transmission objects pass.\n      const currentToneMapping = _this.toneMapping;\n      _this.toneMapping = NoToneMapping;\n\n      // Remove viewport from camera to avoid nested render calls resetting viewport to it (e.g Reflector).\n      // Transmission render pass requires viewport to match the transmissionRenderTarget.\n      const currentCameraViewport = camera.viewport;\n      if (camera.viewport !== undefined) camera.viewport = undefined;\n      currentRenderState.setupLightsView(camera);\n      if (_clippingEnabled === true) clipping.setGlobalState(_this.clippingPlanes, camera);\n      renderObjects(opaqueObjects, scene, camera);\n      textures.updateMultisampleRenderTarget(transmissionRenderTarget);\n      textures.updateRenderTargetMipmap(transmissionRenderTarget);\n      if (extensions.has('WEBGL_multisampled_render_to_texture') === false) {\n        // see #28131\n\n        let renderTargetNeedsUpdate = false;\n        for (let i = 0, l = transmissiveObjects.length; i < l; i++) {\n          const renderItem = transmissiveObjects[i];\n          const object = renderItem.object;\n          const geometry = renderItem.geometry;\n          const material = renderItem.material;\n          const group = renderItem.group;\n          if (material.side === DoubleSide && object.layers.test(camera.layers)) {\n            const currentSide = material.side;\n            material.side = BackSide;\n            material.needsUpdate = true;\n            renderObject(object, scene, camera, geometry, material, group);\n            material.side = currentSide;\n            material.needsUpdate = true;\n            renderTargetNeedsUpdate = true;\n          }\n        }\n        if (renderTargetNeedsUpdate === true) {\n          textures.updateMultisampleRenderTarget(transmissionRenderTarget);\n          textures.updateRenderTargetMipmap(transmissionRenderTarget);\n        }\n      }\n      _this.setRenderTarget(currentRenderTarget);\n      _this.setClearColor(_currentClearColor, _currentClearAlpha);\n      if (currentCameraViewport !== undefined) camera.viewport = currentCameraViewport;\n      _this.toneMapping = currentToneMapping;\n    }\n    function renderObjects(renderList, scene, camera) {\n      const overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;\n      for (let i = 0, l = renderList.length; i < l; i++) {\n        const renderItem = renderList[i];\n        const object = renderItem.object;\n        const geometry = renderItem.geometry;\n        const group = renderItem.group;\n        let material = renderItem.material;\n        if (material.allowOverride === true && overrideMaterial !== null) {\n          material = overrideMaterial;\n        }\n        if (object.layers.test(camera.layers)) {\n          renderObject(object, scene, camera, geometry, material, group);\n        }\n      }\n    }\n    function renderObject(object, scene, camera, geometry, material, group) {\n      object.onBeforeRender(_this, scene, camera, geometry, material, group);\n      object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\n      object.normalMatrix.getNormalMatrix(object.modelViewMatrix);\n      material.onBeforeRender(_this, scene, camera, geometry, object, group);\n      if (material.transparent === true && material.side === DoubleSide && material.forceSinglePass === false) {\n        material.side = BackSide;\n        material.needsUpdate = true;\n        _this.renderBufferDirect(camera, scene, geometry, material, object, group);\n        material.side = FrontSide;\n        material.needsUpdate = true;\n        _this.renderBufferDirect(camera, scene, geometry, material, object, group);\n        material.side = DoubleSide;\n      } else {\n        _this.renderBufferDirect(camera, scene, geometry, material, object, group);\n      }\n      object.onAfterRender(_this, scene, camera, geometry, material, group);\n    }\n    function getProgram(material, scene, object) {\n      if (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n      const materialProperties = properties.get(material);\n      const lights = currentRenderState.state.lights;\n      const shadowsArray = currentRenderState.state.shadowsArray;\n      const lightsStateVersion = lights.state.version;\n      const parameters = programCache.getParameters(material, lights.state, shadowsArray, scene, object);\n      const programCacheKey = programCache.getProgramCacheKey(parameters);\n      let programs = materialProperties.programs;\n\n      // always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change\n\n      materialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;\n      materialProperties.fog = scene.fog;\n      materialProperties.envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || materialProperties.environment);\n      materialProperties.envMapRotation = materialProperties.environment !== null && material.envMap === null ? scene.environmentRotation : material.envMapRotation;\n      if (programs === undefined) {\n        // new material\n\n        material.addEventListener('dispose', onMaterialDispose);\n        programs = new Map();\n        materialProperties.programs = programs;\n      }\n      let program = programs.get(programCacheKey);\n      if (program !== undefined) {\n        // early out if program and light state is identical\n\n        if (materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion) {\n          updateCommonMaterialProperties(material, parameters);\n          return program;\n        }\n      } else {\n        parameters.uniforms = programCache.getUniforms(material);\n        material.onBeforeCompile(parameters, _this);\n        program = programCache.acquireProgram(parameters, programCacheKey);\n        programs.set(programCacheKey, program);\n        materialProperties.uniforms = parameters.uniforms;\n      }\n      const uniforms = materialProperties.uniforms;\n      if (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) {\n        uniforms.clippingPlanes = clipping.uniform;\n      }\n      updateCommonMaterialProperties(material, parameters);\n\n      // store the light setup it was created for\n\n      materialProperties.needsLights = materialNeedsLights(material);\n      materialProperties.lightsStateVersion = lightsStateVersion;\n      if (materialProperties.needsLights) {\n        // wire up the material to this renderer's lighting state\n\n        uniforms.ambientLightColor.value = lights.state.ambient;\n        uniforms.lightProbe.value = lights.state.probe;\n        uniforms.directionalLights.value = lights.state.directional;\n        uniforms.directionalLightShadows.value = lights.state.directionalShadow;\n        uniforms.spotLights.value = lights.state.spot;\n        uniforms.spotLightShadows.value = lights.state.spotShadow;\n        uniforms.rectAreaLights.value = lights.state.rectArea;\n        uniforms.ltc_1.value = lights.state.rectAreaLTC1;\n        uniforms.ltc_2.value = lights.state.rectAreaLTC2;\n        uniforms.pointLights.value = lights.state.point;\n        uniforms.pointLightShadows.value = lights.state.pointShadow;\n        uniforms.hemisphereLights.value = lights.state.hemi;\n        uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n        uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n        uniforms.spotShadowMap.value = lights.state.spotShadowMap;\n        uniforms.spotLightMatrix.value = lights.state.spotLightMatrix;\n        uniforms.spotLightMap.value = lights.state.spotLightMap;\n        uniforms.pointShadowMap.value = lights.state.pointShadowMap;\n        uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\n        // TODO (abelnation): add area lights shadow info to uniforms\n      }\n      materialProperties.currentProgram = program;\n      materialProperties.uniformsList = null;\n      return program;\n    }\n    function getUniformList(materialProperties) {\n      if (materialProperties.uniformsList === null) {\n        const progUniforms = materialProperties.currentProgram.getUniforms();\n        materialProperties.uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, materialProperties.uniforms);\n      }\n      return materialProperties.uniformsList;\n    }\n    function updateCommonMaterialProperties(material, parameters) {\n      const materialProperties = properties.get(material);\n      materialProperties.outputColorSpace = parameters.outputColorSpace;\n      materialProperties.batching = parameters.batching;\n      materialProperties.batchingColor = parameters.batchingColor;\n      materialProperties.instancing = parameters.instancing;\n      materialProperties.instancingColor = parameters.instancingColor;\n      materialProperties.instancingMorph = parameters.instancingMorph;\n      materialProperties.skinning = parameters.skinning;\n      materialProperties.morphTargets = parameters.morphTargets;\n      materialProperties.morphNormals = parameters.morphNormals;\n      materialProperties.morphColors = parameters.morphColors;\n      materialProperties.morphTargetsCount = parameters.morphTargetsCount;\n      materialProperties.numClippingPlanes = parameters.numClippingPlanes;\n      materialProperties.numIntersection = parameters.numClipIntersection;\n      materialProperties.vertexAlphas = parameters.vertexAlphas;\n      materialProperties.vertexTangents = parameters.vertexTangents;\n      materialProperties.toneMapping = parameters.toneMapping;\n    }\n    function setProgram(camera, scene, geometry, material, object) {\n      if (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n      textures.resetTextureUnits();\n      const fog = scene.fog;\n      const environment = material.isMeshStandardMaterial ? scene.environment : null;\n      const colorSpace = _currentRenderTarget === null ? _this.outputColorSpace : _currentRenderTarget.isXRRenderTarget === true ? _currentRenderTarget.texture.colorSpace : LinearSRGBColorSpace;\n      const envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);\n      const vertexAlphas = material.vertexColors === true && !!geometry.attributes.color && geometry.attributes.color.itemSize === 4;\n      const vertexTangents = !!geometry.attributes.tangent && (!!material.normalMap || material.anisotropy > 0);\n      const morphTargets = !!geometry.morphAttributes.position;\n      const morphNormals = !!geometry.morphAttributes.normal;\n      const morphColors = !!geometry.morphAttributes.color;\n      let toneMapping = NoToneMapping;\n      if (material.toneMapped) {\n        if (_currentRenderTarget === null || _currentRenderTarget.isXRRenderTarget === true) {\n          toneMapping = _this.toneMapping;\n        }\n      }\n      const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;\n      const morphTargetsCount = morphAttribute !== undefined ? morphAttribute.length : 0;\n      const materialProperties = properties.get(material);\n      const lights = currentRenderState.state.lights;\n      if (_clippingEnabled === true) {\n        if (_localClippingEnabled === true || camera !== _currentCamera) {\n          const useCache = camera === _currentCamera && material.id === _currentMaterialId;\n\n          // we might want to call this function with some ClippingGroup\n          // object instead of the material, once it becomes feasible\n          // (#8465, #8379)\n          clipping.setState(material, camera, useCache);\n        }\n      }\n\n      //\n\n      let needsProgramChange = false;\n      if (material.version === materialProperties.__version) {\n        if (materialProperties.needsLights && materialProperties.lightsStateVersion !== lights.state.version) {\n          needsProgramChange = true;\n        } else if (materialProperties.outputColorSpace !== colorSpace) {\n          needsProgramChange = true;\n        } else if (object.isBatchedMesh && materialProperties.batching === false) {\n          needsProgramChange = true;\n        } else if (!object.isBatchedMesh && materialProperties.batching === true) {\n          needsProgramChange = true;\n        } else if (object.isBatchedMesh && materialProperties.batchingColor === true && object.colorTexture === null) {\n          needsProgramChange = true;\n        } else if (object.isBatchedMesh && materialProperties.batchingColor === false && object.colorTexture !== null) {\n          needsProgramChange = true;\n        } else if (object.isInstancedMesh && materialProperties.instancing === false) {\n          needsProgramChange = true;\n        } else if (!object.isInstancedMesh && materialProperties.instancing === true) {\n          needsProgramChange = true;\n        } else if (object.isSkinnedMesh && materialProperties.skinning === false) {\n          needsProgramChange = true;\n        } else if (!object.isSkinnedMesh && materialProperties.skinning === true) {\n          needsProgramChange = true;\n        } else if (object.isInstancedMesh && materialProperties.instancingColor === true && object.instanceColor === null) {\n          needsProgramChange = true;\n        } else if (object.isInstancedMesh && materialProperties.instancingColor === false && object.instanceColor !== null) {\n          needsProgramChange = true;\n        } else if (object.isInstancedMesh && materialProperties.instancingMorph === true && object.morphTexture === null) {\n          needsProgramChange = true;\n        } else if (object.isInstancedMesh && materialProperties.instancingMorph === false && object.morphTexture !== null) {\n          needsProgramChange = true;\n        } else if (materialProperties.envMap !== envMap) {\n          needsProgramChange = true;\n        } else if (material.fog === true && materialProperties.fog !== fog) {\n          needsProgramChange = true;\n        } else if (materialProperties.numClippingPlanes !== undefined && (materialProperties.numClippingPlanes !== clipping.numPlanes || materialProperties.numIntersection !== clipping.numIntersection)) {\n          needsProgramChange = true;\n        } else if (materialProperties.vertexAlphas !== vertexAlphas) {\n          needsProgramChange = true;\n        } else if (materialProperties.vertexTangents !== vertexTangents) {\n          needsProgramChange = true;\n        } else if (materialProperties.morphTargets !== morphTargets) {\n          needsProgramChange = true;\n        } else if (materialProperties.morphNormals !== morphNormals) {\n          needsProgramChange = true;\n        } else if (materialProperties.morphColors !== morphColors) {\n          needsProgramChange = true;\n        } else if (materialProperties.toneMapping !== toneMapping) {\n          needsProgramChange = true;\n        } else if (materialProperties.morphTargetsCount !== morphTargetsCount) {\n          needsProgramChange = true;\n        }\n      } else {\n        needsProgramChange = true;\n        materialProperties.__version = material.version;\n      }\n\n      //\n\n      let program = materialProperties.currentProgram;\n      if (needsProgramChange === true) {\n        program = getProgram(material, scene, object);\n      }\n      let refreshProgram = false;\n      let refreshMaterial = false;\n      let refreshLights = false;\n      const p_uniforms = program.getUniforms(),\n        m_uniforms = materialProperties.uniforms;\n      if (state.useProgram(program.program)) {\n        refreshProgram = true;\n        refreshMaterial = true;\n        refreshLights = true;\n      }\n      if (material.id !== _currentMaterialId) {\n        _currentMaterialId = material.id;\n        refreshMaterial = true;\n      }\n      if (refreshProgram || _currentCamera !== camera) {\n        // common camera uniforms\n\n        const reverseDepthBuffer = state.buffers.depth.getReversed();\n        if (reverseDepthBuffer) {\n          _currentProjectionMatrix.copy(camera.projectionMatrix);\n          toNormalizedProjectionMatrix(_currentProjectionMatrix);\n          toReversedProjectionMatrix(_currentProjectionMatrix);\n          p_uniforms.setValue(_gl, 'projectionMatrix', _currentProjectionMatrix);\n        } else {\n          p_uniforms.setValue(_gl, 'projectionMatrix', camera.projectionMatrix);\n        }\n        p_uniforms.setValue(_gl, 'viewMatrix', camera.matrixWorldInverse);\n        const uCamPos = p_uniforms.map.cameraPosition;\n        if (uCamPos !== undefined) {\n          uCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera.matrixWorld));\n        }\n        if (capabilities.logarithmicDepthBuffer) {\n          p_uniforms.setValue(_gl, 'logDepthBufFC', 2.0 / (Math.log(camera.far + 1.0) / Math.LN2));\n        }\n\n        // consider moving isOrthographic to UniformLib and WebGLMaterials, see https://github.com/mrdoob/three.js/pull/26467#issuecomment-1645185067\n\n        if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial) {\n          p_uniforms.setValue(_gl, 'isOrthographic', camera.isOrthographicCamera === true);\n        }\n        if (_currentCamera !== camera) {\n          _currentCamera = camera;\n\n          // lighting uniforms depend on the camera so enforce an update\n          // now, in case this material supports lights - or later, when\n          // the next material that does gets activated:\n\n          refreshMaterial = true; // set to true on material change\n          refreshLights = true; // remains set until update done\n        }\n      }\n\n      // skinning and morph target uniforms must be set even if material didn't change\n      // auto-setting of texture unit for bone and morph texture must go before other textures\n      // otherwise textures used for skinning and morphing can take over texture units reserved for other material textures\n\n      if (object.isSkinnedMesh) {\n        p_uniforms.setOptional(_gl, object, 'bindMatrix');\n        p_uniforms.setOptional(_gl, object, 'bindMatrixInverse');\n        const skeleton = object.skeleton;\n        if (skeleton) {\n          if (skeleton.boneTexture === null) skeleton.computeBoneTexture();\n          p_uniforms.setValue(_gl, 'boneTexture', skeleton.boneTexture, textures);\n        }\n      }\n      if (object.isBatchedMesh) {\n        p_uniforms.setOptional(_gl, object, 'batchingTexture');\n        p_uniforms.setValue(_gl, 'batchingTexture', object._matricesTexture, textures);\n        p_uniforms.setOptional(_gl, object, 'batchingIdTexture');\n        p_uniforms.setValue(_gl, 'batchingIdTexture', object._indirectTexture, textures);\n        p_uniforms.setOptional(_gl, object, 'batchingColorTexture');\n        if (object._colorsTexture !== null) {\n          p_uniforms.setValue(_gl, 'batchingColorTexture', object._colorsTexture, textures);\n        }\n      }\n      const morphAttributes = geometry.morphAttributes;\n      if (morphAttributes.position !== undefined || morphAttributes.normal !== undefined || morphAttributes.color !== undefined) {\n        morphtargets.update(object, geometry, program);\n      }\n      if (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {\n        materialProperties.receiveShadow = object.receiveShadow;\n        p_uniforms.setValue(_gl, 'receiveShadow', object.receiveShadow);\n      }\n\n      // https://github.com/mrdoob/three.js/pull/24467#issuecomment-1209031512\n\n      if (material.isMeshGouraudMaterial && material.envMap !== null) {\n        m_uniforms.envMap.value = envMap;\n        m_uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap.isRenderTargetTexture === false ? -1 : 1;\n      }\n      if (material.isMeshStandardMaterial && material.envMap === null && scene.environment !== null) {\n        m_uniforms.envMapIntensity.value = scene.environmentIntensity;\n      }\n      if (refreshMaterial) {\n        p_uniforms.setValue(_gl, 'toneMappingExposure', _this.toneMappingExposure);\n        if (materialProperties.needsLights) {\n          // the current material requires lighting info\n\n          // note: all lighting uniforms are always set correctly\n          // they simply reference the renderer's state for their\n          // values\n          //\n          // use the current material's .needsUpdate flags to set\n          // the GL state when required\n\n          markUniformsLightsNeedsUpdate(m_uniforms, refreshLights);\n        }\n\n        // refresh uniforms common to several materials\n\n        if (fog && material.fog === true) {\n          materials.refreshFogUniforms(m_uniforms, fog);\n        }\n        materials.refreshMaterialUniforms(m_uniforms, material, _pixelRatio, _height, currentRenderState.state.transmissionRenderTarget[camera.id]);\n        WebGLUniforms.upload(_gl, getUniformList(materialProperties), m_uniforms, textures);\n      }\n      if (material.isShaderMaterial && material.uniformsNeedUpdate === true) {\n        WebGLUniforms.upload(_gl, getUniformList(materialProperties), m_uniforms, textures);\n        material.uniformsNeedUpdate = false;\n      }\n      if (material.isSpriteMaterial) {\n        p_uniforms.setValue(_gl, 'center', object.center);\n      }\n\n      // common matrices\n\n      p_uniforms.setValue(_gl, 'modelViewMatrix', object.modelViewMatrix);\n      p_uniforms.setValue(_gl, 'normalMatrix', object.normalMatrix);\n      p_uniforms.setValue(_gl, 'modelMatrix', object.matrixWorld);\n\n      // UBOs\n\n      if (material.isShaderMaterial || material.isRawShaderMaterial) {\n        const groups = material.uniformsGroups;\n        for (let i = 0, l = groups.length; i < l; i++) {\n          const group = groups[i];\n          uniformsGroups.update(group, program);\n          uniformsGroups.bind(group, program);\n        }\n      }\n      return program;\n    }\n\n    // If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n    function markUniformsLightsNeedsUpdate(uniforms, value) {\n      uniforms.ambientLightColor.needsUpdate = value;\n      uniforms.lightProbe.needsUpdate = value;\n      uniforms.directionalLights.needsUpdate = value;\n      uniforms.directionalLightShadows.needsUpdate = value;\n      uniforms.pointLights.needsUpdate = value;\n      uniforms.pointLightShadows.needsUpdate = value;\n      uniforms.spotLights.needsUpdate = value;\n      uniforms.spotLightShadows.needsUpdate = value;\n      uniforms.rectAreaLights.needsUpdate = value;\n      uniforms.hemisphereLights.needsUpdate = value;\n    }\n    function materialNeedsLights(material) {\n      return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.isShadowMaterial || material.isShaderMaterial && material.lights === true;\n    }\n\n    /**\n     * Returns the active cube face.\n     *\n     * @return {number} The active cube face.\n     */\n    this.getActiveCubeFace = function () {\n      return _currentActiveCubeFace;\n    };\n\n    /**\n     * Returns the active mipmap level.\n     *\n     * @return {number} The active mipmap level.\n     */\n    this.getActiveMipmapLevel = function () {\n      return _currentActiveMipmapLevel;\n    };\n\n    /**\n     * Returns the active render target.\n     *\n     * @return {?WebGLRenderTarget} The active render target. Returns `null` if no render target\n     * is currently set.\n     */\n    this.getRenderTarget = function () {\n      return _currentRenderTarget;\n    };\n    this.setRenderTargetTextures = function (renderTarget, colorTexture, depthTexture) {\n      const renderTargetProperties = properties.get(renderTarget);\n      renderTargetProperties.__autoAllocateDepthBuffer = renderTarget.resolveDepthBuffer === false;\n      if (renderTargetProperties.__autoAllocateDepthBuffer === false) {\n        // The multisample_render_to_texture extension doesn't work properly if there\n        // are midframe flushes and an external depth buffer. Disable use of the extension.\n        renderTargetProperties.__useRenderToTexture = false;\n      }\n      properties.get(renderTarget.texture).__webglTexture = colorTexture;\n      properties.get(renderTarget.depthTexture).__webglTexture = renderTargetProperties.__autoAllocateDepthBuffer ? undefined : depthTexture;\n      renderTargetProperties.__hasExternalTextures = true;\n    };\n    this.setRenderTargetFramebuffer = function (renderTarget, defaultFramebuffer) {\n      const renderTargetProperties = properties.get(renderTarget);\n      renderTargetProperties.__webglFramebuffer = defaultFramebuffer;\n      renderTargetProperties.__useDefaultFramebuffer = defaultFramebuffer === undefined;\n    };\n    const _scratchFrameBuffer = _gl.createFramebuffer();\n\n    /**\n     * Sets the active rendertarget.\n     *\n     * @param {?WebGLRenderTarget} renderTarget - The render target to set. When `null` is given,\n     * the canvas is set as the active render target instead.\n     * @param {number} [activeCubeFace=0] - The active cube face when using a cube render target.\n     * Indicates the z layer to render in to when using 3D or array render targets.\n     * @param {number} [activeMipmapLevel=0] - The active mipmap level.\n     */\n    this.setRenderTarget = function (renderTarget) {\n      let activeCubeFace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      let activeMipmapLevel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      _currentRenderTarget = renderTarget;\n      _currentActiveCubeFace = activeCubeFace;\n      _currentActiveMipmapLevel = activeMipmapLevel;\n      let useDefaultFramebuffer = true;\n      let framebuffer = null;\n      let isCube = false;\n      let isRenderTarget3D = false;\n      if (renderTarget) {\n        const renderTargetProperties = properties.get(renderTarget);\n        if (renderTargetProperties.__useDefaultFramebuffer !== undefined) {\n          // We need to make sure to rebind the framebuffer.\n          state.bindFramebuffer(_gl.FRAMEBUFFER, null);\n          useDefaultFramebuffer = false;\n        } else if (renderTargetProperties.__webglFramebuffer === undefined) {\n          textures.setupRenderTarget(renderTarget);\n        } else if (renderTargetProperties.__hasExternalTextures) {\n          // Color and depth texture must be rebound in order for the swapchain to update.\n          textures.rebindTextures(renderTarget, properties.get(renderTarget.texture).__webglTexture, properties.get(renderTarget.depthTexture).__webglTexture);\n        } else if (renderTarget.depthBuffer) {\n          // check if the depth texture is already bound to the frame buffer and that it's been initialized\n          const depthTexture = renderTarget.depthTexture;\n          if (renderTargetProperties.__boundDepthTexture !== depthTexture) {\n            // check if the depth texture is compatible\n            if (depthTexture !== null && properties.has(depthTexture) && (renderTarget.width !== depthTexture.image.width || renderTarget.height !== depthTexture.image.height)) {\n              throw new Error('WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.');\n            }\n\n            // Swap the depth buffer to the currently attached one\n            textures.setupDepthRenderbuffer(renderTarget);\n          }\n        }\n        const texture = renderTarget.texture;\n        if (texture.isData3DTexture || texture.isDataArrayTexture || texture.isCompressedArrayTexture) {\n          isRenderTarget3D = true;\n        }\n        const __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;\n        if (renderTarget.isWebGLCubeRenderTarget) {\n          if (Array.isArray(__webglFramebuffer[activeCubeFace])) {\n            framebuffer = __webglFramebuffer[activeCubeFace][activeMipmapLevel];\n          } else {\n            framebuffer = __webglFramebuffer[activeCubeFace];\n          }\n          isCube = true;\n        } else if (renderTarget.samples > 0 && textures.useMultisampledRTT(renderTarget) === false) {\n          framebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;\n        } else {\n          if (Array.isArray(__webglFramebuffer)) {\n            framebuffer = __webglFramebuffer[activeMipmapLevel];\n          } else {\n            framebuffer = __webglFramebuffer;\n          }\n        }\n        _currentViewport.copy(renderTarget.viewport);\n        _currentScissor.copy(renderTarget.scissor);\n        _currentScissorTest = renderTarget.scissorTest;\n      } else {\n        _currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();\n        _currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();\n        _currentScissorTest = _scissorTest;\n      }\n\n      // Use a scratch frame buffer if rendering to a mip level to avoid depth buffers\n      // being bound that are different sizes.\n      if (activeMipmapLevel !== 0) {\n        framebuffer = _scratchFrameBuffer;\n      }\n      const framebufferBound = state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n      if (framebufferBound && useDefaultFramebuffer) {\n        state.drawBuffers(renderTarget, framebuffer);\n      }\n      state.viewport(_currentViewport);\n      state.scissor(_currentScissor);\n      state.setScissorTest(_currentScissorTest);\n      if (isCube) {\n        const textureProperties = properties.get(renderTarget.texture);\n        _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);\n      } else if (isRenderTarget3D) {\n        const textureProperties = properties.get(renderTarget.texture);\n        const layer = activeCubeFace;\n        _gl.framebufferTextureLayer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureProperties.__webglTexture, activeMipmapLevel, layer);\n      } else if (renderTarget !== null && activeMipmapLevel !== 0) {\n        // Only bind the frame buffer if we are using a scratch frame buffer to render to a mipmap.\n        // If we rebind the texture when using a multi sample buffer then an error about inconsistent samples will be thrown.\n        const textureProperties = properties.get(renderTarget.texture);\n        _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, textureProperties.__webglTexture, activeMipmapLevel);\n      }\n      _currentMaterialId = -1; // reset current material to ensure correct uniform bindings\n    };\n\n    /**\n     * Reads the pixel data from the given render target into the given buffer.\n     *\n     * @param {WebGLRenderTarget} renderTarget - The render target to read from.\n     * @param {number} x - The `x` coordinate of the copy region's origin.\n     * @param {number} y - The `y` coordinate of the copy region's origin.\n     * @param {number} width - The width of the copy region.\n     * @param {number} height - The height of the copy region.\n     * @param {TypedArray} buffer - The result buffer.\n     * @param {number} [activeCubeFaceIndex] - The active cube face index.\n     */\n    this.readRenderTargetPixels = function (renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {\n      if (!(renderTarget && renderTarget.isWebGLRenderTarget)) {\n        console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.');\n        return;\n      }\n      let framebuffer = properties.get(renderTarget).__webglFramebuffer;\n      if (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined) {\n        framebuffer = framebuffer[activeCubeFaceIndex];\n      }\n      if (framebuffer) {\n        state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n        try {\n          const texture = renderTarget.texture;\n          const textureFormat = texture.format;\n          const textureType = texture.type;\n          if (!capabilities.textureFormatReadable(textureFormat)) {\n            console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.');\n            return;\n          }\n          if (!capabilities.textureTypeReadable(textureType)) {\n            console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.');\n            return;\n          }\n\n          // the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n          if (x >= 0 && x <= renderTarget.width - width && y >= 0 && y <= renderTarget.height - height) {\n            _gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);\n          }\n        } finally {\n          // restore framebuffer of current render target if necessary\n\n          const framebuffer = _currentRenderTarget !== null ? properties.get(_currentRenderTarget).__webglFramebuffer : null;\n          state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n        }\n      }\n    };\n\n    /**\n     * Asynchronous, non-blocking version of {@link WebGLRenderer#readRenderTargetPixels}.\n     *\n     * It is recommended to use this version of `readRenderTargetPixels()` whenever possible.\n     *\n     * @async\n     * @param {WebGLRenderTarget} renderTarget - The render target to read from.\n     * @param {number} x - The `x` coordinate of the copy region's origin.\n     * @param {number} y - The `y` coordinate of the copy region's origin.\n     * @param {number} width - The width of the copy region.\n     * @param {number} height - The height of the copy region.\n     * @param {TypedArray} buffer - The result buffer.\n     * @param {number} [activeCubeFaceIndex] - The active cube face index.\n     * @return {Promise<TypedArray>} A Promise that resolves when the read has been finished. The resolve provides the read data as a typed array.\n     */\n    this.readRenderTargetPixelsAsync = async function (renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {\n      if (!(renderTarget && renderTarget.isWebGLRenderTarget)) {\n        throw new Error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.');\n      }\n      let framebuffer = properties.get(renderTarget).__webglFramebuffer;\n      if (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined) {\n        framebuffer = framebuffer[activeCubeFaceIndex];\n      }\n      if (framebuffer) {\n        // the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n        if (x >= 0 && x <= renderTarget.width - width && y >= 0 && y <= renderTarget.height - height) {\n          // set the active frame buffer to the one we want to read\n          state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n          const texture = renderTarget.texture;\n          const textureFormat = texture.format;\n          const textureType = texture.type;\n          if (!capabilities.textureFormatReadable(textureFormat)) {\n            throw new Error('THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.');\n          }\n          if (!capabilities.textureTypeReadable(textureType)) {\n            throw new Error('THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.');\n          }\n          const glBuffer = _gl.createBuffer();\n          _gl.bindBuffer(_gl.PIXEL_PACK_BUFFER, glBuffer);\n          _gl.bufferData(_gl.PIXEL_PACK_BUFFER, buffer.byteLength, _gl.STREAM_READ);\n          _gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), 0);\n\n          // reset the frame buffer to the currently set buffer before waiting\n          const currFramebuffer = _currentRenderTarget !== null ? properties.get(_currentRenderTarget).__webglFramebuffer : null;\n          state.bindFramebuffer(_gl.FRAMEBUFFER, currFramebuffer);\n\n          // check if the commands have finished every 8 ms\n          const sync = _gl.fenceSync(_gl.SYNC_GPU_COMMANDS_COMPLETE, 0);\n          _gl.flush();\n          await probeAsync(_gl, sync, 4);\n\n          // read the data and delete the buffer\n          _gl.bindBuffer(_gl.PIXEL_PACK_BUFFER, glBuffer);\n          _gl.getBufferSubData(_gl.PIXEL_PACK_BUFFER, 0, buffer);\n          _gl.deleteBuffer(glBuffer);\n          _gl.deleteSync(sync);\n          return buffer;\n        } else {\n          throw new Error('THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.');\n        }\n      }\n    };\n\n    /**\n     * Copies pixels from the current bound framebuffer into the given texture.\n     *\n     * @param {FramebufferTexture} texture - The texture.\n     * @param {?Vector2} [position=null] - The start position of the copy operation.\n     * @param {number} [level=0] - The mip level. The default represents the base mip.\n     */\n    this.copyFramebufferToTexture = function (texture) {\n      let position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      let level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      const levelScale = Math.pow(2, -level);\n      const width = Math.floor(texture.image.width * levelScale);\n      const height = Math.floor(texture.image.height * levelScale);\n      const x = position !== null ? position.x : 0;\n      const y = position !== null ? position.y : 0;\n      textures.setTexture2D(texture, 0);\n      _gl.copyTexSubImage2D(_gl.TEXTURE_2D, level, 0, 0, x, y, width, height);\n      state.unbindTexture();\n    };\n    const _srcFramebuffer = _gl.createFramebuffer();\n    const _dstFramebuffer = _gl.createFramebuffer();\n\n    /**\n     * Copies data of the given source texture into a destination texture.\n     *\n     * When using render target textures as `srcTexture` and `dstTexture`, you must make sure both render targets are initialized\n     * {@link WebGLRenderer#initRenderTarget}.\n     *\n     * @param {Texture} srcTexture - The source texture.\n     * @param {Texture} dstTexture - The destination texture.\n     * @param {?(Box2|Box3)} [srcRegion=null] - A bounding box which describes the source region. Can be two or three-dimensional.\n     * @param {?(Vector2|Vector3)} [dstPosition=null] - A vector that represents the origin of the destination region. Can be two or three-dimensional.\n     * @param {number} [srcLevel=0] - The source mipmap level to copy.\n     * @param {?number} [dstLevel=null] - The destination mipmap level.\n     */\n    this.copyTextureToTexture = function (srcTexture, dstTexture) {\n      let srcRegion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      let dstPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      let srcLevel = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n      let dstLevel = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n      // support the previous signature with just a single dst mipmap level\n      if (dstLevel === null) {\n        if (srcLevel !== 0) {\n          // @deprecated, r171\n          warnOnce('WebGLRenderer: copyTextureToTexture function signature has changed to support src and dst mipmap levels.');\n          dstLevel = srcLevel;\n          srcLevel = 0;\n        } else {\n          dstLevel = 0;\n        }\n      }\n\n      // gather the necessary dimensions to copy\n      let width, height, depth, minX, minY, minZ;\n      let dstX, dstY, dstZ;\n      const image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[dstLevel] : srcTexture.image;\n      if (srcRegion !== null) {\n        width = srcRegion.max.x - srcRegion.min.x;\n        height = srcRegion.max.y - srcRegion.min.y;\n        depth = srcRegion.isBox3 ? srcRegion.max.z - srcRegion.min.z : 1;\n        minX = srcRegion.min.x;\n        minY = srcRegion.min.y;\n        minZ = srcRegion.isBox3 ? srcRegion.min.z : 0;\n      } else {\n        const levelScale = Math.pow(2, -srcLevel);\n        width = Math.floor(image.width * levelScale);\n        height = Math.floor(image.height * levelScale);\n        if (srcTexture.isDataArrayTexture) {\n          depth = image.depth;\n        } else if (srcTexture.isData3DTexture) {\n          depth = Math.floor(image.depth * levelScale);\n        } else {\n          depth = 1;\n        }\n        minX = 0;\n        minY = 0;\n        minZ = 0;\n      }\n      if (dstPosition !== null) {\n        dstX = dstPosition.x;\n        dstY = dstPosition.y;\n        dstZ = dstPosition.z;\n      } else {\n        dstX = 0;\n        dstY = 0;\n        dstZ = 0;\n      }\n\n      // Set up the destination target\n      const glFormat = utils.convert(dstTexture.format);\n      const glType = utils.convert(dstTexture.type);\n      let glTarget;\n      if (dstTexture.isData3DTexture) {\n        textures.setTexture3D(dstTexture, 0);\n        glTarget = _gl.TEXTURE_3D;\n      } else if (dstTexture.isDataArrayTexture || dstTexture.isCompressedArrayTexture) {\n        textures.setTexture2DArray(dstTexture, 0);\n        glTarget = _gl.TEXTURE_2D_ARRAY;\n      } else {\n        textures.setTexture2D(dstTexture, 0);\n        glTarget = _gl.TEXTURE_2D;\n      }\n      _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);\n      _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);\n      _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);\n\n      // used for copying data from cpu\n      const currentUnpackRowLen = _gl.getParameter(_gl.UNPACK_ROW_LENGTH);\n      const currentUnpackImageHeight = _gl.getParameter(_gl.UNPACK_IMAGE_HEIGHT);\n      const currentUnpackSkipPixels = _gl.getParameter(_gl.UNPACK_SKIP_PIXELS);\n      const currentUnpackSkipRows = _gl.getParameter(_gl.UNPACK_SKIP_ROWS);\n      const currentUnpackSkipImages = _gl.getParameter(_gl.UNPACK_SKIP_IMAGES);\n      _gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, image.width);\n      _gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, image.height);\n      _gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, minX);\n      _gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, minY);\n      _gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, minZ);\n\n      // set up the src texture\n      const isSrc3D = srcTexture.isDataArrayTexture || srcTexture.isData3DTexture;\n      const isDst3D = dstTexture.isDataArrayTexture || dstTexture.isData3DTexture;\n      if (srcTexture.isDepthTexture) {\n        const srcTextureProperties = properties.get(srcTexture);\n        const dstTextureProperties = properties.get(dstTexture);\n        const srcRenderTargetProperties = properties.get(srcTextureProperties.__renderTarget);\n        const dstRenderTargetProperties = properties.get(dstTextureProperties.__renderTarget);\n        state.bindFramebuffer(_gl.READ_FRAMEBUFFER, srcRenderTargetProperties.__webglFramebuffer);\n        state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, dstRenderTargetProperties.__webglFramebuffer);\n        for (let i = 0; i < depth; i++) {\n          // if the source or destination are a 3d target then a layer needs to be bound\n          if (isSrc3D) {\n            _gl.framebufferTextureLayer(_gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, properties.get(srcTexture).__webglTexture, srcLevel, minZ + i);\n            _gl.framebufferTextureLayer(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, properties.get(dstTexture).__webglTexture, dstLevel, dstZ + i);\n          }\n          _gl.blitFramebuffer(minX, minY, width, height, dstX, dstY, width, height, _gl.DEPTH_BUFFER_BIT, _gl.NEAREST);\n        }\n        state.bindFramebuffer(_gl.READ_FRAMEBUFFER, null);\n        state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, null);\n      } else if (srcLevel !== 0 || srcTexture.isRenderTargetTexture || properties.has(srcTexture)) {\n        // get the appropriate frame buffers\n        const srcTextureProperties = properties.get(srcTexture);\n        const dstTextureProperties = properties.get(dstTexture);\n\n        // bind the frame buffer targets\n        state.bindFramebuffer(_gl.READ_FRAMEBUFFER, _srcFramebuffer);\n        state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, _dstFramebuffer);\n        for (let i = 0; i < depth; i++) {\n          // assign the correct layers and mip maps to the frame buffers\n          if (isSrc3D) {\n            _gl.framebufferTextureLayer(_gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, srcTextureProperties.__webglTexture, srcLevel, minZ + i);\n          } else {\n            _gl.framebufferTexture2D(_gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, srcTextureProperties.__webglTexture, srcLevel);\n          }\n          if (isDst3D) {\n            _gl.framebufferTextureLayer(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, dstTextureProperties.__webglTexture, dstLevel, dstZ + i);\n          } else {\n            _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, dstTextureProperties.__webglTexture, dstLevel);\n          }\n\n          // copy the data using the fastest function that can achieve the copy\n          if (srcLevel !== 0) {\n            _gl.blitFramebuffer(minX, minY, width, height, dstX, dstY, width, height, _gl.COLOR_BUFFER_BIT, _gl.NEAREST);\n          } else if (isDst3D) {\n            _gl.copyTexSubImage3D(glTarget, dstLevel, dstX, dstY, dstZ + i, minX, minY, width, height);\n          } else {\n            _gl.copyTexSubImage2D(glTarget, dstLevel, dstX, dstY, minX, minY, width, height);\n          }\n        }\n\n        // unbind read, draw buffers\n        state.bindFramebuffer(_gl.READ_FRAMEBUFFER, null);\n        state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, null);\n      } else {\n        if (isDst3D) {\n          // copy data into the 3d texture\n          if (srcTexture.isDataTexture || srcTexture.isData3DTexture) {\n            _gl.texSubImage3D(glTarget, dstLevel, dstX, dstY, dstZ, width, height, depth, glFormat, glType, image.data);\n          } else if (dstTexture.isCompressedArrayTexture) {\n            _gl.compressedTexSubImage3D(glTarget, dstLevel, dstX, dstY, dstZ, width, height, depth, glFormat, image.data);\n          } else {\n            _gl.texSubImage3D(glTarget, dstLevel, dstX, dstY, dstZ, width, height, depth, glFormat, glType, image);\n          }\n        } else {\n          // copy data into the 2d texture\n          if (srcTexture.isDataTexture) {\n            _gl.texSubImage2D(_gl.TEXTURE_2D, dstLevel, dstX, dstY, width, height, glFormat, glType, image.data);\n          } else if (srcTexture.isCompressedTexture) {\n            _gl.compressedTexSubImage2D(_gl.TEXTURE_2D, dstLevel, dstX, dstY, image.width, image.height, glFormat, image.data);\n          } else {\n            _gl.texSubImage2D(_gl.TEXTURE_2D, dstLevel, dstX, dstY, width, height, glFormat, glType, image);\n          }\n        }\n      }\n\n      // reset values\n      _gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, currentUnpackRowLen);\n      _gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, currentUnpackImageHeight);\n      _gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, currentUnpackSkipPixels);\n      _gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, currentUnpackSkipRows);\n      _gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, currentUnpackSkipImages);\n\n      // Generate mipmaps only when copying level 0\n      if (dstLevel === 0 && dstTexture.generateMipmaps) {\n        _gl.generateMipmap(glTarget);\n      }\n      state.unbindTexture();\n    };\n    this.copyTextureToTexture3D = function (srcTexture, dstTexture) {\n      let srcRegion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      let dstPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      let level = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n      // @deprecated, r170\n      warnOnce('WebGLRenderer: copyTextureToTexture3D function has been deprecated. Use \"copyTextureToTexture\" instead.');\n      return this.copyTextureToTexture(srcTexture, dstTexture, srcRegion, dstPosition, level);\n    };\n\n    /**\n     * Initializes the given WebGLRenderTarget memory. Useful for initializing a render target so data\n     * can be copied into it using {@link WebGLRenderer#copyTextureToTexture} before it has been\n     * rendered to.\n     *\n     * @param {WebGLRenderTarget} target - The render target.\n     */\n    this.initRenderTarget = function (target) {\n      if (properties.get(target).__webglFramebuffer === undefined) {\n        textures.setupRenderTarget(target);\n      }\n    };\n\n    /**\n     * Initializes the given texture. Useful for preloading a texture rather than waiting until first\n     * render (which can cause noticeable lags due to decode and GPU upload overhead).\n     *\n     * @param {Texture} texture - The texture.\n     */\n    this.initTexture = function (texture) {\n      if (texture.isCubeTexture) {\n        textures.setTextureCube(texture, 0);\n      } else if (texture.isData3DTexture) {\n        textures.setTexture3D(texture, 0);\n      } else if (texture.isDataArrayTexture || texture.isCompressedArrayTexture) {\n        textures.setTexture2DArray(texture, 0);\n      } else {\n        textures.setTexture2D(texture, 0);\n      }\n      state.unbindTexture();\n    };\n\n    /**\n     * Can be used to reset the internal WebGL state. This method is mostly\n     * relevant for applications which share a single WebGL context across\n     * multiple WebGL libraries.\n     */\n    this.resetState = function () {\n      _currentActiveCubeFace = 0;\n      _currentActiveMipmapLevel = 0;\n      _currentRenderTarget = null;\n      state.reset();\n      bindingStates.reset();\n    };\n    if (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n      __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {\n        detail: this\n      }));\n    }\n  }\n\n  /**\n   * Defines the coordinate system of the renderer.\n   *\n   * In `WebGLRenderer`, the value is always `WebGLCoordinateSystem`.\n   *\n   * @type {WebGLCoordinateSystem|WebGPUCoordinateSystem}\n   * @default WebGLCoordinateSystem\n   * @readonly\n   */\n  get coordinateSystem() {\n    return WebGLCoordinateSystem;\n  }\n\n  /**\n   * Defines the output color space of the renderer.\n   *\n   * @type {SRGBColorSpace|LinearSRGBColorSpace}\n   * @default SRGBColorSpace\n   */\n  get outputColorSpace() {\n    return this._outputColorSpace;\n  }\n  set outputColorSpace(colorSpace) {\n    this._outputColorSpace = colorSpace;\n    const gl = this.getContext();\n    gl.drawingBufferColorSpace = ColorManagement._getDrawingBufferColorSpace(colorSpace);\n    gl.unpackColorSpace = ColorManagement._getUnpackColorSpace();\n  }\n}\nexport { ACESFilmicToneMapping, AddEquation, AddOperation, AdditiveBlending, AgXToneMapping, AlphaFormat, AlwaysCompare, AlwaysDepth, ArrayCamera, BackSide, BoxGeometry, BufferAttribute, BufferGeometry, ByteType, CineonToneMapping, ClampToEdgeWrapping, Color, ColorManagement, ConstantAlphaFactor, ConstantColorFactor, CubeReflectionMapping, CubeRefractionMapping, CubeTexture, CubeUVReflectionMapping, CullFaceBack, CullFaceFront, CullFaceNone, CustomBlending, CustomToneMapping, Data3DTexture, DataArrayTexture, DepthFormat, DepthStencilFormat, DepthTexture, DoubleSide, DstAlphaFactor, DstColorFactor, EqualCompare, EqualDepth, EquirectangularReflectionMapping, EquirectangularRefractionMapping, Euler, EventDispatcher, FloatType, FrontSide, Frustum, GLSL3, GreaterCompare, GreaterDepth, GreaterEqualCompare, GreaterEqualDepth, HalfFloatType, IntType, Layers, LessCompare, LessDepth, LessEqualCompare, LessEqualDepth, LinearFilter, LinearMipmapLinearFilter, LinearMipmapNearestFilter, LinearSRGBColorSpace, LinearToneMapping, LinearTransfer, Matrix3, Matrix4, MaxEquation, Mesh, MeshBasicMaterial, MeshDepthMaterial, MeshDistanceMaterial, MinEquation, MirroredRepeatWrapping, MixOperation, MultiplyBlending, MultiplyOperation, NearestFilter, NearestMipmapLinearFilter, NearestMipmapNearestFilter, NeutralToneMapping, NeverCompare, NeverDepth, NoBlending, NoColorSpace, NoToneMapping, NormalBlending, NotEqualCompare, NotEqualDepth, ObjectSpaceNormalMap, OneFactor, OneMinusConstantAlphaFactor, OneMinusConstantColorFactor, OneMinusDstAlphaFactor, OneMinusDstColorFactor, OneMinusSrcAlphaFactor, OneMinusSrcColorFactor, OrthographicCamera, PCFShadowMap, PCFSoftShadowMap, PMREMGenerator, PerspectiveCamera, Plane, PlaneGeometry, RED_GREEN_RGTC2_Format, RED_RGTC1_Format, REVISION, RGBADepthPacking, RGBAFormat, RGBAIntegerFormat, RGBA_ASTC_10x10_Format, RGBA_ASTC_10x5_Format, RGBA_ASTC_10x6_Format, RGBA_ASTC_10x8_Format, RGBA_ASTC_12x10_Format, RGBA_ASTC_12x12_Format, RGBA_ASTC_4x4_Format, RGBA_ASTC_5x4_Format, RGBA_ASTC_5x5_Format, RGBA_ASTC_6x5_Format, RGBA_ASTC_6x6_Format, RGBA_ASTC_8x5_Format, RGBA_ASTC_8x6_Format, RGBA_ASTC_8x8_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_2BPPV1_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT1_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT5_Format, RGBFormat, RGB_BPTC_SIGNED_Format, RGB_BPTC_UNSIGNED_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_2BPPV1_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, RGFormat, RGIntegerFormat, RedFormat, RedIntegerFormat, ReinhardToneMapping, RepeatWrapping, ReverseSubtractEquation, SIGNED_RED_GREEN_RGTC2_Format, SIGNED_RED_RGTC1_Format, SRGBColorSpace, SRGBTransfer, ShaderChunk, ShaderLib, ShaderMaterial, ShortType, SrcAlphaFactor, SrcAlphaSaturateFactor, SrcColorFactor, SubtractEquation, SubtractiveBlending, TangentSpaceNormalMap, Texture, Uint16BufferAttribute, Uint32BufferAttribute, UniformsLib, UniformsUtils, UnsignedByteType, UnsignedInt248Type, UnsignedInt5999Type, UnsignedIntType, UnsignedShort4444Type, UnsignedShort5551Type, UnsignedShortType, VSMShadowMap, Vector2, Vector3, Vector4, WebGLCoordinateSystem, WebGLCubeRenderTarget, WebGLRenderTarget, WebGLRenderer, WebGLUtils, WebXRController, ZeroFactor, createCanvasElement };","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\nfunction toObject(val) {\n  if (val === null || val === undefined) {\n    throw new TypeError('Object.assign cannot be called with null or undefined');\n  }\n  return Object(val);\n}\nfunction shouldUseNative() {\n  try {\n    if (!Object.assign) {\n      return false;\n    }\n\n    // Detect buggy property enumeration order in older V8 versions.\n\n    // https://bugs.chromium.org/p/v8/issues/detail?id=4118\n    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers\n    test1[5] = 'de';\n    if (Object.getOwnPropertyNames(test1)[0] === '5') {\n      return false;\n    }\n\n    // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n    var test2 = {};\n    for (var i = 0; i < 10; i++) {\n      test2['_' + String.fromCharCode(i)] = i;\n    }\n    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n      return test2[n];\n    });\n    if (order2.join('') !== '0123456789') {\n      return false;\n    }\n\n    // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n    var test3 = {};\n    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n      test3[letter] = letter;\n    });\n    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {\n      return false;\n    }\n    return true;\n  } catch (err) {\n    // We don't expect any of the above to throw, but better to be safe.\n    return false;\n  }\n}\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n  var from;\n  var to = toObject(target);\n  var symbols;\n  for (var s = 1; s < arguments.length; s++) {\n    from = Object(arguments[s]);\n    for (var key in from) {\n      if (hasOwnProperty.call(from, key)) {\n        to[key] = from[key];\n      }\n    }\n    if (getOwnPropertySymbols) {\n      symbols = getOwnPropertySymbols(from);\n      for (var i = 0; i < symbols.length; i++) {\n        if (propIsEnumerable.call(from, symbols[i])) {\n          to[symbols[i]] = from[symbols[i]];\n        }\n      }\n    }\n  }\n  return to;\n};","'use strict';\n\nfunction checkDCE() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') {\n    return;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    // This branch is unreachable because this function is only called\n    // in production, but the condition is true only in development.\n    // Therefore if the branch is still here, dead code elimination wasn't\n    // properly applied.\n    // Don't change the message. React DevTools relies on it. Also make sure\n    // this message doesn't occur elsewhere in this function, or it will cause\n    // a false positive.\n    throw new Error('^_^');\n  }\n  try {\n    // Verify that the code above has been dead code eliminated (DCE'd).\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n  } catch (err) {\n    // DevTools shouldn't crash React, no matter what.\n    // We should still report in case we break this code.\n    console.error(err);\n  }\n}\nif (process.env.NODE_ENV === 'production') {\n  // DCE check should happen before ReactDOM bundle executes so that\n  // DevTools can report bad minification during injection.\n  checkDCE();\n  module.exports = require('./cjs/react-dom.production.min.js');\n} else {\n  module.exports = require('./cjs/react-dom.development.js');\n}","!function (t, i) {\n  \"object\" == typeof exports && \"object\" == typeof module ? module.exports = i() : \"function\" == typeof define && define.amd ? define(\"nipplejs\", [], i) : \"object\" == typeof exports ? exports.nipplejs = i() : t.nipplejs = i();\n}(window, function () {\n  return function (t) {\n    var i = {};\n    function e(o) {\n      if (i[o]) return i[o].exports;\n      var n = i[o] = {\n        i: o,\n        l: !1,\n        exports: {}\n      };\n      return t[o].call(n.exports, n, n.exports, e), n.l = !0, n.exports;\n    }\n    return e.m = t, e.c = i, e.d = function (t, i, o) {\n      e.o(t, i) || Object.defineProperty(t, i, {\n        enumerable: !0,\n        get: o\n      });\n    }, e.r = function (t) {\n      \"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, {\n        value: \"Module\"\n      }), Object.defineProperty(t, \"__esModule\", {\n        value: !0\n      });\n    }, e.t = function (t, i) {\n      if (1 & i && (t = e(t)), 8 & i) return t;\n      if (4 & i && \"object\" == typeof t && t && t.__esModule) return t;\n      var o = Object.create(null);\n      if (e.r(o), Object.defineProperty(o, \"default\", {\n        enumerable: !0,\n        value: t\n      }), 2 & i && \"string\" != typeof t) for (var n in t) e.d(o, n, function (i) {\n        return t[i];\n      }.bind(null, n));\n      return o;\n    }, e.n = function (t) {\n      var i = t && t.__esModule ? function () {\n        return t.default;\n      } : function () {\n        return t;\n      };\n      return e.d(i, \"a\", i), i;\n    }, e.o = function (t, i) {\n      return Object.prototype.hasOwnProperty.call(t, i);\n    }, e.p = \"\", e(e.s = 0);\n  }([function (t, i, e) {\n    \"use strict\";\n\n    e.r(i);\n    var o,\n      n = function (t, i) {\n        var e = i.x - t.x,\n          o = i.y - t.y;\n        return Math.sqrt(e * e + o * o);\n      },\n      s = function (t) {\n        return t * (Math.PI / 180);\n      },\n      r = function (t) {\n        return t * (180 / Math.PI);\n      },\n      d = new Map(),\n      a = function (t) {\n        d.has(t) && clearTimeout(d.get(t)), d.set(t, setTimeout(t, 100));\n      },\n      p = function (t, i, e) {\n        for (var o, n = i.split(/[ ,]+/g), s = 0; s < n.length; s += 1) o = n[s], t.addEventListener ? t.addEventListener(o, e, !1) : t.attachEvent && t.attachEvent(o, e);\n      },\n      c = function (t, i, e) {\n        for (var o, n = i.split(/[ ,]+/g), s = 0; s < n.length; s += 1) o = n[s], t.removeEventListener ? t.removeEventListener(o, e) : t.detachEvent && t.detachEvent(o, e);\n      },\n      l = function (t) {\n        return t.preventDefault(), t.type.match(/^touch/) ? t.changedTouches : t;\n      },\n      h = function () {\n        return {\n          x: void 0 !== window.pageXOffset ? window.pageXOffset : (document.documentElement || document.body.parentNode || document.body).scrollLeft,\n          y: void 0 !== window.pageYOffset ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop\n        };\n      },\n      u = function (t, i) {\n        i.top || i.right || i.bottom || i.left ? (t.style.top = i.top, t.style.right = i.right, t.style.bottom = i.bottom, t.style.left = i.left) : (t.style.left = i.x + \"px\", t.style.top = i.y + \"px\");\n      },\n      f = function (t, i, e) {\n        var o = y(t);\n        for (var n in o) if (o.hasOwnProperty(n)) if (\"string\" == typeof i) o[n] = i + \" \" + e;else {\n          for (var s = \"\", r = 0, d = i.length; r < d; r += 1) s += i[r] + \" \" + e + \", \";\n          o[n] = s.slice(0, -2);\n        }\n        return o;\n      },\n      y = function (t) {\n        var i = {};\n        i[t] = \"\";\n        return [\"webkit\", \"Moz\", \"o\"].forEach(function (e) {\n          i[e + t.charAt(0).toUpperCase() + t.slice(1)] = \"\";\n        }), i;\n      },\n      m = function (t, i) {\n        for (var e in i) i.hasOwnProperty(e) && (t[e] = i[e]);\n        return t;\n      },\n      v = function (t, i) {\n        if (t.length) for (var e = 0, o = t.length; e < o; e += 1) i(t[e]);else i(t);\n      },\n      g = !!(\"ontouchstart\" in window),\n      b = !!window.PointerEvent,\n      x = !!window.MSPointerEvent,\n      O = {\n        start: \"mousedown\",\n        move: \"mousemove\",\n        end: \"mouseup\"\n      },\n      w = {};\n    function _() {}\n    b ? o = {\n      start: \"pointerdown\",\n      move: \"pointermove\",\n      end: \"pointerup, pointercancel\"\n    } : x ? o = {\n      start: \"MSPointerDown\",\n      move: \"MSPointerMove\",\n      end: \"MSPointerUp\"\n    } : g ? (o = {\n      start: \"touchstart\",\n      move: \"touchmove\",\n      end: \"touchend, touchcancel\"\n    }, w = O) : o = O, _.prototype.on = function (t, i) {\n      var e,\n        o = t.split(/[ ,]+/g);\n      this._handlers_ = this._handlers_ || {};\n      for (var n = 0; n < o.length; n += 1) e = o[n], this._handlers_[e] = this._handlers_[e] || [], this._handlers_[e].push(i);\n      return this;\n    }, _.prototype.off = function (t, i) {\n      return this._handlers_ = this._handlers_ || {}, void 0 === t ? this._handlers_ = {} : void 0 === i ? this._handlers_[t] = null : this._handlers_[t] && this._handlers_[t].indexOf(i) >= 0 && this._handlers_[t].splice(this._handlers_[t].indexOf(i), 1), this;\n    }, _.prototype.trigger = function (t, i) {\n      var e,\n        o = this,\n        n = t.split(/[ ,]+/g);\n      o._handlers_ = o._handlers_ || {};\n      for (var s = 0; s < n.length; s += 1) e = n[s], o._handlers_[e] && o._handlers_[e].length && o._handlers_[e].forEach(function (t) {\n        t.call(o, {\n          type: e,\n          target: o\n        }, i);\n      });\n    }, _.prototype.config = function (t) {\n      this.options = this.defaults || {}, t && (this.options = function (t, i) {\n        var e = {};\n        for (var o in t) t.hasOwnProperty(o) && i.hasOwnProperty(o) ? e[o] = i[o] : t.hasOwnProperty(o) && (e[o] = t[o]);\n        return e;\n      }(this.options, t));\n    }, _.prototype.bindEvt = function (t, i) {\n      var e = this;\n      return e._domHandlers_ = e._domHandlers_ || {}, e._domHandlers_[i] = function () {\n        \"function\" == typeof e[\"on\" + i] ? e[\"on\" + i].apply(e, arguments) : console.warn('[WARNING] : Missing \"on' + i + '\" handler.');\n      }, p(t, o[i], e._domHandlers_[i]), w[i] && p(t, w[i], e._domHandlers_[i]), e;\n    }, _.prototype.unbindEvt = function (t, i) {\n      return this._domHandlers_ = this._domHandlers_ || {}, c(t, o[i], this._domHandlers_[i]), w[i] && c(t, w[i], this._domHandlers_[i]), delete this._domHandlers_[i], this;\n    };\n    var T = _;\n    function k(t, i) {\n      return this.identifier = i.identifier, this.position = i.position, this.frontPosition = i.frontPosition, this.collection = t, this.defaults = {\n        size: 100,\n        threshold: .1,\n        color: \"white\",\n        fadeTime: 250,\n        dataOnly: !1,\n        restJoystick: !0,\n        restOpacity: .5,\n        mode: \"dynamic\",\n        zone: document.body,\n        lockX: !1,\n        lockY: !1,\n        shape: \"circle\"\n      }, this.config(i), \"dynamic\" === this.options.mode && (this.options.restOpacity = 0), this.id = k.id, k.id += 1, this.buildEl().stylize(), this.instance = {\n        el: this.ui.el,\n        on: this.on.bind(this),\n        off: this.off.bind(this),\n        show: this.show.bind(this),\n        hide: this.hide.bind(this),\n        add: this.addToDom.bind(this),\n        remove: this.removeFromDom.bind(this),\n        destroy: this.destroy.bind(this),\n        setPosition: this.setPosition.bind(this),\n        resetDirection: this.resetDirection.bind(this),\n        computeDirection: this.computeDirection.bind(this),\n        trigger: this.trigger.bind(this),\n        position: this.position,\n        frontPosition: this.frontPosition,\n        ui: this.ui,\n        identifier: this.identifier,\n        id: this.id,\n        options: this.options\n      }, this.instance;\n    }\n    k.prototype = new T(), k.constructor = k, k.id = 0, k.prototype.buildEl = function (t) {\n      return this.ui = {}, this.options.dataOnly ? this : (this.ui.el = document.createElement(\"div\"), this.ui.back = document.createElement(\"div\"), this.ui.front = document.createElement(\"div\"), this.ui.el.className = \"nipple collection_\" + this.collection.id, this.ui.back.className = \"back\", this.ui.front.className = \"front\", this.ui.el.setAttribute(\"id\", \"nipple_\" + this.collection.id + \"_\" + this.id), this.ui.el.appendChild(this.ui.back), this.ui.el.appendChild(this.ui.front), this);\n    }, k.prototype.stylize = function () {\n      if (this.options.dataOnly) return this;\n      var t = this.options.fadeTime + \"ms\",\n        i = function (t, i) {\n          var e = y(t);\n          for (var o in e) e.hasOwnProperty(o) && (e[o] = i);\n          return e;\n        }(\"borderRadius\", \"50%\"),\n        e = f(\"transition\", \"opacity\", t),\n        o = {};\n      return o.el = {\n        position: \"absolute\",\n        opacity: this.options.restOpacity,\n        display: \"block\",\n        zIndex: 999\n      }, o.back = {\n        position: \"absolute\",\n        display: \"block\",\n        width: this.options.size + \"px\",\n        height: this.options.size + \"px\",\n        left: 0,\n        marginLeft: -this.options.size / 2 + \"px\",\n        marginTop: -this.options.size / 2 + \"px\",\n        background: this.options.color,\n        opacity: \".5\"\n      }, o.front = {\n        width: this.options.size / 2 + \"px\",\n        height: this.options.size / 2 + \"px\",\n        position: \"absolute\",\n        display: \"block\",\n        left: 0,\n        marginLeft: -this.options.size / 4 + \"px\",\n        marginTop: -this.options.size / 4 + \"px\",\n        background: this.options.color,\n        opacity: \".5\",\n        transform: \"translate(0px, 0px)\"\n      }, m(o.el, e), \"circle\" === this.options.shape && m(o.back, i), m(o.front, i), this.applyStyles(o), this;\n    }, k.prototype.applyStyles = function (t) {\n      for (var i in this.ui) if (this.ui.hasOwnProperty(i)) for (var e in t[i]) this.ui[i].style[e] = t[i][e];\n      return this;\n    }, k.prototype.addToDom = function () {\n      return this.options.dataOnly || document.body.contains(this.ui.el) ? this : (this.options.zone.appendChild(this.ui.el), this);\n    }, k.prototype.removeFromDom = function () {\n      return this.options.dataOnly || !document.body.contains(this.ui.el) ? this : (this.options.zone.removeChild(this.ui.el), this);\n    }, k.prototype.destroy = function () {\n      clearTimeout(this.removeTimeout), clearTimeout(this.showTimeout), clearTimeout(this.restTimeout), this.trigger(\"destroyed\", this.instance), this.removeFromDom(), this.off();\n    }, k.prototype.show = function (t) {\n      var i = this;\n      return i.options.dataOnly ? i : (clearTimeout(i.removeTimeout), clearTimeout(i.showTimeout), clearTimeout(i.restTimeout), i.addToDom(), i.restCallback(), setTimeout(function () {\n        i.ui.el.style.opacity = 1;\n      }, 0), i.showTimeout = setTimeout(function () {\n        i.trigger(\"shown\", i.instance), \"function\" == typeof t && t.call(this);\n      }, i.options.fadeTime), i);\n    }, k.prototype.hide = function (t) {\n      var i = this;\n      if (i.options.dataOnly) return i;\n      if (i.ui.el.style.opacity = i.options.restOpacity, clearTimeout(i.removeTimeout), clearTimeout(i.showTimeout), clearTimeout(i.restTimeout), i.removeTimeout = setTimeout(function () {\n        var e = \"dynamic\" === i.options.mode ? \"none\" : \"block\";\n        i.ui.el.style.display = e, \"function\" == typeof t && t.call(i), i.trigger(\"hidden\", i.instance);\n      }, i.options.fadeTime), i.options.restJoystick) {\n        var e = i.options.restJoystick,\n          o = {};\n        o.x = !0 === e || !1 !== e.x ? 0 : i.instance.frontPosition.x, o.y = !0 === e || !1 !== e.y ? 0 : i.instance.frontPosition.y, i.setPosition(t, o);\n      }\n      return i;\n    }, k.prototype.setPosition = function (t, i) {\n      var e = this;\n      e.frontPosition = {\n        x: i.x,\n        y: i.y\n      };\n      var o = e.options.fadeTime + \"ms\",\n        n = {};\n      n.front = f(\"transition\", [\"transform\"], o);\n      var s = {\n        front: {}\n      };\n      s.front = {\n        transform: \"translate(\" + e.frontPosition.x + \"px,\" + e.frontPosition.y + \"px)\"\n      }, e.applyStyles(n), e.applyStyles(s), e.restTimeout = setTimeout(function () {\n        \"function\" == typeof t && t.call(e), e.restCallback();\n      }, e.options.fadeTime);\n    }, k.prototype.restCallback = function () {\n      var t = {};\n      t.front = f(\"transition\", \"none\", \"\"), this.applyStyles(t), this.trigger(\"rested\", this.instance);\n    }, k.prototype.resetDirection = function () {\n      this.direction = {\n        x: !1,\n        y: !1,\n        angle: !1\n      };\n    }, k.prototype.computeDirection = function (t) {\n      var i,\n        e,\n        o,\n        n = t.angle.radian,\n        s = Math.PI / 4,\n        r = Math.PI / 2;\n      if (n > s && n < 3 * s && !t.lockX ? i = \"up\" : n > -s && n <= s && !t.lockY ? i = \"left\" : n > 3 * -s && n <= -s && !t.lockX ? i = \"down\" : t.lockY || (i = \"right\"), t.lockY || (e = n > -r && n < r ? \"left\" : \"right\"), t.lockX || (o = n > 0 ? \"up\" : \"down\"), t.force > this.options.threshold) {\n        var d,\n          a = {};\n        for (d in this.direction) this.direction.hasOwnProperty(d) && (a[d] = this.direction[d]);\n        var p = {};\n        for (d in this.direction = {\n          x: e,\n          y: o,\n          angle: i\n        }, t.direction = this.direction, a) a[d] === this.direction[d] && (p[d] = !0);\n        if (p.x && p.y && p.angle) return t;\n        p.x && p.y || this.trigger(\"plain\", t), p.x || this.trigger(\"plain:\" + e, t), p.y || this.trigger(\"plain:\" + o, t), p.angle || this.trigger(\"dir dir:\" + i, t);\n      } else this.resetDirection();\n      return t;\n    };\n    var P = k;\n    function E(t, i) {\n      this.nipples = [], this.idles = [], this.actives = [], this.ids = [], this.pressureIntervals = {}, this.manager = t, this.id = E.id, E.id += 1, this.defaults = {\n        zone: document.body,\n        multitouch: !1,\n        maxNumberOfNipples: 10,\n        mode: \"dynamic\",\n        position: {\n          top: 0,\n          left: 0\n        },\n        catchDistance: 200,\n        size: 100,\n        threshold: .1,\n        color: \"white\",\n        fadeTime: 250,\n        dataOnly: !1,\n        restJoystick: !0,\n        restOpacity: .5,\n        lockX: !1,\n        lockY: !1,\n        shape: \"circle\",\n        dynamicPage: !1,\n        follow: !1\n      }, this.config(i), \"static\" !== this.options.mode && \"semi\" !== this.options.mode || (this.options.multitouch = !1), this.options.multitouch || (this.options.maxNumberOfNipples = 1);\n      var e = getComputedStyle(this.options.zone.parentElement);\n      return e && \"flex\" === e.display && (this.parentIsFlex = !0), this.updateBox(), this.prepareNipples(), this.bindings(), this.begin(), this.nipples;\n    }\n    E.prototype = new T(), E.constructor = E, E.id = 0, E.prototype.prepareNipples = function () {\n      var t = this.nipples;\n      t.on = this.on.bind(this), t.off = this.off.bind(this), t.options = this.options, t.destroy = this.destroy.bind(this), t.ids = this.ids, t.id = this.id, t.processOnMove = this.processOnMove.bind(this), t.processOnEnd = this.processOnEnd.bind(this), t.get = function (i) {\n        if (void 0 === i) return t[0];\n        for (var e = 0, o = t.length; e < o; e += 1) if (t[e].identifier === i) return t[e];\n        return !1;\n      };\n    }, E.prototype.bindings = function () {\n      this.bindEvt(this.options.zone, \"start\"), this.options.zone.style.touchAction = \"none\", this.options.zone.style.msTouchAction = \"none\";\n    }, E.prototype.begin = function () {\n      var t = this.options;\n      if (\"static\" === t.mode) {\n        var i = this.createNipple(t.position, this.manager.getIdentifier());\n        i.add(), this.idles.push(i);\n      }\n    }, E.prototype.createNipple = function (t, i) {\n      var e = this.manager.scroll,\n        o = {},\n        n = this.options,\n        s = this.parentIsFlex ? e.x : e.x + this.box.left,\n        r = this.parentIsFlex ? e.y : e.y + this.box.top;\n      if (t.x && t.y) o = {\n        x: t.x - s,\n        y: t.y - r\n      };else if (t.top || t.right || t.bottom || t.left) {\n        var d = document.createElement(\"DIV\");\n        d.style.display = \"hidden\", d.style.top = t.top, d.style.right = t.right, d.style.bottom = t.bottom, d.style.left = t.left, d.style.position = \"absolute\", n.zone.appendChild(d);\n        var a = d.getBoundingClientRect();\n        n.zone.removeChild(d), o = t, t = {\n          x: a.left + e.x,\n          y: a.top + e.y\n        };\n      }\n      var p = new P(this, {\n        color: n.color,\n        size: n.size,\n        threshold: n.threshold,\n        fadeTime: n.fadeTime,\n        dataOnly: n.dataOnly,\n        restJoystick: n.restJoystick,\n        restOpacity: n.restOpacity,\n        mode: n.mode,\n        identifier: i,\n        position: t,\n        zone: n.zone,\n        frontPosition: {\n          x: 0,\n          y: 0\n        },\n        shape: n.shape\n      });\n      return n.dataOnly || (u(p.ui.el, o), u(p.ui.front, p.frontPosition)), this.nipples.push(p), this.trigger(\"added \" + p.identifier + \":added\", p), this.manager.trigger(\"added \" + p.identifier + \":added\", p), this.bindNipple(p), p;\n    }, E.prototype.updateBox = function () {\n      this.box = this.options.zone.getBoundingClientRect();\n    }, E.prototype.bindNipple = function (t) {\n      var i,\n        e = this,\n        o = function (t, o) {\n          i = t.type + \" \" + o.id + \":\" + t.type, e.trigger(i, o);\n        };\n      t.on(\"destroyed\", e.onDestroyed.bind(e)), t.on(\"shown hidden rested dir plain\", o), t.on(\"dir:up dir:right dir:down dir:left\", o), t.on(\"plain:up plain:right plain:down plain:left\", o);\n    }, E.prototype.pressureFn = function (t, i, e) {\n      var o = this,\n        n = 0;\n      clearInterval(o.pressureIntervals[e]), o.pressureIntervals[e] = setInterval(function () {\n        var e = t.force || t.pressure || t.webkitForce || 0;\n        e !== n && (i.trigger(\"pressure\", e), o.trigger(\"pressure \" + i.identifier + \":pressure\", e), n = e);\n      }.bind(o), 100);\n    }, E.prototype.onstart = function (t) {\n      var i = this,\n        e = i.options,\n        o = t;\n      t = l(t), i.updateBox();\n      return v(t, function (n) {\n        i.actives.length < e.maxNumberOfNipples ? i.processOnStart(n) : o.type.match(/^touch/) && (Object.keys(i.manager.ids).forEach(function (e) {\n          if (Object.values(o.touches).findIndex(function (t) {\n            return t.identifier === e;\n          }) < 0) {\n            var n = [t[0]];\n            n.identifier = e, i.processOnEnd(n);\n          }\n        }), i.actives.length < e.maxNumberOfNipples && i.processOnStart(n));\n      }), i.manager.bindDocument(), !1;\n    }, E.prototype.processOnStart = function (t) {\n      var i,\n        e = this,\n        o = e.options,\n        s = e.manager.getIdentifier(t),\n        r = t.force || t.pressure || t.webkitForce || 0,\n        d = {\n          x: t.pageX,\n          y: t.pageY\n        },\n        a = e.getOrCreate(s, d);\n      a.identifier !== s && e.manager.removeIdentifier(a.identifier), a.identifier = s;\n      var p = function (i) {\n        i.trigger(\"start\", i), e.trigger(\"start \" + i.id + \":start\", i), i.show(), r > 0 && e.pressureFn(t, i, i.identifier), e.processOnMove(t);\n      };\n      if ((i = e.idles.indexOf(a)) >= 0 && e.idles.splice(i, 1), e.actives.push(a), e.ids.push(a.identifier), \"semi\" !== o.mode) p(a);else {\n        if (!(n(d, a.position) <= o.catchDistance)) return a.destroy(), void e.processOnStart(t);\n        p(a);\n      }\n      return a;\n    }, E.prototype.getOrCreate = function (t, i) {\n      var e,\n        o = this.options;\n      return /(semi|static)/.test(o.mode) ? (e = this.idles[0]) ? (this.idles.splice(0, 1), e) : \"semi\" === o.mode ? this.createNipple(i, t) : (console.warn(\"Coudln't find the needed nipple.\"), !1) : e = this.createNipple(i, t);\n    }, E.prototype.processOnMove = function (t) {\n      var i = this.options,\n        e = this.manager.getIdentifier(t),\n        o = this.nipples.get(e),\n        d = this.manager.scroll;\n      if (function (t) {\n        return isNaN(t.buttons) ? 0 !== t.pressure : 0 !== t.buttons;\n      }(t)) {\n        if (!o) return console.error(\"Found zombie joystick with ID \" + e), void this.manager.removeIdentifier(e);\n        if (i.dynamicPage) {\n          var a = o.el.getBoundingClientRect();\n          o.position = {\n            x: d.x + a.left,\n            y: d.y + a.top\n          };\n        }\n        o.identifier = e;\n        var p = o.options.size / 2,\n          c = {\n            x: t.pageX,\n            y: t.pageY\n          };\n        i.lockX && (c.y = o.position.y), i.lockY && (c.x = o.position.x);\n        var l,\n          h,\n          u,\n          f,\n          y,\n          m,\n          v,\n          g,\n          b,\n          x,\n          O = n(c, o.position),\n          w = (l = c, h = o.position, u = h.x - l.x, f = h.y - l.y, r(Math.atan2(f, u))),\n          _ = s(w),\n          T = O / p,\n          k = {\n            distance: O,\n            position: c\n          };\n        if (\"circle\" === o.options.shape ? (y = Math.min(O, p), v = o.position, g = y, x = {\n          x: 0,\n          y: 0\n        }, b = s(b = w), x.x = v.x - g * Math.cos(b), x.y = v.y - g * Math.sin(b), m = x) : (m = function (t, i, e) {\n          return {\n            x: Math.min(Math.max(t.x, i.x - e), i.x + e),\n            y: Math.min(Math.max(t.y, i.y - e), i.y + e)\n          };\n        }(c, o.position, p), y = n(m, o.position)), i.follow) {\n          if (O > p) {\n            var P = c.x - m.x,\n              E = c.y - m.y;\n            o.position.x += P, o.position.y += E, o.el.style.top = o.position.y - (this.box.top + d.y) + \"px\", o.el.style.left = o.position.x - (this.box.left + d.x) + \"px\", O = n(c, o.position);\n          }\n        } else c = m, O = y;\n        var I = c.x - o.position.x,\n          z = c.y - o.position.y;\n        o.frontPosition = {\n          x: I,\n          y: z\n        }, i.dataOnly || (o.ui.front.style.transform = \"translate(\" + I + \"px,\" + z + \"px)\");\n        var D = {\n          identifier: o.identifier,\n          position: c,\n          force: T,\n          pressure: t.force || t.pressure || t.webkitForce || 0,\n          distance: O,\n          angle: {\n            radian: _,\n            degree: w\n          },\n          vector: {\n            x: I / p,\n            y: -z / p\n          },\n          raw: k,\n          instance: o,\n          lockX: i.lockX,\n          lockY: i.lockY\n        };\n        (D = o.computeDirection(D)).angle = {\n          radian: s(180 - w),\n          degree: 180 - w\n        }, o.trigger(\"move\", D), this.trigger(\"move \" + o.id + \":move\", D);\n      } else this.processOnEnd(t);\n    }, E.prototype.processOnEnd = function (t) {\n      var i = this,\n        e = i.options,\n        o = i.manager.getIdentifier(t),\n        n = i.nipples.get(o),\n        s = i.manager.removeIdentifier(n.identifier);\n      n && (e.dataOnly || n.hide(function () {\n        \"dynamic\" === e.mode && (n.trigger(\"removed\", n), i.trigger(\"removed \" + n.id + \":removed\", n), i.manager.trigger(\"removed \" + n.id + \":removed\", n), n.destroy());\n      }), clearInterval(i.pressureIntervals[n.identifier]), n.resetDirection(), n.trigger(\"end\", n), i.trigger(\"end \" + n.id + \":end\", n), i.ids.indexOf(n.identifier) >= 0 && i.ids.splice(i.ids.indexOf(n.identifier), 1), i.actives.indexOf(n) >= 0 && i.actives.splice(i.actives.indexOf(n), 1), /(semi|static)/.test(e.mode) ? i.idles.push(n) : i.nipples.indexOf(n) >= 0 && i.nipples.splice(i.nipples.indexOf(n), 1), i.manager.unbindDocument(), /(semi|static)/.test(e.mode) && (i.manager.ids[s.id] = s.identifier));\n    }, E.prototype.onDestroyed = function (t, i) {\n      this.nipples.indexOf(i) >= 0 && this.nipples.splice(this.nipples.indexOf(i), 1), this.actives.indexOf(i) >= 0 && this.actives.splice(this.actives.indexOf(i), 1), this.idles.indexOf(i) >= 0 && this.idles.splice(this.idles.indexOf(i), 1), this.ids.indexOf(i.identifier) >= 0 && this.ids.splice(this.ids.indexOf(i.identifier), 1), this.manager.removeIdentifier(i.identifier), this.manager.unbindDocument();\n    }, E.prototype.destroy = function () {\n      for (var t in this.unbindEvt(this.options.zone, \"start\"), this.nipples.forEach(function (t) {\n        t.destroy();\n      }), this.pressureIntervals) this.pressureIntervals.hasOwnProperty(t) && clearInterval(this.pressureIntervals[t]);\n      this.trigger(\"destroyed\", this.nipples), this.manager.unbindDocument(), this.off();\n    };\n    var I = E;\n    function z(t) {\n      var i = this;\n      i.ids = {}, i.index = 0, i.collections = [], i.scroll = h(), i.config(t), i.prepareCollections();\n      var e = function () {\n        var t;\n        i.collections.forEach(function (e) {\n          e.forEach(function (e) {\n            t = e.el.getBoundingClientRect(), e.position = {\n              x: i.scroll.x + t.left,\n              y: i.scroll.y + t.top\n            };\n          });\n        });\n      };\n      p(window, \"resize\", function () {\n        a(e);\n      });\n      var o = function () {\n        i.scroll = h();\n      };\n      return p(window, \"scroll\", function () {\n        a(o);\n      }), i.collections;\n    }\n    z.prototype = new T(), z.constructor = z, z.prototype.prepareCollections = function () {\n      var t = this;\n      t.collections.create = t.create.bind(t), t.collections.on = t.on.bind(t), t.collections.off = t.off.bind(t), t.collections.destroy = t.destroy.bind(t), t.collections.get = function (i) {\n        var e;\n        return t.collections.every(function (t) {\n          return !(e = t.get(i));\n        }), e;\n      };\n    }, z.prototype.create = function (t) {\n      return this.createCollection(t);\n    }, z.prototype.createCollection = function (t) {\n      var i = new I(this, t);\n      return this.bindCollection(i), this.collections.push(i), i;\n    }, z.prototype.bindCollection = function (t) {\n      var i,\n        e = this,\n        o = function (t, o) {\n          i = t.type + \" \" + o.id + \":\" + t.type, e.trigger(i, o);\n        };\n      t.on(\"destroyed\", e.onDestroyed.bind(e)), t.on(\"shown hidden rested dir plain\", o), t.on(\"dir:up dir:right dir:down dir:left\", o), t.on(\"plain:up plain:right plain:down plain:left\", o);\n    }, z.prototype.bindDocument = function () {\n      this.binded || (this.bindEvt(document, \"move\").bindEvt(document, \"end\"), this.binded = !0);\n    }, z.prototype.unbindDocument = function (t) {\n      Object.keys(this.ids).length && !0 !== t || (this.unbindEvt(document, \"move\").unbindEvt(document, \"end\"), this.binded = !1);\n    }, z.prototype.getIdentifier = function (t) {\n      var i;\n      return t ? void 0 === (i = void 0 === t.identifier ? t.pointerId : t.identifier) && (i = this.latest || 0) : i = this.index, void 0 === this.ids[i] && (this.ids[i] = this.index, this.index += 1), this.latest = i, this.ids[i];\n    }, z.prototype.removeIdentifier = function (t) {\n      var i = {};\n      for (var e in this.ids) if (this.ids[e] === t) {\n        i.id = e, i.identifier = this.ids[e], delete this.ids[e];\n        break;\n      }\n      return i;\n    }, z.prototype.onmove = function (t) {\n      return this.onAny(\"move\", t), !1;\n    }, z.prototype.onend = function (t) {\n      return this.onAny(\"end\", t), !1;\n    }, z.prototype.oncancel = function (t) {\n      return this.onAny(\"end\", t), !1;\n    }, z.prototype.onAny = function (t, i) {\n      var e,\n        o = this,\n        n = \"processOn\" + t.charAt(0).toUpperCase() + t.slice(1);\n      i = l(i);\n      return v(i, function (t) {\n        e = o.getIdentifier(t), v(o.collections, function (t, i, e) {\n          e.ids.indexOf(i) >= 0 && (e[n](t), t._found_ = !0);\n        }.bind(null, t, e)), t._found_ || o.removeIdentifier(e);\n      }), !1;\n    }, z.prototype.destroy = function () {\n      this.unbindDocument(!0), this.ids = {}, this.index = 0, this.collections.forEach(function (t) {\n        t.destroy();\n      }), this.off();\n    }, z.prototype.onDestroyed = function (t, i) {\n      if (this.collections.indexOf(i) < 0) return !1;\n      this.collections.splice(this.collections.indexOf(i), 1);\n    };\n    var D = new z();\n    i.default = {\n      create: function (t) {\n        return D.create(t);\n      },\n      factory: D\n    };\n  }]).default;\n});","import { FileLoader, Loader, ShapePath } from 'three';\n\n/**\n * A loader for loading fonts.\n *\n * You can convert fonts online using [facetype.js]{@link https://gero3.github.io/facetype.js/}.\n *\n * ```js\n * const loader = new FontLoader();\n * const font = await loader.loadAsync( 'fonts/helvetiker_regular.typeface.json' );\n * ```\n *\n * @augments Loader\n * @three_import import { FontLoader } from 'three/addons/loaders/FontLoader.js';\n */\nclass FontLoader extends Loader {\n  /**\n   * Constructs a new font loader.\n   *\n   * @param {LoadingManager} [manager] - The loading manager.\n   */\n  constructor(manager) {\n    super(manager);\n  }\n\n  /**\n   * Starts loading from the given URL and passes the loaded font\n   * to the `onLoad()` callback.\n   *\n   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n   * @param {function(Font)} onLoad - Executed when the loading process has been finished.\n   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n   * @param {onErrorCallback} onError - Executed when errors occur.\n   */\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (text) {\n      const font = scope.parse(JSON.parse(text));\n      if (onLoad) onLoad(font);\n    }, onProgress, onError);\n  }\n\n  /**\n   * Parses the given font data and returns the resulting font.\n   *\n   * @param {Object} json - The raw font data as a JSON object.\n   * @return {Font} The font.\n   */\n  parse(json) {\n    return new Font(json);\n  }\n}\n\n/**\n * Class representing a font.\n */\nclass Font {\n  /**\n   * Constructs a new font.\n   *\n   * @param {Object} data - The font data as JSON.\n   */\n  constructor(data) {\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isFont = true;\n    this.type = 'Font';\n\n    /**\n     * The font data as JSON.\n     *\n     * @type {Object}\n     */\n    this.data = data;\n  }\n\n  /**\n   * Generates geometry shapes from the given text and size. The result of this method\n   * should be used with {@link ShapeGeometry} to generate the actual geometry data.\n   *\n   * @param {string} text - The text.\n   * @param {number} [size=100] - The text size.\n   * @return {Array<Shape>} An array of shapes representing the text.\n   */\n  generateShapes(text) {\n    let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n    const shapes = [];\n    const paths = createPaths(text, size, this.data);\n    for (let p = 0, pl = paths.length; p < pl; p++) {\n      shapes.push(...paths[p].toShapes());\n    }\n    return shapes;\n  }\n}\nfunction createPaths(text, size, data) {\n  const chars = Array.from(text);\n  const scale = size / data.resolution;\n  const line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale;\n  const paths = [];\n  let offsetX = 0,\n    offsetY = 0;\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i];\n    if (char === '\\n') {\n      offsetX = 0;\n      offsetY -= line_height;\n    } else {\n      const ret = createPath(char, scale, offsetX, offsetY, data);\n      offsetX += ret.offsetX;\n      paths.push(ret.path);\n    }\n  }\n  return paths;\n}\nfunction createPath(char, scale, offsetX, offsetY, data) {\n  const glyph = data.glyphs[char] || data.glyphs['?'];\n  if (!glyph) {\n    console.error('THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.');\n    return;\n  }\n  const path = new ShapePath();\n  let x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n  if (glyph.o) {\n    const outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(' '));\n    for (let i = 0, l = outline.length; i < l;) {\n      const action = outline[i++];\n      switch (action) {\n        case 'm':\n          // moveTo\n\n          x = outline[i++] * scale + offsetX;\n          y = outline[i++] * scale + offsetY;\n          path.moveTo(x, y);\n          break;\n        case 'l':\n          // lineTo\n\n          x = outline[i++] * scale + offsetX;\n          y = outline[i++] * scale + offsetY;\n          path.lineTo(x, y);\n          break;\n        case 'q':\n          // quadraticCurveTo\n\n          cpx = outline[i++] * scale + offsetX;\n          cpy = outline[i++] * scale + offsetY;\n          cpx1 = outline[i++] * scale + offsetX;\n          cpy1 = outline[i++] * scale + offsetY;\n          path.quadraticCurveTo(cpx1, cpy1, cpx, cpy);\n          break;\n        case 'b':\n          // bezierCurveTo\n\n          cpx = outline[i++] * scale + offsetX;\n          cpy = outline[i++] * scale + offsetY;\n          cpx1 = outline[i++] * scale + offsetX;\n          cpy1 = outline[i++] * scale + offsetY;\n          cpx2 = outline[i++] * scale + offsetX;\n          cpy2 = outline[i++] * scale + offsetY;\n          path.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);\n          break;\n      }\n    }\n  }\n  return {\n    offsetX: glyph.ha * scale,\n    path: path\n  };\n}\nexport { FontLoader, Font };","import { ExtrudeGeometry } from 'three';\n\n/**\n * A class for generating text as a single geometry. It is constructed by providing a string of text, and a set of\n * parameters consisting of a loaded font and extrude settings.\n *\n * See the {@link FontLoader} page for additional details.\n *\n * `TextGeometry` uses [typeface.json]{@link http://gero3.github.io/facetype.js/} generated fonts.\n * Some existing fonts can be found located in `/examples/fonts`.\n *\n * ```js\n * const loader = new FontLoader();\n * const font = await loader.loadAsync( 'fonts/helvetiker_regular.typeface.json' );\n * const geometry = new TextGeometry( 'Hello three.js!', {\n * \tfont: font,\n * \tsize: 80,\n * \tdepth: 5,\n * \tcurveSegments: 12\n * } );\n * ```\n *\n * @augments ExtrudeGeometry\n * @three_import import { TextGeometry } from 'three/addons/geometries/TextGeometry.js';\n */\nclass TextGeometry extends ExtrudeGeometry {\n  /**\n   * Constructs a new text geometry.\n   *\n   * @param {string} text - The text that should be transformed into a geometry.\n   * @param {TextGeometry~Options} [parameters] - The text settings.\n   */\n  constructor(text) {\n    let parameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const font = parameters.font;\n    if (font === undefined) {\n      super(); // generate default extrude geometry\n    } else {\n      const shapes = font.generateShapes(text, parameters.size);\n\n      // defaults\n\n      if (parameters.depth === undefined) parameters.depth = 50;\n      if (parameters.bevelThickness === undefined) parameters.bevelThickness = 10;\n      if (parameters.bevelSize === undefined) parameters.bevelSize = 8;\n      if (parameters.bevelEnabled === undefined) parameters.bevelEnabled = false;\n      super(shapes, parameters);\n    }\n    this.type = 'TextGeometry';\n  }\n}\n\n/**\n * Represents the `options` type of the geometry's constructor.\n *\n * @typedef {Object} TextGeometry~Options\n * @property {Font} [font] - The font.\n * @property {number} [size=100] - The text size.\n * @property {number} [depth=50] - Depth to extrude the shape.\n * @property {number} [curveSegments=12] - Number of points on the curves.\n * @property {number} [steps=1] - Number of points used for subdividing segments along the depth of the extruded spline.\n * @property {boolean} [bevelEnabled=false] - Whether to beveling to the shape or not.\n * @property {number} [bevelThickness=10] - How deep into the original shape the bevel goes.\n * @property {number} [bevelSize=8] - Distance from the shape outline that the bevel extends.\n * @property {number} [bevelOffset=0] - Distance from the shape outline that the bevel starts.\n * @property {number} [bevelSegments=3] - Number of bevel layers.\n * @property {?Curve} [extrudePath=null] - A 3D spline path along which the shape should be extruded. Bevels not supported for path extrusion.\n * @property {Object} [UVGenerator] - An object that provides UV generator functions for custom UV generation.\n **/\n\nexport { TextGeometry };","import { Controls, MOUSE, Quaternion, Spherical, TOUCH, Vector2, Vector3, Plane, Ray, MathUtils } from 'three';\n\n/**\n * Fires when the camera has been transformed by the controls.\n *\n * @event OrbitControls#change\n * @type {Object}\n */\nconst _changeEvent = {\n  type: 'change'\n};\n\n/**\n * Fires when an interaction was initiated.\n *\n * @event OrbitControls#start\n * @type {Object}\n */\nconst _startEvent = {\n  type: 'start'\n};\n\n/**\n * Fires when an interaction has finished.\n *\n * @event OrbitControls#end\n * @type {Object}\n */\nconst _endEvent = {\n  type: 'end'\n};\nconst _ray = new Ray();\nconst _plane = new Plane();\nconst _TILT_LIMIT = Math.cos(70 * MathUtils.DEG2RAD);\nconst _v = new Vector3();\nconst _twoPI = 2 * Math.PI;\nconst _STATE = {\n  NONE: -1,\n  ROTATE: 0,\n  DOLLY: 1,\n  PAN: 2,\n  TOUCH_ROTATE: 3,\n  TOUCH_PAN: 4,\n  TOUCH_DOLLY_PAN: 5,\n  TOUCH_DOLLY_ROTATE: 6\n};\nconst _EPS = 0.000001;\n\n/**\n * Orbit controls allow the camera to orbit around a target.\n *\n * OrbitControls performs orbiting, dollying (zooming), and panning. Unlike {@link TrackballControls},\n * it maintains the \"up\" direction `object.up` (+Y by default).\n *\n * - Orbit: Left mouse / touch: one-finger move.\n * - Zoom: Middle mouse, or mousewheel / touch: two-finger spread or squish.\n * - Pan: Right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move.\n *\n * ```js\n * const controls = new OrbitControls( camera, renderer.domElement );\n *\n * // controls.update() must be called after any manual changes to the camera's transform\n * camera.position.set( 0, 20, 100 );\n * controls.update();\n *\n * function animate() {\n *\n * \t// required if controls.enableDamping or controls.autoRotate are set to true\n * \tcontrols.update();\n *\n * \trenderer.render( scene, camera );\n *\n * }\n * ```\n *\n * @augments Controls\n * @three_import import { OrbitControls } from 'three/addons/controls/OrbitControls.js';\n */\nclass OrbitControls extends Controls {\n  /**\n   * Constructs a new controls instance.\n   *\n   * @param {Object3D} object - The object that is managed by the controls.\n   * @param {?HTMLDOMElement} domElement - The HTML element used for event listeners.\n   */\n  constructor(object) {\n    let domElement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    super(object, domElement);\n    this.state = _STATE.NONE;\n\n    /**\n     * The focus point of the controls, the `object` orbits around this.\n     * It can be updated manually at any point to change the focus of the controls.\n     *\n     * @type {Vector3}\n     */\n    this.target = new Vector3();\n\n    /**\n     * The focus point of the `minTargetRadius` and `maxTargetRadius` limits.\n     * It can be updated manually at any point to change the center of interest\n     * for the `target`.\n     *\n     * @type {Vector3}\n     */\n    this.cursor = new Vector3();\n\n    /**\n     * How far you can dolly in (perspective camera only).\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.minDistance = 0;\n\n    /**\n     * How far you can dolly out (perspective camera only).\n     *\n     * @type {number}\n     * @default Infinity\n     */\n    this.maxDistance = Infinity;\n\n    /**\n     * How far you can zoom in (orthographic camera only).\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.minZoom = 0;\n\n    /**\n     * How far you can zoom out (orthographic camera only).\n     *\n     * @type {number}\n     * @default Infinity\n     */\n    this.maxZoom = Infinity;\n\n    /**\n     * How close you can get the target to the 3D `cursor`.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.minTargetRadius = 0;\n\n    /**\n     * How far you can move the target from the 3D `cursor`.\n     *\n     * @type {number}\n     * @default Infinity\n     */\n    this.maxTargetRadius = Infinity;\n\n    /**\n     * How far you can orbit vertically, lower limit. Range is `[0, Math.PI]` radians.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.minPolarAngle = 0;\n\n    /**\n     * How far you can orbit vertically, upper limit. Range is `[0, Math.PI]` radians.\n     *\n     * @type {number}\n     * @default Math.PI\n     */\n    this.maxPolarAngle = Math.PI;\n\n    /**\n     * How far you can orbit horizontally, lower limit. If set, the interval `[ min, max ]`\n     * must be a sub-interval of `[ - 2 PI, 2 PI ]`, with `( max - min < 2 PI )`.\n     *\n     * @type {number}\n     * @default -Infinity\n     */\n    this.minAzimuthAngle = -Infinity;\n\n    /**\n     * How far you can orbit horizontally, upper limit. If set, the interval `[ min, max ]`\n     * must be a sub-interval of `[ - 2 PI, 2 PI ]`, with `( max - min < 2 PI )`.\n     *\n     * @type {number}\n     * @default -Infinity\n     */\n    this.maxAzimuthAngle = Infinity;\n\n    /**\n     * Set to `true` to enable damping (inertia), which can be used to give a sense of weight\n     * to the controls. Note that if this is enabled, you must call `update()` in your animation\n     * loop.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.enableDamping = false;\n\n    /**\n     * The damping inertia used if `enableDamping` is set to `true`.\n     *\n     * Note that for this to work, you must call `update()` in your animation loop.\n     *\n     * @type {number}\n     * @default 0.05\n     */\n    this.dampingFactor = 0.05;\n\n    /**\n     * Enable or disable zooming (dollying) of the camera.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.enableZoom = true;\n\n    /**\n     * Speed of zooming / dollying.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.zoomSpeed = 1.0;\n\n    /**\n     * Enable or disable horizontal and vertical rotation of the camera.\n     *\n     * Note that it is possible to disable a single axis by setting the min and max of the\n     * `minPolarAngle` or `minAzimuthAngle` to the same value, which will cause the vertical\n     * or horizontal rotation to be fixed at that value.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.enableRotate = true;\n\n    /**\n     * Speed of rotation.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.rotateSpeed = 1.0;\n\n    /**\n     * How fast to rotate the camera when the keyboard is used.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.keyRotateSpeed = 1.0;\n\n    /**\n     * Enable or disable camera panning.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.enablePan = true;\n\n    /**\n     * Speed of panning.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.panSpeed = 1.0;\n\n    /**\n     * Defines how the camera's position is translated when panning. If `true`, the camera pans\n     * in screen space. Otherwise, the camera pans in the plane orthogonal to the camera's up\n     * direction.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.screenSpacePanning = true;\n\n    /**\n     * How fast to pan the camera when the keyboard is used in\n     * pixels per keypress.\n     *\n     * @type {number}\n     * @default 7\n     */\n    this.keyPanSpeed = 7.0;\n\n    /**\n     * Setting this property to `true` allows to zoom to the cursor's position.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.zoomToCursor = false;\n\n    /**\n     * Set to true to automatically rotate around the target\n     *\n     * Note that if this is enabled, you must call `update()` in your animation loop.\n     * If you want the auto-rotate speed to be independent of the frame rate (the refresh\n     * rate of the display), you must pass the time `deltaTime`, in seconds, to `update()`.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.autoRotate = false;\n\n    /**\n     * How fast to rotate around the target if `autoRotate` is `true`. The default  equates to 30 seconds\n     * per orbit at 60fps.\n     *\n     * Note that if `autoRotate` is enabled, you must call `update()` in your animation loop.\n     *\n     * @type {number}\n     * @default 2\n     */\n    this.autoRotateSpeed = 2.0;\n\n    /**\n     * This object contains references to the keycodes for controlling camera panning.\n     *\n     * ```js\n     * controls.keys = {\n     * \tLEFT: 'ArrowLeft', //left arrow\n     * \tUP: 'ArrowUp', // up arrow\n     * \tRIGHT: 'ArrowRight', // right arrow\n     * \tBOTTOM: 'ArrowDown' // down arrow\n     * }\n     * ```\n     * @type {Object}\n     */\n    this.keys = {\n      LEFT: 'ArrowLeft',\n      UP: 'ArrowUp',\n      RIGHT: 'ArrowRight',\n      BOTTOM: 'ArrowDown'\n    };\n\n    /**\n     * This object contains references to the mouse actions used by the controls.\n     *\n     * ```js\n     * controls.mouseButtons = {\n     * \tLEFT: THREE.MOUSE.ROTATE,\n     * \tMIDDLE: THREE.MOUSE.DOLLY,\n     * \tRIGHT: THREE.MOUSE.PAN\n     * }\n     * ```\n     * @type {Object}\n     */\n    this.mouseButtons = {\n      LEFT: MOUSE.ROTATE,\n      MIDDLE: MOUSE.DOLLY,\n      RIGHT: MOUSE.PAN\n    };\n\n    /**\n     * This object contains references to the touch actions used by the controls.\n     *\n     * ```js\n     * controls.mouseButtons = {\n     * \tONE: THREE.TOUCH.ROTATE,\n     * \tTWO: THREE.TOUCH.DOLLY_PAN\n     * }\n     * ```\n     * @type {Object}\n     */\n    this.touches = {\n      ONE: TOUCH.ROTATE,\n      TWO: TOUCH.DOLLY_PAN\n    };\n\n    /**\n     * Used internally by `saveState()` and `reset()`.\n     *\n     * @type {Vector3}\n     */\n    this.target0 = this.target.clone();\n\n    /**\n     * Used internally by `saveState()` and `reset()`.\n     *\n     * @type {Vector3}\n     */\n    this.position0 = this.object.position.clone();\n\n    /**\n     * Used internally by `saveState()` and `reset()`.\n     *\n     * @type {number}\n     */\n    this.zoom0 = this.object.zoom;\n\n    // the target DOM element for key events\n    this._domElementKeyEvents = null;\n\n    // internals\n\n    this._lastPosition = new Vector3();\n    this._lastQuaternion = new Quaternion();\n    this._lastTargetPosition = new Vector3();\n\n    // so camera.up is the orbit axis\n    this._quat = new Quaternion().setFromUnitVectors(object.up, new Vector3(0, 1, 0));\n    this._quatInverse = this._quat.clone().invert();\n\n    // current position in spherical coordinates\n    this._spherical = new Spherical();\n    this._sphericalDelta = new Spherical();\n    this._scale = 1;\n    this._panOffset = new Vector3();\n    this._rotateStart = new Vector2();\n    this._rotateEnd = new Vector2();\n    this._rotateDelta = new Vector2();\n    this._panStart = new Vector2();\n    this._panEnd = new Vector2();\n    this._panDelta = new Vector2();\n    this._dollyStart = new Vector2();\n    this._dollyEnd = new Vector2();\n    this._dollyDelta = new Vector2();\n    this._dollyDirection = new Vector3();\n    this._mouse = new Vector2();\n    this._performCursorZoom = false;\n    this._pointers = [];\n    this._pointerPositions = {};\n    this._controlActive = false;\n\n    // event listeners\n\n    this._onPointerMove = onPointerMove.bind(this);\n    this._onPointerDown = onPointerDown.bind(this);\n    this._onPointerUp = onPointerUp.bind(this);\n    this._onContextMenu = onContextMenu.bind(this);\n    this._onMouseWheel = onMouseWheel.bind(this);\n    this._onKeyDown = onKeyDown.bind(this);\n    this._onTouchStart = onTouchStart.bind(this);\n    this._onTouchMove = onTouchMove.bind(this);\n    this._onMouseDown = onMouseDown.bind(this);\n    this._onMouseMove = onMouseMove.bind(this);\n    this._interceptControlDown = interceptControlDown.bind(this);\n    this._interceptControlUp = interceptControlUp.bind(this);\n\n    //\n\n    if (this.domElement !== null) {\n      this.connect(this.domElement);\n    }\n    this.update();\n  }\n  connect(element) {\n    super.connect(element);\n    this.domElement.addEventListener('pointerdown', this._onPointerDown);\n    this.domElement.addEventListener('pointercancel', this._onPointerUp);\n    this.domElement.addEventListener('contextmenu', this._onContextMenu);\n    this.domElement.addEventListener('wheel', this._onMouseWheel, {\n      passive: false\n    });\n    const document = this.domElement.getRootNode(); // offscreen canvas compatibility\n    document.addEventListener('keydown', this._interceptControlDown, {\n      passive: true,\n      capture: true\n    });\n    this.domElement.style.touchAction = 'none'; // disable touch scroll\n  }\n  disconnect() {\n    this.domElement.removeEventListener('pointerdown', this._onPointerDown);\n    this.domElement.removeEventListener('pointermove', this._onPointerMove);\n    this.domElement.removeEventListener('pointerup', this._onPointerUp);\n    this.domElement.removeEventListener('pointercancel', this._onPointerUp);\n    this.domElement.removeEventListener('wheel', this._onMouseWheel);\n    this.domElement.removeEventListener('contextmenu', this._onContextMenu);\n    this.stopListenToKeyEvents();\n    const document = this.domElement.getRootNode(); // offscreen canvas compatibility\n    document.removeEventListener('keydown', this._interceptControlDown, {\n      capture: true\n    });\n    this.domElement.style.touchAction = 'auto';\n  }\n  dispose() {\n    this.disconnect();\n  }\n\n  /**\n   * Get the current vertical rotation, in radians.\n   *\n   * @return {number} The current vertical rotation, in radians.\n   */\n  getPolarAngle() {\n    return this._spherical.phi;\n  }\n\n  /**\n   * Get the current horizontal rotation, in radians.\n   *\n   * @return {number} The current horizontal rotation, in radians.\n   */\n  getAzimuthalAngle() {\n    return this._spherical.theta;\n  }\n\n  /**\n   * Returns the distance from the camera to the target.\n   *\n   * @return {number} The distance from the camera to the target.\n   */\n  getDistance() {\n    return this.object.position.distanceTo(this.target);\n  }\n\n  /**\n   * Adds key event listeners to the given DOM element.\n   * `window` is a recommended argument for using this method.\n   *\n   * @param {HTMLDOMElement} domElement - The DOM element\n   */\n  listenToKeyEvents(domElement) {\n    domElement.addEventListener('keydown', this._onKeyDown);\n    this._domElementKeyEvents = domElement;\n  }\n\n  /**\n   * Removes the key event listener previously defined with `listenToKeyEvents()`.\n   */\n  stopListenToKeyEvents() {\n    if (this._domElementKeyEvents !== null) {\n      this._domElementKeyEvents.removeEventListener('keydown', this._onKeyDown);\n      this._domElementKeyEvents = null;\n    }\n  }\n\n  /**\n   * Save the current state of the controls. This can later be recovered with `reset()`.\n   */\n  saveState() {\n    this.target0.copy(this.target);\n    this.position0.copy(this.object.position);\n    this.zoom0 = this.object.zoom;\n  }\n\n  /**\n   * Reset the controls to their state from either the last time the `saveState()`\n   * was called, or the initial state.\n   */\n  reset() {\n    this.target.copy(this.target0);\n    this.object.position.copy(this.position0);\n    this.object.zoom = this.zoom0;\n    this.object.updateProjectionMatrix();\n    this.dispatchEvent(_changeEvent);\n    this.update();\n    this.state = _STATE.NONE;\n  }\n  update() {\n    let deltaTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    const position = this.object.position;\n    _v.copy(position).sub(this.target);\n\n    // rotate offset to \"y-axis-is-up\" space\n    _v.applyQuaternion(this._quat);\n\n    // angle from z-axis around y-axis\n    this._spherical.setFromVector3(_v);\n    if (this.autoRotate && this.state === _STATE.NONE) {\n      this._rotateLeft(this._getAutoRotationAngle(deltaTime));\n    }\n    if (this.enableDamping) {\n      this._spherical.theta += this._sphericalDelta.theta * this.dampingFactor;\n      this._spherical.phi += this._sphericalDelta.phi * this.dampingFactor;\n    } else {\n      this._spherical.theta += this._sphericalDelta.theta;\n      this._spherical.phi += this._sphericalDelta.phi;\n    }\n\n    // restrict theta to be between desired limits\n\n    let min = this.minAzimuthAngle;\n    let max = this.maxAzimuthAngle;\n    if (isFinite(min) && isFinite(max)) {\n      if (min < -Math.PI) min += _twoPI;else if (min > Math.PI) min -= _twoPI;\n      if (max < -Math.PI) max += _twoPI;else if (max > Math.PI) max -= _twoPI;\n      if (min <= max) {\n        this._spherical.theta = Math.max(min, Math.min(max, this._spherical.theta));\n      } else {\n        this._spherical.theta = this._spherical.theta > (min + max) / 2 ? Math.max(min, this._spherical.theta) : Math.min(max, this._spherical.theta);\n      }\n    }\n\n    // restrict phi to be between desired limits\n    this._spherical.phi = Math.max(this.minPolarAngle, Math.min(this.maxPolarAngle, this._spherical.phi));\n    this._spherical.makeSafe();\n\n    // move target to panned location\n\n    if (this.enableDamping === true) {\n      this.target.addScaledVector(this._panOffset, this.dampingFactor);\n    } else {\n      this.target.add(this._panOffset);\n    }\n\n    // Limit the target distance from the cursor to create a sphere around the center of interest\n    this.target.sub(this.cursor);\n    this.target.clampLength(this.minTargetRadius, this.maxTargetRadius);\n    this.target.add(this.cursor);\n    let zoomChanged = false;\n    // adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera\n    // we adjust zoom later in these cases\n    if (this.zoomToCursor && this._performCursorZoom || this.object.isOrthographicCamera) {\n      this._spherical.radius = this._clampDistance(this._spherical.radius);\n    } else {\n      const prevRadius = this._spherical.radius;\n      this._spherical.radius = this._clampDistance(this._spherical.radius * this._scale);\n      zoomChanged = prevRadius != this._spherical.radius;\n    }\n    _v.setFromSpherical(this._spherical);\n\n    // rotate offset back to \"camera-up-vector-is-up\" space\n    _v.applyQuaternion(this._quatInverse);\n    position.copy(this.target).add(_v);\n    this.object.lookAt(this.target);\n    if (this.enableDamping === true) {\n      this._sphericalDelta.theta *= 1 - this.dampingFactor;\n      this._sphericalDelta.phi *= 1 - this.dampingFactor;\n      this._panOffset.multiplyScalar(1 - this.dampingFactor);\n    } else {\n      this._sphericalDelta.set(0, 0, 0);\n      this._panOffset.set(0, 0, 0);\n    }\n\n    // adjust camera position\n    if (this.zoomToCursor && this._performCursorZoom) {\n      let newRadius = null;\n      if (this.object.isPerspectiveCamera) {\n        // move the camera down the pointer ray\n        // this method avoids floating point error\n        const prevRadius = _v.length();\n        newRadius = this._clampDistance(prevRadius * this._scale);\n        const radiusDelta = prevRadius - newRadius;\n        this.object.position.addScaledVector(this._dollyDirection, radiusDelta);\n        this.object.updateMatrixWorld();\n        zoomChanged = !!radiusDelta;\n      } else if (this.object.isOrthographicCamera) {\n        // adjust the ortho camera position based on zoom changes\n        const mouseBefore = new Vector3(this._mouse.x, this._mouse.y, 0);\n        mouseBefore.unproject(this.object);\n        const prevZoom = this.object.zoom;\n        this.object.zoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.object.zoom / this._scale));\n        this.object.updateProjectionMatrix();\n        zoomChanged = prevZoom !== this.object.zoom;\n        const mouseAfter = new Vector3(this._mouse.x, this._mouse.y, 0);\n        mouseAfter.unproject(this.object);\n        this.object.position.sub(mouseAfter).add(mouseBefore);\n        this.object.updateMatrixWorld();\n        newRadius = _v.length();\n      } else {\n        console.warn('WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.');\n        this.zoomToCursor = false;\n      }\n\n      // handle the placement of the target\n      if (newRadius !== null) {\n        if (this.screenSpacePanning) {\n          // position the orbit target in front of the new camera position\n          this.target.set(0, 0, -1).transformDirection(this.object.matrix).multiplyScalar(newRadius).add(this.object.position);\n        } else {\n          // get the ray and translation plane to compute target\n          _ray.origin.copy(this.object.position);\n          _ray.direction.set(0, 0, -1).transformDirection(this.object.matrix);\n\n          // if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid\n          // extremely large values\n          if (Math.abs(this.object.up.dot(_ray.direction)) < _TILT_LIMIT) {\n            this.object.lookAt(this.target);\n          } else {\n            _plane.setFromNormalAndCoplanarPoint(this.object.up, this.target);\n            _ray.intersectPlane(_plane, this.target);\n          }\n        }\n      }\n    } else if (this.object.isOrthographicCamera) {\n      const prevZoom = this.object.zoom;\n      this.object.zoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.object.zoom / this._scale));\n      if (prevZoom !== this.object.zoom) {\n        this.object.updateProjectionMatrix();\n        zoomChanged = true;\n      }\n    }\n    this._scale = 1;\n    this._performCursorZoom = false;\n\n    // update condition is:\n    // min(camera displacement, camera rotation in radians)^2 > EPS\n    // using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n    if (zoomChanged || this._lastPosition.distanceToSquared(this.object.position) > _EPS || 8 * (1 - this._lastQuaternion.dot(this.object.quaternion)) > _EPS || this._lastTargetPosition.distanceToSquared(this.target) > _EPS) {\n      this.dispatchEvent(_changeEvent);\n      this._lastPosition.copy(this.object.position);\n      this._lastQuaternion.copy(this.object.quaternion);\n      this._lastTargetPosition.copy(this.target);\n      return true;\n    }\n    return false;\n  }\n  _getAutoRotationAngle(deltaTime) {\n    if (deltaTime !== null) {\n      return _twoPI / 60 * this.autoRotateSpeed * deltaTime;\n    } else {\n      return _twoPI / 60 / 60 * this.autoRotateSpeed;\n    }\n  }\n  _getZoomScale(delta) {\n    const normalizedDelta = Math.abs(delta * 0.01);\n    return Math.pow(0.95, this.zoomSpeed * normalizedDelta);\n  }\n  _rotateLeft(angle) {\n    this._sphericalDelta.theta -= angle;\n  }\n  _rotateUp(angle) {\n    this._sphericalDelta.phi -= angle;\n  }\n  _panLeft(distance, objectMatrix) {\n    _v.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix\n    _v.multiplyScalar(-distance);\n    this._panOffset.add(_v);\n  }\n  _panUp(distance, objectMatrix) {\n    if (this.screenSpacePanning === true) {\n      _v.setFromMatrixColumn(objectMatrix, 1);\n    } else {\n      _v.setFromMatrixColumn(objectMatrix, 0);\n      _v.crossVectors(this.object.up, _v);\n    }\n    _v.multiplyScalar(distance);\n    this._panOffset.add(_v);\n  }\n\n  // deltaX and deltaY are in pixels; right and down are positive\n  _pan(deltaX, deltaY) {\n    const element = this.domElement;\n    if (this.object.isPerspectiveCamera) {\n      // perspective\n      const position = this.object.position;\n      _v.copy(position).sub(this.target);\n      let targetDistance = _v.length();\n\n      // half of the fov is center to top of screen\n      targetDistance *= Math.tan(this.object.fov / 2 * Math.PI / 180.0);\n\n      // we use only clientHeight here so aspect ratio does not distort speed\n      this._panLeft(2 * deltaX * targetDistance / element.clientHeight, this.object.matrix);\n      this._panUp(2 * deltaY * targetDistance / element.clientHeight, this.object.matrix);\n    } else if (this.object.isOrthographicCamera) {\n      // orthographic\n      this._panLeft(deltaX * (this.object.right - this.object.left) / this.object.zoom / element.clientWidth, this.object.matrix);\n      this._panUp(deltaY * (this.object.top - this.object.bottom) / this.object.zoom / element.clientHeight, this.object.matrix);\n    } else {\n      // camera neither orthographic nor perspective\n      console.warn('WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.');\n      this.enablePan = false;\n    }\n  }\n  _dollyOut(dollyScale) {\n    if (this.object.isPerspectiveCamera || this.object.isOrthographicCamera) {\n      this._scale /= dollyScale;\n    } else {\n      console.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.');\n      this.enableZoom = false;\n    }\n  }\n  _dollyIn(dollyScale) {\n    if (this.object.isPerspectiveCamera || this.object.isOrthographicCamera) {\n      this._scale *= dollyScale;\n    } else {\n      console.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.');\n      this.enableZoom = false;\n    }\n  }\n  _updateZoomParameters(x, y) {\n    if (!this.zoomToCursor) {\n      return;\n    }\n    this._performCursorZoom = true;\n    const rect = this.domElement.getBoundingClientRect();\n    const dx = x - rect.left;\n    const dy = y - rect.top;\n    const w = rect.width;\n    const h = rect.height;\n    this._mouse.x = dx / w * 2 - 1;\n    this._mouse.y = -(dy / h) * 2 + 1;\n    this._dollyDirection.set(this._mouse.x, this._mouse.y, 1).unproject(this.object).sub(this.object.position).normalize();\n  }\n  _clampDistance(dist) {\n    return Math.max(this.minDistance, Math.min(this.maxDistance, dist));\n  }\n\n  //\n  // event callbacks - update the object state\n  //\n\n  _handleMouseDownRotate(event) {\n    this._rotateStart.set(event.clientX, event.clientY);\n  }\n  _handleMouseDownDolly(event) {\n    this._updateZoomParameters(event.clientX, event.clientX);\n    this._dollyStart.set(event.clientX, event.clientY);\n  }\n  _handleMouseDownPan(event) {\n    this._panStart.set(event.clientX, event.clientY);\n  }\n  _handleMouseMoveRotate(event) {\n    this._rotateEnd.set(event.clientX, event.clientY);\n    this._rotateDelta.subVectors(this._rotateEnd, this._rotateStart).multiplyScalar(this.rotateSpeed);\n    const element = this.domElement;\n    this._rotateLeft(_twoPI * this._rotateDelta.x / element.clientHeight); // yes, height\n\n    this._rotateUp(_twoPI * this._rotateDelta.y / element.clientHeight);\n    this._rotateStart.copy(this._rotateEnd);\n    this.update();\n  }\n  _handleMouseMoveDolly(event) {\n    this._dollyEnd.set(event.clientX, event.clientY);\n    this._dollyDelta.subVectors(this._dollyEnd, this._dollyStart);\n    if (this._dollyDelta.y > 0) {\n      this._dollyOut(this._getZoomScale(this._dollyDelta.y));\n    } else if (this._dollyDelta.y < 0) {\n      this._dollyIn(this._getZoomScale(this._dollyDelta.y));\n    }\n    this._dollyStart.copy(this._dollyEnd);\n    this.update();\n  }\n  _handleMouseMovePan(event) {\n    this._panEnd.set(event.clientX, event.clientY);\n    this._panDelta.subVectors(this._panEnd, this._panStart).multiplyScalar(this.panSpeed);\n    this._pan(this._panDelta.x, this._panDelta.y);\n    this._panStart.copy(this._panEnd);\n    this.update();\n  }\n  _handleMouseWheel(event) {\n    this._updateZoomParameters(event.clientX, event.clientY);\n    if (event.deltaY < 0) {\n      this._dollyIn(this._getZoomScale(event.deltaY));\n    } else if (event.deltaY > 0) {\n      this._dollyOut(this._getZoomScale(event.deltaY));\n    }\n    this.update();\n  }\n  _handleKeyDown(event) {\n    let needsUpdate = false;\n    switch (event.code) {\n      case this.keys.UP:\n        if (event.ctrlKey || event.metaKey || event.shiftKey) {\n          if (this.enableRotate) {\n            this._rotateUp(_twoPI * this.keyRotateSpeed / this.domElement.clientHeight);\n          }\n        } else {\n          if (this.enablePan) {\n            this._pan(0, this.keyPanSpeed);\n          }\n        }\n        needsUpdate = true;\n        break;\n      case this.keys.BOTTOM:\n        if (event.ctrlKey || event.metaKey || event.shiftKey) {\n          if (this.enableRotate) {\n            this._rotateUp(-_twoPI * this.keyRotateSpeed / this.domElement.clientHeight);\n          }\n        } else {\n          if (this.enablePan) {\n            this._pan(0, -this.keyPanSpeed);\n          }\n        }\n        needsUpdate = true;\n        break;\n      case this.keys.LEFT:\n        if (event.ctrlKey || event.metaKey || event.shiftKey) {\n          if (this.enableRotate) {\n            this._rotateLeft(_twoPI * this.keyRotateSpeed / this.domElement.clientHeight);\n          }\n        } else {\n          if (this.enablePan) {\n            this._pan(this.keyPanSpeed, 0);\n          }\n        }\n        needsUpdate = true;\n        break;\n      case this.keys.RIGHT:\n        if (event.ctrlKey || event.metaKey || event.shiftKey) {\n          if (this.enableRotate) {\n            this._rotateLeft(-_twoPI * this.keyRotateSpeed / this.domElement.clientHeight);\n          }\n        } else {\n          if (this.enablePan) {\n            this._pan(-this.keyPanSpeed, 0);\n          }\n        }\n        needsUpdate = true;\n        break;\n    }\n    if (needsUpdate) {\n      // prevent the browser from scrolling on cursor keys\n      event.preventDefault();\n      this.update();\n    }\n  }\n  _handleTouchStartRotate(event) {\n    if (this._pointers.length === 1) {\n      this._rotateStart.set(event.pageX, event.pageY);\n    } else {\n      const position = this._getSecondPointerPosition(event);\n      const x = 0.5 * (event.pageX + position.x);\n      const y = 0.5 * (event.pageY + position.y);\n      this._rotateStart.set(x, y);\n    }\n  }\n  _handleTouchStartPan(event) {\n    if (this._pointers.length === 1) {\n      this._panStart.set(event.pageX, event.pageY);\n    } else {\n      const position = this._getSecondPointerPosition(event);\n      const x = 0.5 * (event.pageX + position.x);\n      const y = 0.5 * (event.pageY + position.y);\n      this._panStart.set(x, y);\n    }\n  }\n  _handleTouchStartDolly(event) {\n    const position = this._getSecondPointerPosition(event);\n    const dx = event.pageX - position.x;\n    const dy = event.pageY - position.y;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    this._dollyStart.set(0, distance);\n  }\n  _handleTouchStartDollyPan(event) {\n    if (this.enableZoom) this._handleTouchStartDolly(event);\n    if (this.enablePan) this._handleTouchStartPan(event);\n  }\n  _handleTouchStartDollyRotate(event) {\n    if (this.enableZoom) this._handleTouchStartDolly(event);\n    if (this.enableRotate) this._handleTouchStartRotate(event);\n  }\n  _handleTouchMoveRotate(event) {\n    if (this._pointers.length == 1) {\n      this._rotateEnd.set(event.pageX, event.pageY);\n    } else {\n      const position = this._getSecondPointerPosition(event);\n      const x = 0.5 * (event.pageX + position.x);\n      const y = 0.5 * (event.pageY + position.y);\n      this._rotateEnd.set(x, y);\n    }\n    this._rotateDelta.subVectors(this._rotateEnd, this._rotateStart).multiplyScalar(this.rotateSpeed);\n    const element = this.domElement;\n    this._rotateLeft(_twoPI * this._rotateDelta.x / element.clientHeight); // yes, height\n\n    this._rotateUp(_twoPI * this._rotateDelta.y / element.clientHeight);\n    this._rotateStart.copy(this._rotateEnd);\n  }\n  _handleTouchMovePan(event) {\n    if (this._pointers.length === 1) {\n      this._panEnd.set(event.pageX, event.pageY);\n    } else {\n      const position = this._getSecondPointerPosition(event);\n      const x = 0.5 * (event.pageX + position.x);\n      const y = 0.5 * (event.pageY + position.y);\n      this._panEnd.set(x, y);\n    }\n    this._panDelta.subVectors(this._panEnd, this._panStart).multiplyScalar(this.panSpeed);\n    this._pan(this._panDelta.x, this._panDelta.y);\n    this._panStart.copy(this._panEnd);\n  }\n  _handleTouchMoveDolly(event) {\n    const position = this._getSecondPointerPosition(event);\n    const dx = event.pageX - position.x;\n    const dy = event.pageY - position.y;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    this._dollyEnd.set(0, distance);\n    this._dollyDelta.set(0, Math.pow(this._dollyEnd.y / this._dollyStart.y, this.zoomSpeed));\n    this._dollyOut(this._dollyDelta.y);\n    this._dollyStart.copy(this._dollyEnd);\n    const centerX = (event.pageX + position.x) * 0.5;\n    const centerY = (event.pageY + position.y) * 0.5;\n    this._updateZoomParameters(centerX, centerY);\n  }\n  _handleTouchMoveDollyPan(event) {\n    if (this.enableZoom) this._handleTouchMoveDolly(event);\n    if (this.enablePan) this._handleTouchMovePan(event);\n  }\n  _handleTouchMoveDollyRotate(event) {\n    if (this.enableZoom) this._handleTouchMoveDolly(event);\n    if (this.enableRotate) this._handleTouchMoveRotate(event);\n  }\n\n  // pointers\n\n  _addPointer(event) {\n    this._pointers.push(event.pointerId);\n  }\n  _removePointer(event) {\n    delete this._pointerPositions[event.pointerId];\n    for (let i = 0; i < this._pointers.length; i++) {\n      if (this._pointers[i] == event.pointerId) {\n        this._pointers.splice(i, 1);\n        return;\n      }\n    }\n  }\n  _isTrackingPointer(event) {\n    for (let i = 0; i < this._pointers.length; i++) {\n      if (this._pointers[i] == event.pointerId) return true;\n    }\n    return false;\n  }\n  _trackPointer(event) {\n    let position = this._pointerPositions[event.pointerId];\n    if (position === undefined) {\n      position = new Vector2();\n      this._pointerPositions[event.pointerId] = position;\n    }\n    position.set(event.pageX, event.pageY);\n  }\n  _getSecondPointerPosition(event) {\n    const pointerId = event.pointerId === this._pointers[0] ? this._pointers[1] : this._pointers[0];\n    return this._pointerPositions[pointerId];\n  }\n\n  //\n\n  _customWheelEvent(event) {\n    const mode = event.deltaMode;\n\n    // minimal wheel event altered to meet delta-zoom demand\n    const newEvent = {\n      clientX: event.clientX,\n      clientY: event.clientY,\n      deltaY: event.deltaY\n    };\n    switch (mode) {\n      case 1:\n        // LINE_MODE\n        newEvent.deltaY *= 16;\n        break;\n      case 2:\n        // PAGE_MODE\n        newEvent.deltaY *= 100;\n        break;\n    }\n\n    // detect if event was triggered by pinching\n    if (event.ctrlKey && !this._controlActive) {\n      newEvent.deltaY *= 10;\n    }\n    return newEvent;\n  }\n}\nfunction onPointerDown(event) {\n  if (this.enabled === false) return;\n  if (this._pointers.length === 0) {\n    this.domElement.setPointerCapture(event.pointerId);\n    this.domElement.addEventListener('pointermove', this._onPointerMove);\n    this.domElement.addEventListener('pointerup', this._onPointerUp);\n  }\n\n  //\n\n  if (this._isTrackingPointer(event)) return;\n\n  //\n\n  this._addPointer(event);\n  if (event.pointerType === 'touch') {\n    this._onTouchStart(event);\n  } else {\n    this._onMouseDown(event);\n  }\n}\nfunction onPointerMove(event) {\n  if (this.enabled === false) return;\n  if (event.pointerType === 'touch') {\n    this._onTouchMove(event);\n  } else {\n    this._onMouseMove(event);\n  }\n}\nfunction onPointerUp(event) {\n  this._removePointer(event);\n  switch (this._pointers.length) {\n    case 0:\n      this.domElement.releasePointerCapture(event.pointerId);\n      this.domElement.removeEventListener('pointermove', this._onPointerMove);\n      this.domElement.removeEventListener('pointerup', this._onPointerUp);\n      this.dispatchEvent(_endEvent);\n      this.state = _STATE.NONE;\n      break;\n    case 1:\n      const pointerId = this._pointers[0];\n      const position = this._pointerPositions[pointerId];\n\n      // minimal placeholder event - allows state correction on pointer-up\n      this._onTouchStart({\n        pointerId: pointerId,\n        pageX: position.x,\n        pageY: position.y\n      });\n      break;\n  }\n}\nfunction onMouseDown(event) {\n  let mouseAction;\n  switch (event.button) {\n    case 0:\n      mouseAction = this.mouseButtons.LEFT;\n      break;\n    case 1:\n      mouseAction = this.mouseButtons.MIDDLE;\n      break;\n    case 2:\n      mouseAction = this.mouseButtons.RIGHT;\n      break;\n    default:\n      mouseAction = -1;\n  }\n  switch (mouseAction) {\n    case MOUSE.DOLLY:\n      if (this.enableZoom === false) return;\n      this._handleMouseDownDolly(event);\n      this.state = _STATE.DOLLY;\n      break;\n    case MOUSE.ROTATE:\n      if (event.ctrlKey || event.metaKey || event.shiftKey) {\n        if (this.enablePan === false) return;\n        this._handleMouseDownPan(event);\n        this.state = _STATE.PAN;\n      } else {\n        if (this.enableRotate === false) return;\n        this._handleMouseDownRotate(event);\n        this.state = _STATE.ROTATE;\n      }\n      break;\n    case MOUSE.PAN:\n      if (event.ctrlKey || event.metaKey || event.shiftKey) {\n        if (this.enableRotate === false) return;\n        this._handleMouseDownRotate(event);\n        this.state = _STATE.ROTATE;\n      } else {\n        if (this.enablePan === false) return;\n        this._handleMouseDownPan(event);\n        this.state = _STATE.PAN;\n      }\n      break;\n    default:\n      this.state = _STATE.NONE;\n  }\n  if (this.state !== _STATE.NONE) {\n    this.dispatchEvent(_startEvent);\n  }\n}\nfunction onMouseMove(event) {\n  switch (this.state) {\n    case _STATE.ROTATE:\n      if (this.enableRotate === false) return;\n      this._handleMouseMoveRotate(event);\n      break;\n    case _STATE.DOLLY:\n      if (this.enableZoom === false) return;\n      this._handleMouseMoveDolly(event);\n      break;\n    case _STATE.PAN:\n      if (this.enablePan === false) return;\n      this._handleMouseMovePan(event);\n      break;\n  }\n}\nfunction onMouseWheel(event) {\n  if (this.enabled === false || this.enableZoom === false || this.state !== _STATE.NONE) return;\n  event.preventDefault();\n  this.dispatchEvent(_startEvent);\n  this._handleMouseWheel(this._customWheelEvent(event));\n  this.dispatchEvent(_endEvent);\n}\nfunction onKeyDown(event) {\n  if (this.enabled === false) return;\n  this._handleKeyDown(event);\n}\nfunction onTouchStart(event) {\n  this._trackPointer(event);\n  switch (this._pointers.length) {\n    case 1:\n      switch (this.touches.ONE) {\n        case TOUCH.ROTATE:\n          if (this.enableRotate === false) return;\n          this._handleTouchStartRotate(event);\n          this.state = _STATE.TOUCH_ROTATE;\n          break;\n        case TOUCH.PAN:\n          if (this.enablePan === false) return;\n          this._handleTouchStartPan(event);\n          this.state = _STATE.TOUCH_PAN;\n          break;\n        default:\n          this.state = _STATE.NONE;\n      }\n      break;\n    case 2:\n      switch (this.touches.TWO) {\n        case TOUCH.DOLLY_PAN:\n          if (this.enableZoom === false && this.enablePan === false) return;\n          this._handleTouchStartDollyPan(event);\n          this.state = _STATE.TOUCH_DOLLY_PAN;\n          break;\n        case TOUCH.DOLLY_ROTATE:\n          if (this.enableZoom === false && this.enableRotate === false) return;\n          this._handleTouchStartDollyRotate(event);\n          this.state = _STATE.TOUCH_DOLLY_ROTATE;\n          break;\n        default:\n          this.state = _STATE.NONE;\n      }\n      break;\n    default:\n      this.state = _STATE.NONE;\n  }\n  if (this.state !== _STATE.NONE) {\n    this.dispatchEvent(_startEvent);\n  }\n}\nfunction onTouchMove(event) {\n  this._trackPointer(event);\n  switch (this.state) {\n    case _STATE.TOUCH_ROTATE:\n      if (this.enableRotate === false) return;\n      this._handleTouchMoveRotate(event);\n      this.update();\n      break;\n    case _STATE.TOUCH_PAN:\n      if (this.enablePan === false) return;\n      this._handleTouchMovePan(event);\n      this.update();\n      break;\n    case _STATE.TOUCH_DOLLY_PAN:\n      if (this.enableZoom === false && this.enablePan === false) return;\n      this._handleTouchMoveDollyPan(event);\n      this.update();\n      break;\n    case _STATE.TOUCH_DOLLY_ROTATE:\n      if (this.enableZoom === false && this.enableRotate === false) return;\n      this._handleTouchMoveDollyRotate(event);\n      this.update();\n      break;\n    default:\n      this.state = _STATE.NONE;\n  }\n}\nfunction onContextMenu(event) {\n  if (this.enabled === false) return;\n  event.preventDefault();\n}\nfunction interceptControlDown(event) {\n  if (event.key === 'Control') {\n    this._controlActive = true;\n    const document = this.domElement.getRootNode(); // offscreen canvas compatibility\n\n    document.addEventListener('keyup', this._interceptControlUp, {\n      passive: true,\n      capture: true\n    });\n  }\n}\nfunction interceptControlUp(event) {\n  if (event.key === 'Control') {\n    this._controlActive = false;\n    const document = this.domElement.getRootNode(); // offscreen canvas compatibility\n\n    document.removeEventListener('keyup', this._interceptControlUp, {\n      passive: true,\n      capture: true\n    });\n  }\n}\nexport { OrbitControls };","/** @license React v16.13.1\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar l = require(\"object-assign\"),\n  n = \"function\" === typeof Symbol && Symbol.for,\n  p = n ? Symbol.for(\"react.element\") : 60103,\n  q = n ? Symbol.for(\"react.portal\") : 60106,\n  r = n ? Symbol.for(\"react.fragment\") : 60107,\n  t = n ? Symbol.for(\"react.strict_mode\") : 60108,\n  u = n ? Symbol.for(\"react.profiler\") : 60114,\n  v = n ? Symbol.for(\"react.provider\") : 60109,\n  w = n ? Symbol.for(\"react.context\") : 60110,\n  x = n ? Symbol.for(\"react.forward_ref\") : 60112,\n  y = n ? Symbol.for(\"react.suspense\") : 60113,\n  z = n ? Symbol.for(\"react.memo\") : 60115,\n  A = n ? Symbol.for(\"react.lazy\") : 60116,\n  B = \"function\" === typeof Symbol && Symbol.iterator;\nfunction C(a) {\n  for (var b = \"https://reactjs.org/docs/error-decoder.html?invariant=\" + a, c = 1; c < arguments.length; c++) b += \"&args[]=\" + encodeURIComponent(arguments[c]);\n  return \"Minified React error #\" + a + \"; visit \" + b + \" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\";\n}\nvar D = {\n    isMounted: function () {\n      return !1;\n    },\n    enqueueForceUpdate: function () {},\n    enqueueReplaceState: function () {},\n    enqueueSetState: function () {}\n  },\n  E = {};\nfunction F(a, b, c) {\n  this.props = a;\n  this.context = b;\n  this.refs = E;\n  this.updater = c || D;\n}\nF.prototype.isReactComponent = {};\nF.prototype.setState = function (a, b) {\n  if (\"object\" !== typeof a && \"function\" !== typeof a && null != a) throw Error(C(85));\n  this.updater.enqueueSetState(this, a, b, \"setState\");\n};\nF.prototype.forceUpdate = function (a) {\n  this.updater.enqueueForceUpdate(this, a, \"forceUpdate\");\n};\nfunction G() {}\nG.prototype = F.prototype;\nfunction H(a, b, c) {\n  this.props = a;\n  this.context = b;\n  this.refs = E;\n  this.updater = c || D;\n}\nvar I = H.prototype = new G();\nI.constructor = H;\nl(I, F.prototype);\nI.isPureReactComponent = !0;\nvar J = {\n    current: null\n  },\n  K = Object.prototype.hasOwnProperty,\n  L = {\n    key: !0,\n    ref: !0,\n    __self: !0,\n    __source: !0\n  };\nfunction M(a, b, c) {\n  var e,\n    d = {},\n    g = null,\n    k = null;\n  if (null != b) for (e in void 0 !== b.ref && (k = b.ref), void 0 !== b.key && (g = \"\" + b.key), b) K.call(b, e) && !L.hasOwnProperty(e) && (d[e] = b[e]);\n  var f = arguments.length - 2;\n  if (1 === f) d.children = c;else if (1 < f) {\n    for (var h = Array(f), m = 0; m < f; m++) h[m] = arguments[m + 2];\n    d.children = h;\n  }\n  if (a && a.defaultProps) for (e in f = a.defaultProps, f) void 0 === d[e] && (d[e] = f[e]);\n  return {\n    $$typeof: p,\n    type: a,\n    key: g,\n    ref: k,\n    props: d,\n    _owner: J.current\n  };\n}\nfunction N(a, b) {\n  return {\n    $$typeof: p,\n    type: a.type,\n    key: b,\n    ref: a.ref,\n    props: a.props,\n    _owner: a._owner\n  };\n}\nfunction O(a) {\n  return \"object\" === typeof a && null !== a && a.$$typeof === p;\n}\nfunction escape(a) {\n  var b = {\n    \"=\": \"=0\",\n    \":\": \"=2\"\n  };\n  return \"$\" + (\"\" + a).replace(/[=:]/g, function (a) {\n    return b[a];\n  });\n}\nvar P = /\\/+/g,\n  Q = [];\nfunction R(a, b, c, e) {\n  if (Q.length) {\n    var d = Q.pop();\n    d.result = a;\n    d.keyPrefix = b;\n    d.func = c;\n    d.context = e;\n    d.count = 0;\n    return d;\n  }\n  return {\n    result: a,\n    keyPrefix: b,\n    func: c,\n    context: e,\n    count: 0\n  };\n}\nfunction S(a) {\n  a.result = null;\n  a.keyPrefix = null;\n  a.func = null;\n  a.context = null;\n  a.count = 0;\n  10 > Q.length && Q.push(a);\n}\nfunction T(a, b, c, e) {\n  var d = typeof a;\n  if (\"undefined\" === d || \"boolean\" === d) a = null;\n  var g = !1;\n  if (null === a) g = !0;else switch (d) {\n    case \"string\":\n    case \"number\":\n      g = !0;\n      break;\n    case \"object\":\n      switch (a.$$typeof) {\n        case p:\n        case q:\n          g = !0;\n      }\n  }\n  if (g) return c(e, a, \"\" === b ? \".\" + U(a, 0) : b), 1;\n  g = 0;\n  b = \"\" === b ? \".\" : b + \":\";\n  if (Array.isArray(a)) for (var k = 0; k < a.length; k++) {\n    d = a[k];\n    var f = b + U(d, k);\n    g += T(d, f, c, e);\n  } else if (null === a || \"object\" !== typeof a ? f = null : (f = B && a[B] || a[\"@@iterator\"], f = \"function\" === typeof f ? f : null), \"function\" === typeof f) for (a = f.call(a), k = 0; !(d = a.next()).done;) d = d.value, f = b + U(d, k++), g += T(d, f, c, e);else if (\"object\" === d) throw c = \"\" + a, Error(C(31, \"[object Object]\" === c ? \"object with keys {\" + Object.keys(a).join(\", \") + \"}\" : c, \"\"));\n  return g;\n}\nfunction V(a, b, c) {\n  return null == a ? 0 : T(a, \"\", b, c);\n}\nfunction U(a, b) {\n  return \"object\" === typeof a && null !== a && null != a.key ? escape(a.key) : b.toString(36);\n}\nfunction W(a, b) {\n  a.func.call(a.context, b, a.count++);\n}\nfunction aa(a, b, c) {\n  var e = a.result,\n    d = a.keyPrefix;\n  a = a.func.call(a.context, b, a.count++);\n  Array.isArray(a) ? X(a, e, c, function (a) {\n    return a;\n  }) : null != a && (O(a) && (a = N(a, d + (!a.key || b && b.key === a.key ? \"\" : (\"\" + a.key).replace(P, \"$&/\") + \"/\") + c)), e.push(a));\n}\nfunction X(a, b, c, e, d) {\n  var g = \"\";\n  null != c && (g = (\"\" + c).replace(P, \"$&/\") + \"/\");\n  b = R(b, g, e, d);\n  V(a, aa, b);\n  S(b);\n}\nvar Y = {\n  current: null\n};\nfunction Z() {\n  var a = Y.current;\n  if (null === a) throw Error(C(321));\n  return a;\n}\nvar ba = {\n  ReactCurrentDispatcher: Y,\n  ReactCurrentBatchConfig: {\n    suspense: null\n  },\n  ReactCurrentOwner: J,\n  IsSomeRendererActing: {\n    current: !1\n  },\n  assign: l\n};\nexports.Children = {\n  map: function (a, b, c) {\n    if (null == a) return a;\n    var e = [];\n    X(a, e, null, b, c);\n    return e;\n  },\n  forEach: function (a, b, c) {\n    if (null == a) return a;\n    b = R(null, null, b, c);\n    V(a, W, b);\n    S(b);\n  },\n  count: function (a) {\n    return V(a, function () {\n      return null;\n    }, null);\n  },\n  toArray: function (a) {\n    var b = [];\n    X(a, b, null, function (a) {\n      return a;\n    });\n    return b;\n  },\n  only: function (a) {\n    if (!O(a)) throw Error(C(143));\n    return a;\n  }\n};\nexports.Component = F;\nexports.Fragment = r;\nexports.Profiler = u;\nexports.PureComponent = H;\nexports.StrictMode = t;\nexports.Suspense = y;\nexports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ba;\nexports.cloneElement = function (a, b, c) {\n  if (null === a || void 0 === a) throw Error(C(267, a));\n  var e = l({}, a.props),\n    d = a.key,\n    g = a.ref,\n    k = a._owner;\n  if (null != b) {\n    void 0 !== b.ref && (g = b.ref, k = J.current);\n    void 0 !== b.key && (d = \"\" + b.key);\n    if (a.type && a.type.defaultProps) var f = a.type.defaultProps;\n    for (h in b) K.call(b, h) && !L.hasOwnProperty(h) && (e[h] = void 0 === b[h] && void 0 !== f ? f[h] : b[h]);\n  }\n  var h = arguments.length - 2;\n  if (1 === h) e.children = c;else if (1 < h) {\n    f = Array(h);\n    for (var m = 0; m < h; m++) f[m] = arguments[m + 2];\n    e.children = f;\n  }\n  return {\n    $$typeof: p,\n    type: a.type,\n    key: d,\n    ref: g,\n    props: e,\n    _owner: k\n  };\n};\nexports.createContext = function (a, b) {\n  void 0 === b && (b = null);\n  a = {\n    $$typeof: w,\n    _calculateChangedBits: b,\n    _currentValue: a,\n    _currentValue2: a,\n    _threadCount: 0,\n    Provider: null,\n    Consumer: null\n  };\n  a.Provider = {\n    $$typeof: v,\n    _context: a\n  };\n  return a.Consumer = a;\n};\nexports.createElement = M;\nexports.createFactory = function (a) {\n  var b = M.bind(null, a);\n  b.type = a;\n  return b;\n};\nexports.createRef = function () {\n  return {\n    current: null\n  };\n};\nexports.forwardRef = function (a) {\n  return {\n    $$typeof: x,\n    render: a\n  };\n};\nexports.isValidElement = O;\nexports.lazy = function (a) {\n  return {\n    $$typeof: A,\n    _ctor: a,\n    _status: -1,\n    _result: null\n  };\n};\nexports.memo = function (a, b) {\n  return {\n    $$typeof: z,\n    type: a,\n    compare: void 0 === b ? null : b\n  };\n};\nexports.useCallback = function (a, b) {\n  return Z().useCallback(a, b);\n};\nexports.useContext = function (a, b) {\n  return Z().useContext(a, b);\n};\nexports.useDebugValue = function () {};\nexports.useEffect = function (a, b) {\n  return Z().useEffect(a, b);\n};\nexports.useImperativeHandle = function (a, b, c) {\n  return Z().useImperativeHandle(a, b, c);\n};\nexports.useLayoutEffect = function (a, b) {\n  return Z().useLayoutEffect(a, b);\n};\nexports.useMemo = function (a, b) {\n  return Z().useMemo(a, b);\n};\nexports.useReducer = function (a, b, c) {\n  return Z().useReducer(a, b, c);\n};\nexports.useRef = function (a) {\n  return Z().useRef(a);\n};\nexports.useState = function (a) {\n  return Z().useState(a);\n};\nexports.version = \"16.13.1\";","/** @license React v16.13.1\n * react-dom.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/*\n Modernizr 3.0.0pre (Custom Build) | MIT\n*/\n'use strict';\n\nvar aa = require(\"react\"),\n  n = require(\"object-assign\"),\n  r = require(\"scheduler\");\nfunction u(a) {\n  for (var b = \"https://reactjs.org/docs/error-decoder.html?invariant=\" + a, c = 1; c < arguments.length; c++) b += \"&args[]=\" + encodeURIComponent(arguments[c]);\n  return \"Minified React error #\" + a + \"; visit \" + b + \" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\";\n}\nif (!aa) throw Error(u(227));\nfunction ba(a, b, c, d, e, f, g, h, k) {\n  var l = Array.prototype.slice.call(arguments, 3);\n  try {\n    b.apply(c, l);\n  } catch (m) {\n    this.onError(m);\n  }\n}\nvar da = !1,\n  ea = null,\n  fa = !1,\n  ha = null,\n  ia = {\n    onError: function (a) {\n      da = !0;\n      ea = a;\n    }\n  };\nfunction ja(a, b, c, d, e, f, g, h, k) {\n  da = !1;\n  ea = null;\n  ba.apply(ia, arguments);\n}\nfunction ka(a, b, c, d, e, f, g, h, k) {\n  ja.apply(this, arguments);\n  if (da) {\n    if (da) {\n      var l = ea;\n      da = !1;\n      ea = null;\n    } else throw Error(u(198));\n    fa || (fa = !0, ha = l);\n  }\n}\nvar la = null,\n  ma = null,\n  na = null;\nfunction oa(a, b, c) {\n  var d = a.type || \"unknown-event\";\n  a.currentTarget = na(c);\n  ka(d, b, void 0, a);\n  a.currentTarget = null;\n}\nvar pa = null,\n  qa = {};\nfunction ra() {\n  if (pa) for (var a in qa) {\n    var b = qa[a],\n      c = pa.indexOf(a);\n    if (!(-1 < c)) throw Error(u(96, a));\n    if (!sa[c]) {\n      if (!b.extractEvents) throw Error(u(97, a));\n      sa[c] = b;\n      c = b.eventTypes;\n      for (var d in c) {\n        var e = void 0;\n        var f = c[d],\n          g = b,\n          h = d;\n        if (ta.hasOwnProperty(h)) throw Error(u(99, h));\n        ta[h] = f;\n        var k = f.phasedRegistrationNames;\n        if (k) {\n          for (e in k) k.hasOwnProperty(e) && ua(k[e], g, h);\n          e = !0;\n        } else f.registrationName ? (ua(f.registrationName, g, h), e = !0) : e = !1;\n        if (!e) throw Error(u(98, d, a));\n      }\n    }\n  }\n}\nfunction ua(a, b, c) {\n  if (va[a]) throw Error(u(100, a));\n  va[a] = b;\n  wa[a] = b.eventTypes[c].dependencies;\n}\nvar sa = [],\n  ta = {},\n  va = {},\n  wa = {};\nfunction xa(a) {\n  var b = !1,\n    c;\n  for (c in a) if (a.hasOwnProperty(c)) {\n    var d = a[c];\n    if (!qa.hasOwnProperty(c) || qa[c] !== d) {\n      if (qa[c]) throw Error(u(102, c));\n      qa[c] = d;\n      b = !0;\n    }\n  }\n  b && ra();\n}\nvar ya = !(\"undefined\" === typeof window || \"undefined\" === typeof window.document || \"undefined\" === typeof window.document.createElement),\n  za = null,\n  Aa = null,\n  Ba = null;\nfunction Ca(a) {\n  if (a = ma(a)) {\n    if (\"function\" !== typeof za) throw Error(u(280));\n    var b = a.stateNode;\n    b && (b = la(b), za(a.stateNode, a.type, b));\n  }\n}\nfunction Da(a) {\n  Aa ? Ba ? Ba.push(a) : Ba = [a] : Aa = a;\n}\nfunction Ea() {\n  if (Aa) {\n    var a = Aa,\n      b = Ba;\n    Ba = Aa = null;\n    Ca(a);\n    if (b) for (a = 0; a < b.length; a++) Ca(b[a]);\n  }\n}\nfunction Fa(a, b) {\n  return a(b);\n}\nfunction Ga(a, b, c, d, e) {\n  return a(b, c, d, e);\n}\nfunction Ha() {}\nvar Ia = Fa,\n  Ja = !1,\n  Ka = !1;\nfunction La() {\n  if (null !== Aa || null !== Ba) Ha(), Ea();\n}\nfunction Ma(a, b, c) {\n  if (Ka) return a(b, c);\n  Ka = !0;\n  try {\n    return Ia(a, b, c);\n  } finally {\n    Ka = !1, La();\n  }\n}\nvar Na = /^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$/,\n  Oa = Object.prototype.hasOwnProperty,\n  Pa = {},\n  Qa = {};\nfunction Ra(a) {\n  if (Oa.call(Qa, a)) return !0;\n  if (Oa.call(Pa, a)) return !1;\n  if (Na.test(a)) return Qa[a] = !0;\n  Pa[a] = !0;\n  return !1;\n}\nfunction Sa(a, b, c, d) {\n  if (null !== c && 0 === c.type) return !1;\n  switch (typeof b) {\n    case \"function\":\n    case \"symbol\":\n      return !0;\n    case \"boolean\":\n      if (d) return !1;\n      if (null !== c) return !c.acceptsBooleans;\n      a = a.toLowerCase().slice(0, 5);\n      return \"data-\" !== a && \"aria-\" !== a;\n    default:\n      return !1;\n  }\n}\nfunction Ta(a, b, c, d) {\n  if (null === b || \"undefined\" === typeof b || Sa(a, b, c, d)) return !0;\n  if (d) return !1;\n  if (null !== c) switch (c.type) {\n    case 3:\n      return !b;\n    case 4:\n      return !1 === b;\n    case 5:\n      return isNaN(b);\n    case 6:\n      return isNaN(b) || 1 > b;\n  }\n  return !1;\n}\nfunction v(a, b, c, d, e, f) {\n  this.acceptsBooleans = 2 === b || 3 === b || 4 === b;\n  this.attributeName = d;\n  this.attributeNamespace = e;\n  this.mustUseProperty = c;\n  this.propertyName = a;\n  this.type = b;\n  this.sanitizeURL = f;\n}\nvar C = {};\n\"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style\".split(\" \").forEach(function (a) {\n  C[a] = new v(a, 0, !1, a, null, !1);\n});\n[[\"acceptCharset\", \"accept-charset\"], [\"className\", \"class\"], [\"htmlFor\", \"for\"], [\"httpEquiv\", \"http-equiv\"]].forEach(function (a) {\n  var b = a[0];\n  C[b] = new v(b, 1, !1, a[1], null, !1);\n});\n[\"contentEditable\", \"draggable\", \"spellCheck\", \"value\"].forEach(function (a) {\n  C[a] = new v(a, 2, !1, a.toLowerCase(), null, !1);\n});\n[\"autoReverse\", \"externalResourcesRequired\", \"focusable\", \"preserveAlpha\"].forEach(function (a) {\n  C[a] = new v(a, 2, !1, a, null, !1);\n});\n\"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope\".split(\" \").forEach(function (a) {\n  C[a] = new v(a, 3, !1, a.toLowerCase(), null, !1);\n});\n[\"checked\", \"multiple\", \"muted\", \"selected\"].forEach(function (a) {\n  C[a] = new v(a, 3, !0, a, null, !1);\n});\n[\"capture\", \"download\"].forEach(function (a) {\n  C[a] = new v(a, 4, !1, a, null, !1);\n});\n[\"cols\", \"rows\", \"size\", \"span\"].forEach(function (a) {\n  C[a] = new v(a, 6, !1, a, null, !1);\n});\n[\"rowSpan\", \"start\"].forEach(function (a) {\n  C[a] = new v(a, 5, !1, a.toLowerCase(), null, !1);\n});\nvar Ua = /[\\-:]([a-z])/g;\nfunction Va(a) {\n  return a[1].toUpperCase();\n}\n\"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height\".split(\" \").forEach(function (a) {\n  var b = a.replace(Ua, Va);\n  C[b] = new v(b, 1, !1, a, null, !1);\n});\n\"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type\".split(\" \").forEach(function (a) {\n  var b = a.replace(Ua, Va);\n  C[b] = new v(b, 1, !1, a, \"http://www.w3.org/1999/xlink\", !1);\n});\n[\"xml:base\", \"xml:lang\", \"xml:space\"].forEach(function (a) {\n  var b = a.replace(Ua, Va);\n  C[b] = new v(b, 1, !1, a, \"http://www.w3.org/XML/1998/namespace\", !1);\n});\n[\"tabIndex\", \"crossOrigin\"].forEach(function (a) {\n  C[a] = new v(a, 1, !1, a.toLowerCase(), null, !1);\n});\nC.xlinkHref = new v(\"xlinkHref\", 1, !1, \"xlink:href\", \"http://www.w3.org/1999/xlink\", !0);\n[\"src\", \"href\", \"action\", \"formAction\"].forEach(function (a) {\n  C[a] = new v(a, 1, !1, a.toLowerCase(), null, !0);\n});\nvar Wa = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\nWa.hasOwnProperty(\"ReactCurrentDispatcher\") || (Wa.ReactCurrentDispatcher = {\n  current: null\n});\nWa.hasOwnProperty(\"ReactCurrentBatchConfig\") || (Wa.ReactCurrentBatchConfig = {\n  suspense: null\n});\nfunction Xa(a, b, c, d) {\n  var e = C.hasOwnProperty(b) ? C[b] : null;\n  var f = null !== e ? 0 === e.type : d ? !1 : !(2 < b.length) || \"o\" !== b[0] && \"O\" !== b[0] || \"n\" !== b[1] && \"N\" !== b[1] ? !1 : !0;\n  f || (Ta(b, c, e, d) && (c = null), d || null === e ? Ra(b) && (null === c ? a.removeAttribute(b) : a.setAttribute(b, \"\" + c)) : e.mustUseProperty ? a[e.propertyName] = null === c ? 3 === e.type ? !1 : \"\" : c : (b = e.attributeName, d = e.attributeNamespace, null === c ? a.removeAttribute(b) : (e = e.type, c = 3 === e || 4 === e && !0 === c ? \"\" : \"\" + c, d ? a.setAttributeNS(d, b, c) : a.setAttribute(b, c))));\n}\nvar Ya = /^(.*)[\\\\\\/]/,\n  E = \"function\" === typeof Symbol && Symbol.for,\n  Za = E ? Symbol.for(\"react.element\") : 60103,\n  $a = E ? Symbol.for(\"react.portal\") : 60106,\n  ab = E ? Symbol.for(\"react.fragment\") : 60107,\n  bb = E ? Symbol.for(\"react.strict_mode\") : 60108,\n  cb = E ? Symbol.for(\"react.profiler\") : 60114,\n  db = E ? Symbol.for(\"react.provider\") : 60109,\n  eb = E ? Symbol.for(\"react.context\") : 60110,\n  fb = E ? Symbol.for(\"react.concurrent_mode\") : 60111,\n  gb = E ? Symbol.for(\"react.forward_ref\") : 60112,\n  hb = E ? Symbol.for(\"react.suspense\") : 60113,\n  ib = E ? Symbol.for(\"react.suspense_list\") : 60120,\n  jb = E ? Symbol.for(\"react.memo\") : 60115,\n  kb = E ? Symbol.for(\"react.lazy\") : 60116,\n  lb = E ? Symbol.for(\"react.block\") : 60121,\n  mb = \"function\" === typeof Symbol && Symbol.iterator;\nfunction nb(a) {\n  if (null === a || \"object\" !== typeof a) return null;\n  a = mb && a[mb] || a[\"@@iterator\"];\n  return \"function\" === typeof a ? a : null;\n}\nfunction ob(a) {\n  if (-1 === a._status) {\n    a._status = 0;\n    var b = a._ctor;\n    b = b();\n    a._result = b;\n    b.then(function (b) {\n      0 === a._status && (b = b.default, a._status = 1, a._result = b);\n    }, function (b) {\n      0 === a._status && (a._status = 2, a._result = b);\n    });\n  }\n}\nfunction pb(a) {\n  if (null == a) return null;\n  if (\"function\" === typeof a) return a.displayName || a.name || null;\n  if (\"string\" === typeof a) return a;\n  switch (a) {\n    case ab:\n      return \"Fragment\";\n    case $a:\n      return \"Portal\";\n    case cb:\n      return \"Profiler\";\n    case bb:\n      return \"StrictMode\";\n    case hb:\n      return \"Suspense\";\n    case ib:\n      return \"SuspenseList\";\n  }\n  if (\"object\" === typeof a) switch (a.$$typeof) {\n    case eb:\n      return \"Context.Consumer\";\n    case db:\n      return \"Context.Provider\";\n    case gb:\n      var b = a.render;\n      b = b.displayName || b.name || \"\";\n      return a.displayName || (\"\" !== b ? \"ForwardRef(\" + b + \")\" : \"ForwardRef\");\n    case jb:\n      return pb(a.type);\n    case lb:\n      return pb(a.render);\n    case kb:\n      if (a = 1 === a._status ? a._result : null) return pb(a);\n  }\n  return null;\n}\nfunction qb(a) {\n  var b = \"\";\n  do {\n    a: switch (a.tag) {\n      case 3:\n      case 4:\n      case 6:\n      case 7:\n      case 10:\n      case 9:\n        var c = \"\";\n        break a;\n      default:\n        var d = a._debugOwner,\n          e = a._debugSource,\n          f = pb(a.type);\n        c = null;\n        d && (c = pb(d.type));\n        d = f;\n        f = \"\";\n        e ? f = \" (at \" + e.fileName.replace(Ya, \"\") + \":\" + e.lineNumber + \")\" : c && (f = \" (created by \" + c + \")\");\n        c = \"\\n    in \" + (d || \"Unknown\") + f;\n    }\n    b += c;\n    a = a.return;\n  } while (a);\n  return b;\n}\nfunction rb(a) {\n  switch (typeof a) {\n    case \"boolean\":\n    case \"number\":\n    case \"object\":\n    case \"string\":\n    case \"undefined\":\n      return a;\n    default:\n      return \"\";\n  }\n}\nfunction sb(a) {\n  var b = a.type;\n  return (a = a.nodeName) && \"input\" === a.toLowerCase() && (\"checkbox\" === b || \"radio\" === b);\n}\nfunction tb(a) {\n  var b = sb(a) ? \"checked\" : \"value\",\n    c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b),\n    d = \"\" + a[b];\n  if (!a.hasOwnProperty(b) && \"undefined\" !== typeof c && \"function\" === typeof c.get && \"function\" === typeof c.set) {\n    var e = c.get,\n      f = c.set;\n    Object.defineProperty(a, b, {\n      configurable: !0,\n      get: function () {\n        return e.call(this);\n      },\n      set: function (a) {\n        d = \"\" + a;\n        f.call(this, a);\n      }\n    });\n    Object.defineProperty(a, b, {\n      enumerable: c.enumerable\n    });\n    return {\n      getValue: function () {\n        return d;\n      },\n      setValue: function (a) {\n        d = \"\" + a;\n      },\n      stopTracking: function () {\n        a._valueTracker = null;\n        delete a[b];\n      }\n    };\n  }\n}\nfunction xb(a) {\n  a._valueTracker || (a._valueTracker = tb(a));\n}\nfunction yb(a) {\n  if (!a) return !1;\n  var b = a._valueTracker;\n  if (!b) return !0;\n  var c = b.getValue();\n  var d = \"\";\n  a && (d = sb(a) ? a.checked ? \"true\" : \"false\" : a.value);\n  a = d;\n  return a !== c ? (b.setValue(a), !0) : !1;\n}\nfunction zb(a, b) {\n  var c = b.checked;\n  return n({}, b, {\n    defaultChecked: void 0,\n    defaultValue: void 0,\n    value: void 0,\n    checked: null != c ? c : a._wrapperState.initialChecked\n  });\n}\nfunction Ab(a, b) {\n  var c = null == b.defaultValue ? \"\" : b.defaultValue,\n    d = null != b.checked ? b.checked : b.defaultChecked;\n  c = rb(null != b.value ? b.value : c);\n  a._wrapperState = {\n    initialChecked: d,\n    initialValue: c,\n    controlled: \"checkbox\" === b.type || \"radio\" === b.type ? null != b.checked : null != b.value\n  };\n}\nfunction Bb(a, b) {\n  b = b.checked;\n  null != b && Xa(a, \"checked\", b, !1);\n}\nfunction Cb(a, b) {\n  Bb(a, b);\n  var c = rb(b.value),\n    d = b.type;\n  if (null != c) {\n    if (\"number\" === d) {\n      if (0 === c && \"\" === a.value || a.value != c) a.value = \"\" + c;\n    } else a.value !== \"\" + c && (a.value = \"\" + c);\n  } else if (\"submit\" === d || \"reset\" === d) {\n    a.removeAttribute(\"value\");\n    return;\n  }\n  b.hasOwnProperty(\"value\") ? Db(a, b.type, c) : b.hasOwnProperty(\"defaultValue\") && Db(a, b.type, rb(b.defaultValue));\n  null == b.checked && null != b.defaultChecked && (a.defaultChecked = !!b.defaultChecked);\n}\nfunction Eb(a, b, c) {\n  if (b.hasOwnProperty(\"value\") || b.hasOwnProperty(\"defaultValue\")) {\n    var d = b.type;\n    if (!(\"submit\" !== d && \"reset\" !== d || void 0 !== b.value && null !== b.value)) return;\n    b = \"\" + a._wrapperState.initialValue;\n    c || b === a.value || (a.value = b);\n    a.defaultValue = b;\n  }\n  c = a.name;\n  \"\" !== c && (a.name = \"\");\n  a.defaultChecked = !!a._wrapperState.initialChecked;\n  \"\" !== c && (a.name = c);\n}\nfunction Db(a, b, c) {\n  if (\"number\" !== b || a.ownerDocument.activeElement !== a) null == c ? a.defaultValue = \"\" + a._wrapperState.initialValue : a.defaultValue !== \"\" + c && (a.defaultValue = \"\" + c);\n}\nfunction Fb(a) {\n  var b = \"\";\n  aa.Children.forEach(a, function (a) {\n    null != a && (b += a);\n  });\n  return b;\n}\nfunction Gb(a, b) {\n  a = n({\n    children: void 0\n  }, b);\n  if (b = Fb(b.children)) a.children = b;\n  return a;\n}\nfunction Hb(a, b, c, d) {\n  a = a.options;\n  if (b) {\n    b = {};\n    for (var e = 0; e < c.length; e++) b[\"$\" + c[e]] = !0;\n    for (c = 0; c < a.length; c++) e = b.hasOwnProperty(\"$\" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = !0);\n  } else {\n    c = \"\" + rb(c);\n    b = null;\n    for (e = 0; e < a.length; e++) {\n      if (a[e].value === c) {\n        a[e].selected = !0;\n        d && (a[e].defaultSelected = !0);\n        return;\n      }\n      null !== b || a[e].disabled || (b = a[e]);\n    }\n    null !== b && (b.selected = !0);\n  }\n}\nfunction Ib(a, b) {\n  if (null != b.dangerouslySetInnerHTML) throw Error(u(91));\n  return n({}, b, {\n    value: void 0,\n    defaultValue: void 0,\n    children: \"\" + a._wrapperState.initialValue\n  });\n}\nfunction Jb(a, b) {\n  var c = b.value;\n  if (null == c) {\n    c = b.children;\n    b = b.defaultValue;\n    if (null != c) {\n      if (null != b) throw Error(u(92));\n      if (Array.isArray(c)) {\n        if (!(1 >= c.length)) throw Error(u(93));\n        c = c[0];\n      }\n      b = c;\n    }\n    null == b && (b = \"\");\n    c = b;\n  }\n  a._wrapperState = {\n    initialValue: rb(c)\n  };\n}\nfunction Kb(a, b) {\n  var c = rb(b.value),\n    d = rb(b.defaultValue);\n  null != c && (c = \"\" + c, c !== a.value && (a.value = c), null == b.defaultValue && a.defaultValue !== c && (a.defaultValue = c));\n  null != d && (a.defaultValue = \"\" + d);\n}\nfunction Lb(a) {\n  var b = a.textContent;\n  b === a._wrapperState.initialValue && \"\" !== b && null !== b && (a.value = b);\n}\nvar Mb = {\n  html: \"http://www.w3.org/1999/xhtml\",\n  mathml: \"http://www.w3.org/1998/Math/MathML\",\n  svg: \"http://www.w3.org/2000/svg\"\n};\nfunction Nb(a) {\n  switch (a) {\n    case \"svg\":\n      return \"http://www.w3.org/2000/svg\";\n    case \"math\":\n      return \"http://www.w3.org/1998/Math/MathML\";\n    default:\n      return \"http://www.w3.org/1999/xhtml\";\n  }\n}\nfunction Ob(a, b) {\n  return null == a || \"http://www.w3.org/1999/xhtml\" === a ? Nb(b) : \"http://www.w3.org/2000/svg\" === a && \"foreignObject\" === b ? \"http://www.w3.org/1999/xhtml\" : a;\n}\nvar Pb,\n  Qb = function (a) {\n    return \"undefined\" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function (b, c, d, e) {\n      MSApp.execUnsafeLocalFunction(function () {\n        return a(b, c, d, e);\n      });\n    } : a;\n  }(function (a, b) {\n    if (a.namespaceURI !== Mb.svg || \"innerHTML\" in a) a.innerHTML = b;else {\n      Pb = Pb || document.createElement(\"div\");\n      Pb.innerHTML = \"<svg>\" + b.valueOf().toString() + \"</svg>\";\n      for (b = Pb.firstChild; a.firstChild;) a.removeChild(a.firstChild);\n      for (; b.firstChild;) a.appendChild(b.firstChild);\n    }\n  });\nfunction Rb(a, b) {\n  if (b) {\n    var c = a.firstChild;\n    if (c && c === a.lastChild && 3 === c.nodeType) {\n      c.nodeValue = b;\n      return;\n    }\n  }\n  a.textContent = b;\n}\nfunction Sb(a, b) {\n  var c = {};\n  c[a.toLowerCase()] = b.toLowerCase();\n  c[\"Webkit\" + a] = \"webkit\" + b;\n  c[\"Moz\" + a] = \"moz\" + b;\n  return c;\n}\nvar Tb = {\n    animationend: Sb(\"Animation\", \"AnimationEnd\"),\n    animationiteration: Sb(\"Animation\", \"AnimationIteration\"),\n    animationstart: Sb(\"Animation\", \"AnimationStart\"),\n    transitionend: Sb(\"Transition\", \"TransitionEnd\")\n  },\n  Ub = {},\n  Vb = {};\nya && (Vb = document.createElement(\"div\").style, \"AnimationEvent\" in window || (delete Tb.animationend.animation, delete Tb.animationiteration.animation, delete Tb.animationstart.animation), \"TransitionEvent\" in window || delete Tb.transitionend.transition);\nfunction Wb(a) {\n  if (Ub[a]) return Ub[a];\n  if (!Tb[a]) return a;\n  var b = Tb[a],\n    c;\n  for (c in b) if (b.hasOwnProperty(c) && c in Vb) return Ub[a] = b[c];\n  return a;\n}\nvar Xb = Wb(\"animationend\"),\n  Yb = Wb(\"animationiteration\"),\n  Zb = Wb(\"animationstart\"),\n  $b = Wb(\"transitionend\"),\n  ac = \"abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting\".split(\" \"),\n  bc = new (\"function\" === typeof WeakMap ? WeakMap : Map)();\nfunction cc(a) {\n  var b = bc.get(a);\n  void 0 === b && (b = new Map(), bc.set(a, b));\n  return b;\n}\nfunction dc(a) {\n  var b = a,\n    c = a;\n  if (a.alternate) for (; b.return;) b = b.return;else {\n    a = b;\n    do b = a, 0 !== (b.effectTag & 1026) && (c = b.return), a = b.return; while (a);\n  }\n  return 3 === b.tag ? c : null;\n}\nfunction ec(a) {\n  if (13 === a.tag) {\n    var b = a.memoizedState;\n    null === b && (a = a.alternate, null !== a && (b = a.memoizedState));\n    if (null !== b) return b.dehydrated;\n  }\n  return null;\n}\nfunction fc(a) {\n  if (dc(a) !== a) throw Error(u(188));\n}\nfunction gc(a) {\n  var b = a.alternate;\n  if (!b) {\n    b = dc(a);\n    if (null === b) throw Error(u(188));\n    return b !== a ? null : a;\n  }\n  for (var c = a, d = b;;) {\n    var e = c.return;\n    if (null === e) break;\n    var f = e.alternate;\n    if (null === f) {\n      d = e.return;\n      if (null !== d) {\n        c = d;\n        continue;\n      }\n      break;\n    }\n    if (e.child === f.child) {\n      for (f = e.child; f;) {\n        if (f === c) return fc(e), a;\n        if (f === d) return fc(e), b;\n        f = f.sibling;\n      }\n      throw Error(u(188));\n    }\n    if (c.return !== d.return) c = e, d = f;else {\n      for (var g = !1, h = e.child; h;) {\n        if (h === c) {\n          g = !0;\n          c = e;\n          d = f;\n          break;\n        }\n        if (h === d) {\n          g = !0;\n          d = e;\n          c = f;\n          break;\n        }\n        h = h.sibling;\n      }\n      if (!g) {\n        for (h = f.child; h;) {\n          if (h === c) {\n            g = !0;\n            c = f;\n            d = e;\n            break;\n          }\n          if (h === d) {\n            g = !0;\n            d = f;\n            c = e;\n            break;\n          }\n          h = h.sibling;\n        }\n        if (!g) throw Error(u(189));\n      }\n    }\n    if (c.alternate !== d) throw Error(u(190));\n  }\n  if (3 !== c.tag) throw Error(u(188));\n  return c.stateNode.current === c ? a : b;\n}\nfunction hc(a) {\n  a = gc(a);\n  if (!a) return null;\n  for (var b = a;;) {\n    if (5 === b.tag || 6 === b.tag) return b;\n    if (b.child) b.child.return = b, b = b.child;else {\n      if (b === a) break;\n      for (; !b.sibling;) {\n        if (!b.return || b.return === a) return null;\n        b = b.return;\n      }\n      b.sibling.return = b.return;\n      b = b.sibling;\n    }\n  }\n  return null;\n}\nfunction ic(a, b) {\n  if (null == b) throw Error(u(30));\n  if (null == a) return b;\n  if (Array.isArray(a)) {\n    if (Array.isArray(b)) return a.push.apply(a, b), a;\n    a.push(b);\n    return a;\n  }\n  return Array.isArray(b) ? [a].concat(b) : [a, b];\n}\nfunction jc(a, b, c) {\n  Array.isArray(a) ? a.forEach(b, c) : a && b.call(c, a);\n}\nvar kc = null;\nfunction lc(a) {\n  if (a) {\n    var b = a._dispatchListeners,\n      c = a._dispatchInstances;\n    if (Array.isArray(b)) for (var d = 0; d < b.length && !a.isPropagationStopped(); d++) oa(a, b[d], c[d]);else b && oa(a, b, c);\n    a._dispatchListeners = null;\n    a._dispatchInstances = null;\n    a.isPersistent() || a.constructor.release(a);\n  }\n}\nfunction mc(a) {\n  null !== a && (kc = ic(kc, a));\n  a = kc;\n  kc = null;\n  if (a) {\n    jc(a, lc);\n    if (kc) throw Error(u(95));\n    if (fa) throw a = ha, fa = !1, ha = null, a;\n  }\n}\nfunction nc(a) {\n  a = a.target || a.srcElement || window;\n  a.correspondingUseElement && (a = a.correspondingUseElement);\n  return 3 === a.nodeType ? a.parentNode : a;\n}\nfunction oc(a) {\n  if (!ya) return !1;\n  a = \"on\" + a;\n  var b = a in document;\n  b || (b = document.createElement(\"div\"), b.setAttribute(a, \"return;\"), b = \"function\" === typeof b[a]);\n  return b;\n}\nvar pc = [];\nfunction qc(a) {\n  a.topLevelType = null;\n  a.nativeEvent = null;\n  a.targetInst = null;\n  a.ancestors.length = 0;\n  10 > pc.length && pc.push(a);\n}\nfunction rc(a, b, c, d) {\n  if (pc.length) {\n    var e = pc.pop();\n    e.topLevelType = a;\n    e.eventSystemFlags = d;\n    e.nativeEvent = b;\n    e.targetInst = c;\n    return e;\n  }\n  return {\n    topLevelType: a,\n    eventSystemFlags: d,\n    nativeEvent: b,\n    targetInst: c,\n    ancestors: []\n  };\n}\nfunction sc(a) {\n  var b = a.targetInst,\n    c = b;\n  do {\n    if (!c) {\n      a.ancestors.push(c);\n      break;\n    }\n    var d = c;\n    if (3 === d.tag) d = d.stateNode.containerInfo;else {\n      for (; d.return;) d = d.return;\n      d = 3 !== d.tag ? null : d.stateNode.containerInfo;\n    }\n    if (!d) break;\n    b = c.tag;\n    5 !== b && 6 !== b || a.ancestors.push(c);\n    c = tc(d);\n  } while (c);\n  for (c = 0; c < a.ancestors.length; c++) {\n    b = a.ancestors[c];\n    var e = nc(a.nativeEvent);\n    d = a.topLevelType;\n    var f = a.nativeEvent,\n      g = a.eventSystemFlags;\n    0 === c && (g |= 64);\n    for (var h = null, k = 0; k < sa.length; k++) {\n      var l = sa[k];\n      l && (l = l.extractEvents(d, b, f, e, g)) && (h = ic(h, l));\n    }\n    mc(h);\n  }\n}\nfunction uc(a, b, c) {\n  if (!c.has(a)) {\n    switch (a) {\n      case \"scroll\":\n        vc(b, \"scroll\", !0);\n        break;\n      case \"focus\":\n      case \"blur\":\n        vc(b, \"focus\", !0);\n        vc(b, \"blur\", !0);\n        c.set(\"blur\", null);\n        c.set(\"focus\", null);\n        break;\n      case \"cancel\":\n      case \"close\":\n        oc(a) && vc(b, a, !0);\n        break;\n      case \"invalid\":\n      case \"submit\":\n      case \"reset\":\n        break;\n      default:\n        -1 === ac.indexOf(a) && F(a, b);\n    }\n    c.set(a, null);\n  }\n}\nvar wc,\n  xc,\n  yc,\n  zc = !1,\n  Ac = [],\n  Bc = null,\n  Cc = null,\n  Dc = null,\n  Ec = new Map(),\n  Fc = new Map(),\n  Gc = [],\n  Hc = \"mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit\".split(\" \"),\n  Ic = \"focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture\".split(\" \");\nfunction Jc(a, b) {\n  var c = cc(b);\n  Hc.forEach(function (a) {\n    uc(a, b, c);\n  });\n  Ic.forEach(function (a) {\n    uc(a, b, c);\n  });\n}\nfunction Kc(a, b, c, d, e) {\n  return {\n    blockedOn: a,\n    topLevelType: b,\n    eventSystemFlags: c | 32,\n    nativeEvent: e,\n    container: d\n  };\n}\nfunction Lc(a, b) {\n  switch (a) {\n    case \"focus\":\n    case \"blur\":\n      Bc = null;\n      break;\n    case \"dragenter\":\n    case \"dragleave\":\n      Cc = null;\n      break;\n    case \"mouseover\":\n    case \"mouseout\":\n      Dc = null;\n      break;\n    case \"pointerover\":\n    case \"pointerout\":\n      Ec.delete(b.pointerId);\n      break;\n    case \"gotpointercapture\":\n    case \"lostpointercapture\":\n      Fc.delete(b.pointerId);\n  }\n}\nfunction Mc(a, b, c, d, e, f) {\n  if (null === a || a.nativeEvent !== f) return a = Kc(b, c, d, e, f), null !== b && (b = Nc(b), null !== b && xc(b)), a;\n  a.eventSystemFlags |= d;\n  return a;\n}\nfunction Oc(a, b, c, d, e) {\n  switch (b) {\n    case \"focus\":\n      return Bc = Mc(Bc, a, b, c, d, e), !0;\n    case \"dragenter\":\n      return Cc = Mc(Cc, a, b, c, d, e), !0;\n    case \"mouseover\":\n      return Dc = Mc(Dc, a, b, c, d, e), !0;\n    case \"pointerover\":\n      var f = e.pointerId;\n      Ec.set(f, Mc(Ec.get(f) || null, a, b, c, d, e));\n      return !0;\n    case \"gotpointercapture\":\n      return f = e.pointerId, Fc.set(f, Mc(Fc.get(f) || null, a, b, c, d, e)), !0;\n  }\n  return !1;\n}\nfunction Pc(a) {\n  var b = tc(a.target);\n  if (null !== b) {\n    var c = dc(b);\n    if (null !== c) if (b = c.tag, 13 === b) {\n      if (b = ec(c), null !== b) {\n        a.blockedOn = b;\n        r.unstable_runWithPriority(a.priority, function () {\n          yc(c);\n        });\n        return;\n      }\n    } else if (3 === b && c.stateNode.hydrate) {\n      a.blockedOn = 3 === c.tag ? c.stateNode.containerInfo : null;\n      return;\n    }\n  }\n  a.blockedOn = null;\n}\nfunction Qc(a) {\n  if (null !== a.blockedOn) return !1;\n  var b = Rc(a.topLevelType, a.eventSystemFlags, a.container, a.nativeEvent);\n  if (null !== b) {\n    var c = Nc(b);\n    null !== c && xc(c);\n    a.blockedOn = b;\n    return !1;\n  }\n  return !0;\n}\nfunction Sc(a, b, c) {\n  Qc(a) && c.delete(b);\n}\nfunction Tc() {\n  for (zc = !1; 0 < Ac.length;) {\n    var a = Ac[0];\n    if (null !== a.blockedOn) {\n      a = Nc(a.blockedOn);\n      null !== a && wc(a);\n      break;\n    }\n    var b = Rc(a.topLevelType, a.eventSystemFlags, a.container, a.nativeEvent);\n    null !== b ? a.blockedOn = b : Ac.shift();\n  }\n  null !== Bc && Qc(Bc) && (Bc = null);\n  null !== Cc && Qc(Cc) && (Cc = null);\n  null !== Dc && Qc(Dc) && (Dc = null);\n  Ec.forEach(Sc);\n  Fc.forEach(Sc);\n}\nfunction Uc(a, b) {\n  a.blockedOn === b && (a.blockedOn = null, zc || (zc = !0, r.unstable_scheduleCallback(r.unstable_NormalPriority, Tc)));\n}\nfunction Vc(a) {\n  function b(b) {\n    return Uc(b, a);\n  }\n  if (0 < Ac.length) {\n    Uc(Ac[0], a);\n    for (var c = 1; c < Ac.length; c++) {\n      var d = Ac[c];\n      d.blockedOn === a && (d.blockedOn = null);\n    }\n  }\n  null !== Bc && Uc(Bc, a);\n  null !== Cc && Uc(Cc, a);\n  null !== Dc && Uc(Dc, a);\n  Ec.forEach(b);\n  Fc.forEach(b);\n  for (c = 0; c < Gc.length; c++) d = Gc[c], d.blockedOn === a && (d.blockedOn = null);\n  for (; 0 < Gc.length && (c = Gc[0], null === c.blockedOn);) Pc(c), null === c.blockedOn && Gc.shift();\n}\nvar Wc = {},\n  Yc = new Map(),\n  Zc = new Map(),\n  $c = [\"abort\", \"abort\", Xb, \"animationEnd\", Yb, \"animationIteration\", Zb, \"animationStart\", \"canplay\", \"canPlay\", \"canplaythrough\", \"canPlayThrough\", \"durationchange\", \"durationChange\", \"emptied\", \"emptied\", \"encrypted\", \"encrypted\", \"ended\", \"ended\", \"error\", \"error\", \"gotpointercapture\", \"gotPointerCapture\", \"load\", \"load\", \"loadeddata\", \"loadedData\", \"loadedmetadata\", \"loadedMetadata\", \"loadstart\", \"loadStart\", \"lostpointercapture\", \"lostPointerCapture\", \"playing\", \"playing\", \"progress\", \"progress\", \"seeking\", \"seeking\", \"stalled\", \"stalled\", \"suspend\", \"suspend\", \"timeupdate\", \"timeUpdate\", $b, \"transitionEnd\", \"waiting\", \"waiting\"];\nfunction ad(a, b) {\n  for (var c = 0; c < a.length; c += 2) {\n    var d = a[c],\n      e = a[c + 1],\n      f = \"on\" + (e[0].toUpperCase() + e.slice(1));\n    f = {\n      phasedRegistrationNames: {\n        bubbled: f,\n        captured: f + \"Capture\"\n      },\n      dependencies: [d],\n      eventPriority: b\n    };\n    Zc.set(d, b);\n    Yc.set(d, f);\n    Wc[e] = f;\n  }\n}\nad(\"blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange\".split(\" \"), 0);\nad(\"drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel\".split(\" \"), 1);\nad($c, 2);\nfor (var bd = \"change selectionchange textInput compositionstart compositionend compositionupdate\".split(\" \"), cd = 0; cd < bd.length; cd++) Zc.set(bd[cd], 0);\nvar dd = r.unstable_UserBlockingPriority,\n  ed = r.unstable_runWithPriority,\n  fd = !0;\nfunction F(a, b) {\n  vc(b, a, !1);\n}\nfunction vc(a, b, c) {\n  var d = Zc.get(b);\n  switch (void 0 === d ? 2 : d) {\n    case 0:\n      d = gd.bind(null, b, 1, a);\n      break;\n    case 1:\n      d = hd.bind(null, b, 1, a);\n      break;\n    default:\n      d = id.bind(null, b, 1, a);\n  }\n  c ? a.addEventListener(b, d, !0) : a.addEventListener(b, d, !1);\n}\nfunction gd(a, b, c, d) {\n  Ja || Ha();\n  var e = id,\n    f = Ja;\n  Ja = !0;\n  try {\n    Ga(e, a, b, c, d);\n  } finally {\n    (Ja = f) || La();\n  }\n}\nfunction hd(a, b, c, d) {\n  ed(dd, id.bind(null, a, b, c, d));\n}\nfunction id(a, b, c, d) {\n  if (fd) if (0 < Ac.length && -1 < Hc.indexOf(a)) a = Kc(null, a, b, c, d), Ac.push(a);else {\n    var e = Rc(a, b, c, d);\n    if (null === e) Lc(a, d);else if (-1 < Hc.indexOf(a)) a = Kc(e, a, b, c, d), Ac.push(a);else if (!Oc(e, a, b, c, d)) {\n      Lc(a, d);\n      a = rc(a, d, null, b);\n      try {\n        Ma(sc, a);\n      } finally {\n        qc(a);\n      }\n    }\n  }\n}\nfunction Rc(a, b, c, d) {\n  c = nc(d);\n  c = tc(c);\n  if (null !== c) {\n    var e = dc(c);\n    if (null === e) c = null;else {\n      var f = e.tag;\n      if (13 === f) {\n        c = ec(e);\n        if (null !== c) return c;\n        c = null;\n      } else if (3 === f) {\n        if (e.stateNode.hydrate) return 3 === e.tag ? e.stateNode.containerInfo : null;\n        c = null;\n      } else e !== c && (c = null);\n    }\n  }\n  a = rc(a, d, c, b);\n  try {\n    Ma(sc, a);\n  } finally {\n    qc(a);\n  }\n  return null;\n}\nvar jd = {\n    animationIterationCount: !0,\n    borderImageOutset: !0,\n    borderImageSlice: !0,\n    borderImageWidth: !0,\n    boxFlex: !0,\n    boxFlexGroup: !0,\n    boxOrdinalGroup: !0,\n    columnCount: !0,\n    columns: !0,\n    flex: !0,\n    flexGrow: !0,\n    flexPositive: !0,\n    flexShrink: !0,\n    flexNegative: !0,\n    flexOrder: !0,\n    gridArea: !0,\n    gridRow: !0,\n    gridRowEnd: !0,\n    gridRowSpan: !0,\n    gridRowStart: !0,\n    gridColumn: !0,\n    gridColumnEnd: !0,\n    gridColumnSpan: !0,\n    gridColumnStart: !0,\n    fontWeight: !0,\n    lineClamp: !0,\n    lineHeight: !0,\n    opacity: !0,\n    order: !0,\n    orphans: !0,\n    tabSize: !0,\n    widows: !0,\n    zIndex: !0,\n    zoom: !0,\n    fillOpacity: !0,\n    floodOpacity: !0,\n    stopOpacity: !0,\n    strokeDasharray: !0,\n    strokeDashoffset: !0,\n    strokeMiterlimit: !0,\n    strokeOpacity: !0,\n    strokeWidth: !0\n  },\n  kd = [\"Webkit\", \"ms\", \"Moz\", \"O\"];\nObject.keys(jd).forEach(function (a) {\n  kd.forEach(function (b) {\n    b = b + a.charAt(0).toUpperCase() + a.substring(1);\n    jd[b] = jd[a];\n  });\n});\nfunction ld(a, b, c) {\n  return null == b || \"boolean\" === typeof b || \"\" === b ? \"\" : c || \"number\" !== typeof b || 0 === b || jd.hasOwnProperty(a) && jd[a] ? (\"\" + b).trim() : b + \"px\";\n}\nfunction md(a, b) {\n  a = a.style;\n  for (var c in b) if (b.hasOwnProperty(c)) {\n    var d = 0 === c.indexOf(\"--\"),\n      e = ld(c, b[c], d);\n    \"float\" === c && (c = \"cssFloat\");\n    d ? a.setProperty(c, e) : a[c] = e;\n  }\n}\nvar nd = n({\n  menuitem: !0\n}, {\n  area: !0,\n  base: !0,\n  br: !0,\n  col: !0,\n  embed: !0,\n  hr: !0,\n  img: !0,\n  input: !0,\n  keygen: !0,\n  link: !0,\n  meta: !0,\n  param: !0,\n  source: !0,\n  track: !0,\n  wbr: !0\n});\nfunction od(a, b) {\n  if (b) {\n    if (nd[a] && (null != b.children || null != b.dangerouslySetInnerHTML)) throw Error(u(137, a, \"\"));\n    if (null != b.dangerouslySetInnerHTML) {\n      if (null != b.children) throw Error(u(60));\n      if (!(\"object\" === typeof b.dangerouslySetInnerHTML && \"__html\" in b.dangerouslySetInnerHTML)) throw Error(u(61));\n    }\n    if (null != b.style && \"object\" !== typeof b.style) throw Error(u(62, \"\"));\n  }\n}\nfunction pd(a, b) {\n  if (-1 === a.indexOf(\"-\")) return \"string\" === typeof b.is;\n  switch (a) {\n    case \"annotation-xml\":\n    case \"color-profile\":\n    case \"font-face\":\n    case \"font-face-src\":\n    case \"font-face-uri\":\n    case \"font-face-format\":\n    case \"font-face-name\":\n    case \"missing-glyph\":\n      return !1;\n    default:\n      return !0;\n  }\n}\nvar qd = Mb.html;\nfunction rd(a, b) {\n  a = 9 === a.nodeType || 11 === a.nodeType ? a : a.ownerDocument;\n  var c = cc(a);\n  b = wa[b];\n  for (var d = 0; d < b.length; d++) uc(b[d], a, c);\n}\nfunction sd() {}\nfunction td(a) {\n  a = a || (\"undefined\" !== typeof document ? document : void 0);\n  if (\"undefined\" === typeof a) return null;\n  try {\n    return a.activeElement || a.body;\n  } catch (b) {\n    return a.body;\n  }\n}\nfunction ud(a) {\n  for (; a && a.firstChild;) a = a.firstChild;\n  return a;\n}\nfunction vd(a, b) {\n  var c = ud(a);\n  a = 0;\n  for (var d; c;) {\n    if (3 === c.nodeType) {\n      d = a + c.textContent.length;\n      if (a <= b && d >= b) return {\n        node: c,\n        offset: b - a\n      };\n      a = d;\n    }\n    a: {\n      for (; c;) {\n        if (c.nextSibling) {\n          c = c.nextSibling;\n          break a;\n        }\n        c = c.parentNode;\n      }\n      c = void 0;\n    }\n    c = ud(c);\n  }\n}\nfunction wd(a, b) {\n  return a && b ? a === b ? !0 : a && 3 === a.nodeType ? !1 : b && 3 === b.nodeType ? wd(a, b.parentNode) : \"contains\" in a ? a.contains(b) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b) & 16) : !1 : !1;\n}\nfunction xd() {\n  for (var a = window, b = td(); b instanceof a.HTMLIFrameElement;) {\n    try {\n      var c = \"string\" === typeof b.contentWindow.location.href;\n    } catch (d) {\n      c = !1;\n    }\n    if (c) a = b.contentWindow;else break;\n    b = td(a.document);\n  }\n  return b;\n}\nfunction yd(a) {\n  var b = a && a.nodeName && a.nodeName.toLowerCase();\n  return b && (\"input\" === b && (\"text\" === a.type || \"search\" === a.type || \"tel\" === a.type || \"url\" === a.type || \"password\" === a.type) || \"textarea\" === b || \"true\" === a.contentEditable);\n}\nvar zd = \"$\",\n  Ad = \"/$\",\n  Bd = \"$?\",\n  Cd = \"$!\",\n  Dd = null,\n  Ed = null;\nfunction Fd(a, b) {\n  switch (a) {\n    case \"button\":\n    case \"input\":\n    case \"select\":\n    case \"textarea\":\n      return !!b.autoFocus;\n  }\n  return !1;\n}\nfunction Gd(a, b) {\n  return \"textarea\" === a || \"option\" === a || \"noscript\" === a || \"string\" === typeof b.children || \"number\" === typeof b.children || \"object\" === typeof b.dangerouslySetInnerHTML && null !== b.dangerouslySetInnerHTML && null != b.dangerouslySetInnerHTML.__html;\n}\nvar Hd = \"function\" === typeof setTimeout ? setTimeout : void 0,\n  Id = \"function\" === typeof clearTimeout ? clearTimeout : void 0;\nfunction Jd(a) {\n  for (; null != a; a = a.nextSibling) {\n    var b = a.nodeType;\n    if (1 === b || 3 === b) break;\n  }\n  return a;\n}\nfunction Kd(a) {\n  a = a.previousSibling;\n  for (var b = 0; a;) {\n    if (8 === a.nodeType) {\n      var c = a.data;\n      if (c === zd || c === Cd || c === Bd) {\n        if (0 === b) return a;\n        b--;\n      } else c === Ad && b++;\n    }\n    a = a.previousSibling;\n  }\n  return null;\n}\nvar Ld = Math.random().toString(36).slice(2),\n  Md = \"__reactInternalInstance$\" + Ld,\n  Nd = \"__reactEventHandlers$\" + Ld,\n  Od = \"__reactContainere$\" + Ld;\nfunction tc(a) {\n  var b = a[Md];\n  if (b) return b;\n  for (var c = a.parentNode; c;) {\n    if (b = c[Od] || c[Md]) {\n      c = b.alternate;\n      if (null !== b.child || null !== c && null !== c.child) for (a = Kd(a); null !== a;) {\n        if (c = a[Md]) return c;\n        a = Kd(a);\n      }\n      return b;\n    }\n    a = c;\n    c = a.parentNode;\n  }\n  return null;\n}\nfunction Nc(a) {\n  a = a[Md] || a[Od];\n  return !a || 5 !== a.tag && 6 !== a.tag && 13 !== a.tag && 3 !== a.tag ? null : a;\n}\nfunction Pd(a) {\n  if (5 === a.tag || 6 === a.tag) return a.stateNode;\n  throw Error(u(33));\n}\nfunction Qd(a) {\n  return a[Nd] || null;\n}\nfunction Rd(a) {\n  do a = a.return; while (a && 5 !== a.tag);\n  return a ? a : null;\n}\nfunction Sd(a, b) {\n  var c = a.stateNode;\n  if (!c) return null;\n  var d = la(c);\n  if (!d) return null;\n  c = d[b];\n  a: switch (b) {\n    case \"onClick\":\n    case \"onClickCapture\":\n    case \"onDoubleClick\":\n    case \"onDoubleClickCapture\":\n    case \"onMouseDown\":\n    case \"onMouseDownCapture\":\n    case \"onMouseMove\":\n    case \"onMouseMoveCapture\":\n    case \"onMouseUp\":\n    case \"onMouseUpCapture\":\n    case \"onMouseEnter\":\n      (d = !d.disabled) || (a = a.type, d = !(\"button\" === a || \"input\" === a || \"select\" === a || \"textarea\" === a));\n      a = !d;\n      break a;\n    default:\n      a = !1;\n  }\n  if (a) return null;\n  if (c && \"function\" !== typeof c) throw Error(u(231, b, typeof c));\n  return c;\n}\nfunction Td(a, b, c) {\n  if (b = Sd(a, c.dispatchConfig.phasedRegistrationNames[b])) c._dispatchListeners = ic(c._dispatchListeners, b), c._dispatchInstances = ic(c._dispatchInstances, a);\n}\nfunction Ud(a) {\n  if (a && a.dispatchConfig.phasedRegistrationNames) {\n    for (var b = a._targetInst, c = []; b;) c.push(b), b = Rd(b);\n    for (b = c.length; 0 < b--;) Td(c[b], \"captured\", a);\n    for (b = 0; b < c.length; b++) Td(c[b], \"bubbled\", a);\n  }\n}\nfunction Vd(a, b, c) {\n  a && c && c.dispatchConfig.registrationName && (b = Sd(a, c.dispatchConfig.registrationName)) && (c._dispatchListeners = ic(c._dispatchListeners, b), c._dispatchInstances = ic(c._dispatchInstances, a));\n}\nfunction Wd(a) {\n  a && a.dispatchConfig.registrationName && Vd(a._targetInst, null, a);\n}\nfunction Xd(a) {\n  jc(a, Ud);\n}\nvar Yd = null,\n  Zd = null,\n  $d = null;\nfunction ae() {\n  if ($d) return $d;\n  var a,\n    b = Zd,\n    c = b.length,\n    d,\n    e = \"value\" in Yd ? Yd.value : Yd.textContent,\n    f = e.length;\n  for (a = 0; a < c && b[a] === e[a]; a++);\n  var g = c - a;\n  for (d = 1; d <= g && b[c - d] === e[f - d]; d++);\n  return $d = e.slice(a, 1 < d ? 1 - d : void 0);\n}\nfunction be() {\n  return !0;\n}\nfunction ce() {\n  return !1;\n}\nfunction G(a, b, c, d) {\n  this.dispatchConfig = a;\n  this._targetInst = b;\n  this.nativeEvent = c;\n  a = this.constructor.Interface;\n  for (var e in a) a.hasOwnProperty(e) && ((b = a[e]) ? this[e] = b(c) : \"target\" === e ? this.target = d : this[e] = c[e]);\n  this.isDefaultPrevented = (null != c.defaultPrevented ? c.defaultPrevented : !1 === c.returnValue) ? be : ce;\n  this.isPropagationStopped = ce;\n  return this;\n}\nn(G.prototype, {\n  preventDefault: function () {\n    this.defaultPrevented = !0;\n    var a = this.nativeEvent;\n    a && (a.preventDefault ? a.preventDefault() : \"unknown\" !== typeof a.returnValue && (a.returnValue = !1), this.isDefaultPrevented = be);\n  },\n  stopPropagation: function () {\n    var a = this.nativeEvent;\n    a && (a.stopPropagation ? a.stopPropagation() : \"unknown\" !== typeof a.cancelBubble && (a.cancelBubble = !0), this.isPropagationStopped = be);\n  },\n  persist: function () {\n    this.isPersistent = be;\n  },\n  isPersistent: ce,\n  destructor: function () {\n    var a = this.constructor.Interface,\n      b;\n    for (b in a) this[b] = null;\n    this.nativeEvent = this._targetInst = this.dispatchConfig = null;\n    this.isPropagationStopped = this.isDefaultPrevented = ce;\n    this._dispatchInstances = this._dispatchListeners = null;\n  }\n});\nG.Interface = {\n  type: null,\n  target: null,\n  currentTarget: function () {\n    return null;\n  },\n  eventPhase: null,\n  bubbles: null,\n  cancelable: null,\n  timeStamp: function (a) {\n    return a.timeStamp || Date.now();\n  },\n  defaultPrevented: null,\n  isTrusted: null\n};\nG.extend = function (a) {\n  function b() {}\n  function c() {\n    return d.apply(this, arguments);\n  }\n  var d = this;\n  b.prototype = d.prototype;\n  var e = new b();\n  n(e, c.prototype);\n  c.prototype = e;\n  c.prototype.constructor = c;\n  c.Interface = n({}, d.Interface, a);\n  c.extend = d.extend;\n  de(c);\n  return c;\n};\nde(G);\nfunction ee(a, b, c, d) {\n  if (this.eventPool.length) {\n    var e = this.eventPool.pop();\n    this.call(e, a, b, c, d);\n    return e;\n  }\n  return new this(a, b, c, d);\n}\nfunction fe(a) {\n  if (!(a instanceof this)) throw Error(u(279));\n  a.destructor();\n  10 > this.eventPool.length && this.eventPool.push(a);\n}\nfunction de(a) {\n  a.eventPool = [];\n  a.getPooled = ee;\n  a.release = fe;\n}\nvar ge = G.extend({\n    data: null\n  }),\n  he = G.extend({\n    data: null\n  }),\n  ie = [9, 13, 27, 32],\n  je = ya && \"CompositionEvent\" in window,\n  ke = null;\nya && \"documentMode\" in document && (ke = document.documentMode);\nvar le = ya && \"TextEvent\" in window && !ke,\n  me = ya && (!je || ke && 8 < ke && 11 >= ke),\n  ne = String.fromCharCode(32),\n  oe = {\n    beforeInput: {\n      phasedRegistrationNames: {\n        bubbled: \"onBeforeInput\",\n        captured: \"onBeforeInputCapture\"\n      },\n      dependencies: [\"compositionend\", \"keypress\", \"textInput\", \"paste\"]\n    },\n    compositionEnd: {\n      phasedRegistrationNames: {\n        bubbled: \"onCompositionEnd\",\n        captured: \"onCompositionEndCapture\"\n      },\n      dependencies: \"blur compositionend keydown keypress keyup mousedown\".split(\" \")\n    },\n    compositionStart: {\n      phasedRegistrationNames: {\n        bubbled: \"onCompositionStart\",\n        captured: \"onCompositionStartCapture\"\n      },\n      dependencies: \"blur compositionstart keydown keypress keyup mousedown\".split(\" \")\n    },\n    compositionUpdate: {\n      phasedRegistrationNames: {\n        bubbled: \"onCompositionUpdate\",\n        captured: \"onCompositionUpdateCapture\"\n      },\n      dependencies: \"blur compositionupdate keydown keypress keyup mousedown\".split(\" \")\n    }\n  },\n  pe = !1;\nfunction qe(a, b) {\n  switch (a) {\n    case \"keyup\":\n      return -1 !== ie.indexOf(b.keyCode);\n    case \"keydown\":\n      return 229 !== b.keyCode;\n    case \"keypress\":\n    case \"mousedown\":\n    case \"blur\":\n      return !0;\n    default:\n      return !1;\n  }\n}\nfunction re(a) {\n  a = a.detail;\n  return \"object\" === typeof a && \"data\" in a ? a.data : null;\n}\nvar se = !1;\nfunction te(a, b) {\n  switch (a) {\n    case \"compositionend\":\n      return re(b);\n    case \"keypress\":\n      if (32 !== b.which) return null;\n      pe = !0;\n      return ne;\n    case \"textInput\":\n      return a = b.data, a === ne && pe ? null : a;\n    default:\n      return null;\n  }\n}\nfunction ue(a, b) {\n  if (se) return \"compositionend\" === a || !je && qe(a, b) ? (a = ae(), $d = Zd = Yd = null, se = !1, a) : null;\n  switch (a) {\n    case \"paste\":\n      return null;\n    case \"keypress\":\n      if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {\n        if (b.char && 1 < b.char.length) return b.char;\n        if (b.which) return String.fromCharCode(b.which);\n      }\n      return null;\n    case \"compositionend\":\n      return me && \"ko\" !== b.locale ? null : b.data;\n    default:\n      return null;\n  }\n}\nvar ve = {\n    eventTypes: oe,\n    extractEvents: function (a, b, c, d) {\n      var e;\n      if (je) b: {\n        switch (a) {\n          case \"compositionstart\":\n            var f = oe.compositionStart;\n            break b;\n          case \"compositionend\":\n            f = oe.compositionEnd;\n            break b;\n          case \"compositionupdate\":\n            f = oe.compositionUpdate;\n            break b;\n        }\n        f = void 0;\n      } else se ? qe(a, c) && (f = oe.compositionEnd) : \"keydown\" === a && 229 === c.keyCode && (f = oe.compositionStart);\n      f ? (me && \"ko\" !== c.locale && (se || f !== oe.compositionStart ? f === oe.compositionEnd && se && (e = ae()) : (Yd = d, Zd = \"value\" in Yd ? Yd.value : Yd.textContent, se = !0)), f = ge.getPooled(f, b, c, d), e ? f.data = e : (e = re(c), null !== e && (f.data = e)), Xd(f), e = f) : e = null;\n      (a = le ? te(a, c) : ue(a, c)) ? (b = he.getPooled(oe.beforeInput, b, c, d), b.data = a, Xd(b)) : b = null;\n      return null === e ? b : null === b ? e : [e, b];\n    }\n  },\n  we = {\n    color: !0,\n    date: !0,\n    datetime: !0,\n    \"datetime-local\": !0,\n    email: !0,\n    month: !0,\n    number: !0,\n    password: !0,\n    range: !0,\n    search: !0,\n    tel: !0,\n    text: !0,\n    time: !0,\n    url: !0,\n    week: !0\n  };\nfunction xe(a) {\n  var b = a && a.nodeName && a.nodeName.toLowerCase();\n  return \"input\" === b ? !!we[a.type] : \"textarea\" === b ? !0 : !1;\n}\nvar ye = {\n  change: {\n    phasedRegistrationNames: {\n      bubbled: \"onChange\",\n      captured: \"onChangeCapture\"\n    },\n    dependencies: \"blur change click focus input keydown keyup selectionchange\".split(\" \")\n  }\n};\nfunction ze(a, b, c) {\n  a = G.getPooled(ye.change, a, b, c);\n  a.type = \"change\";\n  Da(c);\n  Xd(a);\n  return a;\n}\nvar Ae = null,\n  Be = null;\nfunction Ce(a) {\n  mc(a);\n}\nfunction De(a) {\n  var b = Pd(a);\n  if (yb(b)) return a;\n}\nfunction Ee(a, b) {\n  if (\"change\" === a) return b;\n}\nvar Fe = !1;\nya && (Fe = oc(\"input\") && (!document.documentMode || 9 < document.documentMode));\nfunction Ge() {\n  Ae && (Ae.detachEvent(\"onpropertychange\", He), Be = Ae = null);\n}\nfunction He(a) {\n  if (\"value\" === a.propertyName && De(Be)) if (a = ze(Be, a, nc(a)), Ja) mc(a);else {\n    Ja = !0;\n    try {\n      Fa(Ce, a);\n    } finally {\n      Ja = !1, La();\n    }\n  }\n}\nfunction Ie(a, b, c) {\n  \"focus\" === a ? (Ge(), Ae = b, Be = c, Ae.attachEvent(\"onpropertychange\", He)) : \"blur\" === a && Ge();\n}\nfunction Je(a) {\n  if (\"selectionchange\" === a || \"keyup\" === a || \"keydown\" === a) return De(Be);\n}\nfunction Ke(a, b) {\n  if (\"click\" === a) return De(b);\n}\nfunction Le(a, b) {\n  if (\"input\" === a || \"change\" === a) return De(b);\n}\nvar Me = {\n    eventTypes: ye,\n    _isInputEventSupported: Fe,\n    extractEvents: function (a, b, c, d) {\n      var e = b ? Pd(b) : window,\n        f = e.nodeName && e.nodeName.toLowerCase();\n      if (\"select\" === f || \"input\" === f && \"file\" === e.type) var g = Ee;else if (xe(e)) {\n        if (Fe) g = Le;else {\n          g = Je;\n          var h = Ie;\n        }\n      } else (f = e.nodeName) && \"input\" === f.toLowerCase() && (\"checkbox\" === e.type || \"radio\" === e.type) && (g = Ke);\n      if (g && (g = g(a, b))) return ze(g, c, d);\n      h && h(a, e, b);\n      \"blur\" === a && (a = e._wrapperState) && a.controlled && \"number\" === e.type && Db(e, \"number\", e.value);\n    }\n  },\n  Ne = G.extend({\n    view: null,\n    detail: null\n  }),\n  Oe = {\n    Alt: \"altKey\",\n    Control: \"ctrlKey\",\n    Meta: \"metaKey\",\n    Shift: \"shiftKey\"\n  };\nfunction Pe(a) {\n  var b = this.nativeEvent;\n  return b.getModifierState ? b.getModifierState(a) : (a = Oe[a]) ? !!b[a] : !1;\n}\nfunction Qe() {\n  return Pe;\n}\nvar Re = 0,\n  Se = 0,\n  Te = !1,\n  Ue = !1,\n  Ve = Ne.extend({\n    screenX: null,\n    screenY: null,\n    clientX: null,\n    clientY: null,\n    pageX: null,\n    pageY: null,\n    ctrlKey: null,\n    shiftKey: null,\n    altKey: null,\n    metaKey: null,\n    getModifierState: Qe,\n    button: null,\n    buttons: null,\n    relatedTarget: function (a) {\n      return a.relatedTarget || (a.fromElement === a.srcElement ? a.toElement : a.fromElement);\n    },\n    movementX: function (a) {\n      if (\"movementX\" in a) return a.movementX;\n      var b = Re;\n      Re = a.screenX;\n      return Te ? \"mousemove\" === a.type ? a.screenX - b : 0 : (Te = !0, 0);\n    },\n    movementY: function (a) {\n      if (\"movementY\" in a) return a.movementY;\n      var b = Se;\n      Se = a.screenY;\n      return Ue ? \"mousemove\" === a.type ? a.screenY - b : 0 : (Ue = !0, 0);\n    }\n  }),\n  We = Ve.extend({\n    pointerId: null,\n    width: null,\n    height: null,\n    pressure: null,\n    tangentialPressure: null,\n    tiltX: null,\n    tiltY: null,\n    twist: null,\n    pointerType: null,\n    isPrimary: null\n  }),\n  Xe = {\n    mouseEnter: {\n      registrationName: \"onMouseEnter\",\n      dependencies: [\"mouseout\", \"mouseover\"]\n    },\n    mouseLeave: {\n      registrationName: \"onMouseLeave\",\n      dependencies: [\"mouseout\", \"mouseover\"]\n    },\n    pointerEnter: {\n      registrationName: \"onPointerEnter\",\n      dependencies: [\"pointerout\", \"pointerover\"]\n    },\n    pointerLeave: {\n      registrationName: \"onPointerLeave\",\n      dependencies: [\"pointerout\", \"pointerover\"]\n    }\n  },\n  Ye = {\n    eventTypes: Xe,\n    extractEvents: function (a, b, c, d, e) {\n      var f = \"mouseover\" === a || \"pointerover\" === a,\n        g = \"mouseout\" === a || \"pointerout\" === a;\n      if (f && 0 === (e & 32) && (c.relatedTarget || c.fromElement) || !g && !f) return null;\n      f = d.window === d ? d : (f = d.ownerDocument) ? f.defaultView || f.parentWindow : window;\n      if (g) {\n        if (g = b, b = (b = c.relatedTarget || c.toElement) ? tc(b) : null, null !== b) {\n          var h = dc(b);\n          if (b !== h || 5 !== b.tag && 6 !== b.tag) b = null;\n        }\n      } else g = null;\n      if (g === b) return null;\n      if (\"mouseout\" === a || \"mouseover\" === a) {\n        var k = Ve;\n        var l = Xe.mouseLeave;\n        var m = Xe.mouseEnter;\n        var p = \"mouse\";\n      } else if (\"pointerout\" === a || \"pointerover\" === a) k = We, l = Xe.pointerLeave, m = Xe.pointerEnter, p = \"pointer\";\n      a = null == g ? f : Pd(g);\n      f = null == b ? f : Pd(b);\n      l = k.getPooled(l, g, c, d);\n      l.type = p + \"leave\";\n      l.target = a;\n      l.relatedTarget = f;\n      c = k.getPooled(m, b, c, d);\n      c.type = p + \"enter\";\n      c.target = f;\n      c.relatedTarget = a;\n      d = g;\n      p = b;\n      if (d && p) a: {\n        k = d;\n        m = p;\n        g = 0;\n        for (a = k; a; a = Rd(a)) g++;\n        a = 0;\n        for (b = m; b; b = Rd(b)) a++;\n        for (; 0 < g - a;) k = Rd(k), g--;\n        for (; 0 < a - g;) m = Rd(m), a--;\n        for (; g--;) {\n          if (k === m || k === m.alternate) break a;\n          k = Rd(k);\n          m = Rd(m);\n        }\n        k = null;\n      } else k = null;\n      m = k;\n      for (k = []; d && d !== m;) {\n        g = d.alternate;\n        if (null !== g && g === m) break;\n        k.push(d);\n        d = Rd(d);\n      }\n      for (d = []; p && p !== m;) {\n        g = p.alternate;\n        if (null !== g && g === m) break;\n        d.push(p);\n        p = Rd(p);\n      }\n      for (p = 0; p < k.length; p++) Vd(k[p], \"bubbled\", l);\n      for (p = d.length; 0 < p--;) Vd(d[p], \"captured\", c);\n      return 0 === (e & 64) ? [l] : [l, c];\n    }\n  };\nfunction Ze(a, b) {\n  return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;\n}\nvar $e = \"function\" === typeof Object.is ? Object.is : Ze,\n  af = Object.prototype.hasOwnProperty;\nfunction bf(a, b) {\n  if ($e(a, b)) return !0;\n  if (\"object\" !== typeof a || null === a || \"object\" !== typeof b || null === b) return !1;\n  var c = Object.keys(a),\n    d = Object.keys(b);\n  if (c.length !== d.length) return !1;\n  for (d = 0; d < c.length; d++) if (!af.call(b, c[d]) || !$e(a[c[d]], b[c[d]])) return !1;\n  return !0;\n}\nvar cf = ya && \"documentMode\" in document && 11 >= document.documentMode,\n  df = {\n    select: {\n      phasedRegistrationNames: {\n        bubbled: \"onSelect\",\n        captured: \"onSelectCapture\"\n      },\n      dependencies: \"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange\".split(\" \")\n    }\n  },\n  ef = null,\n  ff = null,\n  gf = null,\n  hf = !1;\nfunction jf(a, b) {\n  var c = b.window === b ? b.document : 9 === b.nodeType ? b : b.ownerDocument;\n  if (hf || null == ef || ef !== td(c)) return null;\n  c = ef;\n  \"selectionStart\" in c && yd(c) ? c = {\n    start: c.selectionStart,\n    end: c.selectionEnd\n  } : (c = (c.ownerDocument && c.ownerDocument.defaultView || window).getSelection(), c = {\n    anchorNode: c.anchorNode,\n    anchorOffset: c.anchorOffset,\n    focusNode: c.focusNode,\n    focusOffset: c.focusOffset\n  });\n  return gf && bf(gf, c) ? null : (gf = c, a = G.getPooled(df.select, ff, a, b), a.type = \"select\", a.target = ef, Xd(a), a);\n}\nvar kf = {\n    eventTypes: df,\n    extractEvents: function (a, b, c, d, e, f) {\n      e = f || (d.window === d ? d.document : 9 === d.nodeType ? d : d.ownerDocument);\n      if (!(f = !e)) {\n        a: {\n          e = cc(e);\n          f = wa.onSelect;\n          for (var g = 0; g < f.length; g++) if (!e.has(f[g])) {\n            e = !1;\n            break a;\n          }\n          e = !0;\n        }\n        f = !e;\n      }\n      if (f) return null;\n      e = b ? Pd(b) : window;\n      switch (a) {\n        case \"focus\":\n          if (xe(e) || \"true\" === e.contentEditable) ef = e, ff = b, gf = null;\n          break;\n        case \"blur\":\n          gf = ff = ef = null;\n          break;\n        case \"mousedown\":\n          hf = !0;\n          break;\n        case \"contextmenu\":\n        case \"mouseup\":\n        case \"dragend\":\n          return hf = !1, jf(c, d);\n        case \"selectionchange\":\n          if (cf) break;\n        case \"keydown\":\n        case \"keyup\":\n          return jf(c, d);\n      }\n      return null;\n    }\n  },\n  lf = G.extend({\n    animationName: null,\n    elapsedTime: null,\n    pseudoElement: null\n  }),\n  mf = G.extend({\n    clipboardData: function (a) {\n      return \"clipboardData\" in a ? a.clipboardData : window.clipboardData;\n    }\n  }),\n  nf = Ne.extend({\n    relatedTarget: null\n  });\nfunction of(a) {\n  var b = a.keyCode;\n  \"charCode\" in a ? (a = a.charCode, 0 === a && 13 === b && (a = 13)) : a = b;\n  10 === a && (a = 13);\n  return 32 <= a || 13 === a ? a : 0;\n}\nvar pf = {\n    Esc: \"Escape\",\n    Spacebar: \" \",\n    Left: \"ArrowLeft\",\n    Up: \"ArrowUp\",\n    Right: \"ArrowRight\",\n    Down: \"ArrowDown\",\n    Del: \"Delete\",\n    Win: \"OS\",\n    Menu: \"ContextMenu\",\n    Apps: \"ContextMenu\",\n    Scroll: \"ScrollLock\",\n    MozPrintableKey: \"Unidentified\"\n  },\n  qf = {\n    8: \"Backspace\",\n    9: \"Tab\",\n    12: \"Clear\",\n    13: \"Enter\",\n    16: \"Shift\",\n    17: \"Control\",\n    18: \"Alt\",\n    19: \"Pause\",\n    20: \"CapsLock\",\n    27: \"Escape\",\n    32: \" \",\n    33: \"PageUp\",\n    34: \"PageDown\",\n    35: \"End\",\n    36: \"Home\",\n    37: \"ArrowLeft\",\n    38: \"ArrowUp\",\n    39: \"ArrowRight\",\n    40: \"ArrowDown\",\n    45: \"Insert\",\n    46: \"Delete\",\n    112: \"F1\",\n    113: \"F2\",\n    114: \"F3\",\n    115: \"F4\",\n    116: \"F5\",\n    117: \"F6\",\n    118: \"F7\",\n    119: \"F8\",\n    120: \"F9\",\n    121: \"F10\",\n    122: \"F11\",\n    123: \"F12\",\n    144: \"NumLock\",\n    145: \"ScrollLock\",\n    224: \"Meta\"\n  },\n  rf = Ne.extend({\n    key: function (a) {\n      if (a.key) {\n        var b = pf[a.key] || a.key;\n        if (\"Unidentified\" !== b) return b;\n      }\n      return \"keypress\" === a.type ? (a = of(a), 13 === a ? \"Enter\" : String.fromCharCode(a)) : \"keydown\" === a.type || \"keyup\" === a.type ? qf[a.keyCode] || \"Unidentified\" : \"\";\n    },\n    location: null,\n    ctrlKey: null,\n    shiftKey: null,\n    altKey: null,\n    metaKey: null,\n    repeat: null,\n    locale: null,\n    getModifierState: Qe,\n    charCode: function (a) {\n      return \"keypress\" === a.type ? of(a) : 0;\n    },\n    keyCode: function (a) {\n      return \"keydown\" === a.type || \"keyup\" === a.type ? a.keyCode : 0;\n    },\n    which: function (a) {\n      return \"keypress\" === a.type ? of(a) : \"keydown\" === a.type || \"keyup\" === a.type ? a.keyCode : 0;\n    }\n  }),\n  sf = Ve.extend({\n    dataTransfer: null\n  }),\n  tf = Ne.extend({\n    touches: null,\n    targetTouches: null,\n    changedTouches: null,\n    altKey: null,\n    metaKey: null,\n    ctrlKey: null,\n    shiftKey: null,\n    getModifierState: Qe\n  }),\n  uf = G.extend({\n    propertyName: null,\n    elapsedTime: null,\n    pseudoElement: null\n  }),\n  vf = Ve.extend({\n    deltaX: function (a) {\n      return \"deltaX\" in a ? a.deltaX : \"wheelDeltaX\" in a ? -a.wheelDeltaX : 0;\n    },\n    deltaY: function (a) {\n      return \"deltaY\" in a ? a.deltaY : \"wheelDeltaY\" in a ? -a.wheelDeltaY : \"wheelDelta\" in a ? -a.wheelDelta : 0;\n    },\n    deltaZ: null,\n    deltaMode: null\n  }),\n  wf = {\n    eventTypes: Wc,\n    extractEvents: function (a, b, c, d) {\n      var e = Yc.get(a);\n      if (!e) return null;\n      switch (a) {\n        case \"keypress\":\n          if (0 === of(c)) return null;\n        case \"keydown\":\n        case \"keyup\":\n          a = rf;\n          break;\n        case \"blur\":\n        case \"focus\":\n          a = nf;\n          break;\n        case \"click\":\n          if (2 === c.button) return null;\n        case \"auxclick\":\n        case \"dblclick\":\n        case \"mousedown\":\n        case \"mousemove\":\n        case \"mouseup\":\n        case \"mouseout\":\n        case \"mouseover\":\n        case \"contextmenu\":\n          a = Ve;\n          break;\n        case \"drag\":\n        case \"dragend\":\n        case \"dragenter\":\n        case \"dragexit\":\n        case \"dragleave\":\n        case \"dragover\":\n        case \"dragstart\":\n        case \"drop\":\n          a = sf;\n          break;\n        case \"touchcancel\":\n        case \"touchend\":\n        case \"touchmove\":\n        case \"touchstart\":\n          a = tf;\n          break;\n        case Xb:\n        case Yb:\n        case Zb:\n          a = lf;\n          break;\n        case $b:\n          a = uf;\n          break;\n        case \"scroll\":\n          a = Ne;\n          break;\n        case \"wheel\":\n          a = vf;\n          break;\n        case \"copy\":\n        case \"cut\":\n        case \"paste\":\n          a = mf;\n          break;\n        case \"gotpointercapture\":\n        case \"lostpointercapture\":\n        case \"pointercancel\":\n        case \"pointerdown\":\n        case \"pointermove\":\n        case \"pointerout\":\n        case \"pointerover\":\n        case \"pointerup\":\n          a = We;\n          break;\n        default:\n          a = G;\n      }\n      b = a.getPooled(e, b, c, d);\n      Xd(b);\n      return b;\n    }\n  };\nif (pa) throw Error(u(101));\npa = Array.prototype.slice.call(\"ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin\".split(\" \"));\nra();\nvar xf = Nc;\nla = Qd;\nma = xf;\nna = Pd;\nxa({\n  SimpleEventPlugin: wf,\n  EnterLeaveEventPlugin: Ye,\n  ChangeEventPlugin: Me,\n  SelectEventPlugin: kf,\n  BeforeInputEventPlugin: ve\n});\nvar yf = [],\n  zf = -1;\nfunction H(a) {\n  0 > zf || (a.current = yf[zf], yf[zf] = null, zf--);\n}\nfunction I(a, b) {\n  zf++;\n  yf[zf] = a.current;\n  a.current = b;\n}\nvar Af = {},\n  J = {\n    current: Af\n  },\n  K = {\n    current: !1\n  },\n  Bf = Af;\nfunction Cf(a, b) {\n  var c = a.type.contextTypes;\n  if (!c) return Af;\n  var d = a.stateNode;\n  if (d && d.__reactInternalMemoizedUnmaskedChildContext === b) return d.__reactInternalMemoizedMaskedChildContext;\n  var e = {},\n    f;\n  for (f in c) e[f] = b[f];\n  d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);\n  return e;\n}\nfunction L(a) {\n  a = a.childContextTypes;\n  return null !== a && void 0 !== a;\n}\nfunction Df() {\n  H(K);\n  H(J);\n}\nfunction Ef(a, b, c) {\n  if (J.current !== Af) throw Error(u(168));\n  I(J, b);\n  I(K, c);\n}\nfunction Ff(a, b, c) {\n  var d = a.stateNode;\n  a = b.childContextTypes;\n  if (\"function\" !== typeof d.getChildContext) return c;\n  d = d.getChildContext();\n  for (var e in d) if (!(e in a)) throw Error(u(108, pb(b) || \"Unknown\", e));\n  return n({}, c, {}, d);\n}\nfunction Gf(a) {\n  a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || Af;\n  Bf = J.current;\n  I(J, a);\n  I(K, K.current);\n  return !0;\n}\nfunction Hf(a, b, c) {\n  var d = a.stateNode;\n  if (!d) throw Error(u(169));\n  c ? (a = Ff(a, b, Bf), d.__reactInternalMemoizedMergedChildContext = a, H(K), H(J), I(J, a)) : H(K);\n  I(K, c);\n}\nvar If = r.unstable_runWithPriority,\n  Jf = r.unstable_scheduleCallback,\n  Kf = r.unstable_cancelCallback,\n  Lf = r.unstable_requestPaint,\n  Mf = r.unstable_now,\n  Nf = r.unstable_getCurrentPriorityLevel,\n  Of = r.unstable_ImmediatePriority,\n  Pf = r.unstable_UserBlockingPriority,\n  Qf = r.unstable_NormalPriority,\n  Rf = r.unstable_LowPriority,\n  Sf = r.unstable_IdlePriority,\n  Tf = {},\n  Uf = r.unstable_shouldYield,\n  Vf = void 0 !== Lf ? Lf : function () {},\n  Wf = null,\n  Xf = null,\n  Yf = !1,\n  Zf = Mf(),\n  $f = 1E4 > Zf ? Mf : function () {\n    return Mf() - Zf;\n  };\nfunction ag() {\n  switch (Nf()) {\n    case Of:\n      return 99;\n    case Pf:\n      return 98;\n    case Qf:\n      return 97;\n    case Rf:\n      return 96;\n    case Sf:\n      return 95;\n    default:\n      throw Error(u(332));\n  }\n}\nfunction bg(a) {\n  switch (a) {\n    case 99:\n      return Of;\n    case 98:\n      return Pf;\n    case 97:\n      return Qf;\n    case 96:\n      return Rf;\n    case 95:\n      return Sf;\n    default:\n      throw Error(u(332));\n  }\n}\nfunction cg(a, b) {\n  a = bg(a);\n  return If(a, b);\n}\nfunction dg(a, b, c) {\n  a = bg(a);\n  return Jf(a, b, c);\n}\nfunction eg(a) {\n  null === Wf ? (Wf = [a], Xf = Jf(Of, fg)) : Wf.push(a);\n  return Tf;\n}\nfunction gg() {\n  if (null !== Xf) {\n    var a = Xf;\n    Xf = null;\n    Kf(a);\n  }\n  fg();\n}\nfunction fg() {\n  if (!Yf && null !== Wf) {\n    Yf = !0;\n    var a = 0;\n    try {\n      var b = Wf;\n      cg(99, function () {\n        for (; a < b.length; a++) {\n          var c = b[a];\n          do c = c(!0); while (null !== c);\n        }\n      });\n      Wf = null;\n    } catch (c) {\n      throw null !== Wf && (Wf = Wf.slice(a + 1)), Jf(Of, gg), c;\n    } finally {\n      Yf = !1;\n    }\n  }\n}\nfunction hg(a, b, c) {\n  c /= 10;\n  return 1073741821 - (((1073741821 - a + b / 10) / c | 0) + 1) * c;\n}\nfunction ig(a, b) {\n  if (a && a.defaultProps) {\n    b = n({}, b);\n    a = a.defaultProps;\n    for (var c in a) void 0 === b[c] && (b[c] = a[c]);\n  }\n  return b;\n}\nvar jg = {\n    current: null\n  },\n  kg = null,\n  lg = null,\n  mg = null;\nfunction ng() {\n  mg = lg = kg = null;\n}\nfunction og(a) {\n  var b = jg.current;\n  H(jg);\n  a.type._context._currentValue = b;\n}\nfunction pg(a, b) {\n  for (; null !== a;) {\n    var c = a.alternate;\n    if (a.childExpirationTime < b) a.childExpirationTime = b, null !== c && c.childExpirationTime < b && (c.childExpirationTime = b);else if (null !== c && c.childExpirationTime < b) c.childExpirationTime = b;else break;\n    a = a.return;\n  }\n}\nfunction qg(a, b) {\n  kg = a;\n  mg = lg = null;\n  a = a.dependencies;\n  null !== a && null !== a.firstContext && (a.expirationTime >= b && (rg = !0), a.firstContext = null);\n}\nfunction sg(a, b) {\n  if (mg !== a && !1 !== b && 0 !== b) {\n    if (\"number\" !== typeof b || 1073741823 === b) mg = a, b = 1073741823;\n    b = {\n      context: a,\n      observedBits: b,\n      next: null\n    };\n    if (null === lg) {\n      if (null === kg) throw Error(u(308));\n      lg = b;\n      kg.dependencies = {\n        expirationTime: 0,\n        firstContext: b,\n        responders: null\n      };\n    } else lg = lg.next = b;\n  }\n  return a._currentValue;\n}\nvar tg = !1;\nfunction ug(a) {\n  a.updateQueue = {\n    baseState: a.memoizedState,\n    baseQueue: null,\n    shared: {\n      pending: null\n    },\n    effects: null\n  };\n}\nfunction vg(a, b) {\n  a = a.updateQueue;\n  b.updateQueue === a && (b.updateQueue = {\n    baseState: a.baseState,\n    baseQueue: a.baseQueue,\n    shared: a.shared,\n    effects: a.effects\n  });\n}\nfunction wg(a, b) {\n  a = {\n    expirationTime: a,\n    suspenseConfig: b,\n    tag: 0,\n    payload: null,\n    callback: null,\n    next: null\n  };\n  return a.next = a;\n}\nfunction xg(a, b) {\n  a = a.updateQueue;\n  if (null !== a) {\n    a = a.shared;\n    var c = a.pending;\n    null === c ? b.next = b : (b.next = c.next, c.next = b);\n    a.pending = b;\n  }\n}\nfunction yg(a, b) {\n  var c = a.alternate;\n  null !== c && vg(c, a);\n  a = a.updateQueue;\n  c = a.baseQueue;\n  null === c ? (a.baseQueue = b.next = b, b.next = b) : (b.next = c.next, c.next = b);\n}\nfunction zg(a, b, c, d) {\n  var e = a.updateQueue;\n  tg = !1;\n  var f = e.baseQueue,\n    g = e.shared.pending;\n  if (null !== g) {\n    if (null !== f) {\n      var h = f.next;\n      f.next = g.next;\n      g.next = h;\n    }\n    f = g;\n    e.shared.pending = null;\n    h = a.alternate;\n    null !== h && (h = h.updateQueue, null !== h && (h.baseQueue = g));\n  }\n  if (null !== f) {\n    h = f.next;\n    var k = e.baseState,\n      l = 0,\n      m = null,\n      p = null,\n      x = null;\n    if (null !== h) {\n      var z = h;\n      do {\n        g = z.expirationTime;\n        if (g < d) {\n          var ca = {\n            expirationTime: z.expirationTime,\n            suspenseConfig: z.suspenseConfig,\n            tag: z.tag,\n            payload: z.payload,\n            callback: z.callback,\n            next: null\n          };\n          null === x ? (p = x = ca, m = k) : x = x.next = ca;\n          g > l && (l = g);\n        } else {\n          null !== x && (x = x.next = {\n            expirationTime: 1073741823,\n            suspenseConfig: z.suspenseConfig,\n            tag: z.tag,\n            payload: z.payload,\n            callback: z.callback,\n            next: null\n          });\n          Ag(g, z.suspenseConfig);\n          a: {\n            var D = a,\n              t = z;\n            g = b;\n            ca = c;\n            switch (t.tag) {\n              case 1:\n                D = t.payload;\n                if (\"function\" === typeof D) {\n                  k = D.call(ca, k, g);\n                  break a;\n                }\n                k = D;\n                break a;\n              case 3:\n                D.effectTag = D.effectTag & -4097 | 64;\n              case 0:\n                D = t.payload;\n                g = \"function\" === typeof D ? D.call(ca, k, g) : D;\n                if (null === g || void 0 === g) break a;\n                k = n({}, k, g);\n                break a;\n              case 2:\n                tg = !0;\n            }\n          }\n          null !== z.callback && (a.effectTag |= 32, g = e.effects, null === g ? e.effects = [z] : g.push(z));\n        }\n        z = z.next;\n        if (null === z || z === h) if (g = e.shared.pending, null === g) break;else z = f.next = g.next, g.next = h, e.baseQueue = f = g, e.shared.pending = null;\n      } while (1);\n    }\n    null === x ? m = k : x.next = p;\n    e.baseState = m;\n    e.baseQueue = x;\n    Bg(l);\n    a.expirationTime = l;\n    a.memoizedState = k;\n  }\n}\nfunction Cg(a, b, c) {\n  a = b.effects;\n  b.effects = null;\n  if (null !== a) for (b = 0; b < a.length; b++) {\n    var d = a[b],\n      e = d.callback;\n    if (null !== e) {\n      d.callback = null;\n      d = e;\n      e = c;\n      if (\"function\" !== typeof d) throw Error(u(191, d));\n      d.call(e);\n    }\n  }\n}\nvar Dg = Wa.ReactCurrentBatchConfig,\n  Eg = new aa.Component().refs;\nfunction Fg(a, b, c, d) {\n  b = a.memoizedState;\n  c = c(d, b);\n  c = null === c || void 0 === c ? b : n({}, b, c);\n  a.memoizedState = c;\n  0 === a.expirationTime && (a.updateQueue.baseState = c);\n}\nvar Jg = {\n  isMounted: function (a) {\n    return (a = a._reactInternalFiber) ? dc(a) === a : !1;\n  },\n  enqueueSetState: function (a, b, c) {\n    a = a._reactInternalFiber;\n    var d = Gg(),\n      e = Dg.suspense;\n    d = Hg(d, a, e);\n    e = wg(d, e);\n    e.payload = b;\n    void 0 !== c && null !== c && (e.callback = c);\n    xg(a, e);\n    Ig(a, d);\n  },\n  enqueueReplaceState: function (a, b, c) {\n    a = a._reactInternalFiber;\n    var d = Gg(),\n      e = Dg.suspense;\n    d = Hg(d, a, e);\n    e = wg(d, e);\n    e.tag = 1;\n    e.payload = b;\n    void 0 !== c && null !== c && (e.callback = c);\n    xg(a, e);\n    Ig(a, d);\n  },\n  enqueueForceUpdate: function (a, b) {\n    a = a._reactInternalFiber;\n    var c = Gg(),\n      d = Dg.suspense;\n    c = Hg(c, a, d);\n    d = wg(c, d);\n    d.tag = 2;\n    void 0 !== b && null !== b && (d.callback = b);\n    xg(a, d);\n    Ig(a, c);\n  }\n};\nfunction Kg(a, b, c, d, e, f, g) {\n  a = a.stateNode;\n  return \"function\" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d, f, g) : b.prototype && b.prototype.isPureReactComponent ? !bf(c, d) || !bf(e, f) : !0;\n}\nfunction Lg(a, b, c) {\n  var d = !1,\n    e = Af;\n  var f = b.contextType;\n  \"object\" === typeof f && null !== f ? f = sg(f) : (e = L(b) ? Bf : J.current, d = b.contextTypes, f = (d = null !== d && void 0 !== d) ? Cf(a, e) : Af);\n  b = new b(c, f);\n  a.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null;\n  b.updater = Jg;\n  a.stateNode = b;\n  b._reactInternalFiber = a;\n  d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f);\n  return b;\n}\nfunction Mg(a, b, c, d) {\n  a = b.state;\n  \"function\" === typeof b.componentWillReceiveProps && b.componentWillReceiveProps(c, d);\n  \"function\" === typeof b.UNSAFE_componentWillReceiveProps && b.UNSAFE_componentWillReceiveProps(c, d);\n  b.state !== a && Jg.enqueueReplaceState(b, b.state, null);\n}\nfunction Ng(a, b, c, d) {\n  var e = a.stateNode;\n  e.props = c;\n  e.state = a.memoizedState;\n  e.refs = Eg;\n  ug(a);\n  var f = b.contextType;\n  \"object\" === typeof f && null !== f ? e.context = sg(f) : (f = L(b) ? Bf : J.current, e.context = Cf(a, f));\n  zg(a, c, e, d);\n  e.state = a.memoizedState;\n  f = b.getDerivedStateFromProps;\n  \"function\" === typeof f && (Fg(a, b, f, c), e.state = a.memoizedState);\n  \"function\" === typeof b.getDerivedStateFromProps || \"function\" === typeof e.getSnapshotBeforeUpdate || \"function\" !== typeof e.UNSAFE_componentWillMount && \"function\" !== typeof e.componentWillMount || (b = e.state, \"function\" === typeof e.componentWillMount && e.componentWillMount(), \"function\" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b !== e.state && Jg.enqueueReplaceState(e, e.state, null), zg(a, c, e, d), e.state = a.memoizedState);\n  \"function\" === typeof e.componentDidMount && (a.effectTag |= 4);\n}\nvar Og = Array.isArray;\nfunction Pg(a, b, c) {\n  a = c.ref;\n  if (null !== a && \"function\" !== typeof a && \"object\" !== typeof a) {\n    if (c._owner) {\n      c = c._owner;\n      if (c) {\n        if (1 !== c.tag) throw Error(u(309));\n        var d = c.stateNode;\n      }\n      if (!d) throw Error(u(147, a));\n      var e = \"\" + a;\n      if (null !== b && null !== b.ref && \"function\" === typeof b.ref && b.ref._stringRef === e) return b.ref;\n      b = function (a) {\n        var b = d.refs;\n        b === Eg && (b = d.refs = {});\n        null === a ? delete b[e] : b[e] = a;\n      };\n      b._stringRef = e;\n      return b;\n    }\n    if (\"string\" !== typeof a) throw Error(u(284));\n    if (!c._owner) throw Error(u(290, a));\n  }\n  return a;\n}\nfunction Qg(a, b) {\n  if (\"textarea\" !== a.type) throw Error(u(31, \"[object Object]\" === Object.prototype.toString.call(b) ? \"object with keys {\" + Object.keys(b).join(\", \") + \"}\" : b, \"\"));\n}\nfunction Rg(a) {\n  function b(b, c) {\n    if (a) {\n      var d = b.lastEffect;\n      null !== d ? (d.nextEffect = c, b.lastEffect = c) : b.firstEffect = b.lastEffect = c;\n      c.nextEffect = null;\n      c.effectTag = 8;\n    }\n  }\n  function c(c, d) {\n    if (!a) return null;\n    for (; null !== d;) b(c, d), d = d.sibling;\n    return null;\n  }\n  function d(a, b) {\n    for (a = new Map(); null !== b;) null !== b.key ? a.set(b.key, b) : a.set(b.index, b), b = b.sibling;\n    return a;\n  }\n  function e(a, b) {\n    a = Sg(a, b);\n    a.index = 0;\n    a.sibling = null;\n    return a;\n  }\n  function f(b, c, d) {\n    b.index = d;\n    if (!a) return c;\n    d = b.alternate;\n    if (null !== d) return d = d.index, d < c ? (b.effectTag = 2, c) : d;\n    b.effectTag = 2;\n    return c;\n  }\n  function g(b) {\n    a && null === b.alternate && (b.effectTag = 2);\n    return b;\n  }\n  function h(a, b, c, d) {\n    if (null === b || 6 !== b.tag) return b = Tg(c, a.mode, d), b.return = a, b;\n    b = e(b, c);\n    b.return = a;\n    return b;\n  }\n  function k(a, b, c, d) {\n    if (null !== b && b.elementType === c.type) return d = e(b, c.props), d.ref = Pg(a, b, c), d.return = a, d;\n    d = Ug(c.type, c.key, c.props, null, a.mode, d);\n    d.ref = Pg(a, b, c);\n    d.return = a;\n    return d;\n  }\n  function l(a, b, c, d) {\n    if (null === b || 4 !== b.tag || b.stateNode.containerInfo !== c.containerInfo || b.stateNode.implementation !== c.implementation) return b = Vg(c, a.mode, d), b.return = a, b;\n    b = e(b, c.children || []);\n    b.return = a;\n    return b;\n  }\n  function m(a, b, c, d, f) {\n    if (null === b || 7 !== b.tag) return b = Wg(c, a.mode, d, f), b.return = a, b;\n    b = e(b, c);\n    b.return = a;\n    return b;\n  }\n  function p(a, b, c) {\n    if (\"string\" === typeof b || \"number\" === typeof b) return b = Tg(\"\" + b, a.mode, c), b.return = a, b;\n    if (\"object\" === typeof b && null !== b) {\n      switch (b.$$typeof) {\n        case Za:\n          return c = Ug(b.type, b.key, b.props, null, a.mode, c), c.ref = Pg(a, null, b), c.return = a, c;\n        case $a:\n          return b = Vg(b, a.mode, c), b.return = a, b;\n      }\n      if (Og(b) || nb(b)) return b = Wg(b, a.mode, c, null), b.return = a, b;\n      Qg(a, b);\n    }\n    return null;\n  }\n  function x(a, b, c, d) {\n    var e = null !== b ? b.key : null;\n    if (\"string\" === typeof c || \"number\" === typeof c) return null !== e ? null : h(a, b, \"\" + c, d);\n    if (\"object\" === typeof c && null !== c) {\n      switch (c.$$typeof) {\n        case Za:\n          return c.key === e ? c.type === ab ? m(a, b, c.props.children, d, e) : k(a, b, c, d) : null;\n        case $a:\n          return c.key === e ? l(a, b, c, d) : null;\n      }\n      if (Og(c) || nb(c)) return null !== e ? null : m(a, b, c, d, null);\n      Qg(a, c);\n    }\n    return null;\n  }\n  function z(a, b, c, d, e) {\n    if (\"string\" === typeof d || \"number\" === typeof d) return a = a.get(c) || null, h(b, a, \"\" + d, e);\n    if (\"object\" === typeof d && null !== d) {\n      switch (d.$$typeof) {\n        case Za:\n          return a = a.get(null === d.key ? c : d.key) || null, d.type === ab ? m(b, a, d.props.children, e, d.key) : k(b, a, d, e);\n        case $a:\n          return a = a.get(null === d.key ? c : d.key) || null, l(b, a, d, e);\n      }\n      if (Og(d) || nb(d)) return a = a.get(c) || null, m(b, a, d, e, null);\n      Qg(b, d);\n    }\n    return null;\n  }\n  function ca(e, g, h, k) {\n    for (var l = null, t = null, m = g, y = g = 0, A = null; null !== m && y < h.length; y++) {\n      m.index > y ? (A = m, m = null) : A = m.sibling;\n      var q = x(e, m, h[y], k);\n      if (null === q) {\n        null === m && (m = A);\n        break;\n      }\n      a && m && null === q.alternate && b(e, m);\n      g = f(q, g, y);\n      null === t ? l = q : t.sibling = q;\n      t = q;\n      m = A;\n    }\n    if (y === h.length) return c(e, m), l;\n    if (null === m) {\n      for (; y < h.length; y++) m = p(e, h[y], k), null !== m && (g = f(m, g, y), null === t ? l = m : t.sibling = m, t = m);\n      return l;\n    }\n    for (m = d(e, m); y < h.length; y++) A = z(m, e, y, h[y], k), null !== A && (a && null !== A.alternate && m.delete(null === A.key ? y : A.key), g = f(A, g, y), null === t ? l = A : t.sibling = A, t = A);\n    a && m.forEach(function (a) {\n      return b(e, a);\n    });\n    return l;\n  }\n  function D(e, g, h, l) {\n    var k = nb(h);\n    if (\"function\" !== typeof k) throw Error(u(150));\n    h = k.call(h);\n    if (null == h) throw Error(u(151));\n    for (var m = k = null, t = g, y = g = 0, A = null, q = h.next(); null !== t && !q.done; y++, q = h.next()) {\n      t.index > y ? (A = t, t = null) : A = t.sibling;\n      var D = x(e, t, q.value, l);\n      if (null === D) {\n        null === t && (t = A);\n        break;\n      }\n      a && t && null === D.alternate && b(e, t);\n      g = f(D, g, y);\n      null === m ? k = D : m.sibling = D;\n      m = D;\n      t = A;\n    }\n    if (q.done) return c(e, t), k;\n    if (null === t) {\n      for (; !q.done; y++, q = h.next()) q = p(e, q.value, l), null !== q && (g = f(q, g, y), null === m ? k = q : m.sibling = q, m = q);\n      return k;\n    }\n    for (t = d(e, t); !q.done; y++, q = h.next()) q = z(t, e, y, q.value, l), null !== q && (a && null !== q.alternate && t.delete(null === q.key ? y : q.key), g = f(q, g, y), null === m ? k = q : m.sibling = q, m = q);\n    a && t.forEach(function (a) {\n      return b(e, a);\n    });\n    return k;\n  }\n  return function (a, d, f, h) {\n    var k = \"object\" === typeof f && null !== f && f.type === ab && null === f.key;\n    k && (f = f.props.children);\n    var l = \"object\" === typeof f && null !== f;\n    if (l) switch (f.$$typeof) {\n      case Za:\n        a: {\n          l = f.key;\n          for (k = d; null !== k;) {\n            if (k.key === l) {\n              switch (k.tag) {\n                case 7:\n                  if (f.type === ab) {\n                    c(a, k.sibling);\n                    d = e(k, f.props.children);\n                    d.return = a;\n                    a = d;\n                    break a;\n                  }\n                  break;\n                default:\n                  if (k.elementType === f.type) {\n                    c(a, k.sibling);\n                    d = e(k, f.props);\n                    d.ref = Pg(a, k, f);\n                    d.return = a;\n                    a = d;\n                    break a;\n                  }\n              }\n              c(a, k);\n              break;\n            } else b(a, k);\n            k = k.sibling;\n          }\n          f.type === ab ? (d = Wg(f.props.children, a.mode, h, f.key), d.return = a, a = d) : (h = Ug(f.type, f.key, f.props, null, a.mode, h), h.ref = Pg(a, d, f), h.return = a, a = h);\n        }\n        return g(a);\n      case $a:\n        a: {\n          for (k = f.key; null !== d;) {\n            if (d.key === k) {\n              if (4 === d.tag && d.stateNode.containerInfo === f.containerInfo && d.stateNode.implementation === f.implementation) {\n                c(a, d.sibling);\n                d = e(d, f.children || []);\n                d.return = a;\n                a = d;\n                break a;\n              } else {\n                c(a, d);\n                break;\n              }\n            } else b(a, d);\n            d = d.sibling;\n          }\n          d = Vg(f, a.mode, h);\n          d.return = a;\n          a = d;\n        }\n        return g(a);\n    }\n    if (\"string\" === typeof f || \"number\" === typeof f) return f = \"\" + f, null !== d && 6 === d.tag ? (c(a, d.sibling), d = e(d, f), d.return = a, a = d) : (c(a, d), d = Tg(f, a.mode, h), d.return = a, a = d), g(a);\n    if (Og(f)) return ca(a, d, f, h);\n    if (nb(f)) return D(a, d, f, h);\n    l && Qg(a, f);\n    if (\"undefined\" === typeof f && !k) switch (a.tag) {\n      case 1:\n      case 0:\n        throw a = a.type, Error(u(152, a.displayName || a.name || \"Component\"));\n    }\n    return c(a, d);\n  };\n}\nvar Xg = Rg(!0),\n  Yg = Rg(!1),\n  Zg = {},\n  $g = {\n    current: Zg\n  },\n  ah = {\n    current: Zg\n  },\n  bh = {\n    current: Zg\n  };\nfunction ch(a) {\n  if (a === Zg) throw Error(u(174));\n  return a;\n}\nfunction dh(a, b) {\n  I(bh, b);\n  I(ah, a);\n  I($g, Zg);\n  a = b.nodeType;\n  switch (a) {\n    case 9:\n    case 11:\n      b = (b = b.documentElement) ? b.namespaceURI : Ob(null, \"\");\n      break;\n    default:\n      a = 8 === a ? b.parentNode : b, b = a.namespaceURI || null, a = a.tagName, b = Ob(b, a);\n  }\n  H($g);\n  I($g, b);\n}\nfunction eh() {\n  H($g);\n  H(ah);\n  H(bh);\n}\nfunction fh(a) {\n  ch(bh.current);\n  var b = ch($g.current);\n  var c = Ob(b, a.type);\n  b !== c && (I(ah, a), I($g, c));\n}\nfunction gh(a) {\n  ah.current === a && (H($g), H(ah));\n}\nvar M = {\n  current: 0\n};\nfunction hh(a) {\n  for (var b = a; null !== b;) {\n    if (13 === b.tag) {\n      var c = b.memoizedState;\n      if (null !== c && (c = c.dehydrated, null === c || c.data === Bd || c.data === Cd)) return b;\n    } else if (19 === b.tag && void 0 !== b.memoizedProps.revealOrder) {\n      if (0 !== (b.effectTag & 64)) return b;\n    } else if (null !== b.child) {\n      b.child.return = b;\n      b = b.child;\n      continue;\n    }\n    if (b === a) break;\n    for (; null === b.sibling;) {\n      if (null === b.return || b.return === a) return null;\n      b = b.return;\n    }\n    b.sibling.return = b.return;\n    b = b.sibling;\n  }\n  return null;\n}\nfunction ih(a, b) {\n  return {\n    responder: a,\n    props: b\n  };\n}\nvar jh = Wa.ReactCurrentDispatcher,\n  kh = Wa.ReactCurrentBatchConfig,\n  lh = 0,\n  N = null,\n  O = null,\n  P = null,\n  mh = !1;\nfunction Q() {\n  throw Error(u(321));\n}\nfunction nh(a, b) {\n  if (null === b) return !1;\n  for (var c = 0; c < b.length && c < a.length; c++) if (!$e(a[c], b[c])) return !1;\n  return !0;\n}\nfunction oh(a, b, c, d, e, f) {\n  lh = f;\n  N = b;\n  b.memoizedState = null;\n  b.updateQueue = null;\n  b.expirationTime = 0;\n  jh.current = null === a || null === a.memoizedState ? ph : qh;\n  a = c(d, e);\n  if (b.expirationTime === lh) {\n    f = 0;\n    do {\n      b.expirationTime = 0;\n      if (!(25 > f)) throw Error(u(301));\n      f += 1;\n      P = O = null;\n      b.updateQueue = null;\n      jh.current = rh;\n      a = c(d, e);\n    } while (b.expirationTime === lh);\n  }\n  jh.current = sh;\n  b = null !== O && null !== O.next;\n  lh = 0;\n  P = O = N = null;\n  mh = !1;\n  if (b) throw Error(u(300));\n  return a;\n}\nfunction th() {\n  var a = {\n    memoizedState: null,\n    baseState: null,\n    baseQueue: null,\n    queue: null,\n    next: null\n  };\n  null === P ? N.memoizedState = P = a : P = P.next = a;\n  return P;\n}\nfunction uh() {\n  if (null === O) {\n    var a = N.alternate;\n    a = null !== a ? a.memoizedState : null;\n  } else a = O.next;\n  var b = null === P ? N.memoizedState : P.next;\n  if (null !== b) P = b, O = a;else {\n    if (null === a) throw Error(u(310));\n    O = a;\n    a = {\n      memoizedState: O.memoizedState,\n      baseState: O.baseState,\n      baseQueue: O.baseQueue,\n      queue: O.queue,\n      next: null\n    };\n    null === P ? N.memoizedState = P = a : P = P.next = a;\n  }\n  return P;\n}\nfunction vh(a, b) {\n  return \"function\" === typeof b ? b(a) : b;\n}\nfunction wh(a) {\n  var b = uh(),\n    c = b.queue;\n  if (null === c) throw Error(u(311));\n  c.lastRenderedReducer = a;\n  var d = O,\n    e = d.baseQueue,\n    f = c.pending;\n  if (null !== f) {\n    if (null !== e) {\n      var g = e.next;\n      e.next = f.next;\n      f.next = g;\n    }\n    d.baseQueue = e = f;\n    c.pending = null;\n  }\n  if (null !== e) {\n    e = e.next;\n    d = d.baseState;\n    var h = g = f = null,\n      k = e;\n    do {\n      var l = k.expirationTime;\n      if (l < lh) {\n        var m = {\n          expirationTime: k.expirationTime,\n          suspenseConfig: k.suspenseConfig,\n          action: k.action,\n          eagerReducer: k.eagerReducer,\n          eagerState: k.eagerState,\n          next: null\n        };\n        null === h ? (g = h = m, f = d) : h = h.next = m;\n        l > N.expirationTime && (N.expirationTime = l, Bg(l));\n      } else null !== h && (h = h.next = {\n        expirationTime: 1073741823,\n        suspenseConfig: k.suspenseConfig,\n        action: k.action,\n        eagerReducer: k.eagerReducer,\n        eagerState: k.eagerState,\n        next: null\n      }), Ag(l, k.suspenseConfig), d = k.eagerReducer === a ? k.eagerState : a(d, k.action);\n      k = k.next;\n    } while (null !== k && k !== e);\n    null === h ? f = d : h.next = g;\n    $e(d, b.memoizedState) || (rg = !0);\n    b.memoizedState = d;\n    b.baseState = f;\n    b.baseQueue = h;\n    c.lastRenderedState = d;\n  }\n  return [b.memoizedState, c.dispatch];\n}\nfunction xh(a) {\n  var b = uh(),\n    c = b.queue;\n  if (null === c) throw Error(u(311));\n  c.lastRenderedReducer = a;\n  var d = c.dispatch,\n    e = c.pending,\n    f = b.memoizedState;\n  if (null !== e) {\n    c.pending = null;\n    var g = e = e.next;\n    do f = a(f, g.action), g = g.next; while (g !== e);\n    $e(f, b.memoizedState) || (rg = !0);\n    b.memoizedState = f;\n    null === b.baseQueue && (b.baseState = f);\n    c.lastRenderedState = f;\n  }\n  return [f, d];\n}\nfunction yh(a) {\n  var b = th();\n  \"function\" === typeof a && (a = a());\n  b.memoizedState = b.baseState = a;\n  a = b.queue = {\n    pending: null,\n    dispatch: null,\n    lastRenderedReducer: vh,\n    lastRenderedState: a\n  };\n  a = a.dispatch = zh.bind(null, N, a);\n  return [b.memoizedState, a];\n}\nfunction Ah(a, b, c, d) {\n  a = {\n    tag: a,\n    create: b,\n    destroy: c,\n    deps: d,\n    next: null\n  };\n  b = N.updateQueue;\n  null === b ? (b = {\n    lastEffect: null\n  }, N.updateQueue = b, b.lastEffect = a.next = a) : (c = b.lastEffect, null === c ? b.lastEffect = a.next = a : (d = c.next, c.next = a, a.next = d, b.lastEffect = a));\n  return a;\n}\nfunction Bh() {\n  return uh().memoizedState;\n}\nfunction Ch(a, b, c, d) {\n  var e = th();\n  N.effectTag |= a;\n  e.memoizedState = Ah(1 | b, c, void 0, void 0 === d ? null : d);\n}\nfunction Dh(a, b, c, d) {\n  var e = uh();\n  d = void 0 === d ? null : d;\n  var f = void 0;\n  if (null !== O) {\n    var g = O.memoizedState;\n    f = g.destroy;\n    if (null !== d && nh(d, g.deps)) {\n      Ah(b, c, f, d);\n      return;\n    }\n  }\n  N.effectTag |= a;\n  e.memoizedState = Ah(1 | b, c, f, d);\n}\nfunction Eh(a, b) {\n  return Ch(516, 4, a, b);\n}\nfunction Fh(a, b) {\n  return Dh(516, 4, a, b);\n}\nfunction Gh(a, b) {\n  return Dh(4, 2, a, b);\n}\nfunction Hh(a, b) {\n  if (\"function\" === typeof b) return a = a(), b(a), function () {\n    b(null);\n  };\n  if (null !== b && void 0 !== b) return a = a(), b.current = a, function () {\n    b.current = null;\n  };\n}\nfunction Ih(a, b, c) {\n  c = null !== c && void 0 !== c ? c.concat([a]) : null;\n  return Dh(4, 2, Hh.bind(null, b, a), c);\n}\nfunction Jh() {}\nfunction Kh(a, b) {\n  th().memoizedState = [a, void 0 === b ? null : b];\n  return a;\n}\nfunction Lh(a, b) {\n  var c = uh();\n  b = void 0 === b ? null : b;\n  var d = c.memoizedState;\n  if (null !== d && null !== b && nh(b, d[1])) return d[0];\n  c.memoizedState = [a, b];\n  return a;\n}\nfunction Mh(a, b) {\n  var c = uh();\n  b = void 0 === b ? null : b;\n  var d = c.memoizedState;\n  if (null !== d && null !== b && nh(b, d[1])) return d[0];\n  a = a();\n  c.memoizedState = [a, b];\n  return a;\n}\nfunction Nh(a, b, c) {\n  var d = ag();\n  cg(98 > d ? 98 : d, function () {\n    a(!0);\n  });\n  cg(97 < d ? 97 : d, function () {\n    var d = kh.suspense;\n    kh.suspense = void 0 === b ? null : b;\n    try {\n      a(!1), c();\n    } finally {\n      kh.suspense = d;\n    }\n  });\n}\nfunction zh(a, b, c) {\n  var d = Gg(),\n    e = Dg.suspense;\n  d = Hg(d, a, e);\n  e = {\n    expirationTime: d,\n    suspenseConfig: e,\n    action: c,\n    eagerReducer: null,\n    eagerState: null,\n    next: null\n  };\n  var f = b.pending;\n  null === f ? e.next = e : (e.next = f.next, f.next = e);\n  b.pending = e;\n  f = a.alternate;\n  if (a === N || null !== f && f === N) mh = !0, e.expirationTime = lh, N.expirationTime = lh;else {\n    if (0 === a.expirationTime && (null === f || 0 === f.expirationTime) && (f = b.lastRenderedReducer, null !== f)) try {\n      var g = b.lastRenderedState,\n        h = f(g, c);\n      e.eagerReducer = f;\n      e.eagerState = h;\n      if ($e(h, g)) return;\n    } catch (k) {} finally {}\n    Ig(a, d);\n  }\n}\nvar sh = {\n    readContext: sg,\n    useCallback: Q,\n    useContext: Q,\n    useEffect: Q,\n    useImperativeHandle: Q,\n    useLayoutEffect: Q,\n    useMemo: Q,\n    useReducer: Q,\n    useRef: Q,\n    useState: Q,\n    useDebugValue: Q,\n    useResponder: Q,\n    useDeferredValue: Q,\n    useTransition: Q\n  },\n  ph = {\n    readContext: sg,\n    useCallback: Kh,\n    useContext: sg,\n    useEffect: Eh,\n    useImperativeHandle: function (a, b, c) {\n      c = null !== c && void 0 !== c ? c.concat([a]) : null;\n      return Ch(4, 2, Hh.bind(null, b, a), c);\n    },\n    useLayoutEffect: function (a, b) {\n      return Ch(4, 2, a, b);\n    },\n    useMemo: function (a, b) {\n      var c = th();\n      b = void 0 === b ? null : b;\n      a = a();\n      c.memoizedState = [a, b];\n      return a;\n    },\n    useReducer: function (a, b, c) {\n      var d = th();\n      b = void 0 !== c ? c(b) : b;\n      d.memoizedState = d.baseState = b;\n      a = d.queue = {\n        pending: null,\n        dispatch: null,\n        lastRenderedReducer: a,\n        lastRenderedState: b\n      };\n      a = a.dispatch = zh.bind(null, N, a);\n      return [d.memoizedState, a];\n    },\n    useRef: function (a) {\n      var b = th();\n      a = {\n        current: a\n      };\n      return b.memoizedState = a;\n    },\n    useState: yh,\n    useDebugValue: Jh,\n    useResponder: ih,\n    useDeferredValue: function (a, b) {\n      var c = yh(a),\n        d = c[0],\n        e = c[1];\n      Eh(function () {\n        var c = kh.suspense;\n        kh.suspense = void 0 === b ? null : b;\n        try {\n          e(a);\n        } finally {\n          kh.suspense = c;\n        }\n      }, [a, b]);\n      return d;\n    },\n    useTransition: function (a) {\n      var b = yh(!1),\n        c = b[0];\n      b = b[1];\n      return [Kh(Nh.bind(null, b, a), [b, a]), c];\n    }\n  },\n  qh = {\n    readContext: sg,\n    useCallback: Lh,\n    useContext: sg,\n    useEffect: Fh,\n    useImperativeHandle: Ih,\n    useLayoutEffect: Gh,\n    useMemo: Mh,\n    useReducer: wh,\n    useRef: Bh,\n    useState: function () {\n      return wh(vh);\n    },\n    useDebugValue: Jh,\n    useResponder: ih,\n    useDeferredValue: function (a, b) {\n      var c = wh(vh),\n        d = c[0],\n        e = c[1];\n      Fh(function () {\n        var c = kh.suspense;\n        kh.suspense = void 0 === b ? null : b;\n        try {\n          e(a);\n        } finally {\n          kh.suspense = c;\n        }\n      }, [a, b]);\n      return d;\n    },\n    useTransition: function (a) {\n      var b = wh(vh),\n        c = b[0];\n      b = b[1];\n      return [Lh(Nh.bind(null, b, a), [b, a]), c];\n    }\n  },\n  rh = {\n    readContext: sg,\n    useCallback: Lh,\n    useContext: sg,\n    useEffect: Fh,\n    useImperativeHandle: Ih,\n    useLayoutEffect: Gh,\n    useMemo: Mh,\n    useReducer: xh,\n    useRef: Bh,\n    useState: function () {\n      return xh(vh);\n    },\n    useDebugValue: Jh,\n    useResponder: ih,\n    useDeferredValue: function (a, b) {\n      var c = xh(vh),\n        d = c[0],\n        e = c[1];\n      Fh(function () {\n        var c = kh.suspense;\n        kh.suspense = void 0 === b ? null : b;\n        try {\n          e(a);\n        } finally {\n          kh.suspense = c;\n        }\n      }, [a, b]);\n      return d;\n    },\n    useTransition: function (a) {\n      var b = xh(vh),\n        c = b[0];\n      b = b[1];\n      return [Lh(Nh.bind(null, b, a), [b, a]), c];\n    }\n  },\n  Oh = null,\n  Ph = null,\n  Qh = !1;\nfunction Rh(a, b) {\n  var c = Sh(5, null, null, 0);\n  c.elementType = \"DELETED\";\n  c.type = \"DELETED\";\n  c.stateNode = b;\n  c.return = a;\n  c.effectTag = 8;\n  null !== a.lastEffect ? (a.lastEffect.nextEffect = c, a.lastEffect = c) : a.firstEffect = a.lastEffect = c;\n}\nfunction Th(a, b) {\n  switch (a.tag) {\n    case 5:\n      var c = a.type;\n      b = 1 !== b.nodeType || c.toLowerCase() !== b.nodeName.toLowerCase() ? null : b;\n      return null !== b ? (a.stateNode = b, !0) : !1;\n    case 6:\n      return b = \"\" === a.pendingProps || 3 !== b.nodeType ? null : b, null !== b ? (a.stateNode = b, !0) : !1;\n    case 13:\n      return !1;\n    default:\n      return !1;\n  }\n}\nfunction Uh(a) {\n  if (Qh) {\n    var b = Ph;\n    if (b) {\n      var c = b;\n      if (!Th(a, b)) {\n        b = Jd(c.nextSibling);\n        if (!b || !Th(a, b)) {\n          a.effectTag = a.effectTag & -1025 | 2;\n          Qh = !1;\n          Oh = a;\n          return;\n        }\n        Rh(Oh, c);\n      }\n      Oh = a;\n      Ph = Jd(b.firstChild);\n    } else a.effectTag = a.effectTag & -1025 | 2, Qh = !1, Oh = a;\n  }\n}\nfunction Vh(a) {\n  for (a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag;) a = a.return;\n  Oh = a;\n}\nfunction Wh(a) {\n  if (a !== Oh) return !1;\n  if (!Qh) return Vh(a), Qh = !0, !1;\n  var b = a.type;\n  if (5 !== a.tag || \"head\" !== b && \"body\" !== b && !Gd(b, a.memoizedProps)) for (b = Ph; b;) Rh(a, b), b = Jd(b.nextSibling);\n  Vh(a);\n  if (13 === a.tag) {\n    a = a.memoizedState;\n    a = null !== a ? a.dehydrated : null;\n    if (!a) throw Error(u(317));\n    a: {\n      a = a.nextSibling;\n      for (b = 0; a;) {\n        if (8 === a.nodeType) {\n          var c = a.data;\n          if (c === Ad) {\n            if (0 === b) {\n              Ph = Jd(a.nextSibling);\n              break a;\n            }\n            b--;\n          } else c !== zd && c !== Cd && c !== Bd || b++;\n        }\n        a = a.nextSibling;\n      }\n      Ph = null;\n    }\n  } else Ph = Oh ? Jd(a.stateNode.nextSibling) : null;\n  return !0;\n}\nfunction Xh() {\n  Ph = Oh = null;\n  Qh = !1;\n}\nvar Yh = Wa.ReactCurrentOwner,\n  rg = !1;\nfunction R(a, b, c, d) {\n  b.child = null === a ? Yg(b, null, c, d) : Xg(b, a.child, c, d);\n}\nfunction Zh(a, b, c, d, e) {\n  c = c.render;\n  var f = b.ref;\n  qg(b, e);\n  d = oh(a, b, c, d, f, e);\n  if (null !== a && !rg) return b.updateQueue = a.updateQueue, b.effectTag &= -517, a.expirationTime <= e && (a.expirationTime = 0), $h(a, b, e);\n  b.effectTag |= 1;\n  R(a, b, d, e);\n  return b.child;\n}\nfunction ai(a, b, c, d, e, f) {\n  if (null === a) {\n    var g = c.type;\n    if (\"function\" === typeof g && !bi(g) && void 0 === g.defaultProps && null === c.compare && void 0 === c.defaultProps) return b.tag = 15, b.type = g, ci(a, b, g, d, e, f);\n    a = Ug(c.type, null, d, null, b.mode, f);\n    a.ref = b.ref;\n    a.return = b;\n    return b.child = a;\n  }\n  g = a.child;\n  if (e < f && (e = g.memoizedProps, c = c.compare, c = null !== c ? c : bf, c(e, d) && a.ref === b.ref)) return $h(a, b, f);\n  b.effectTag |= 1;\n  a = Sg(g, d);\n  a.ref = b.ref;\n  a.return = b;\n  return b.child = a;\n}\nfunction ci(a, b, c, d, e, f) {\n  return null !== a && bf(a.memoizedProps, d) && a.ref === b.ref && (rg = !1, e < f) ? (b.expirationTime = a.expirationTime, $h(a, b, f)) : di(a, b, c, d, f);\n}\nfunction ei(a, b) {\n  var c = b.ref;\n  if (null === a && null !== c || null !== a && a.ref !== c) b.effectTag |= 128;\n}\nfunction di(a, b, c, d, e) {\n  var f = L(c) ? Bf : J.current;\n  f = Cf(b, f);\n  qg(b, e);\n  c = oh(a, b, c, d, f, e);\n  if (null !== a && !rg) return b.updateQueue = a.updateQueue, b.effectTag &= -517, a.expirationTime <= e && (a.expirationTime = 0), $h(a, b, e);\n  b.effectTag |= 1;\n  R(a, b, c, e);\n  return b.child;\n}\nfunction fi(a, b, c, d, e) {\n  if (L(c)) {\n    var f = !0;\n    Gf(b);\n  } else f = !1;\n  qg(b, e);\n  if (null === b.stateNode) null !== a && (a.alternate = null, b.alternate = null, b.effectTag |= 2), Lg(b, c, d), Ng(b, c, d, e), d = !0;else if (null === a) {\n    var g = b.stateNode,\n      h = b.memoizedProps;\n    g.props = h;\n    var k = g.context,\n      l = c.contextType;\n    \"object\" === typeof l && null !== l ? l = sg(l) : (l = L(c) ? Bf : J.current, l = Cf(b, l));\n    var m = c.getDerivedStateFromProps,\n      p = \"function\" === typeof m || \"function\" === typeof g.getSnapshotBeforeUpdate;\n    p || \"function\" !== typeof g.UNSAFE_componentWillReceiveProps && \"function\" !== typeof g.componentWillReceiveProps || (h !== d || k !== l) && Mg(b, g, d, l);\n    tg = !1;\n    var x = b.memoizedState;\n    g.state = x;\n    zg(b, d, g, e);\n    k = b.memoizedState;\n    h !== d || x !== k || K.current || tg ? (\"function\" === typeof m && (Fg(b, c, m, d), k = b.memoizedState), (h = tg || Kg(b, c, h, d, x, k, l)) ? (p || \"function\" !== typeof g.UNSAFE_componentWillMount && \"function\" !== typeof g.componentWillMount || (\"function\" === typeof g.componentWillMount && g.componentWillMount(), \"function\" === typeof g.UNSAFE_componentWillMount && g.UNSAFE_componentWillMount()), \"function\" === typeof g.componentDidMount && (b.effectTag |= 4)) : (\"function\" === typeof g.componentDidMount && (b.effectTag |= 4), b.memoizedProps = d, b.memoizedState = k), g.props = d, g.state = k, g.context = l, d = h) : (\"function\" === typeof g.componentDidMount && (b.effectTag |= 4), d = !1);\n  } else g = b.stateNode, vg(a, b), h = b.memoizedProps, g.props = b.type === b.elementType ? h : ig(b.type, h), k = g.context, l = c.contextType, \"object\" === typeof l && null !== l ? l = sg(l) : (l = L(c) ? Bf : J.current, l = Cf(b, l)), m = c.getDerivedStateFromProps, (p = \"function\" === typeof m || \"function\" === typeof g.getSnapshotBeforeUpdate) || \"function\" !== typeof g.UNSAFE_componentWillReceiveProps && \"function\" !== typeof g.componentWillReceiveProps || (h !== d || k !== l) && Mg(b, g, d, l), tg = !1, k = b.memoizedState, g.state = k, zg(b, d, g, e), x = b.memoizedState, h !== d || k !== x || K.current || tg ? (\"function\" === typeof m && (Fg(b, c, m, d), x = b.memoizedState), (m = tg || Kg(b, c, h, d, k, x, l)) ? (p || \"function\" !== typeof g.UNSAFE_componentWillUpdate && \"function\" !== typeof g.componentWillUpdate || (\"function\" === typeof g.componentWillUpdate && g.componentWillUpdate(d, x, l), \"function\" === typeof g.UNSAFE_componentWillUpdate && g.UNSAFE_componentWillUpdate(d, x, l)), \"function\" === typeof g.componentDidUpdate && (b.effectTag |= 4), \"function\" === typeof g.getSnapshotBeforeUpdate && (b.effectTag |= 256)) : (\"function\" !== typeof g.componentDidUpdate || h === a.memoizedProps && k === a.memoizedState || (b.effectTag |= 4), \"function\" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && k === a.memoizedState || (b.effectTag |= 256), b.memoizedProps = d, b.memoizedState = x), g.props = d, g.state = x, g.context = l, d = m) : (\"function\" !== typeof g.componentDidUpdate || h === a.memoizedProps && k === a.memoizedState || (b.effectTag |= 4), \"function\" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && k === a.memoizedState || (b.effectTag |= 256), d = !1);\n  return gi(a, b, c, d, f, e);\n}\nfunction gi(a, b, c, d, e, f) {\n  ei(a, b);\n  var g = 0 !== (b.effectTag & 64);\n  if (!d && !g) return e && Hf(b, c, !1), $h(a, b, f);\n  d = b.stateNode;\n  Yh.current = b;\n  var h = g && \"function\" !== typeof c.getDerivedStateFromError ? null : d.render();\n  b.effectTag |= 1;\n  null !== a && g ? (b.child = Xg(b, a.child, null, f), b.child = Xg(b, null, h, f)) : R(a, b, h, f);\n  b.memoizedState = d.state;\n  e && Hf(b, c, !0);\n  return b.child;\n}\nfunction hi(a) {\n  var b = a.stateNode;\n  b.pendingContext ? Ef(a, b.pendingContext, b.pendingContext !== b.context) : b.context && Ef(a, b.context, !1);\n  dh(a, b.containerInfo);\n}\nvar ii = {\n  dehydrated: null,\n  retryTime: 0\n};\nfunction ji(a, b, c) {\n  var d = b.mode,\n    e = b.pendingProps,\n    f = M.current,\n    g = !1,\n    h;\n  (h = 0 !== (b.effectTag & 64)) || (h = 0 !== (f & 2) && (null === a || null !== a.memoizedState));\n  h ? (g = !0, b.effectTag &= -65) : null !== a && null === a.memoizedState || void 0 === e.fallback || !0 === e.unstable_avoidThisFallback || (f |= 1);\n  I(M, f & 1);\n  if (null === a) {\n    void 0 !== e.fallback && Uh(b);\n    if (g) {\n      g = e.fallback;\n      e = Wg(null, d, 0, null);\n      e.return = b;\n      if (0 === (b.mode & 2)) for (a = null !== b.memoizedState ? b.child.child : b.child, e.child = a; null !== a;) a.return = e, a = a.sibling;\n      c = Wg(g, d, c, null);\n      c.return = b;\n      e.sibling = c;\n      b.memoizedState = ii;\n      b.child = e;\n      return c;\n    }\n    d = e.children;\n    b.memoizedState = null;\n    return b.child = Yg(b, null, d, c);\n  }\n  if (null !== a.memoizedState) {\n    a = a.child;\n    d = a.sibling;\n    if (g) {\n      e = e.fallback;\n      c = Sg(a, a.pendingProps);\n      c.return = b;\n      if (0 === (b.mode & 2) && (g = null !== b.memoizedState ? b.child.child : b.child, g !== a.child)) for (c.child = g; null !== g;) g.return = c, g = g.sibling;\n      d = Sg(d, e);\n      d.return = b;\n      c.sibling = d;\n      c.childExpirationTime = 0;\n      b.memoizedState = ii;\n      b.child = c;\n      return d;\n    }\n    c = Xg(b, a.child, e.children, c);\n    b.memoizedState = null;\n    return b.child = c;\n  }\n  a = a.child;\n  if (g) {\n    g = e.fallback;\n    e = Wg(null, d, 0, null);\n    e.return = b;\n    e.child = a;\n    null !== a && (a.return = e);\n    if (0 === (b.mode & 2)) for (a = null !== b.memoizedState ? b.child.child : b.child, e.child = a; null !== a;) a.return = e, a = a.sibling;\n    c = Wg(g, d, c, null);\n    c.return = b;\n    e.sibling = c;\n    c.effectTag |= 2;\n    e.childExpirationTime = 0;\n    b.memoizedState = ii;\n    b.child = e;\n    return c;\n  }\n  b.memoizedState = null;\n  return b.child = Xg(b, a, e.children, c);\n}\nfunction ki(a, b) {\n  a.expirationTime < b && (a.expirationTime = b);\n  var c = a.alternate;\n  null !== c && c.expirationTime < b && (c.expirationTime = b);\n  pg(a.return, b);\n}\nfunction li(a, b, c, d, e, f) {\n  var g = a.memoizedState;\n  null === g ? a.memoizedState = {\n    isBackwards: b,\n    rendering: null,\n    renderingStartTime: 0,\n    last: d,\n    tail: c,\n    tailExpiration: 0,\n    tailMode: e,\n    lastEffect: f\n  } : (g.isBackwards = b, g.rendering = null, g.renderingStartTime = 0, g.last = d, g.tail = c, g.tailExpiration = 0, g.tailMode = e, g.lastEffect = f);\n}\nfunction mi(a, b, c) {\n  var d = b.pendingProps,\n    e = d.revealOrder,\n    f = d.tail;\n  R(a, b, d.children, c);\n  d = M.current;\n  if (0 !== (d & 2)) d = d & 1 | 2, b.effectTag |= 64;else {\n    if (null !== a && 0 !== (a.effectTag & 64)) a: for (a = b.child; null !== a;) {\n      if (13 === a.tag) null !== a.memoizedState && ki(a, c);else if (19 === a.tag) ki(a, c);else if (null !== a.child) {\n        a.child.return = a;\n        a = a.child;\n        continue;\n      }\n      if (a === b) break a;\n      for (; null === a.sibling;) {\n        if (null === a.return || a.return === b) break a;\n        a = a.return;\n      }\n      a.sibling.return = a.return;\n      a = a.sibling;\n    }\n    d &= 1;\n  }\n  I(M, d);\n  if (0 === (b.mode & 2)) b.memoizedState = null;else switch (e) {\n    case \"forwards\":\n      c = b.child;\n      for (e = null; null !== c;) a = c.alternate, null !== a && null === hh(a) && (e = c), c = c.sibling;\n      c = e;\n      null === c ? (e = b.child, b.child = null) : (e = c.sibling, c.sibling = null);\n      li(b, !1, e, c, f, b.lastEffect);\n      break;\n    case \"backwards\":\n      c = null;\n      e = b.child;\n      for (b.child = null; null !== e;) {\n        a = e.alternate;\n        if (null !== a && null === hh(a)) {\n          b.child = e;\n          break;\n        }\n        a = e.sibling;\n        e.sibling = c;\n        c = e;\n        e = a;\n      }\n      li(b, !0, c, null, f, b.lastEffect);\n      break;\n    case \"together\":\n      li(b, !1, null, null, void 0, b.lastEffect);\n      break;\n    default:\n      b.memoizedState = null;\n  }\n  return b.child;\n}\nfunction $h(a, b, c) {\n  null !== a && (b.dependencies = a.dependencies);\n  var d = b.expirationTime;\n  0 !== d && Bg(d);\n  if (b.childExpirationTime < c) return null;\n  if (null !== a && b.child !== a.child) throw Error(u(153));\n  if (null !== b.child) {\n    a = b.child;\n    c = Sg(a, a.pendingProps);\n    b.child = c;\n    for (c.return = b; null !== a.sibling;) a = a.sibling, c = c.sibling = Sg(a, a.pendingProps), c.return = b;\n    c.sibling = null;\n  }\n  return b.child;\n}\nvar ni, oi, pi, qi;\nni = function (a, b) {\n  for (var c = b.child; null !== c;) {\n    if (5 === c.tag || 6 === c.tag) a.appendChild(c.stateNode);else if (4 !== c.tag && null !== c.child) {\n      c.child.return = c;\n      c = c.child;\n      continue;\n    }\n    if (c === b) break;\n    for (; null === c.sibling;) {\n      if (null === c.return || c.return === b) return;\n      c = c.return;\n    }\n    c.sibling.return = c.return;\n    c = c.sibling;\n  }\n};\noi = function () {};\npi = function (a, b, c, d, e) {\n  var f = a.memoizedProps;\n  if (f !== d) {\n    var g = b.stateNode;\n    ch($g.current);\n    a = null;\n    switch (c) {\n      case \"input\":\n        f = zb(g, f);\n        d = zb(g, d);\n        a = [];\n        break;\n      case \"option\":\n        f = Gb(g, f);\n        d = Gb(g, d);\n        a = [];\n        break;\n      case \"select\":\n        f = n({}, f, {\n          value: void 0\n        });\n        d = n({}, d, {\n          value: void 0\n        });\n        a = [];\n        break;\n      case \"textarea\":\n        f = Ib(g, f);\n        d = Ib(g, d);\n        a = [];\n        break;\n      default:\n        \"function\" !== typeof f.onClick && \"function\" === typeof d.onClick && (g.onclick = sd);\n    }\n    od(c, d);\n    var h, k;\n    c = null;\n    for (h in f) if (!d.hasOwnProperty(h) && f.hasOwnProperty(h) && null != f[h]) if (\"style\" === h) for (k in g = f[h], g) g.hasOwnProperty(k) && (c || (c = {}), c[k] = \"\");else \"dangerouslySetInnerHTML\" !== h && \"children\" !== h && \"suppressContentEditableWarning\" !== h && \"suppressHydrationWarning\" !== h && \"autoFocus\" !== h && (va.hasOwnProperty(h) ? a || (a = []) : (a = a || []).push(h, null));\n    for (h in d) {\n      var l = d[h];\n      g = null != f ? f[h] : void 0;\n      if (d.hasOwnProperty(h) && l !== g && (null != l || null != g)) if (\"style\" === h) {\n        if (g) {\n          for (k in g) !g.hasOwnProperty(k) || l && l.hasOwnProperty(k) || (c || (c = {}), c[k] = \"\");\n          for (k in l) l.hasOwnProperty(k) && g[k] !== l[k] && (c || (c = {}), c[k] = l[k]);\n        } else c || (a || (a = []), a.push(h, c)), c = l;\n      } else \"dangerouslySetInnerHTML\" === h ? (l = l ? l.__html : void 0, g = g ? g.__html : void 0, null != l && g !== l && (a = a || []).push(h, l)) : \"children\" === h ? g === l || \"string\" !== typeof l && \"number\" !== typeof l || (a = a || []).push(h, \"\" + l) : \"suppressContentEditableWarning\" !== h && \"suppressHydrationWarning\" !== h && (va.hasOwnProperty(h) ? (null != l && rd(e, h), a || g === l || (a = [])) : (a = a || []).push(h, l));\n    }\n    c && (a = a || []).push(\"style\", c);\n    e = a;\n    if (b.updateQueue = e) b.effectTag |= 4;\n  }\n};\nqi = function (a, b, c, d) {\n  c !== d && (b.effectTag |= 4);\n};\nfunction ri(a, b) {\n  switch (a.tailMode) {\n    case \"hidden\":\n      b = a.tail;\n      for (var c = null; null !== b;) null !== b.alternate && (c = b), b = b.sibling;\n      null === c ? a.tail = null : c.sibling = null;\n      break;\n    case \"collapsed\":\n      c = a.tail;\n      for (var d = null; null !== c;) null !== c.alternate && (d = c), c = c.sibling;\n      null === d ? b || null === a.tail ? a.tail = null : a.tail.sibling = null : d.sibling = null;\n  }\n}\nfunction si(a, b, c) {\n  var d = b.pendingProps;\n  switch (b.tag) {\n    case 2:\n    case 16:\n    case 15:\n    case 0:\n    case 11:\n    case 7:\n    case 8:\n    case 12:\n    case 9:\n    case 14:\n      return null;\n    case 1:\n      return L(b.type) && Df(), null;\n    case 3:\n      return eh(), H(K), H(J), c = b.stateNode, c.pendingContext && (c.context = c.pendingContext, c.pendingContext = null), null !== a && null !== a.child || !Wh(b) || (b.effectTag |= 4), oi(b), null;\n    case 5:\n      gh(b);\n      c = ch(bh.current);\n      var e = b.type;\n      if (null !== a && null != b.stateNode) pi(a, b, e, d, c), a.ref !== b.ref && (b.effectTag |= 128);else {\n        if (!d) {\n          if (null === b.stateNode) throw Error(u(166));\n          return null;\n        }\n        a = ch($g.current);\n        if (Wh(b)) {\n          d = b.stateNode;\n          e = b.type;\n          var f = b.memoizedProps;\n          d[Md] = b;\n          d[Nd] = f;\n          switch (e) {\n            case \"iframe\":\n            case \"object\":\n            case \"embed\":\n              F(\"load\", d);\n              break;\n            case \"video\":\n            case \"audio\":\n              for (a = 0; a < ac.length; a++) F(ac[a], d);\n              break;\n            case \"source\":\n              F(\"error\", d);\n              break;\n            case \"img\":\n            case \"image\":\n            case \"link\":\n              F(\"error\", d);\n              F(\"load\", d);\n              break;\n            case \"form\":\n              F(\"reset\", d);\n              F(\"submit\", d);\n              break;\n            case \"details\":\n              F(\"toggle\", d);\n              break;\n            case \"input\":\n              Ab(d, f);\n              F(\"invalid\", d);\n              rd(c, \"onChange\");\n              break;\n            case \"select\":\n              d._wrapperState = {\n                wasMultiple: !!f.multiple\n              };\n              F(\"invalid\", d);\n              rd(c, \"onChange\");\n              break;\n            case \"textarea\":\n              Jb(d, f), F(\"invalid\", d), rd(c, \"onChange\");\n          }\n          od(e, f);\n          a = null;\n          for (var g in f) if (f.hasOwnProperty(g)) {\n            var h = f[g];\n            \"children\" === g ? \"string\" === typeof h ? d.textContent !== h && (a = [\"children\", h]) : \"number\" === typeof h && d.textContent !== \"\" + h && (a = [\"children\", \"\" + h]) : va.hasOwnProperty(g) && null != h && rd(c, g);\n          }\n          switch (e) {\n            case \"input\":\n              xb(d);\n              Eb(d, f, !0);\n              break;\n            case \"textarea\":\n              xb(d);\n              Lb(d);\n              break;\n            case \"select\":\n            case \"option\":\n              break;\n            default:\n              \"function\" === typeof f.onClick && (d.onclick = sd);\n          }\n          c = a;\n          b.updateQueue = c;\n          null !== c && (b.effectTag |= 4);\n        } else {\n          g = 9 === c.nodeType ? c : c.ownerDocument;\n          a === qd && (a = Nb(e));\n          a === qd ? \"script\" === e ? (a = g.createElement(\"div\"), a.innerHTML = \"<script>\\x3c/script>\", a = a.removeChild(a.firstChild)) : \"string\" === typeof d.is ? a = g.createElement(e, {\n            is: d.is\n          }) : (a = g.createElement(e), \"select\" === e && (g = a, d.multiple ? g.multiple = !0 : d.size && (g.size = d.size))) : a = g.createElementNS(a, e);\n          a[Md] = b;\n          a[Nd] = d;\n          ni(a, b, !1, !1);\n          b.stateNode = a;\n          g = pd(e, d);\n          switch (e) {\n            case \"iframe\":\n            case \"object\":\n            case \"embed\":\n              F(\"load\", a);\n              h = d;\n              break;\n            case \"video\":\n            case \"audio\":\n              for (h = 0; h < ac.length; h++) F(ac[h], a);\n              h = d;\n              break;\n            case \"source\":\n              F(\"error\", a);\n              h = d;\n              break;\n            case \"img\":\n            case \"image\":\n            case \"link\":\n              F(\"error\", a);\n              F(\"load\", a);\n              h = d;\n              break;\n            case \"form\":\n              F(\"reset\", a);\n              F(\"submit\", a);\n              h = d;\n              break;\n            case \"details\":\n              F(\"toggle\", a);\n              h = d;\n              break;\n            case \"input\":\n              Ab(a, d);\n              h = zb(a, d);\n              F(\"invalid\", a);\n              rd(c, \"onChange\");\n              break;\n            case \"option\":\n              h = Gb(a, d);\n              break;\n            case \"select\":\n              a._wrapperState = {\n                wasMultiple: !!d.multiple\n              };\n              h = n({}, d, {\n                value: void 0\n              });\n              F(\"invalid\", a);\n              rd(c, \"onChange\");\n              break;\n            case \"textarea\":\n              Jb(a, d);\n              h = Ib(a, d);\n              F(\"invalid\", a);\n              rd(c, \"onChange\");\n              break;\n            default:\n              h = d;\n          }\n          od(e, h);\n          var k = h;\n          for (f in k) if (k.hasOwnProperty(f)) {\n            var l = k[f];\n            \"style\" === f ? md(a, l) : \"dangerouslySetInnerHTML\" === f ? (l = l ? l.__html : void 0, null != l && Qb(a, l)) : \"children\" === f ? \"string\" === typeof l ? (\"textarea\" !== e || \"\" !== l) && Rb(a, l) : \"number\" === typeof l && Rb(a, \"\" + l) : \"suppressContentEditableWarning\" !== f && \"suppressHydrationWarning\" !== f && \"autoFocus\" !== f && (va.hasOwnProperty(f) ? null != l && rd(c, f) : null != l && Xa(a, f, l, g));\n          }\n          switch (e) {\n            case \"input\":\n              xb(a);\n              Eb(a, d, !1);\n              break;\n            case \"textarea\":\n              xb(a);\n              Lb(a);\n              break;\n            case \"option\":\n              null != d.value && a.setAttribute(\"value\", \"\" + rb(d.value));\n              break;\n            case \"select\":\n              a.multiple = !!d.multiple;\n              c = d.value;\n              null != c ? Hb(a, !!d.multiple, c, !1) : null != d.defaultValue && Hb(a, !!d.multiple, d.defaultValue, !0);\n              break;\n            default:\n              \"function\" === typeof h.onClick && (a.onclick = sd);\n          }\n          Fd(e, d) && (b.effectTag |= 4);\n        }\n        null !== b.ref && (b.effectTag |= 128);\n      }\n      return null;\n    case 6:\n      if (a && null != b.stateNode) qi(a, b, a.memoizedProps, d);else {\n        if (\"string\" !== typeof d && null === b.stateNode) throw Error(u(166));\n        c = ch(bh.current);\n        ch($g.current);\n        Wh(b) ? (c = b.stateNode, d = b.memoizedProps, c[Md] = b, c.nodeValue !== d && (b.effectTag |= 4)) : (c = (9 === c.nodeType ? c : c.ownerDocument).createTextNode(d), c[Md] = b, b.stateNode = c);\n      }\n      return null;\n    case 13:\n      H(M);\n      d = b.memoizedState;\n      if (0 !== (b.effectTag & 64)) return b.expirationTime = c, b;\n      c = null !== d;\n      d = !1;\n      null === a ? void 0 !== b.memoizedProps.fallback && Wh(b) : (e = a.memoizedState, d = null !== e, c || null === e || (e = a.child.sibling, null !== e && (f = b.firstEffect, null !== f ? (b.firstEffect = e, e.nextEffect = f) : (b.firstEffect = b.lastEffect = e, e.nextEffect = null), e.effectTag = 8)));\n      if (c && !d && 0 !== (b.mode & 2)) if (null === a && !0 !== b.memoizedProps.unstable_avoidThisFallback || 0 !== (M.current & 1)) S === ti && (S = ui);else {\n        if (S === ti || S === ui) S = vi;\n        0 !== wi && null !== T && (xi(T, U), yi(T, wi));\n      }\n      if (c || d) b.effectTag |= 4;\n      return null;\n    case 4:\n      return eh(), oi(b), null;\n    case 10:\n      return og(b), null;\n    case 17:\n      return L(b.type) && Df(), null;\n    case 19:\n      H(M);\n      d = b.memoizedState;\n      if (null === d) return null;\n      e = 0 !== (b.effectTag & 64);\n      f = d.rendering;\n      if (null === f) {\n        if (e) ri(d, !1);else {\n          if (S !== ti || null !== a && 0 !== (a.effectTag & 64)) for (f = b.child; null !== f;) {\n            a = hh(f);\n            if (null !== a) {\n              b.effectTag |= 64;\n              ri(d, !1);\n              e = a.updateQueue;\n              null !== e && (b.updateQueue = e, b.effectTag |= 4);\n              null === d.lastEffect && (b.firstEffect = null);\n              b.lastEffect = d.lastEffect;\n              for (d = b.child; null !== d;) e = d, f = c, e.effectTag &= 2, e.nextEffect = null, e.firstEffect = null, e.lastEffect = null, a = e.alternate, null === a ? (e.childExpirationTime = 0, e.expirationTime = f, e.child = null, e.memoizedProps = null, e.memoizedState = null, e.updateQueue = null, e.dependencies = null) : (e.childExpirationTime = a.childExpirationTime, e.expirationTime = a.expirationTime, e.child = a.child, e.memoizedProps = a.memoizedProps, e.memoizedState = a.memoizedState, e.updateQueue = a.updateQueue, f = a.dependencies, e.dependencies = null === f ? null : {\n                expirationTime: f.expirationTime,\n                firstContext: f.firstContext,\n                responders: f.responders\n              }), d = d.sibling;\n              I(M, M.current & 1 | 2);\n              return b.child;\n            }\n            f = f.sibling;\n          }\n        }\n      } else {\n        if (!e) if (a = hh(f), null !== a) {\n          if (b.effectTag |= 64, e = !0, c = a.updateQueue, null !== c && (b.updateQueue = c, b.effectTag |= 4), ri(d, !0), null === d.tail && \"hidden\" === d.tailMode && !f.alternate) return b = b.lastEffect = d.lastEffect, null !== b && (b.nextEffect = null), null;\n        } else 2 * $f() - d.renderingStartTime > d.tailExpiration && 1 < c && (b.effectTag |= 64, e = !0, ri(d, !1), b.expirationTime = b.childExpirationTime = c - 1);\n        d.isBackwards ? (f.sibling = b.child, b.child = f) : (c = d.last, null !== c ? c.sibling = f : b.child = f, d.last = f);\n      }\n      return null !== d.tail ? (0 === d.tailExpiration && (d.tailExpiration = $f() + 500), c = d.tail, d.rendering = c, d.tail = c.sibling, d.lastEffect = b.lastEffect, d.renderingStartTime = $f(), c.sibling = null, b = M.current, I(M, e ? b & 1 | 2 : b & 1), c) : null;\n  }\n  throw Error(u(156, b.tag));\n}\nfunction zi(a) {\n  switch (a.tag) {\n    case 1:\n      L(a.type) && Df();\n      var b = a.effectTag;\n      return b & 4096 ? (a.effectTag = b & -4097 | 64, a) : null;\n    case 3:\n      eh();\n      H(K);\n      H(J);\n      b = a.effectTag;\n      if (0 !== (b & 64)) throw Error(u(285));\n      a.effectTag = b & -4097 | 64;\n      return a;\n    case 5:\n      return gh(a), null;\n    case 13:\n      return H(M), b = a.effectTag, b & 4096 ? (a.effectTag = b & -4097 | 64, a) : null;\n    case 19:\n      return H(M), null;\n    case 4:\n      return eh(), null;\n    case 10:\n      return og(a), null;\n    default:\n      return null;\n  }\n}\nfunction Ai(a, b) {\n  return {\n    value: a,\n    source: b,\n    stack: qb(b)\n  };\n}\nvar Bi = \"function\" === typeof WeakSet ? WeakSet : Set;\nfunction Ci(a, b) {\n  var c = b.source,\n    d = b.stack;\n  null === d && null !== c && (d = qb(c));\n  null !== c && pb(c.type);\n  b = b.value;\n  null !== a && 1 === a.tag && pb(a.type);\n  try {\n    console.error(b);\n  } catch (e) {\n    setTimeout(function () {\n      throw e;\n    });\n  }\n}\nfunction Di(a, b) {\n  try {\n    b.props = a.memoizedProps, b.state = a.memoizedState, b.componentWillUnmount();\n  } catch (c) {\n    Ei(a, c);\n  }\n}\nfunction Fi(a) {\n  var b = a.ref;\n  if (null !== b) if (\"function\" === typeof b) try {\n    b(null);\n  } catch (c) {\n    Ei(a, c);\n  } else b.current = null;\n}\nfunction Gi(a, b) {\n  switch (b.tag) {\n    case 0:\n    case 11:\n    case 15:\n    case 22:\n      return;\n    case 1:\n      if (b.effectTag & 256 && null !== a) {\n        var c = a.memoizedProps,\n          d = a.memoizedState;\n        a = b.stateNode;\n        b = a.getSnapshotBeforeUpdate(b.elementType === b.type ? c : ig(b.type, c), d);\n        a.__reactInternalSnapshotBeforeUpdate = b;\n      }\n      return;\n    case 3:\n    case 5:\n    case 6:\n    case 4:\n    case 17:\n      return;\n  }\n  throw Error(u(163));\n}\nfunction Hi(a, b) {\n  b = b.updateQueue;\n  b = null !== b ? b.lastEffect : null;\n  if (null !== b) {\n    var c = b = b.next;\n    do {\n      if ((c.tag & a) === a) {\n        var d = c.destroy;\n        c.destroy = void 0;\n        void 0 !== d && d();\n      }\n      c = c.next;\n    } while (c !== b);\n  }\n}\nfunction Ii(a, b) {\n  b = b.updateQueue;\n  b = null !== b ? b.lastEffect : null;\n  if (null !== b) {\n    var c = b = b.next;\n    do {\n      if ((c.tag & a) === a) {\n        var d = c.create;\n        c.destroy = d();\n      }\n      c = c.next;\n    } while (c !== b);\n  }\n}\nfunction Ji(a, b, c) {\n  switch (c.tag) {\n    case 0:\n    case 11:\n    case 15:\n    case 22:\n      Ii(3, c);\n      return;\n    case 1:\n      a = c.stateNode;\n      if (c.effectTag & 4) if (null === b) a.componentDidMount();else {\n        var d = c.elementType === c.type ? b.memoizedProps : ig(c.type, b.memoizedProps);\n        a.componentDidUpdate(d, b.memoizedState, a.__reactInternalSnapshotBeforeUpdate);\n      }\n      b = c.updateQueue;\n      null !== b && Cg(c, b, a);\n      return;\n    case 3:\n      b = c.updateQueue;\n      if (null !== b) {\n        a = null;\n        if (null !== c.child) switch (c.child.tag) {\n          case 5:\n            a = c.child.stateNode;\n            break;\n          case 1:\n            a = c.child.stateNode;\n        }\n        Cg(c, b, a);\n      }\n      return;\n    case 5:\n      a = c.stateNode;\n      null === b && c.effectTag & 4 && Fd(c.type, c.memoizedProps) && a.focus();\n      return;\n    case 6:\n      return;\n    case 4:\n      return;\n    case 12:\n      return;\n    case 13:\n      null === c.memoizedState && (c = c.alternate, null !== c && (c = c.memoizedState, null !== c && (c = c.dehydrated, null !== c && Vc(c))));\n      return;\n    case 19:\n    case 17:\n    case 20:\n    case 21:\n      return;\n  }\n  throw Error(u(163));\n}\nfunction Ki(a, b, c) {\n  \"function\" === typeof Li && Li(b);\n  switch (b.tag) {\n    case 0:\n    case 11:\n    case 14:\n    case 15:\n    case 22:\n      a = b.updateQueue;\n      if (null !== a && (a = a.lastEffect, null !== a)) {\n        var d = a.next;\n        cg(97 < c ? 97 : c, function () {\n          var a = d;\n          do {\n            var c = a.destroy;\n            if (void 0 !== c) {\n              var g = b;\n              try {\n                c();\n              } catch (h) {\n                Ei(g, h);\n              }\n            }\n            a = a.next;\n          } while (a !== d);\n        });\n      }\n      break;\n    case 1:\n      Fi(b);\n      c = b.stateNode;\n      \"function\" === typeof c.componentWillUnmount && Di(b, c);\n      break;\n    case 5:\n      Fi(b);\n      break;\n    case 4:\n      Mi(a, b, c);\n  }\n}\nfunction Ni(a) {\n  var b = a.alternate;\n  a.return = null;\n  a.child = null;\n  a.memoizedState = null;\n  a.updateQueue = null;\n  a.dependencies = null;\n  a.alternate = null;\n  a.firstEffect = null;\n  a.lastEffect = null;\n  a.pendingProps = null;\n  a.memoizedProps = null;\n  a.stateNode = null;\n  null !== b && Ni(b);\n}\nfunction Oi(a) {\n  return 5 === a.tag || 3 === a.tag || 4 === a.tag;\n}\nfunction Pi(a) {\n  a: {\n    for (var b = a.return; null !== b;) {\n      if (Oi(b)) {\n        var c = b;\n        break a;\n      }\n      b = b.return;\n    }\n    throw Error(u(160));\n  }\n  b = c.stateNode;\n  switch (c.tag) {\n    case 5:\n      var d = !1;\n      break;\n    case 3:\n      b = b.containerInfo;\n      d = !0;\n      break;\n    case 4:\n      b = b.containerInfo;\n      d = !0;\n      break;\n    default:\n      throw Error(u(161));\n  }\n  c.effectTag & 16 && (Rb(b, \"\"), c.effectTag &= -17);\n  a: b: for (c = a;;) {\n    for (; null === c.sibling;) {\n      if (null === c.return || Oi(c.return)) {\n        c = null;\n        break a;\n      }\n      c = c.return;\n    }\n    c.sibling.return = c.return;\n    for (c = c.sibling; 5 !== c.tag && 6 !== c.tag && 18 !== c.tag;) {\n      if (c.effectTag & 2) continue b;\n      if (null === c.child || 4 === c.tag) continue b;else c.child.return = c, c = c.child;\n    }\n    if (!(c.effectTag & 2)) {\n      c = c.stateNode;\n      break a;\n    }\n  }\n  d ? Qi(a, c, b) : Ri(a, c, b);\n}\nfunction Qi(a, b, c) {\n  var d = a.tag,\n    e = 5 === d || 6 === d;\n  if (e) a = e ? a.stateNode : a.stateNode.instance, b ? 8 === c.nodeType ? c.parentNode.insertBefore(a, b) : c.insertBefore(a, b) : (8 === c.nodeType ? (b = c.parentNode, b.insertBefore(a, c)) : (b = c, b.appendChild(a)), c = c._reactRootContainer, null !== c && void 0 !== c || null !== b.onclick || (b.onclick = sd));else if (4 !== d && (a = a.child, null !== a)) for (Qi(a, b, c), a = a.sibling; null !== a;) Qi(a, b, c), a = a.sibling;\n}\nfunction Ri(a, b, c) {\n  var d = a.tag,\n    e = 5 === d || 6 === d;\n  if (e) a = e ? a.stateNode : a.stateNode.instance, b ? c.insertBefore(a, b) : c.appendChild(a);else if (4 !== d && (a = a.child, null !== a)) for (Ri(a, b, c), a = a.sibling; null !== a;) Ri(a, b, c), a = a.sibling;\n}\nfunction Mi(a, b, c) {\n  for (var d = b, e = !1, f, g;;) {\n    if (!e) {\n      e = d.return;\n      a: for (;;) {\n        if (null === e) throw Error(u(160));\n        f = e.stateNode;\n        switch (e.tag) {\n          case 5:\n            g = !1;\n            break a;\n          case 3:\n            f = f.containerInfo;\n            g = !0;\n            break a;\n          case 4:\n            f = f.containerInfo;\n            g = !0;\n            break a;\n        }\n        e = e.return;\n      }\n      e = !0;\n    }\n    if (5 === d.tag || 6 === d.tag) {\n      a: for (var h = a, k = d, l = c, m = k;;) if (Ki(h, m, l), null !== m.child && 4 !== m.tag) m.child.return = m, m = m.child;else {\n        if (m === k) break a;\n        for (; null === m.sibling;) {\n          if (null === m.return || m.return === k) break a;\n          m = m.return;\n        }\n        m.sibling.return = m.return;\n        m = m.sibling;\n      }\n      g ? (h = f, k = d.stateNode, 8 === h.nodeType ? h.parentNode.removeChild(k) : h.removeChild(k)) : f.removeChild(d.stateNode);\n    } else if (4 === d.tag) {\n      if (null !== d.child) {\n        f = d.stateNode.containerInfo;\n        g = !0;\n        d.child.return = d;\n        d = d.child;\n        continue;\n      }\n    } else if (Ki(a, d, c), null !== d.child) {\n      d.child.return = d;\n      d = d.child;\n      continue;\n    }\n    if (d === b) break;\n    for (; null === d.sibling;) {\n      if (null === d.return || d.return === b) return;\n      d = d.return;\n      4 === d.tag && (e = !1);\n    }\n    d.sibling.return = d.return;\n    d = d.sibling;\n  }\n}\nfunction Si(a, b) {\n  switch (b.tag) {\n    case 0:\n    case 11:\n    case 14:\n    case 15:\n    case 22:\n      Hi(3, b);\n      return;\n    case 1:\n      return;\n    case 5:\n      var c = b.stateNode;\n      if (null != c) {\n        var d = b.memoizedProps,\n          e = null !== a ? a.memoizedProps : d;\n        a = b.type;\n        var f = b.updateQueue;\n        b.updateQueue = null;\n        if (null !== f) {\n          c[Nd] = d;\n          \"input\" === a && \"radio\" === d.type && null != d.name && Bb(c, d);\n          pd(a, e);\n          b = pd(a, d);\n          for (e = 0; e < f.length; e += 2) {\n            var g = f[e],\n              h = f[e + 1];\n            \"style\" === g ? md(c, h) : \"dangerouslySetInnerHTML\" === g ? Qb(c, h) : \"children\" === g ? Rb(c, h) : Xa(c, g, h, b);\n          }\n          switch (a) {\n            case \"input\":\n              Cb(c, d);\n              break;\n            case \"textarea\":\n              Kb(c, d);\n              break;\n            case \"select\":\n              b = c._wrapperState.wasMultiple, c._wrapperState.wasMultiple = !!d.multiple, a = d.value, null != a ? Hb(c, !!d.multiple, a, !1) : b !== !!d.multiple && (null != d.defaultValue ? Hb(c, !!d.multiple, d.defaultValue, !0) : Hb(c, !!d.multiple, d.multiple ? [] : \"\", !1));\n          }\n        }\n      }\n      return;\n    case 6:\n      if (null === b.stateNode) throw Error(u(162));\n      b.stateNode.nodeValue = b.memoizedProps;\n      return;\n    case 3:\n      b = b.stateNode;\n      b.hydrate && (b.hydrate = !1, Vc(b.containerInfo));\n      return;\n    case 12:\n      return;\n    case 13:\n      c = b;\n      null === b.memoizedState ? d = !1 : (d = !0, c = b.child, Ti = $f());\n      if (null !== c) a: for (a = c;;) {\n        if (5 === a.tag) f = a.stateNode, d ? (f = f.style, \"function\" === typeof f.setProperty ? f.setProperty(\"display\", \"none\", \"important\") : f.display = \"none\") : (f = a.stateNode, e = a.memoizedProps.style, e = void 0 !== e && null !== e && e.hasOwnProperty(\"display\") ? e.display : null, f.style.display = ld(\"display\", e));else if (6 === a.tag) a.stateNode.nodeValue = d ? \"\" : a.memoizedProps;else if (13 === a.tag && null !== a.memoizedState && null === a.memoizedState.dehydrated) {\n          f = a.child.sibling;\n          f.return = a;\n          a = f;\n          continue;\n        } else if (null !== a.child) {\n          a.child.return = a;\n          a = a.child;\n          continue;\n        }\n        if (a === c) break;\n        for (; null === a.sibling;) {\n          if (null === a.return || a.return === c) break a;\n          a = a.return;\n        }\n        a.sibling.return = a.return;\n        a = a.sibling;\n      }\n      Ui(b);\n      return;\n    case 19:\n      Ui(b);\n      return;\n    case 17:\n      return;\n  }\n  throw Error(u(163));\n}\nfunction Ui(a) {\n  var b = a.updateQueue;\n  if (null !== b) {\n    a.updateQueue = null;\n    var c = a.stateNode;\n    null === c && (c = a.stateNode = new Bi());\n    b.forEach(function (b) {\n      var d = Vi.bind(null, a, b);\n      c.has(b) || (c.add(b), b.then(d, d));\n    });\n  }\n}\nvar Wi = \"function\" === typeof WeakMap ? WeakMap : Map;\nfunction Xi(a, b, c) {\n  c = wg(c, null);\n  c.tag = 3;\n  c.payload = {\n    element: null\n  };\n  var d = b.value;\n  c.callback = function () {\n    Yi || (Yi = !0, Zi = d);\n    Ci(a, b);\n  };\n  return c;\n}\nfunction $i(a, b, c) {\n  c = wg(c, null);\n  c.tag = 3;\n  var d = a.type.getDerivedStateFromError;\n  if (\"function\" === typeof d) {\n    var e = b.value;\n    c.payload = function () {\n      Ci(a, b);\n      return d(e);\n    };\n  }\n  var f = a.stateNode;\n  null !== f && \"function\" === typeof f.componentDidCatch && (c.callback = function () {\n    \"function\" !== typeof d && (null === aj ? aj = new Set([this]) : aj.add(this), Ci(a, b));\n    var c = b.stack;\n    this.componentDidCatch(b.value, {\n      componentStack: null !== c ? c : \"\"\n    });\n  });\n  return c;\n}\nvar bj = Math.ceil,\n  cj = Wa.ReactCurrentDispatcher,\n  dj = Wa.ReactCurrentOwner,\n  V = 0,\n  ej = 8,\n  fj = 16,\n  gj = 32,\n  ti = 0,\n  hj = 1,\n  ij = 2,\n  ui = 3,\n  vi = 4,\n  jj = 5,\n  W = V,\n  T = null,\n  X = null,\n  U = 0,\n  S = ti,\n  kj = null,\n  lj = 1073741823,\n  mj = 1073741823,\n  nj = null,\n  wi = 0,\n  oj = !1,\n  Ti = 0,\n  pj = 500,\n  Y = null,\n  Yi = !1,\n  Zi = null,\n  aj = null,\n  qj = !1,\n  rj = null,\n  sj = 90,\n  tj = null,\n  uj = 0,\n  vj = null,\n  wj = 0;\nfunction Gg() {\n  return (W & (fj | gj)) !== V ? 1073741821 - ($f() / 10 | 0) : 0 !== wj ? wj : wj = 1073741821 - ($f() / 10 | 0);\n}\nfunction Hg(a, b, c) {\n  b = b.mode;\n  if (0 === (b & 2)) return 1073741823;\n  var d = ag();\n  if (0 === (b & 4)) return 99 === d ? 1073741823 : 1073741822;\n  if ((W & fj) !== V) return U;\n  if (null !== c) a = hg(a, c.timeoutMs | 0 || 5E3, 250);else switch (d) {\n    case 99:\n      a = 1073741823;\n      break;\n    case 98:\n      a = hg(a, 150, 100);\n      break;\n    case 97:\n    case 96:\n      a = hg(a, 5E3, 250);\n      break;\n    case 95:\n      a = 2;\n      break;\n    default:\n      throw Error(u(326));\n  }\n  null !== T && a === U && --a;\n  return a;\n}\nfunction Ig(a, b) {\n  if (50 < uj) throw uj = 0, vj = null, Error(u(185));\n  a = xj(a, b);\n  if (null !== a) {\n    var c = ag();\n    1073741823 === b ? (W & ej) !== V && (W & (fj | gj)) === V ? yj(a) : (Z(a), W === V && gg()) : Z(a);\n    (W & 4) === V || 98 !== c && 99 !== c || (null === tj ? tj = new Map([[a, b]]) : (c = tj.get(a), (void 0 === c || c > b) && tj.set(a, b)));\n  }\n}\nfunction xj(a, b) {\n  a.expirationTime < b && (a.expirationTime = b);\n  var c = a.alternate;\n  null !== c && c.expirationTime < b && (c.expirationTime = b);\n  var d = a.return,\n    e = null;\n  if (null === d && 3 === a.tag) e = a.stateNode;else for (; null !== d;) {\n    c = d.alternate;\n    d.childExpirationTime < b && (d.childExpirationTime = b);\n    null !== c && c.childExpirationTime < b && (c.childExpirationTime = b);\n    if (null === d.return && 3 === d.tag) {\n      e = d.stateNode;\n      break;\n    }\n    d = d.return;\n  }\n  null !== e && (T === e && (Bg(b), S === vi && xi(e, U)), yi(e, b));\n  return e;\n}\nfunction zj(a) {\n  var b = a.lastExpiredTime;\n  if (0 !== b) return b;\n  b = a.firstPendingTime;\n  if (!Aj(a, b)) return b;\n  var c = a.lastPingedTime;\n  a = a.nextKnownPendingLevel;\n  a = c > a ? c : a;\n  return 2 >= a && b !== a ? 0 : a;\n}\nfunction Z(a) {\n  if (0 !== a.lastExpiredTime) a.callbackExpirationTime = 1073741823, a.callbackPriority = 99, a.callbackNode = eg(yj.bind(null, a));else {\n    var b = zj(a),\n      c = a.callbackNode;\n    if (0 === b) null !== c && (a.callbackNode = null, a.callbackExpirationTime = 0, a.callbackPriority = 90);else {\n      var d = Gg();\n      1073741823 === b ? d = 99 : 1 === b || 2 === b ? d = 95 : (d = 10 * (1073741821 - b) - 10 * (1073741821 - d), d = 0 >= d ? 99 : 250 >= d ? 98 : 5250 >= d ? 97 : 95);\n      if (null !== c) {\n        var e = a.callbackPriority;\n        if (a.callbackExpirationTime === b && e >= d) return;\n        c !== Tf && Kf(c);\n      }\n      a.callbackExpirationTime = b;\n      a.callbackPriority = d;\n      b = 1073741823 === b ? eg(yj.bind(null, a)) : dg(d, Bj.bind(null, a), {\n        timeout: 10 * (1073741821 - b) - $f()\n      });\n      a.callbackNode = b;\n    }\n  }\n}\nfunction Bj(a, b) {\n  wj = 0;\n  if (b) return b = Gg(), Cj(a, b), Z(a), null;\n  var c = zj(a);\n  if (0 !== c) {\n    b = a.callbackNode;\n    if ((W & (fj | gj)) !== V) throw Error(u(327));\n    Dj();\n    a === T && c === U || Ej(a, c);\n    if (null !== X) {\n      var d = W;\n      W |= fj;\n      var e = Fj();\n      do try {\n        Gj();\n        break;\n      } catch (h) {\n        Hj(a, h);\n      } while (1);\n      ng();\n      W = d;\n      cj.current = e;\n      if (S === hj) throw b = kj, Ej(a, c), xi(a, c), Z(a), b;\n      if (null === X) switch (e = a.finishedWork = a.current.alternate, a.finishedExpirationTime = c, d = S, T = null, d) {\n        case ti:\n        case hj:\n          throw Error(u(345));\n        case ij:\n          Cj(a, 2 < c ? 2 : c);\n          break;\n        case ui:\n          xi(a, c);\n          d = a.lastSuspendedTime;\n          c === d && (a.nextKnownPendingLevel = Ij(e));\n          if (1073741823 === lj && (e = Ti + pj - $f(), 10 < e)) {\n            if (oj) {\n              var f = a.lastPingedTime;\n              if (0 === f || f >= c) {\n                a.lastPingedTime = c;\n                Ej(a, c);\n                break;\n              }\n            }\n            f = zj(a);\n            if (0 !== f && f !== c) break;\n            if (0 !== d && d !== c) {\n              a.lastPingedTime = d;\n              break;\n            }\n            a.timeoutHandle = Hd(Jj.bind(null, a), e);\n            break;\n          }\n          Jj(a);\n          break;\n        case vi:\n          xi(a, c);\n          d = a.lastSuspendedTime;\n          c === d && (a.nextKnownPendingLevel = Ij(e));\n          if (oj && (e = a.lastPingedTime, 0 === e || e >= c)) {\n            a.lastPingedTime = c;\n            Ej(a, c);\n            break;\n          }\n          e = zj(a);\n          if (0 !== e && e !== c) break;\n          if (0 !== d && d !== c) {\n            a.lastPingedTime = d;\n            break;\n          }\n          1073741823 !== mj ? d = 10 * (1073741821 - mj) - $f() : 1073741823 === lj ? d = 0 : (d = 10 * (1073741821 - lj) - 5E3, e = $f(), c = 10 * (1073741821 - c) - e, d = e - d, 0 > d && (d = 0), d = (120 > d ? 120 : 480 > d ? 480 : 1080 > d ? 1080 : 1920 > d ? 1920 : 3E3 > d ? 3E3 : 4320 > d ? 4320 : 1960 * bj(d / 1960)) - d, c < d && (d = c));\n          if (10 < d) {\n            a.timeoutHandle = Hd(Jj.bind(null, a), d);\n            break;\n          }\n          Jj(a);\n          break;\n        case jj:\n          if (1073741823 !== lj && null !== nj) {\n            f = lj;\n            var g = nj;\n            d = g.busyMinDurationMs | 0;\n            0 >= d ? d = 0 : (e = g.busyDelayMs | 0, f = $f() - (10 * (1073741821 - f) - (g.timeoutMs | 0 || 5E3)), d = f <= e ? 0 : e + d - f);\n            if (10 < d) {\n              xi(a, c);\n              a.timeoutHandle = Hd(Jj.bind(null, a), d);\n              break;\n            }\n          }\n          Jj(a);\n          break;\n        default:\n          throw Error(u(329));\n      }\n      Z(a);\n      if (a.callbackNode === b) return Bj.bind(null, a);\n    }\n  }\n  return null;\n}\nfunction yj(a) {\n  var b = a.lastExpiredTime;\n  b = 0 !== b ? b : 1073741823;\n  if ((W & (fj | gj)) !== V) throw Error(u(327));\n  Dj();\n  a === T && b === U || Ej(a, b);\n  if (null !== X) {\n    var c = W;\n    W |= fj;\n    var d = Fj();\n    do try {\n      Kj();\n      break;\n    } catch (e) {\n      Hj(a, e);\n    } while (1);\n    ng();\n    W = c;\n    cj.current = d;\n    if (S === hj) throw c = kj, Ej(a, b), xi(a, b), Z(a), c;\n    if (null !== X) throw Error(u(261));\n    a.finishedWork = a.current.alternate;\n    a.finishedExpirationTime = b;\n    T = null;\n    Jj(a);\n    Z(a);\n  }\n  return null;\n}\nfunction Lj() {\n  if (null !== tj) {\n    var a = tj;\n    tj = null;\n    a.forEach(function (a, c) {\n      Cj(c, a);\n      Z(c);\n    });\n    gg();\n  }\n}\nfunction Mj(a, b) {\n  var c = W;\n  W |= 1;\n  try {\n    return a(b);\n  } finally {\n    W = c, W === V && gg();\n  }\n}\nfunction Nj(a, b) {\n  var c = W;\n  W &= -2;\n  W |= ej;\n  try {\n    return a(b);\n  } finally {\n    W = c, W === V && gg();\n  }\n}\nfunction Ej(a, b) {\n  a.finishedWork = null;\n  a.finishedExpirationTime = 0;\n  var c = a.timeoutHandle;\n  -1 !== c && (a.timeoutHandle = -1, Id(c));\n  if (null !== X) for (c = X.return; null !== c;) {\n    var d = c;\n    switch (d.tag) {\n      case 1:\n        d = d.type.childContextTypes;\n        null !== d && void 0 !== d && Df();\n        break;\n      case 3:\n        eh();\n        H(K);\n        H(J);\n        break;\n      case 5:\n        gh(d);\n        break;\n      case 4:\n        eh();\n        break;\n      case 13:\n        H(M);\n        break;\n      case 19:\n        H(M);\n        break;\n      case 10:\n        og(d);\n    }\n    c = c.return;\n  }\n  T = a;\n  X = Sg(a.current, null);\n  U = b;\n  S = ti;\n  kj = null;\n  mj = lj = 1073741823;\n  nj = null;\n  wi = 0;\n  oj = !1;\n}\nfunction Hj(a, b) {\n  do {\n    try {\n      ng();\n      jh.current = sh;\n      if (mh) for (var c = N.memoizedState; null !== c;) {\n        var d = c.queue;\n        null !== d && (d.pending = null);\n        c = c.next;\n      }\n      lh = 0;\n      P = O = N = null;\n      mh = !1;\n      if (null === X || null === X.return) return S = hj, kj = b, X = null;\n      a: {\n        var e = a,\n          f = X.return,\n          g = X,\n          h = b;\n        b = U;\n        g.effectTag |= 2048;\n        g.firstEffect = g.lastEffect = null;\n        if (null !== h && \"object\" === typeof h && \"function\" === typeof h.then) {\n          var k = h;\n          if (0 === (g.mode & 2)) {\n            var l = g.alternate;\n            l ? (g.updateQueue = l.updateQueue, g.memoizedState = l.memoizedState, g.expirationTime = l.expirationTime) : (g.updateQueue = null, g.memoizedState = null);\n          }\n          var m = 0 !== (M.current & 1),\n            p = f;\n          do {\n            var x;\n            if (x = 13 === p.tag) {\n              var z = p.memoizedState;\n              if (null !== z) x = null !== z.dehydrated ? !0 : !1;else {\n                var ca = p.memoizedProps;\n                x = void 0 === ca.fallback ? !1 : !0 !== ca.unstable_avoidThisFallback ? !0 : m ? !1 : !0;\n              }\n            }\n            if (x) {\n              var D = p.updateQueue;\n              if (null === D) {\n                var t = new Set();\n                t.add(k);\n                p.updateQueue = t;\n              } else D.add(k);\n              if (0 === (p.mode & 2)) {\n                p.effectTag |= 64;\n                g.effectTag &= -2981;\n                if (1 === g.tag) if (null === g.alternate) g.tag = 17;else {\n                  var y = wg(1073741823, null);\n                  y.tag = 2;\n                  xg(g, y);\n                }\n                g.expirationTime = 1073741823;\n                break a;\n              }\n              h = void 0;\n              g = b;\n              var A = e.pingCache;\n              null === A ? (A = e.pingCache = new Wi(), h = new Set(), A.set(k, h)) : (h = A.get(k), void 0 === h && (h = new Set(), A.set(k, h)));\n              if (!h.has(g)) {\n                h.add(g);\n                var q = Oj.bind(null, e, k, g);\n                k.then(q, q);\n              }\n              p.effectTag |= 4096;\n              p.expirationTime = b;\n              break a;\n            }\n            p = p.return;\n          } while (null !== p);\n          h = Error((pb(g.type) || \"A React component\") + \" suspended while rendering, but no fallback UI was specified.\\n\\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.\" + qb(g));\n        }\n        S !== jj && (S = ij);\n        h = Ai(h, g);\n        p = f;\n        do {\n          switch (p.tag) {\n            case 3:\n              k = h;\n              p.effectTag |= 4096;\n              p.expirationTime = b;\n              var B = Xi(p, k, b);\n              yg(p, B);\n              break a;\n            case 1:\n              k = h;\n              var w = p.type,\n                ub = p.stateNode;\n              if (0 === (p.effectTag & 64) && (\"function\" === typeof w.getDerivedStateFromError || null !== ub && \"function\" === typeof ub.componentDidCatch && (null === aj || !aj.has(ub)))) {\n                p.effectTag |= 4096;\n                p.expirationTime = b;\n                var vb = $i(p, k, b);\n                yg(p, vb);\n                break a;\n              }\n          }\n          p = p.return;\n        } while (null !== p);\n      }\n      X = Pj(X);\n    } catch (Xc) {\n      b = Xc;\n      continue;\n    }\n    break;\n  } while (1);\n}\nfunction Fj() {\n  var a = cj.current;\n  cj.current = sh;\n  return null === a ? sh : a;\n}\nfunction Ag(a, b) {\n  a < lj && 2 < a && (lj = a);\n  null !== b && a < mj && 2 < a && (mj = a, nj = b);\n}\nfunction Bg(a) {\n  a > wi && (wi = a);\n}\nfunction Kj() {\n  for (; null !== X;) X = Qj(X);\n}\nfunction Gj() {\n  for (; null !== X && !Uf();) X = Qj(X);\n}\nfunction Qj(a) {\n  var b = Rj(a.alternate, a, U);\n  a.memoizedProps = a.pendingProps;\n  null === b && (b = Pj(a));\n  dj.current = null;\n  return b;\n}\nfunction Pj(a) {\n  X = a;\n  do {\n    var b = X.alternate;\n    a = X.return;\n    if (0 === (X.effectTag & 2048)) {\n      b = si(b, X, U);\n      if (1 === U || 1 !== X.childExpirationTime) {\n        for (var c = 0, d = X.child; null !== d;) {\n          var e = d.expirationTime,\n            f = d.childExpirationTime;\n          e > c && (c = e);\n          f > c && (c = f);\n          d = d.sibling;\n        }\n        X.childExpirationTime = c;\n      }\n      if (null !== b) return b;\n      null !== a && 0 === (a.effectTag & 2048) && (null === a.firstEffect && (a.firstEffect = X.firstEffect), null !== X.lastEffect && (null !== a.lastEffect && (a.lastEffect.nextEffect = X.firstEffect), a.lastEffect = X.lastEffect), 1 < X.effectTag && (null !== a.lastEffect ? a.lastEffect.nextEffect = X : a.firstEffect = X, a.lastEffect = X));\n    } else {\n      b = zi(X);\n      if (null !== b) return b.effectTag &= 2047, b;\n      null !== a && (a.firstEffect = a.lastEffect = null, a.effectTag |= 2048);\n    }\n    b = X.sibling;\n    if (null !== b) return b;\n    X = a;\n  } while (null !== X);\n  S === ti && (S = jj);\n  return null;\n}\nfunction Ij(a) {\n  var b = a.expirationTime;\n  a = a.childExpirationTime;\n  return b > a ? b : a;\n}\nfunction Jj(a) {\n  var b = ag();\n  cg(99, Sj.bind(null, a, b));\n  return null;\n}\nfunction Sj(a, b) {\n  do Dj(); while (null !== rj);\n  if ((W & (fj | gj)) !== V) throw Error(u(327));\n  var c = a.finishedWork,\n    d = a.finishedExpirationTime;\n  if (null === c) return null;\n  a.finishedWork = null;\n  a.finishedExpirationTime = 0;\n  if (c === a.current) throw Error(u(177));\n  a.callbackNode = null;\n  a.callbackExpirationTime = 0;\n  a.callbackPriority = 90;\n  a.nextKnownPendingLevel = 0;\n  var e = Ij(c);\n  a.firstPendingTime = e;\n  d <= a.lastSuspendedTime ? a.firstSuspendedTime = a.lastSuspendedTime = a.nextKnownPendingLevel = 0 : d <= a.firstSuspendedTime && (a.firstSuspendedTime = d - 1);\n  d <= a.lastPingedTime && (a.lastPingedTime = 0);\n  d <= a.lastExpiredTime && (a.lastExpiredTime = 0);\n  a === T && (X = T = null, U = 0);\n  1 < c.effectTag ? null !== c.lastEffect ? (c.lastEffect.nextEffect = c, e = c.firstEffect) : e = c : e = c.firstEffect;\n  if (null !== e) {\n    var f = W;\n    W |= gj;\n    dj.current = null;\n    Dd = fd;\n    var g = xd();\n    if (yd(g)) {\n      if (\"selectionStart\" in g) var h = {\n        start: g.selectionStart,\n        end: g.selectionEnd\n      };else a: {\n        h = (h = g.ownerDocument) && h.defaultView || window;\n        var k = h.getSelection && h.getSelection();\n        if (k && 0 !== k.rangeCount) {\n          h = k.anchorNode;\n          var l = k.anchorOffset,\n            m = k.focusNode;\n          k = k.focusOffset;\n          try {\n            h.nodeType, m.nodeType;\n          } catch (wb) {\n            h = null;\n            break a;\n          }\n          var p = 0,\n            x = -1,\n            z = -1,\n            ca = 0,\n            D = 0,\n            t = g,\n            y = null;\n          b: for (;;) {\n            for (var A;;) {\n              t !== h || 0 !== l && 3 !== t.nodeType || (x = p + l);\n              t !== m || 0 !== k && 3 !== t.nodeType || (z = p + k);\n              3 === t.nodeType && (p += t.nodeValue.length);\n              if (null === (A = t.firstChild)) break;\n              y = t;\n              t = A;\n            }\n            for (;;) {\n              if (t === g) break b;\n              y === h && ++ca === l && (x = p);\n              y === m && ++D === k && (z = p);\n              if (null !== (A = t.nextSibling)) break;\n              t = y;\n              y = t.parentNode;\n            }\n            t = A;\n          }\n          h = -1 === x || -1 === z ? null : {\n            start: x,\n            end: z\n          };\n        } else h = null;\n      }\n      h = h || {\n        start: 0,\n        end: 0\n      };\n    } else h = null;\n    Ed = {\n      activeElementDetached: null,\n      focusedElem: g,\n      selectionRange: h\n    };\n    fd = !1;\n    Y = e;\n    do try {\n      Tj();\n    } catch (wb) {\n      if (null === Y) throw Error(u(330));\n      Ei(Y, wb);\n      Y = Y.nextEffect;\n    } while (null !== Y);\n    Y = e;\n    do try {\n      for (g = a, h = b; null !== Y;) {\n        var q = Y.effectTag;\n        q & 16 && Rb(Y.stateNode, \"\");\n        if (q & 128) {\n          var B = Y.alternate;\n          if (null !== B) {\n            var w = B.ref;\n            null !== w && (\"function\" === typeof w ? w(null) : w.current = null);\n          }\n        }\n        switch (q & 1038) {\n          case 2:\n            Pi(Y);\n            Y.effectTag &= -3;\n            break;\n          case 6:\n            Pi(Y);\n            Y.effectTag &= -3;\n            Si(Y.alternate, Y);\n            break;\n          case 1024:\n            Y.effectTag &= -1025;\n            break;\n          case 1028:\n            Y.effectTag &= -1025;\n            Si(Y.alternate, Y);\n            break;\n          case 4:\n            Si(Y.alternate, Y);\n            break;\n          case 8:\n            l = Y, Mi(g, l, h), Ni(l);\n        }\n        Y = Y.nextEffect;\n      }\n    } catch (wb) {\n      if (null === Y) throw Error(u(330));\n      Ei(Y, wb);\n      Y = Y.nextEffect;\n    } while (null !== Y);\n    w = Ed;\n    B = xd();\n    q = w.focusedElem;\n    h = w.selectionRange;\n    if (B !== q && q && q.ownerDocument && wd(q.ownerDocument.documentElement, q)) {\n      null !== h && yd(q) && (B = h.start, w = h.end, void 0 === w && (w = B), \"selectionStart\" in q ? (q.selectionStart = B, q.selectionEnd = Math.min(w, q.value.length)) : (w = (B = q.ownerDocument || document) && B.defaultView || window, w.getSelection && (w = w.getSelection(), l = q.textContent.length, g = Math.min(h.start, l), h = void 0 === h.end ? g : Math.min(h.end, l), !w.extend && g > h && (l = h, h = g, g = l), l = vd(q, g), m = vd(q, h), l && m && (1 !== w.rangeCount || w.anchorNode !== l.node || w.anchorOffset !== l.offset || w.focusNode !== m.node || w.focusOffset !== m.offset) && (B = B.createRange(), B.setStart(l.node, l.offset), w.removeAllRanges(), g > h ? (w.addRange(B), w.extend(m.node, m.offset)) : (B.setEnd(m.node, m.offset), w.addRange(B))))));\n      B = [];\n      for (w = q; w = w.parentNode;) 1 === w.nodeType && B.push({\n        element: w,\n        left: w.scrollLeft,\n        top: w.scrollTop\n      });\n      \"function\" === typeof q.focus && q.focus();\n      for (q = 0; q < B.length; q++) w = B[q], w.element.scrollLeft = w.left, w.element.scrollTop = w.top;\n    }\n    fd = !!Dd;\n    Ed = Dd = null;\n    a.current = c;\n    Y = e;\n    do try {\n      for (q = a; null !== Y;) {\n        var ub = Y.effectTag;\n        ub & 36 && Ji(q, Y.alternate, Y);\n        if (ub & 128) {\n          B = void 0;\n          var vb = Y.ref;\n          if (null !== vb) {\n            var Xc = Y.stateNode;\n            switch (Y.tag) {\n              case 5:\n                B = Xc;\n                break;\n              default:\n                B = Xc;\n            }\n            \"function\" === typeof vb ? vb(B) : vb.current = B;\n          }\n        }\n        Y = Y.nextEffect;\n      }\n    } catch (wb) {\n      if (null === Y) throw Error(u(330));\n      Ei(Y, wb);\n      Y = Y.nextEffect;\n    } while (null !== Y);\n    Y = null;\n    Vf();\n    W = f;\n  } else a.current = c;\n  if (qj) qj = !1, rj = a, sj = b;else for (Y = e; null !== Y;) b = Y.nextEffect, Y.nextEffect = null, Y = b;\n  b = a.firstPendingTime;\n  0 === b && (aj = null);\n  1073741823 === b ? a === vj ? uj++ : (uj = 0, vj = a) : uj = 0;\n  \"function\" === typeof Uj && Uj(c.stateNode, d);\n  Z(a);\n  if (Yi) throw Yi = !1, a = Zi, Zi = null, a;\n  if ((W & ej) !== V) return null;\n  gg();\n  return null;\n}\nfunction Tj() {\n  for (; null !== Y;) {\n    var a = Y.effectTag;\n    0 !== (a & 256) && Gi(Y.alternate, Y);\n    0 === (a & 512) || qj || (qj = !0, dg(97, function () {\n      Dj();\n      return null;\n    }));\n    Y = Y.nextEffect;\n  }\n}\nfunction Dj() {\n  if (90 !== sj) {\n    var a = 97 < sj ? 97 : sj;\n    sj = 90;\n    return cg(a, Vj);\n  }\n}\nfunction Vj() {\n  if (null === rj) return !1;\n  var a = rj;\n  rj = null;\n  if ((W & (fj | gj)) !== V) throw Error(u(331));\n  var b = W;\n  W |= gj;\n  for (a = a.current.firstEffect; null !== a;) {\n    try {\n      var c = a;\n      if (0 !== (c.effectTag & 512)) switch (c.tag) {\n        case 0:\n        case 11:\n        case 15:\n        case 22:\n          Hi(5, c), Ii(5, c);\n      }\n    } catch (d) {\n      if (null === a) throw Error(u(330));\n      Ei(a, d);\n    }\n    c = a.nextEffect;\n    a.nextEffect = null;\n    a = c;\n  }\n  W = b;\n  gg();\n  return !0;\n}\nfunction Wj(a, b, c) {\n  b = Ai(c, b);\n  b = Xi(a, b, 1073741823);\n  xg(a, b);\n  a = xj(a, 1073741823);\n  null !== a && Z(a);\n}\nfunction Ei(a, b) {\n  if (3 === a.tag) Wj(a, a, b);else for (var c = a.return; null !== c;) {\n    if (3 === c.tag) {\n      Wj(c, a, b);\n      break;\n    } else if (1 === c.tag) {\n      var d = c.stateNode;\n      if (\"function\" === typeof c.type.getDerivedStateFromError || \"function\" === typeof d.componentDidCatch && (null === aj || !aj.has(d))) {\n        a = Ai(b, a);\n        a = $i(c, a, 1073741823);\n        xg(c, a);\n        c = xj(c, 1073741823);\n        null !== c && Z(c);\n        break;\n      }\n    }\n    c = c.return;\n  }\n}\nfunction Oj(a, b, c) {\n  var d = a.pingCache;\n  null !== d && d.delete(b);\n  T === a && U === c ? S === vi || S === ui && 1073741823 === lj && $f() - Ti < pj ? Ej(a, U) : oj = !0 : Aj(a, c) && (b = a.lastPingedTime, 0 !== b && b < c || (a.lastPingedTime = c, Z(a)));\n}\nfunction Vi(a, b) {\n  var c = a.stateNode;\n  null !== c && c.delete(b);\n  b = 0;\n  0 === b && (b = Gg(), b = Hg(b, a, null));\n  a = xj(a, b);\n  null !== a && Z(a);\n}\nvar Rj;\nRj = function (a, b, c) {\n  var d = b.expirationTime;\n  if (null !== a) {\n    var e = b.pendingProps;\n    if (a.memoizedProps !== e || K.current) rg = !0;else {\n      if (d < c) {\n        rg = !1;\n        switch (b.tag) {\n          case 3:\n            hi(b);\n            Xh();\n            break;\n          case 5:\n            fh(b);\n            if (b.mode & 4 && 1 !== c && e.hidden) return b.expirationTime = b.childExpirationTime = 1, null;\n            break;\n          case 1:\n            L(b.type) && Gf(b);\n            break;\n          case 4:\n            dh(b, b.stateNode.containerInfo);\n            break;\n          case 10:\n            d = b.memoizedProps.value;\n            e = b.type._context;\n            I(jg, e._currentValue);\n            e._currentValue = d;\n            break;\n          case 13:\n            if (null !== b.memoizedState) {\n              d = b.child.childExpirationTime;\n              if (0 !== d && d >= c) return ji(a, b, c);\n              I(M, M.current & 1);\n              b = $h(a, b, c);\n              return null !== b ? b.sibling : null;\n            }\n            I(M, M.current & 1);\n            break;\n          case 19:\n            d = b.childExpirationTime >= c;\n            if (0 !== (a.effectTag & 64)) {\n              if (d) return mi(a, b, c);\n              b.effectTag |= 64;\n            }\n            e = b.memoizedState;\n            null !== e && (e.rendering = null, e.tail = null);\n            I(M, M.current);\n            if (!d) return null;\n        }\n        return $h(a, b, c);\n      }\n      rg = !1;\n    }\n  } else rg = !1;\n  b.expirationTime = 0;\n  switch (b.tag) {\n    case 2:\n      d = b.type;\n      null !== a && (a.alternate = null, b.alternate = null, b.effectTag |= 2);\n      a = b.pendingProps;\n      e = Cf(b, J.current);\n      qg(b, c);\n      e = oh(null, b, d, a, e, c);\n      b.effectTag |= 1;\n      if (\"object\" === typeof e && null !== e && \"function\" === typeof e.render && void 0 === e.$$typeof) {\n        b.tag = 1;\n        b.memoizedState = null;\n        b.updateQueue = null;\n        if (L(d)) {\n          var f = !0;\n          Gf(b);\n        } else f = !1;\n        b.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null;\n        ug(b);\n        var g = d.getDerivedStateFromProps;\n        \"function\" === typeof g && Fg(b, d, g, a);\n        e.updater = Jg;\n        b.stateNode = e;\n        e._reactInternalFiber = b;\n        Ng(b, d, a, c);\n        b = gi(null, b, d, !0, f, c);\n      } else b.tag = 0, R(null, b, e, c), b = b.child;\n      return b;\n    case 16:\n      a: {\n        e = b.elementType;\n        null !== a && (a.alternate = null, b.alternate = null, b.effectTag |= 2);\n        a = b.pendingProps;\n        ob(e);\n        if (1 !== e._status) throw e._result;\n        e = e._result;\n        b.type = e;\n        f = b.tag = Xj(e);\n        a = ig(e, a);\n        switch (f) {\n          case 0:\n            b = di(null, b, e, a, c);\n            break a;\n          case 1:\n            b = fi(null, b, e, a, c);\n            break a;\n          case 11:\n            b = Zh(null, b, e, a, c);\n            break a;\n          case 14:\n            b = ai(null, b, e, ig(e.type, a), d, c);\n            break a;\n        }\n        throw Error(u(306, e, \"\"));\n      }\n      return b;\n    case 0:\n      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : ig(d, e), di(a, b, d, e, c);\n    case 1:\n      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : ig(d, e), fi(a, b, d, e, c);\n    case 3:\n      hi(b);\n      d = b.updateQueue;\n      if (null === a || null === d) throw Error(u(282));\n      d = b.pendingProps;\n      e = b.memoizedState;\n      e = null !== e ? e.element : null;\n      vg(a, b);\n      zg(b, d, null, c);\n      d = b.memoizedState.element;\n      if (d === e) Xh(), b = $h(a, b, c);else {\n        if (e = b.stateNode.hydrate) Ph = Jd(b.stateNode.containerInfo.firstChild), Oh = b, e = Qh = !0;\n        if (e) for (c = Yg(b, null, d, c), b.child = c; c;) c.effectTag = c.effectTag & -3 | 1024, c = c.sibling;else R(a, b, d, c), Xh();\n        b = b.child;\n      }\n      return b;\n    case 5:\n      return fh(b), null === a && Uh(b), d = b.type, e = b.pendingProps, f = null !== a ? a.memoizedProps : null, g = e.children, Gd(d, e) ? g = null : null !== f && Gd(d, f) && (b.effectTag |= 16), ei(a, b), b.mode & 4 && 1 !== c && e.hidden ? (b.expirationTime = b.childExpirationTime = 1, b = null) : (R(a, b, g, c), b = b.child), b;\n    case 6:\n      return null === a && Uh(b), null;\n    case 13:\n      return ji(a, b, c);\n    case 4:\n      return dh(b, b.stateNode.containerInfo), d = b.pendingProps, null === a ? b.child = Xg(b, null, d, c) : R(a, b, d, c), b.child;\n    case 11:\n      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : ig(d, e), Zh(a, b, d, e, c);\n    case 7:\n      return R(a, b, b.pendingProps, c), b.child;\n    case 8:\n      return R(a, b, b.pendingProps.children, c), b.child;\n    case 12:\n      return R(a, b, b.pendingProps.children, c), b.child;\n    case 10:\n      a: {\n        d = b.type._context;\n        e = b.pendingProps;\n        g = b.memoizedProps;\n        f = e.value;\n        var h = b.type._context;\n        I(jg, h._currentValue);\n        h._currentValue = f;\n        if (null !== g) if (h = g.value, f = $e(h, f) ? 0 : (\"function\" === typeof d._calculateChangedBits ? d._calculateChangedBits(h, f) : 1073741823) | 0, 0 === f) {\n          if (g.children === e.children && !K.current) {\n            b = $h(a, b, c);\n            break a;\n          }\n        } else for (h = b.child, null !== h && (h.return = b); null !== h;) {\n          var k = h.dependencies;\n          if (null !== k) {\n            g = h.child;\n            for (var l = k.firstContext; null !== l;) {\n              if (l.context === d && 0 !== (l.observedBits & f)) {\n                1 === h.tag && (l = wg(c, null), l.tag = 2, xg(h, l));\n                h.expirationTime < c && (h.expirationTime = c);\n                l = h.alternate;\n                null !== l && l.expirationTime < c && (l.expirationTime = c);\n                pg(h.return, c);\n                k.expirationTime < c && (k.expirationTime = c);\n                break;\n              }\n              l = l.next;\n            }\n          } else g = 10 === h.tag ? h.type === b.type ? null : h.child : h.child;\n          if (null !== g) g.return = h;else for (g = h; null !== g;) {\n            if (g === b) {\n              g = null;\n              break;\n            }\n            h = g.sibling;\n            if (null !== h) {\n              h.return = g.return;\n              g = h;\n              break;\n            }\n            g = g.return;\n          }\n          h = g;\n        }\n        R(a, b, e.children, c);\n        b = b.child;\n      }\n      return b;\n    case 9:\n      return e = b.type, f = b.pendingProps, d = f.children, qg(b, c), e = sg(e, f.unstable_observedBits), d = d(e), b.effectTag |= 1, R(a, b, d, c), b.child;\n    case 14:\n      return e = b.type, f = ig(e, b.pendingProps), f = ig(e.type, f), ai(a, b, e, f, d, c);\n    case 15:\n      return ci(a, b, b.type, b.pendingProps, d, c);\n    case 17:\n      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : ig(d, e), null !== a && (a.alternate = null, b.alternate = null, b.effectTag |= 2), b.tag = 1, L(d) ? (a = !0, Gf(b)) : a = !1, qg(b, c), Lg(b, d, e), Ng(b, d, e, c), gi(null, b, d, !0, a, c);\n    case 19:\n      return mi(a, b, c);\n  }\n  throw Error(u(156, b.tag));\n};\nvar Uj = null,\n  Li = null;\nfunction Yj(a) {\n  if (\"undefined\" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return !1;\n  var b = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n  if (b.isDisabled || !b.supportsFiber) return !0;\n  try {\n    var c = b.inject(a);\n    Uj = function (a) {\n      try {\n        b.onCommitFiberRoot(c, a, void 0, 64 === (a.current.effectTag & 64));\n      } catch (e) {}\n    };\n    Li = function (a) {\n      try {\n        b.onCommitFiberUnmount(c, a);\n      } catch (e) {}\n    };\n  } catch (d) {}\n  return !0;\n}\nfunction Zj(a, b, c, d) {\n  this.tag = a;\n  this.key = c;\n  this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;\n  this.index = 0;\n  this.ref = null;\n  this.pendingProps = b;\n  this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;\n  this.mode = d;\n  this.effectTag = 0;\n  this.lastEffect = this.firstEffect = this.nextEffect = null;\n  this.childExpirationTime = this.expirationTime = 0;\n  this.alternate = null;\n}\nfunction Sh(a, b, c, d) {\n  return new Zj(a, b, c, d);\n}\nfunction bi(a) {\n  a = a.prototype;\n  return !(!a || !a.isReactComponent);\n}\nfunction Xj(a) {\n  if (\"function\" === typeof a) return bi(a) ? 1 : 0;\n  if (void 0 !== a && null !== a) {\n    a = a.$$typeof;\n    if (a === gb) return 11;\n    if (a === jb) return 14;\n  }\n  return 2;\n}\nfunction Sg(a, b) {\n  var c = a.alternate;\n  null === c ? (c = Sh(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.effectTag = 0, c.nextEffect = null, c.firstEffect = null, c.lastEffect = null);\n  c.childExpirationTime = a.childExpirationTime;\n  c.expirationTime = a.expirationTime;\n  c.child = a.child;\n  c.memoizedProps = a.memoizedProps;\n  c.memoizedState = a.memoizedState;\n  c.updateQueue = a.updateQueue;\n  b = a.dependencies;\n  c.dependencies = null === b ? null : {\n    expirationTime: b.expirationTime,\n    firstContext: b.firstContext,\n    responders: b.responders\n  };\n  c.sibling = a.sibling;\n  c.index = a.index;\n  c.ref = a.ref;\n  return c;\n}\nfunction Ug(a, b, c, d, e, f) {\n  var g = 2;\n  d = a;\n  if (\"function\" === typeof a) bi(a) && (g = 1);else if (\"string\" === typeof a) g = 5;else a: switch (a) {\n    case ab:\n      return Wg(c.children, e, f, b);\n    case fb:\n      g = 8;\n      e |= 7;\n      break;\n    case bb:\n      g = 8;\n      e |= 1;\n      break;\n    case cb:\n      return a = Sh(12, c, b, e | 8), a.elementType = cb, a.type = cb, a.expirationTime = f, a;\n    case hb:\n      return a = Sh(13, c, b, e), a.type = hb, a.elementType = hb, a.expirationTime = f, a;\n    case ib:\n      return a = Sh(19, c, b, e), a.elementType = ib, a.expirationTime = f, a;\n    default:\n      if (\"object\" === typeof a && null !== a) switch (a.$$typeof) {\n        case db:\n          g = 10;\n          break a;\n        case eb:\n          g = 9;\n          break a;\n        case gb:\n          g = 11;\n          break a;\n        case jb:\n          g = 14;\n          break a;\n        case kb:\n          g = 16;\n          d = null;\n          break a;\n        case lb:\n          g = 22;\n          break a;\n      }\n      throw Error(u(130, null == a ? a : typeof a, \"\"));\n  }\n  b = Sh(g, c, b, e);\n  b.elementType = a;\n  b.type = d;\n  b.expirationTime = f;\n  return b;\n}\nfunction Wg(a, b, c, d) {\n  a = Sh(7, a, d, b);\n  a.expirationTime = c;\n  return a;\n}\nfunction Tg(a, b, c) {\n  a = Sh(6, a, null, b);\n  a.expirationTime = c;\n  return a;\n}\nfunction Vg(a, b, c) {\n  b = Sh(4, null !== a.children ? a.children : [], a.key, b);\n  b.expirationTime = c;\n  b.stateNode = {\n    containerInfo: a.containerInfo,\n    pendingChildren: null,\n    implementation: a.implementation\n  };\n  return b;\n}\nfunction ak(a, b, c) {\n  this.tag = b;\n  this.current = null;\n  this.containerInfo = a;\n  this.pingCache = this.pendingChildren = null;\n  this.finishedExpirationTime = 0;\n  this.finishedWork = null;\n  this.timeoutHandle = -1;\n  this.pendingContext = this.context = null;\n  this.hydrate = c;\n  this.callbackNode = null;\n  this.callbackPriority = 90;\n  this.lastExpiredTime = this.lastPingedTime = this.nextKnownPendingLevel = this.lastSuspendedTime = this.firstSuspendedTime = this.firstPendingTime = 0;\n}\nfunction Aj(a, b) {\n  var c = a.firstSuspendedTime;\n  a = a.lastSuspendedTime;\n  return 0 !== c && c >= b && a <= b;\n}\nfunction xi(a, b) {\n  var c = a.firstSuspendedTime,\n    d = a.lastSuspendedTime;\n  c < b && (a.firstSuspendedTime = b);\n  if (d > b || 0 === c) a.lastSuspendedTime = b;\n  b <= a.lastPingedTime && (a.lastPingedTime = 0);\n  b <= a.lastExpiredTime && (a.lastExpiredTime = 0);\n}\nfunction yi(a, b) {\n  b > a.firstPendingTime && (a.firstPendingTime = b);\n  var c = a.firstSuspendedTime;\n  0 !== c && (b >= c ? a.firstSuspendedTime = a.lastSuspendedTime = a.nextKnownPendingLevel = 0 : b >= a.lastSuspendedTime && (a.lastSuspendedTime = b + 1), b > a.nextKnownPendingLevel && (a.nextKnownPendingLevel = b));\n}\nfunction Cj(a, b) {\n  var c = a.lastExpiredTime;\n  if (0 === c || c > b) a.lastExpiredTime = b;\n}\nfunction bk(a, b, c, d) {\n  var e = b.current,\n    f = Gg(),\n    g = Dg.suspense;\n  f = Hg(f, e, g);\n  a: if (c) {\n    c = c._reactInternalFiber;\n    b: {\n      if (dc(c) !== c || 1 !== c.tag) throw Error(u(170));\n      var h = c;\n      do {\n        switch (h.tag) {\n          case 3:\n            h = h.stateNode.context;\n            break b;\n          case 1:\n            if (L(h.type)) {\n              h = h.stateNode.__reactInternalMemoizedMergedChildContext;\n              break b;\n            }\n        }\n        h = h.return;\n      } while (null !== h);\n      throw Error(u(171));\n    }\n    if (1 === c.tag) {\n      var k = c.type;\n      if (L(k)) {\n        c = Ff(c, k, h);\n        break a;\n      }\n    }\n    c = h;\n  } else c = Af;\n  null === b.context ? b.context = c : b.pendingContext = c;\n  b = wg(f, g);\n  b.payload = {\n    element: a\n  };\n  d = void 0 === d ? null : d;\n  null !== d && (b.callback = d);\n  xg(e, b);\n  Ig(e, f);\n  return f;\n}\nfunction ck(a) {\n  a = a.current;\n  if (!a.child) return null;\n  switch (a.child.tag) {\n    case 5:\n      return a.child.stateNode;\n    default:\n      return a.child.stateNode;\n  }\n}\nfunction dk(a, b) {\n  a = a.memoizedState;\n  null !== a && null !== a.dehydrated && a.retryTime < b && (a.retryTime = b);\n}\nfunction ek(a, b) {\n  dk(a, b);\n  (a = a.alternate) && dk(a, b);\n}\nfunction fk(a, b, c) {\n  c = null != c && !0 === c.hydrate;\n  var d = new ak(a, b, c),\n    e = Sh(3, null, null, 2 === b ? 7 : 1 === b ? 3 : 0);\n  d.current = e;\n  e.stateNode = d;\n  ug(e);\n  a[Od] = d.current;\n  c && 0 !== b && Jc(a, 9 === a.nodeType ? a : a.ownerDocument);\n  this._internalRoot = d;\n}\nfk.prototype.render = function (a) {\n  bk(a, this._internalRoot, null, null);\n};\nfk.prototype.unmount = function () {\n  var a = this._internalRoot,\n    b = a.containerInfo;\n  bk(null, a, null, function () {\n    b[Od] = null;\n  });\n};\nfunction gk(a) {\n  return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || \" react-mount-point-unstable \" !== a.nodeValue));\n}\nfunction hk(a, b) {\n  b || (b = a ? 9 === a.nodeType ? a.documentElement : a.firstChild : null, b = !(!b || 1 !== b.nodeType || !b.hasAttribute(\"data-reactroot\")));\n  if (!b) for (var c; c = a.lastChild;) a.removeChild(c);\n  return new fk(a, 0, b ? {\n    hydrate: !0\n  } : void 0);\n}\nfunction ik(a, b, c, d, e) {\n  var f = c._reactRootContainer;\n  if (f) {\n    var g = f._internalRoot;\n    if (\"function\" === typeof e) {\n      var h = e;\n      e = function () {\n        var a = ck(g);\n        h.call(a);\n      };\n    }\n    bk(b, g, a, e);\n  } else {\n    f = c._reactRootContainer = hk(c, d);\n    g = f._internalRoot;\n    if (\"function\" === typeof e) {\n      var k = e;\n      e = function () {\n        var a = ck(g);\n        k.call(a);\n      };\n    }\n    Nj(function () {\n      bk(b, g, a, e);\n    });\n  }\n  return ck(g);\n}\nfunction jk(a, b, c) {\n  var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;\n  return {\n    $$typeof: $a,\n    key: null == d ? null : \"\" + d,\n    children: a,\n    containerInfo: b,\n    implementation: c\n  };\n}\nwc = function (a) {\n  if (13 === a.tag) {\n    var b = hg(Gg(), 150, 100);\n    Ig(a, b);\n    ek(a, b);\n  }\n};\nxc = function (a) {\n  13 === a.tag && (Ig(a, 3), ek(a, 3));\n};\nyc = function (a) {\n  if (13 === a.tag) {\n    var b = Gg();\n    b = Hg(b, a, null);\n    Ig(a, b);\n    ek(a, b);\n  }\n};\nza = function (a, b, c) {\n  switch (b) {\n    case \"input\":\n      Cb(a, c);\n      b = c.name;\n      if (\"radio\" === c.type && null != b) {\n        for (c = a; c.parentNode;) c = c.parentNode;\n        c = c.querySelectorAll(\"input[name=\" + JSON.stringify(\"\" + b) + '][type=\"radio\"]');\n        for (b = 0; b < c.length; b++) {\n          var d = c[b];\n          if (d !== a && d.form === a.form) {\n            var e = Qd(d);\n            if (!e) throw Error(u(90));\n            yb(d);\n            Cb(d, e);\n          }\n        }\n      }\n      break;\n    case \"textarea\":\n      Kb(a, c);\n      break;\n    case \"select\":\n      b = c.value, null != b && Hb(a, !!c.multiple, b, !1);\n  }\n};\nFa = Mj;\nGa = function (a, b, c, d, e) {\n  var f = W;\n  W |= 4;\n  try {\n    return cg(98, a.bind(null, b, c, d, e));\n  } finally {\n    W = f, W === V && gg();\n  }\n};\nHa = function () {\n  (W & (1 | fj | gj)) === V && (Lj(), Dj());\n};\nIa = function (a, b) {\n  var c = W;\n  W |= 2;\n  try {\n    return a(b);\n  } finally {\n    W = c, W === V && gg();\n  }\n};\nfunction kk(a, b) {\n  var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;\n  if (!gk(b)) throw Error(u(200));\n  return jk(a, b, null, c);\n}\nvar lk = {\n  Events: [Nc, Pd, Qd, xa, ta, Xd, function (a) {\n    jc(a, Wd);\n  }, Da, Ea, id, mc, Dj, {\n    current: !1\n  }]\n};\n(function (a) {\n  var b = a.findFiberByHostInstance;\n  return Yj(n({}, a, {\n    overrideHookState: null,\n    overrideProps: null,\n    setSuspenseHandler: null,\n    scheduleUpdate: null,\n    currentDispatcherRef: Wa.ReactCurrentDispatcher,\n    findHostInstanceByFiber: function (a) {\n      a = hc(a);\n      return null === a ? null : a.stateNode;\n    },\n    findFiberByHostInstance: function (a) {\n      return b ? b(a) : null;\n    },\n    findHostInstancesForRefresh: null,\n    scheduleRefresh: null,\n    scheduleRoot: null,\n    setRefreshHandler: null,\n    getCurrentFiber: null\n  }));\n})({\n  findFiberByHostInstance: tc,\n  bundleType: 0,\n  version: \"16.13.1\",\n  rendererPackageName: \"react-dom\"\n});\nexports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = lk;\nexports.createPortal = kk;\nexports.findDOMNode = function (a) {\n  if (null == a) return null;\n  if (1 === a.nodeType) return a;\n  var b = a._reactInternalFiber;\n  if (void 0 === b) {\n    if (\"function\" === typeof a.render) throw Error(u(188));\n    throw Error(u(268, Object.keys(a)));\n  }\n  a = hc(b);\n  a = null === a ? null : a.stateNode;\n  return a;\n};\nexports.flushSync = function (a, b) {\n  if ((W & (fj | gj)) !== V) throw Error(u(187));\n  var c = W;\n  W |= 1;\n  try {\n    return cg(99, a.bind(null, b));\n  } finally {\n    W = c, gg();\n  }\n};\nexports.hydrate = function (a, b, c) {\n  if (!gk(b)) throw Error(u(200));\n  return ik(null, a, b, !0, c);\n};\nexports.render = function (a, b, c) {\n  if (!gk(b)) throw Error(u(200));\n  return ik(null, a, b, !1, c);\n};\nexports.unmountComponentAtNode = function (a) {\n  if (!gk(a)) throw Error(u(40));\n  return a._reactRootContainer ? (Nj(function () {\n    ik(null, null, a, !1, function () {\n      a._reactRootContainer = null;\n      a[Od] = null;\n    });\n  }), !0) : !1;\n};\nexports.unstable_batchedUpdates = Mj;\nexports.unstable_createPortal = function (a, b) {\n  return kk(a, b, 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null);\n};\nexports.unstable_renderSubtreeIntoContainer = function (a, b, c, d) {\n  if (!gk(c)) throw Error(u(200));\n  if (null == a || void 0 === a._reactInternalFiber) throw Error(u(38));\n  return ik(a, b, c, !1, d);\n};\nexports.version = \"16.13.1\";","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/scheduler.production.min.js');\n} else {\n  module.exports = require('./cjs/scheduler.development.js');\n}","/** @license React v0.19.1\n * scheduler.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar f, g, h, k, l;\nif (\"undefined\" === typeof window || \"function\" !== typeof MessageChannel) {\n  var p = null,\n    q = null,\n    t = function () {\n      if (null !== p) try {\n        var a = exports.unstable_now();\n        p(!0, a);\n        p = null;\n      } catch (b) {\n        throw setTimeout(t, 0), b;\n      }\n    },\n    u = Date.now();\n  exports.unstable_now = function () {\n    return Date.now() - u;\n  };\n  f = function (a) {\n    null !== p ? setTimeout(f, 0, a) : (p = a, setTimeout(t, 0));\n  };\n  g = function (a, b) {\n    q = setTimeout(a, b);\n  };\n  h = function () {\n    clearTimeout(q);\n  };\n  k = function () {\n    return !1;\n  };\n  l = exports.unstable_forceFrameRate = function () {};\n} else {\n  var w = window.performance,\n    x = window.Date,\n    y = window.setTimeout,\n    z = window.clearTimeout;\n  if (\"undefined\" !== typeof console) {\n    var A = window.cancelAnimationFrame;\n    \"function\" !== typeof window.requestAnimationFrame && console.error(\"This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills\");\n    \"function\" !== typeof A && console.error(\"This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills\");\n  }\n  if (\"object\" === typeof w && \"function\" === typeof w.now) exports.unstable_now = function () {\n    return w.now();\n  };else {\n    var B = x.now();\n    exports.unstable_now = function () {\n      return x.now() - B;\n    };\n  }\n  var C = !1,\n    D = null,\n    E = -1,\n    F = 5,\n    G = 0;\n  k = function () {\n    return exports.unstable_now() >= G;\n  };\n  l = function () {};\n  exports.unstable_forceFrameRate = function (a) {\n    0 > a || 125 < a ? console.error(\"forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported\") : F = 0 < a ? Math.floor(1E3 / a) : 5;\n  };\n  var H = new MessageChannel(),\n    I = H.port2;\n  H.port1.onmessage = function () {\n    if (null !== D) {\n      var a = exports.unstable_now();\n      G = a + F;\n      try {\n        D(!0, a) ? I.postMessage(null) : (C = !1, D = null);\n      } catch (b) {\n        throw I.postMessage(null), b;\n      }\n    } else C = !1;\n  };\n  f = function (a) {\n    D = a;\n    C || (C = !0, I.postMessage(null));\n  };\n  g = function (a, b) {\n    E = y(function () {\n      a(exports.unstable_now());\n    }, b);\n  };\n  h = function () {\n    z(E);\n    E = -1;\n  };\n}\nfunction J(a, b) {\n  var c = a.length;\n  a.push(b);\n  a: for (;;) {\n    var d = c - 1 >>> 1,\n      e = a[d];\n    if (void 0 !== e && 0 < K(e, b)) a[d] = b, a[c] = e, c = d;else break a;\n  }\n}\nfunction L(a) {\n  a = a[0];\n  return void 0 === a ? null : a;\n}\nfunction M(a) {\n  var b = a[0];\n  if (void 0 !== b) {\n    var c = a.pop();\n    if (c !== b) {\n      a[0] = c;\n      a: for (var d = 0, e = a.length; d < e;) {\n        var m = 2 * (d + 1) - 1,\n          n = a[m],\n          v = m + 1,\n          r = a[v];\n        if (void 0 !== n && 0 > K(n, c)) void 0 !== r && 0 > K(r, n) ? (a[d] = r, a[v] = c, d = v) : (a[d] = n, a[m] = c, d = m);else if (void 0 !== r && 0 > K(r, c)) a[d] = r, a[v] = c, d = v;else break a;\n      }\n    }\n    return b;\n  }\n  return null;\n}\nfunction K(a, b) {\n  var c = a.sortIndex - b.sortIndex;\n  return 0 !== c ? c : a.id - b.id;\n}\nvar N = [],\n  O = [],\n  P = 1,\n  Q = null,\n  R = 3,\n  S = !1,\n  T = !1,\n  U = !1;\nfunction V(a) {\n  for (var b = L(O); null !== b;) {\n    if (null === b.callback) M(O);else if (b.startTime <= a) M(O), b.sortIndex = b.expirationTime, J(N, b);else break;\n    b = L(O);\n  }\n}\nfunction W(a) {\n  U = !1;\n  V(a);\n  if (!T) if (null !== L(N)) T = !0, f(X);else {\n    var b = L(O);\n    null !== b && g(W, b.startTime - a);\n  }\n}\nfunction X(a, b) {\n  T = !1;\n  U && (U = !1, h());\n  S = !0;\n  var c = R;\n  try {\n    V(b);\n    for (Q = L(N); null !== Q && (!(Q.expirationTime > b) || a && !k());) {\n      var d = Q.callback;\n      if (null !== d) {\n        Q.callback = null;\n        R = Q.priorityLevel;\n        var e = d(Q.expirationTime <= b);\n        b = exports.unstable_now();\n        \"function\" === typeof e ? Q.callback = e : Q === L(N) && M(N);\n        V(b);\n      } else M(N);\n      Q = L(N);\n    }\n    if (null !== Q) var m = !0;else {\n      var n = L(O);\n      null !== n && g(W, n.startTime - b);\n      m = !1;\n    }\n    return m;\n  } finally {\n    Q = null, R = c, S = !1;\n  }\n}\nfunction Y(a) {\n  switch (a) {\n    case 1:\n      return -1;\n    case 2:\n      return 250;\n    case 5:\n      return 1073741823;\n    case 4:\n      return 1E4;\n    default:\n      return 5E3;\n  }\n}\nvar Z = l;\nexports.unstable_IdlePriority = 5;\nexports.unstable_ImmediatePriority = 1;\nexports.unstable_LowPriority = 4;\nexports.unstable_NormalPriority = 3;\nexports.unstable_Profiling = null;\nexports.unstable_UserBlockingPriority = 2;\nexports.unstable_cancelCallback = function (a) {\n  a.callback = null;\n};\nexports.unstable_continueExecution = function () {\n  T || S || (T = !0, f(X));\n};\nexports.unstable_getCurrentPriorityLevel = function () {\n  return R;\n};\nexports.unstable_getFirstCallbackNode = function () {\n  return L(N);\n};\nexports.unstable_next = function (a) {\n  switch (R) {\n    case 1:\n    case 2:\n    case 3:\n      var b = 3;\n      break;\n    default:\n      b = R;\n  }\n  var c = R;\n  R = b;\n  try {\n    return a();\n  } finally {\n    R = c;\n  }\n};\nexports.unstable_pauseExecution = function () {};\nexports.unstable_requestPaint = Z;\nexports.unstable_runWithPriority = function (a, b) {\n  switch (a) {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n      break;\n    default:\n      a = 3;\n  }\n  var c = R;\n  R = a;\n  try {\n    return b();\n  } finally {\n    R = c;\n  }\n};\nexports.unstable_scheduleCallback = function (a, b, c) {\n  var d = exports.unstable_now();\n  if (\"object\" === typeof c && null !== c) {\n    var e = c.delay;\n    e = \"number\" === typeof e && 0 < e ? d + e : d;\n    c = \"number\" === typeof c.timeout ? c.timeout : Y(a);\n  } else c = Y(a), e = d;\n  c = e + c;\n  a = {\n    id: P++,\n    callback: b,\n    priorityLevel: a,\n    startTime: e,\n    expirationTime: c,\n    sortIndex: -1\n  };\n  e > d ? (a.sortIndex = e, J(O, a), null === L(N) && a === L(O) && (U ? h() : U = !0, g(W, e - d))) : (a.sortIndex = c, J(N, a), T || S || (T = !0, f(X)));\n  return a;\n};\nexports.unstable_shouldYield = function () {\n  var a = exports.unstable_now();\n  V(a);\n  var b = L(N);\n  return b !== Q && null !== Q && null !== b && null !== b.callback && b.startTime <= a && b.expirationTime < Q.expirationTime || k();\n};\nexports.unstable_wrapCallback = function (a) {\n  var b = R;\n  return function () {\n    var c = R;\n    R = b;\n    try {\n      return a.apply(this, arguments);\n    } finally {\n      R = c;\n    }\n  };\n};"],"sourceRoot":""}